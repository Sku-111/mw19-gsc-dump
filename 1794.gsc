// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

initparachutedvars()
{
    setdvarifuninitialized( "scr_parachute_redeploy_min_height", 256 );
    setdvarifuninitialized( "scr_parachute_redeploy_input_type", 0 );
    setdvarifuninitialized( "scr_parachute_auto_kick_map_center", ( 0, 0, 0 ) );
    setdvarifuninitialized( "scr_parachute_camera_transition_mode", 2 );
    setdvarifuninitialized( "scr_parachute_FFSM_enabled", 1 );
    setdvarifuninitialized( "scr_parachute_hint_enabled", 1 );
    setdvarifuninitialized( "scr_parachute_hint_zdrop", 0.5 );
    setdvarifuninitialized( "scr_parachute_hint_zoffset", 0.0 );
    setdvarifuninitialized( "scr_parachute_hint_zvelscale", 0.0 );
    setdvarifuninitialized( "scr_parachute_hint_zlimit", 5000.0 );
    setdvarifuninitialized( "scr_parachute_hint_xyvelscale_high", 10.0 );
    setdvarifuninitialized( "scr_parachute_hint_xyvelscale_low", 2.0 );
    setdvarifuninitialized( "scr_parachute_hint_xyvelscale_maxheight", 10000.0 );
    setdvarifuninitialized( "scr_parachute_hint_xylimit", 7500.0 );
    setdvarifuninitialized( "scr_parachute_hint_falling_xyratio", -2.0 );
    level._id_121C8 = getdvarint( "scr_parachute_autodeploy_cut", 1 );
    level._id_121C9 = getdvarint( "scr_parachute_cut", 1 );
    level.parachuteinitfinished = 1;
    level.audio_player_stop_mud_loop = [];

    if ( !isdefined( level.dontshootwhileparachuting ) )
        level.dontshootwhileparachuting = 1;

    if ( !isdefined( level.freefallstartcb ) )
        level.freefallstartcb = ::freefallstartdefault;

    if ( !isdefined( level.parachuteopencb ) )
        level.parachuteopencb = ::parachuteopendefault;

    if ( !isdefined( level.parachutecompletecb ) )
        level.parachutecompletecb = ::parachutecompletedefault;

    if ( !isdefined( level.parachutetakeweaponscb ) )
        level.parachutetakeweaponscb = ::leaveweaponsdefaultfunc;

    if ( !isdefined( level.parachuterestoreweaponscb ) )
        level.parachuterestoreweaponscb = ::norestoreweaponsdefaultfunc;

    if ( !isdefined( level._id_121D1 ) )
        level._id_121D1 = ::_id_121D2;

    level._id_133F9 = spawnstruct();
    level._id_133F9._id_13918 = getdvarint( "scr_parachute_hint_enabled", 1 );
    level._id_133F9._id_1467B = getdvarfloat( "scr_parachute_hint_xyvelscale_high", 0.0 );
    level._id_133F9._id_1467C = getdvarfloat( "scr_parachute_hint_xyvelscale_low", 0.0 );
    level._id_133F9._id_1467D = getdvarfloat( "scr_parachute_hint_xyvelscale_maxheight", 0.0 );
    level._id_133F9._id_1467A = getdvarfloat( "scr_parachute_hint_xylimit", 0.0 );
    level._id_133F9._id_1468F = getdvarfloat( "scr_parachute_hint_zdrop", 0.0 );
    level._id_133F9.zoffset = getdvarfloat( "scr_parachute_hint_zoffset", 0.0 );
    level._id_133F9._id_1472C = getdvarfloat( "scr_parachute_hint_zvelscale", 0.0 );
    level._id_133F9._id_14690 = getdvarfloat( "scr_parachute_hint_zlimit", 0.0 );
    level._id_133F9.pe_chopper_zones = getdvarfloat( "scr_parachute_hint_falling_xyratio", 0.0 );
}

startfreefall( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( getdvarint( "scr_parachute_FFSM_enabled", 0 ) )
    {
        thread playerpowerresetpowers( var_0, var_1, var_2, var_3, var_4, var_5, var_6 );
        return;
    }

    self endon( "death_or_disconnect" );
    thread parachutemidairdeathwatcher();
    self skydive_interrupt();

    if ( !isdefined( var_5 ) )
        var_5 = 1;

    if ( !istrue( level.parachuteinitfinished ) )
        initparachutedvars();

    if ( !isdefined( level.dontshootwhileparachuting ) )
        level.dontshootwhileparachuting = 1;

    if ( !isdefined( level.freefallstartcb ) )
        level.freefallstartcb = ::freefallstartdefault;

    if ( !isdefined( level.parachuteopencb ) )
        level.parachuteopencb = ::parachuteopendefault;

    if ( !isdefined( level.parachutecompletecb ) )
        level.parachutecompletecb = ::parachutecompletedefault;

    if ( !isdefined( level.parachutetakeweaponscb ) )
        level.parachutetakeweaponscb = ::leaveweaponsdefaultfunc;

    if ( !isdefined( level.parachuterestoreweaponscb ) )
        level.parachuterestoreweaponscb = ::norestoreweaponsdefaultfunc;

    if ( !isdefined( var_0 ) )
        var_0 = 4.0;

    if ( var_5 )
        self [[ level.parachutetakeweaponscb ]]();

    self [[ level.freefallstartcb ]]();

    if ( isparachutegametype() )
        self setclientomnvar( "ui_br_altimeter_state", 1 );

    if ( !isdefined( var_2 ) )
        self notifyonplayercommand( "open_parachute", "+gostand" );

    self animscriptsetinputparamreplicationstatus( 1 );

    if ( isdefined( var_3 ) )
        self setvelocity( var_3 );

    if ( !istrue( level.client_activate ) )
        self skydive_beginfreefall();

    if ( getdvarint( "scr_parachute_camera_transition_mode", 1 ) != 2 )
        self skydive_setforcethirdpersonstatus( 1 );

    if ( level.gametype == "br" && ( !istrue( var_4 ) || ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "rat_race" || getdvar( "scr_br_gametype", "" ) == "risk" || getdvar( "scr_br_gametype", "" ) == "gold_war" ) ) && getdvarint( "scr_infil_parachute_vfx", 1 ) )
        thread stop_restock_recharge( getdvarint( "scr_bmo_parachuteTouchdownVFX", 1 ) == 1 && ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "rat_race" || getdvar( "scr_br_gametype", "" ) == "risk" || getdvar( "scr_br_gametype", "" ) == "gold_war" ) );

    if ( !istrue( var_1 ) )
        wait( var_0 );

    thread pullchute( var_2, var_1 );
}

stop_restock_recharge( var_0 )
{
    var_1 = self;
    level endon( "game_ended" );
    var_1 endon( "disconnect" );
    var_1 = self;
    wait 1.0;
    var_2 = "enabled";

    if ( isdefined( self.operatorcustomization ) && isdefined( self.operatorcustomization.disabledebugdialogue ) )
        var_2 = var_2 + self.operatorcustomization.disabledebugdialogue;

    var_1 setscriptablepartstate( "skydiveVfx", var_2, 0 );
    var_1 setisinfilskydive( 1 );
    wait 2.0;

    while ( isalive( var_1 ) && !var_1 shoulddisableskydivevfx() )
        wait 0.25;

    if ( var_0 )
    {
        while ( isalive( var_1 ) && !var_1 isonground() )
            wait 0.25;
    }

    var_1 setscriptablepartstate( "skydiveVfx", "default", 0 );
    var_1 setisinfilskydive( 0 );
}

riotshield_attach_parachute( var_0, var_1 )
{
    var_2 = undefined;

    if ( var_0 )
    {
        self.riotshieldmodel = var_1;
        var_2 = "tag_weapon_right";
    }
    else
    {
        self.riotshieldmodelstowed = var_1;
        var_2 = "tag_shield_back";
    }

    self attachshieldmodel( var_1, var_2 );
    self.hasriotshield = riotshield_hasweapon_parachute();
}

riotshield_getmodel_parachute()
{
    return "weapon_wm_riotshield";
}

riotshield_hasweapon_parachute()
{
    var_0 = 0;
    var_1 = self getweaponslistprimaries();

    foreach ( var_3 in var_1 )
    {
        if ( isriotshield_parachute( var_3 ) )
        {
            var_0 = 1;
            break;
        }
    }

    return var_0;
}

isriotshield_parachute( var_0 )
{
    if ( issameweapon( var_0 ) && nullweapon( var_0 ) )
        return 0;

    if ( isstring( var_0 ) && var_0 == "none" )
        return 0;

    return weapontype( var_0 ) == "riotshield";
}

isparachutegametype()
{
    return isdefined( level.gametype ) && ( level.gametype == "br" || level.gametype == "arm" || level.gametype == "war" || level.gametype == "cp_survival" || level.gametype == "trial" || level.gametype == "brtdm" );
}

getc130height()
{
    if ( isdefined( level.br_level ) && isdefined( level.br_level.c130_heightoverride ) )
        return level.br_level.c130_heightoverride;

    return 24000;
}

release_player_on_damage()
{
    if ( isdefined( level.fnhidefoundintel ) )
        return level.fnhidefoundintel;

    return 24000;
}

getc130sealevel()
{
    if ( isdefined( level.br_level ) && isdefined( level.br_level.c130_sealeveloverride ) )
        return level.br_level.c130_sealeveloverride;

    return 650;
}

steerfalling( var_0 )
{
    var_1 = spawn( "script_model", self.origin );
    var_1.angles = self.angles;
    var_1 setmodel( "viewhands_base_iw8" );
    var_1 hide();
    self playerlinktodelta( var_1, "tag_player" );
    steerfallinginternal( var_1, var_0 );
    var_1 delete();
}

steerfallinginternal( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "freefall_complete" );
    self endon( "parachute_complete" );
    self notify( "steerFalling()" );
    self endon( "steerFalling()" );
    var_2 = 13.8;
    var_3 = 0.0001;
    var_4 = -1350.0;
    var_5 = 1400.0;
    var_6 = 1600.0;
    var_7 = -100.0;

    if ( level.gametype == "arm" )
    {
        var_4 = -1750.0;
        var_5 = 400.0;
        var_6 = 400.0;
    }

    if ( isdefined( var_1 ) )
    {
        var_5 = var_5 * var_1;
        var_6 = var_6 * var_1;
    }

    var_8 = level.framedurationseconds * var_3;
    var_0.vel = ( 0, 0, var_7 );
    waitframe();
    var_9 = getdvarint( "NPOQPMP" );
    var_10 = ( 0, 0, 0 );

    for (;;)
    {
        var_11 = self getnormalizedmovement();
        var_12 = var_11[0];
        var_13 = var_11[1];
        var_14 = self getplayerangles( 1 );
        var_15 = anglestoforward( var_14 ) * var_12;
        var_16 = anglestoright( var_14 ) * var_13;
        var_17 = var_16 + var_15;
        var_18 = vectornormalize( var_17 ) * var_6;
        var_10 = var_10 + vectornormalize( var_18 - var_10 ) * level.framedurationseconds * var_5;
        var_10 = var_10 - var_10 * length( var_10 ) * var_8;
        var_19 = var_0.vel[2] - var_2 * 39.37 * level.framedurationseconds;
        var_19 = max( var_4, var_19 );
        var_20 = ( 0, 0, var_19 );
        var_0.vel = var_20 + var_10;
        var_0.origin = var_0.origin + level.framedurationseconds * var_0.vel;
        var_21 = sqrt( var_0.vel[0] * var_0.vel[0] + var_0.vel[1] * var_0.vel[1] );
        var_22 = veltomph( var_0.vel[2] * -1 );
        var_23 = veltomph( var_21 );
        var_24 = min( 1, ( self.origin[2] - getc130sealevel() ) / ( getc130height() - getc130sealevel() ) );

        if ( isparachutegametype() )
            self setclientomnvar( "ui_br_altimeter_height", var_24 );

        waitframe();
    }
}

veltomph( var_0 )
{
    var_1 = var_0 * 0.05682;
    return var_1;
}

steerparachuting( var_0 )
{
    var_1 = spawn( "script_model", self.origin );
    var_1.angles = self.angles;
    var_1 setmodel( "viewhands_base_iw8" );
    var_1 hide();
    self playerlinktodelta( var_1, "tag_player" );
    steerparachutinginternal( var_1, var_0 );
    var_1 delete();
}

steerparachutinginternal( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "freefall_complete" );
    self endon( "parachute_landed" );
    self notify( "steerFalling()" );
    self endon( "steerFalling()" );
    var_2 = 100.0;
    var_3 = -200.0;
    var_4 = 600.0;
    var_5 = 240.0;
    var_6 = 120.0;
    var_7 = 60.0;
    var_8 = 48;
    var_9 = 35.0;
    var_10 = 700.0;
    var_11 = 100.0;
    var_12 = 600.0;
    var_13 = 300.0;
    var_14 = 100.0;
    var_15 = -150.0;

    if ( level.gametype == "arm" )
        var_15 = -200.0;

    if ( isdefined( var_1 ) )
    {
        var_2 = var_2 * var_1;
        var_3 = var_3 * var_1;
        var_4 = var_4 * var_1;
        var_5 = var_5 * var_1;
        var_6 = var_6 * var_1;
        var_7 = var_7 * var_1;
        var_10 = var_10 * var_1;
        var_12 = var_12 * var_1;
        var_13 = var_13 * var_1;
        var_14 = var_14 * var_1;
    }

    var_16 = 100.0;
    var_17 = 0;
    var_18 = 0;
    var_0.vel = ( 0, 0, 0 );

    for (;;)
    {
        var_19 = self getnormalizedmovement();
        var_20 = var_19[0];
        var_21 = var_19[1];
        var_22 = self getplayerangles( 1 );
        var_23 = anglestoforward( var_22 );
        var_24 = anglestoright( var_22 );
        var_25 = scripts\engine\utility::ter_op( var_20 > 0, var_5, var_6 );
        var_16 = var_16 + var_20 * var_25 * level.framedurationseconds;
        var_16 = var_16 + var_7 * level.framedurationseconds * scripts\engine\utility::sign( var_2 - var_16 );
        var_16 = clamp( var_16, var_3, var_4 );
        var_26 = -1 * var_20 * var_9;
        var_17 = var_17 + scripts\engine\utility::sign( var_26 - var_17 ) * var_8 * level.framedurationseconds;
        var_27 = rotatepointaroundvector( var_24, var_23, var_17 );
        var_28 = var_16 * var_27;
        var_29 = var_23 * var_14 + ( 0, 0, var_15 );
        var_18 = var_18 + var_12 * level.framedurationseconds * var_21;
        var_18 = var_18 - var_13 * level.framedurationseconds * scripts\engine\utility::sign( var_18 );
        var_18 = clamp( var_18, -1 * var_10, var_10 );
        var_30 = var_18 * var_24;
        var_31 = var_11 * abs( var_21 );
        var_30 = var_30 + ( 0, 0, -1 * var_31 );
        var_0.vel = var_28 + var_30 + var_29;
        var_0.origin = var_0.origin + var_0.vel * level.framedurationseconds;
        var_32 = sqrt( var_0.vel[0] * var_0.vel[0] + var_0.vel[1] * var_0.vel[1] );
        var_33 = max( 0, veltomph( var_0.vel[2] * -1 ) );
        var_34 = max( 0, veltomph( var_32 ) );
        var_35 = min( 1, ( self.origin[2] - getc130sealevel() ) / ( getc130height() - getc130sealevel() ) );

        if ( isparachutegametype() )
            self setclientomnvar( "ui_br_altimeter_height", var_35 );

        waitframe();
    }
}

usefailextractingmsg()
{
    return isdefined( self.play_disguise_vo ) && ( self.play_disguise_vo == 5 || self.play_disguise_vo == 6 );
}

enablemanualpullchute( var_0 )
{
    self endon( "death_or_disconnect" );

    if ( isdefined( var_0 ) && var_0 > 0 )
    {
        self skydive_setdeploymentstatus( 0 );
        self skydive_setbasejumpingstatus( 0 );
        wait( var_0 );
    }

    if ( isdefined( self ) )
    {
        if ( usefailextractingmsg() || istrue( level.client_activate ) )
            return;

        self skydive_setdeploymentstatus( 1 );
        self skydive_setbasejumpingstatus( 1 );
    }
}

pullchute( var_0, var_1, var_2 )
{
    self endon( "death_or_disconnect" );
    thread enablemanualpullchute( 3 );
    self waittill( "skydive_deployparachute" );
    self skydive_setdeploymentstatus( 0 );
    self notify( "freefall_complete" );

    if ( isparachutegametype() )
        self setclientomnvar( "ui_br_altimeter_state", 2 );

    if ( !istrue( level.dontshootwhileparachuting ) )
        self [[ level.parachuteopencb ]]();

    thread startparachute();
}

parachutedamagemonitor( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "parachute_complete" );
    var_0 endon( "death" );
    var_0 setcandamage( 1 );
    var_1 = undefined;
    var_2 = undefined;
    var_3 = undefined;
    var_4 = undefined;
    var_5 = undefined;
    var_6 = undefined;
    var_7 = undefined;
    var_8 = undefined;
    var_9 = undefined;
    var_10 = undefined;
    var_11 = undefined;
    var_12 = undefined;
    var_13 = undefined;
    var_0.shotstaken = 0;

    for (;;)
    {
        var_0 waittill( "damage", var_1, var_2, var_3, var_14, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 );

        if ( isdefined( var_4 ) )
        {
            if ( scripts\engine\utility::isbulletdamage( var_4 ) )
                var_0.shotstaken++;
        }
    }
}

startparachute()
{
    self endon( "death_or_disconnect" );

    if ( getdvarint( "scr_parachute_camera_transition_mode", 1 ) == 1 )
        self skydive_setforcethirdpersonstatus( 0 );

    self waittill( "skydive_end" );
    self.ignorefalldamagetime = gettime() + 5000;

    if ( istrue( self.delayswaploadout ) )
        self.delayswaploadout = 0;

    waitframe();
    self [[ level.parachuterestoreweaponscb ]]();

    if ( istrue( level.dontshootwhileparachuting ) )
        self [[ level.parachutecompletecb ]]();

    self notify( "parachute_landed" );
    self skydive_setforcethirdpersonstatus( 0 );
    self notify( "parachute_complete" );
    self animscriptsetinputparamreplicationstatus( 0 );

    if ( isparachutegametype() )
        self setclientomnvar( "ui_br_altimeter_state", 0 );

    if ( isparachutegametype() )
    {
        if ( isdefined( level._id_12036 ) )
            self [[ level._id_12036 ]]( self );
    }
}

parachutemidairdeathwatcher()
{
    self endon( "parachute_complete" );
    self waittill( "death" );

    if ( isparachutegametype() )
        self setclientomnvar( "ui_br_altimeter_state", 0 );
}

freefallstartdefault()
{
    self disableusability();
    thread _id_126CB();
}

_id_126CB()
{
    self endon( "death_or_disconnect" );
    self allowfire( 0 );
    wait 0.5;
    self allowfire( 1 );
}

parachuteopendefault()
{

}

parachutecompletedefault()
{
    self enableusability();

    if ( !scripts\common\utility::is_killstreaks_allowed() && !istrue( self.isjuggernaut ) )
        scripts\common\utility::allow_killstreaks( 1 );

    if ( isdefined( level.modespecificparachutecompletecb ) )
        self [[ level.modespecificparachutecompletecb ]]();

    self.jumptype = undefined;
}

getautodeploynorm()
{
    return 0.25;
}

spawnorbitcamera()
{
    self cameraset( "camera_custom_orbit_0_noremote" );
}

removeorbitcamera()
{
    self cameradefault();
}

leaveweaponsdefaultfunc()
{

}

norestoreweaponsdefaultfunc()
{

}

takeweaponsdefaultfunc()
{
    if ( isdefined( self.primaryweaponobj ) )
    {
        self.primaryweaponclipammo = self getweaponammoclip( self.primaryweaponobj );
        self.primaryweaponstockammo = self getweaponammostock( self.primaryweaponobj );
    }

    if ( isdefined( self.secondaryweaponobj ) )
    {
        self.secondaryweaponclipammo = self getweaponammoclip( self.secondaryweaponobj );
        self.secondaryweaponstockammo = self getweaponammostock( self.secondaryweaponobj );
    }

    var_0 = getcompleteweaponname( "iw8_fists_mp" );
    var_1 = getcompleteweaponname( "none" );
    self.weaponlist = self.primaryweapons;

    for ( var_2 = 0; var_2 < self.weaponlist.size; var_2++ )
    {
        var_3 = self.weaponlist[var_2];

        if ( isdefined( var_3 ) && !isnullweapon( var_0, var_3 ) && !isnullweapon( var_1, var_3 ) )
            self takeweapon( var_3 );
    }

    self clearaccessory();

    if ( !self hasweapon( var_0 ) )
        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_0, undefined, undefined, 1 );

    scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( var_0, 1 );
}

restoreweaponsdefaultfunc()
{
    self takeweapon( self.weaponlist[0] );
    self clearaccessory();

    if ( isdefined( self.primaryweaponobj ) )
    {
        scripts\cp_mp\utility\inventory_utility::_giveweapon( self.primaryweaponobj, undefined, undefined, 0 );

        if ( isdefined( self.primaryweaponclipammo ) )
        {
            self setweaponammoclip( self.primaryweaponobj, self.primaryweaponclipammo );
            self setweaponammostock( self.primaryweaponobj, self.primaryweaponstockammo );
        }
    }

    if ( isdefined( self.secondaryweaponobj ) )
    {
        scripts\cp_mp\utility\inventory_utility::_giveweapon( self.secondaryweaponobj, undefined, undefined, 1 );

        if ( isdefined( self.primaryweaponclipammo ) )
        {
            self setweaponammoclip( self.secondaryweaponobj, self.secondaryweaponclipammo );
            self setweaponammostock( self.secondaryweaponobj, self.secondaryweaponstockammo );
        }
    }

    self.weaponlist = self getweaponslistprimaries();

    if ( isdefined( self.weaponlist[0] ) )
        scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( self.weaponlist[0] );

    if ( isdefined( self.weaponlist ) && isdefined( self.weaponlist[0] ) )
        self.primaryweaponobj = self.weaponlist[0];

    if ( isdefined( self.weaponlist ) && isdefined( self.weaponlist[1] ) )
        self.secondaryweaponobj = self.weaponlist[1];
}

playerwatchforredeploy()
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( scripts\common\utility::iscp() )
        self endon( "death" );

    var_0 = getdvarfloat( "scr_parachute_redeploy_min_height", 256 );
    var_1 = 0;
    self.redeployenabled = 1;

    for (;;)
    {
        if ( istrue( self.redeployenabled ) && !self isonground() && scripts\cp_mp\utility\player_utility::_isalive() && !self isskydiving() && !self islinked() && !istrue( self.carrying ) && !istrue( level.client_activate ) )
        {
            var_2 = 0;

            switch ( getdvarint( "scr_parachute_redeploy_input_type", 0 ) )
            {
                case 0:
                    if ( var_1 == 0 && self jumpbuttonpressed() )
                        var_2 = 1;

                    break;
                case 1:
                    if ( self jumpbuttonpressed() && var_1 + 500 < gettime() )
                        var_2 = 1;

                    break;
                case 2:
                    if ( !isdefined( self.doublejumpdetected ) )
                        thread watchfordoublejump();

                    if ( istrue( self.doublejumpdetected ) )
                        var_2 = 1;

                    break;
                default:
                    break;
            }

            if ( var_2 )
            {
                var_3 = scripts\common\utility::groundpos( self.origin );
                var_4 = self.origin[2] - var_3[2];

                if ( var_4 > var_0 )
                {
                    self notify( "skydive_deployparachute" );
                    self skydive_deployparachute();
                }
            }
        }

        if ( isdefined( self ) && scripts\cp_mp\utility\player_utility::_isalive() )
        {
            if ( !self jumpbuttonpressed() )
                var_1 = 0;
            else if ( var_1 == 0 )
                var_1 = gettime();
        }
        else
            var_1 = 0;

        waitframe();
    }
}

watchfordoublejump()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self.doublejumpdetected = 0;

    for (;;)
    {
        if ( self jumpbuttonpressed() )
        {
            var_0 = gettime();
            var_1 = 0;
            waitframe();

            for (;;)
            {
                if ( !self jumpbuttonpressed() )
                {
                    if ( gettime() < var_0 + 500 && !self isonground() )
                        var_1 = gettime();

                    break;
                }

                if ( gettime() > var_0 + 500 )
                    break;

                waitframe();
            }

            if ( var_1 == 0 )
                continue;

            waitframe();

            for (;;)
            {
                if ( self jumpbuttonpressed() )
                {
                    if ( gettime() < var_1 + 500 && !self isonground() )
                    {
                        self.doublejumpdetected = 1;
                        waitframe();
                        self.doublejumpdetected = 0;
                    }

                    break;
                }

                if ( gettime() > var_1 + 500 )
                    break;

                waitframe();
            }
        }

        waitframe();
    }
}

_id_121D2()
{
    var_0 = self;

    if ( level.gametype == "br" )
    {
        if ( isdefined( var_0.play_disguise_vo ) && ( var_0.play_disguise_vo == 1 || var_0.play_disguise_vo == 2 ) )
        {
            var_0 play_collected_key_vo();
            var_0.play_disguise_vo = 3;
        }
    }
    else if ( level.gametype == "cp_survival" )
    {
        var_0 setclientomnvar( "ui_br_altimeter_state", 0 );
        var_0 play_collected_key_vo( 1 );
    }
}

_id_14002()
{
    var_0 = self;
    var_1 = var_0 getvelocity();
    var_2 = clamp( var_0.origin[2], 0, level._id_133F9._id_1467D ) / level._id_133F9._id_1467D;
    var_3 = level._id_133F9._id_1467C + ( level._id_133F9._id_1467B - level._id_133F9._id_1467C ) * var_2;
    var_4 = var_1 * ( 1, 1, 0 );
    var_5 = length( var_4 );
    var_6 = var_4 * var_3;
    var_7 = var_5 * var_3;

    if ( var_7 > level._id_133F9._id_1467A )
        var_6 = var_6 * ( level._id_133F9._id_1467A / var_7 );

    var_8 = 0;
    var_8 = var_8 - var_0.origin[2] * level._id_133F9._id_1468F;
    var_8 = var_8 + level._id_133F9.zoffset;
    var_8 = var_8 + var_1[2] * level._id_133F9._id_1472C;
    var_8 = clamp( var_8, -1 * level._id_133F9._id_14690, 0 );
    var_9 = 1;

    if ( var_5 < level._id_133F9.pe_chopper_zones * var_1[2] )
        var_9 = 2;

    var_0 setadditionalstreampos( var_0.origin + ( var_6[0], var_6[1], var_8 ), 0, var_9 );
}

playerpowerresetpowers( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    self notify( "freeFallFromPlaneStateMachine" );
    self endon( "freeFallFromPlaneStateMachine" );
    var_7 = self;
    var_7.play_disguise_vo = 1;
    var_7.play_cinderblock_broken_fx = istrue( var_4 );
    var_7.play_contract_announcer_maybe = 0;
    var_7 play_chopper_kill_vo( var_0, var_1, var_2, var_3, var_5, var_6 );
    var_7 play_death_sound_with_global_cooldown();
    var_8 = gettime();

    for (;;)
    {
        if ( var_7 isskydiving() || var_8 + 2000 < gettime() || var_7 usefailextractingmsg() )
            break;

        waitframe();
    }

    for (;;)
    {
        if ( level._id_133F9._id_13918 && var_7.play_contract_announcer_maybe < gettime() )
        {
            var_7 _id_14002();
            var_7.play_contract_announcer_maybe = gettime() + 500;
        }

        if ( var_7 isinfreefall() && var_7.play_disguise_vo != 1 )
        {
            var_7 play_death_sound_with_global_cooldown();
            var_7.play_disguise_vo = 1;
        }

        if ( var_7 isparachuting() && var_7.play_disguise_vo != 2 )
        {
            var_7 play_death_audio();
            var_7.play_disguise_vo = 2;
        }

        if ( !var_7 isskydiving() && var_7.play_disguise_vo != 3 && var_7.play_disguise_vo != 4 && var_7.play_disguise_vo != 6 || var_7.play_disguise_vo == 5 )
        {
            var_7 play_collected_key_vo();

            if ( var_7.play_disguise_vo != 5 )
                var_7.play_disguise_vo = 3;
            else
                var_7.play_disguise_vo = 6;
        }

        var_9 = istrue( var_7.inlaststand );
        var_10 = var_7 isonground() && ( var_7.play_disguise_vo == 3 || var_7 usefailextractingmsg() );
        var_11 = var_7 isonladder();
        var_12 = !scripts\mp\utility\player::isreallyalive( var_7 );

        if ( var_9 || var_10 || var_11 || var_12 )
        {
            var_7 play_counter_beep_sfx_on_bomb_vests();
            var_7.play_disguise_vo = undefined;
            var_7.play_cinderblock_broken_fx = undefined;
            var_7.play_contract_announcer_maybe = undefined;

            if ( var_11 )
                var_7 skydive_interrupt();

            return;
        }

        waitframe();
    }
}

play_chopper_kill_vo( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    self skydive_interrupt();

    if ( !istrue( level.parachuteinitfinished ) )
        initparachutedvars();

    if ( !isdefined( var_0 ) )
        var_0 = 4.0;

    if ( !isdefined( var_4 ) )
        var_4 = 1;

    if ( var_4 && level.gametype != "br" )
        self [[ level.parachutetakeweaponscb ]]();

    self [[ level.freefallstartcb ]]();

    if ( !isdefined( var_2 ) )
        self notifyonplayercommand( "open_parachute", "+gostand" );

    self animscriptsetinputparamreplicationstatus( 1 );

    if ( isdefined( var_3 ) )
        self setvelocity( var_3 );

    var_6 = level.client_activate;

    if ( isdefined( var_5 ) )
        var_6 = var_5;

    if ( !istrue( var_6 ) )
        self skydive_beginfreefall();

    if ( getdvarint( "scr_parachute_camera_transition_mode", 1 ) != 2 )
        self skydive_setforcethirdpersonstatus( 1 );

    if ( level.gametype == "br" && ( !istrue( self.play_cinderblock_broken_fx ) || getdvar( "scr_br_gametype", "" ) == "dmz" ) || getdvar( "scr_br_gametype", "" ) == "rat_race" || getdvar( "scr_br_gametype", "" ) == "risk" || getdvar( "scr_br_gametype", "" ) == "gold_war" )
        thread stop_restock_recharge( getdvarint( "scr_bmo_parachuteTouchdownVFX", 1 ) == 1 && ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "rat_race" || getdvar( "scr_br_gametype", "" ) == "risk" || getdvar( "scr_br_gametype", "" ) == "gold_war" ) );

    if ( istrue( var_1 ) )
        thread enablemanualpullchute( 0 );
    else
        thread enablemanualpullchute( var_0 );

    self [[ level.parachuterestoreweaponscb ]]();
}

play_death_sound_with_global_cooldown()
{
    if ( isparachutegametype() )
    {
        self setclientomnvar( "ui_br_altimeter_state", 1 );
        level.audio_player_stop_mud_loop[self getxuid()] = self;
    }

    if ( !self.play_cinderblock_broken_fx )
    {
        var_0 = "enabled";

        if ( isdefined( self.operatorcustomization ) && isdefined( self.operatorcustomization.disabledebugdialogue ) )
            var_0 = var_0 + self.operatorcustomization.disabledebugdialogue;
    }

    if ( istrue( level.pilot_linkto_origin_offset ) )
        _calloutmarkerping_isvehicleoccupiedbyenemy::loadout_finalizeweapons( "skydive" );
}

play_death_audio()
{
    self notify( "freefall_complete" );
    var_0 = scripts\cp_mp\utility\script_utility::_id_140DE( "game", "isGameTypeBR", 0 );
    var_1 = scripts\cp_mp\utility\script_utility::_id_140DE( "game", "getSubGameType", "" );
    var_2 = var_1 != "truckwar" && var_1 != "reveal" && var_1 != "brdov";

    if ( var_0 && var_2 && istrue( self.stickers ) )
    {
        var_3 = scripts\cp_mp\utility\script_utility::_id_140DE( "music", "getRandomMusicSet", "", [ "br_infil_jump_parachute" ] );
        self setplayermusicstate( var_3 );
        self.stickers = undefined;
    }

    level.audio_player_stop_mud_loop[self getxuid()] = self;

    if ( isparachutegametype() )
        self setclientomnvar( "ui_br_altimeter_state", 2 );

    if ( !istrue( level.dontshootwhileparachuting ) )
        self [[ level.parachuteopencb ]]();

    if ( isdefined( level._id_1205E ) )
        self [[ level._id_1205E ]]();

    if ( istrue( level.pilot_linkto_origin_offset ) )
        _calloutmarkerping_isvehicleoccupiedbyenemy::loadout_finalizeweapons( "skydive" );
}

play_collected_key_vo( var_0 )
{
    self.ignorefalldamagetime = gettime() + 5000;
    self.waitillcanspawnclient = gettime();

    if ( istrue( self.delayswaploadout ) )
        self.delayswaploadout = 0;

    if ( istrue( level.dontshootwhileparachuting ) )
        self [[ level.parachutecompletecb ]]();

    self notify( "parachute_landed" );
    self skydive_setforcethirdpersonstatus( 0 );

    if ( !usefailextractingmsg() && !istrue( level.client_activate ) )
        self skydive_setbasejumpingstatus( 1 );

    if ( istrue( self.restoreriotshieldonland ) )
    {
        riotshield_attach_parachute( self.restoreriotshieldonland == 1, riotshield_getmodel_parachute() );
        self.restoreriotshieldonland = undefined;
    }

    level.audio_player_stop_mud_loop[self getxuid()] = undefined;
    self notify( "parachute_complete" );
    self animscriptsetinputparamreplicationstatus( 0 );

    if ( istrue( level.pilot_linkto_origin_offset ) )
        _calloutmarkerping_isvehicleoccupiedbyenemy::move_structs( "skydive" );
}

play_counter_beep_sfx_on_bomb_vests()
{
    if ( getdvarint( "scr_parachute_hint_enabled", 0 ) )
        self clearadditionalstreampos();

    if ( isparachutegametype() )
    {
        level.audio_player_stop_mud_loop[self getxuid()] = undefined;
        self setclientomnvar( "ui_br_altimeter_state", 0 );
        thread _id_1274E();

        if ( isdefined( level._id_12036 ) )
            self [[ level._id_12036 ]]( self );

        if ( istrue( level.pilot_linkto_origin_offset ) )
            _calloutmarkerping_isvehicleoccupiedbyenemy::move_structs( "skydive" );
    }
}

_id_1274E()
{
    self endon( "death_or_disconnect" );
    wait 0.3;

    if ( isalive( self ) && self.sessionstate == "playing" )
    {
        self playlocalsound( "plr_breath_land_parachute", self );
        self playsoundonmovingent( "breath_land_parachute_npc" );
        var_0 = scripts\cp_mp\utility\script_utility::_id_140DE( "game", "isGameTypeBR", 0 );

        if ( var_0 )
        {
            wait 5.0;
            var_1 = scripts\cp_mp\utility\script_utility::_id_140DE( "music", "isBRSuspenseMusicEnabled", 0, [ self ] );

            if ( var_1 )
                self.nosuspensemusic = undefined;
        }
    }
}

_id_121CA()
{
    var_0 = self;
    var_0 skydive_interrupt();

    if ( isdefined( var_0.parachute ) )
        var_0.parachute delete();
}
