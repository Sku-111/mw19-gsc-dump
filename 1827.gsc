// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.classmap["class0"] = 0;
    level.classmap["class1"] = 1;
    level.classmap["class2"] = 2;
    level.classmap["custom1"] = 0;
    level.classmap["custom2"] = 1;
    level.classmap["custom3"] = 2;
    level.classmap["custom4"] = 3;
    level.classmap["custom5"] = 4;
    level.classmap["custom6"] = 5;
    level.classmap["custom7"] = 6;
    level.classmap["custom8"] = 7;
    level.classmap["custom9"] = 8;
    level.classmap["custom10"] = 9;
    level.classmap["axis_recipe1"] = 0;
    level.classmap["axis_recipe2"] = 1;
    level.classmap["axis_recipe3"] = 2;
    level.classmap["axis_recipe4"] = 3;
    level.classmap["axis_recipe5"] = 4;
    level.classmap["axis_recipe6"] = 5;
    level.classmap["allies_recipe1"] = 0;
    level.classmap["allies_recipe2"] = 1;
    level.classmap["allies_recipe3"] = 2;
    level.classmap["allies_recipe4"] = 3;
    level.classmap["allies_recipe5"] = 4;
    level.classmap["allies_recipe6"] = 5;
    level.classmap["gamemode"] = 0;
    level.classmap["custgamemode"] = 0;
    level.classmap["custgamemode1"] = 0;
    level.classmap["custgamemode2"] = 1;
    level.classmap["custgamemode3"] = 2;
    level.classmap["custgamemode4"] = 3;
    level.classmap["custgamemode5"] = 4;
    level.classmap["custgamemode6"] = 5;
    level.classmap["custgamemode7"] = 6;
    level.classmap["custgamemode8"] = 7;
    level.classmap["custgamemode9"] = 8;
    level.classmap["custgamemode10"] = 9;
    level.classmap["custgamemode_d1"] = 0;
    level.classmap["custgamemode_d2"] = 1;
    level.classmap["custgamemode_d3"] = 2;
    level.classmap["custgamemode_d4"] = 3;
    level.classmap["custgamemode_d5"] = 4;
    level.classmap["callback"] = 0;
    level.classmap["default1"] = 0;
    level.classmap["default2"] = 1;
    level.classmap["default3"] = 2;
    level.classmap["default4"] = 3;
    level.classmap["default5"] = 4;
    level.classmap["default6"] = 5;
    level.classmap["default7"] = 6;
    level.classmap["default8"] = 7;
    level.classmap["default9"] = 8;
    level.classmap["default10"] = 9;
    level.classmap["default11"] = 10;
    level.classmap["juggernaut"] = 0;
    level.defaultclass = "CLASS_ASSAULT";

    if ( getdvarint( "scr_br_mmp_defaultLoadouts", 0 ) )
        level.classtablename = "mp/classtable_br_default_mmp.csv";
    else if ( level.gametype == "br" || level.gametype == "brtdm" )
        level.classtablename = "mp/classtable_br_default.csv";
    else if ( scripts\mp\utility\game::tv_station_intro_camera() )
    {
        var_0 = getdvarint( "scr_classtable_override", 0 );

        switch ( var_0 )
        {
            case 1:
                level.classtablename = "mp/classtable_snipers_only.csv";
                break;
            default:
                level.classtablename = "mp/classtable.csv";
                break;
        }

        setomnvar( "ui_classtable_override", var_0 );
    }
    else if ( getdvarint( "scr_test_loadouts", 0 ) )
        level.classtablename = "mp/classtable_test.csv";
    else if ( scripts\mp\utility\game::isanymlgmatch() )
        level.classtablename = "mp/classtable_cdl.csv";
    else
        level.classtablename = "mp/classtable.csv";

    level thread onplayerconnecting();
    level thread onplayerspawned();
}

getclasschoice( var_0 )
{
    return var_0;
}

getweaponchoice( var_0 )
{
    var_1 = strtok( var_0, "," );

    if ( var_1.size > 1 )
        return int( var_1[1] );
    else
        return 0;
}

cac_getweapon( var_0, var_1 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "weaponSetups", var_1, "weapon" );
}

cac_getweaponattachment( var_0, var_1, var_2 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "weaponSetups", var_1, "attachmentSetup", var_2, "attachment" );
}

force_interrupt_current_combat_action( var_0, var_1, var_2 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "weaponSetups", var_1, "attachmentSetup", var_2, "variantID" );
}

cac_getweaponlootitemid( var_0, var_1 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "weaponSetups", var_1, "lootItemID" );
}

cac_getweaponvariantid( var_0, var_1 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "weaponSetups", var_1, "variantID" );
}

cac_getweaponcamo( var_0, var_1 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "weaponSetups", var_1, "camo" );
}

cac_getweaponreticle( var_0, var_1 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "weaponSetups", var_1, "reticle" );
}

cac_getkillstreak( var_0, var_1 )
{
    var_2 = self getplayerdata( level.loadoutsgroup, "squadMembers", "killstreakSetups", var_0, "killstreak" );
    return var_2;
}

cac_getcharacterarchetype()
{
    if ( isdefined( self.changedarchetypeinfo ) )
        return self.changedarchetypeinfo.archetype;

    return "archetype_assault";
}

cac_getequipmentprimary( var_0 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "equipmentSetups", 0, "equipment" );
}

cac_getextraequipmentprimary( var_0 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "equipmentSetups", 0, "extraCharge" );
}

cac_getequipmentsecondary( var_0 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "equipmentSetups", 1, "equipment" );
}

cac_getextraequipmentsecondary( var_0 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "equipmentSetups", 1, "extraCharge" );
}

cac_getsuper()
{
    if ( isdefined( self.changedarchetypeinfo ) )
        return self.changedarchetypeinfo.super;

    return self getplayerdata( level.loadoutsgroup, "squadMembers", "archetypeSuper" );
}

cac_getfieldupgrade( var_0 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "fieldUpgrades", var_0 );
}

cac_getgesture()
{
    var_0 = "none";

    if ( isdefined( self.changedarchetypeinfo ) )
    {
        var_1 = level.archetypeids[self.changedarchetypeinfo.archetype];
        var_0 = self getplayerdata( level.loadoutsgroup, "squadMembers", "archetypePreferences", var_1, "gesture" );
    }
    else
        var_0 = self getplayerdata( level.loadoutsgroup, "squadMembers", "gesture" );

    return scripts\cp_mp\gestures::getgesturedata( var_0 );
}

cac_getaccessoryweapon()
{
    var_0 = self getplayerdata( level.loadoutsgroup, "customizationSetup", "operatorWatch" );
    return scripts\mp\accessories::getaccessoryweaponbyindex( var_0 );
}

cac_getaccessorydata()
{
    var_0 = self getplayerdata( level.loadoutsgroup, "customizationSetup", "operatorWatch" );
    return scripts\mp\accessories::getaccessorydatabyindex( var_0 );
}

force_interrupt_all_current_combat_actions()
{
    var_0 = self getplayerdata( level.loadoutsgroup, "customizationSetup", "operatorWatch" );
    return scripts\mp\accessories::register_respawn_functions( var_0 );
}

cac_getloadoutperk( var_0, var_1 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "loadoutPerks", var_1 );
}

cac_getloadoutextraperk( var_0, var_1 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "extraPerks", var_1 );
}

cac_getloadoutarchetypeperk()
{
    if ( isdefined( self.changedarchetypeinfo ) )
        return self.changedarchetypeinfo.trait;

    return self getplayerdata( level.loadoutsgroup, "squadMembers", "archetypePerk" );
}

cac_getusingspecialist( var_0 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "usingSpecialist" );
}

cac_getweaponcosmeticattachment( var_0, var_1 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "weaponSetups", var_1, "cosmeticAttachment" );
}

cac_getweaponsticker( var_0, var_1, var_2 )
{
    return self getplayerdata( level.loadoutsgroup, "squadMembers", "loadouts", var_0, "weaponSetups", var_1, "sticker", var_2 );
}

recipe_getkillstreak( var_0, var_1, var_2 )
{
    return scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_0, var_1, "class", "kilstreakSetups", var_2, "killstreak" );
}

table_getarchetype( var_0, var_1 )
{
    return tablelookup( var_0, 0, "loadoutArchetype", var_1 + 1 );
}

table_getloadoutname( var_0, var_1 )
{
    return tablelookup( var_0, 0, "loadoutName", var_1 + 1 );
}

_id_139E4( var_0, var_1, var_2 )
{
    var_3 = scripts\engine\utility::ter_op( var_2 == 0, "loadoutPrimaryAddBlueprintAttachments", "loadoutSecondaryAddBlueprintAttachments" );
    var_4 = tablelookup( var_0, 0, var_3, var_1 + 1 );

    if ( var_4 == "" )
        return 0;
    else
        return istrue( int( var_4 ) );
}

table_getweapon( var_0, var_1, var_2 )
{
    if ( var_2 == 0 )
        return tablelookup( var_0, 0, "loadoutPrimary", var_1 + 1 );
    else
        return tablelookup( var_0, 0, "loadoutSecondary", var_1 + 1 );
}

table_getweaponattachment( var_0, var_1, var_2, var_3 )
{
    var_4 = "none";

    if ( var_2 == 0 )
        var_4 = tablelookup( var_0, 0, "loadoutPrimaryAttachment" + ( var_3 + 1 ), var_1 + 1 );
    else
        var_4 = tablelookup( var_0, 0, "loadoutSecondaryAttachment" + ( var_3 + 1 ), var_1 + 1 );

    if ( var_4 == "" || var_4 == "none" )
        return "none";
    else
        return var_4;
}

table_getweaponcamo( var_0, var_1, var_2 )
{
    if ( var_2 == 0 )
        return tablelookup( var_0, 0, "loadoutPrimaryCamo", var_1 + 1 );
    else
        return tablelookup( var_0, 0, "loadoutSecondaryCamo", var_1 + 1 );
}

table_getweaponreticle( var_0, var_1, var_2 )
{
    if ( var_2 == 0 )
        return tablelookup( var_0, 0, "loadoutPrimaryReticle", var_1 + 1 );
    else
        return tablelookup( var_0, 0, "loadoutSecondaryReticle", var_1 + 1 );
}

_id_139E6( var_0, var_1, var_2, var_3 )
{
    var_4 = undefined;

    if ( var_2 == 0 )
        var_4 = tablelookup( var_0, 0, "loadoutPrimaryVariantID", var_1 + 1 );
    else
        var_4 = tablelookup( var_0, 0, "loadoutSecondaryVariantID", var_1 + 1 );

    return _id_139E7( var_3, var_4 );
}

_id_139E7( var_0, var_1 )
{
    if ( var_0 == "none" )
        return 0;

    if ( !isdefined( level.confirm_good_pickup_location ) )
    {
        level.confirm_good_pickup_location = [];
        level.confirm_good_pickup_location["iw8_ar_tango21"] = [ 1 ];
        level.confirm_good_pickup_location["iw8_ar_mike4"] = [ 5 ];
        level.confirm_good_pickup_location["iw8_ar_kilo433"] = [ 3 ];
        level.confirm_good_pickup_location["iw8_ar_scharlie"] = [ 3 ];
        level.confirm_good_pickup_location["iw8_sm_uzulu"] = [ 4 ];
        level.confirm_good_pickup_location["iw8_sh_romeo870"] = [ 5 ];
        level.confirm_good_pickup_location["iw8_sh_dpapa12"] = [ 3 ];
        level.confirm_good_pickup_location["iw8_lm_mgolf34"] = [ 4 ];
        level.confirm_good_pickup_location["iw8_sn_kilo98"] = [ 16 ];
        level.confirm_good_pickup_location["iw8_sn_alpha50"] = [ 2 ];
        level.confirm_good_pickup_location["iw8_sn_hdromeo"] = [ 4 ];
        level.confirm_good_pickup_location["iw8_pi_golf21"] = [ 3 ];
        level.confirm_good_pickup_location["iw8_pi_cpapa"] = [ 15 ];
        var_2 = getdvar( "scr_blockedClassTableVariants", "" );

        if ( var_2 != "" )
        {
            var_3 = strtok( var_2, "," );

            foreach ( var_5 in var_3 )
            {
                var_6 = strtok( var_5, "|" );

                if ( var_6.size == 2 )
                {
                    var_7 = var_6[0];
                    var_8 = int( var_6[1] );

                    if ( !isdefined( level.confirm_good_pickup_location[var_7] ) )
                        level.confirm_good_pickup_location[var_7] = [];

                    level.confirm_good_pickup_location[var_7][level.confirm_good_pickup_location[var_7].size] = var_8;
                }
            }
        }
    }

    var_10 = undefined;

    if ( isdefined( level.confirm_good_pickup_location[var_0] ) )
        var_10 = level.confirm_good_pickup_location[var_0];

    var_11 = 0;
    var_12 = getdvarint( "scr_forceClassTableVariantRandom", 0 );

    if ( var_12 == 1 )
        var_11 = scripts\mp\utility\weapon::runspawnmodule_isolated( var_0, var_10 );
    else
    {
        var_13 = strtok( var_1, " " );
        var_14 = [];

        foreach ( var_16 in var_13 )
        {
            var_17 = int( var_16 );

            if ( !isdefined( var_10 ) || !scripts\engine\utility::array_contains( var_10, var_17 ) )
                var_14[var_14.size] = var_17;
        }

        if ( var_14.size != 0 )
            var_11 = var_14[randomint( var_14.size )];
    }

    if ( var_11 == -1 )
        var_11 = scripts\mp\utility\weapon::runspawnmodule_isolated( var_0, var_10 );

    var_19 = scripts\mp\utility\weapon::_id_1458C( var_0, var_11 );

    if ( !var_19 )
        var_11 = 0;

    return var_11;
}

table_getperk( var_0, var_1, var_2 )
{
    return tablelookup( var_0, 0, "loadoutPerk" + ( var_2 + 1 ), var_1 + 1 );
}

table_getextraperk( var_0, var_1, var_2 )
{
    return tablelookup( var_0, 0, "loadoutExtraPerk" + ( var_2 + 1 ), var_1 + 1 );
}

table_getequipmentprimary( var_0, var_1 )
{
    return tablelookup( var_0, 0, "loadoutEquipmentPrimary", var_1 + 1 );
}

table_getextraequipmentprimary( var_0, var_1 )
{
    var_2 = tablelookup( var_0, 0, "loadoutExtraEquipmentPrimary", var_1 + 1 );
    return isdefined( var_2 ) && var_2 == "TRUE";
}

table_getequipmentsecondary( var_0, var_1 )
{
    return tablelookup( var_0, 0, "loadoutEquipmentSecondary", var_1 + 1 );
}

table_getextraequipmentsecondary( var_0, var_1 )
{
    var_2 = tablelookup( var_0, 0, "loadoutExtraEquipmentSecondary", var_1 + 1 );
    return isdefined( var_2 ) && var_2 == "TRUE";
}

table_getsuper( var_0, var_1 )
{
    return tablelookup( var_0, 0, "loadoutSuper", var_1 + 1 );
}

table_getspecialist( var_0, var_1 )
{
    var_2 = tablelookup( var_0, 0, "loadoutSpecialist", var_1 + 1 );
    return isdefined( var_2 ) && var_2 == "TRUE";
}

table_getgesture( var_0, var_1 )
{
    return tablelookup( var_0, 0, "loadoutGesture", var_1 + 1 );
}

table_getaccessory( var_0, var_1 )
{
    return tablelookup( var_0, 0, "loadoutAccessory", var_1 + 1 );
}

table_getexecution( var_0, var_1 )
{
    return tablelookup( var_0, 0, "loadoutExecution", var_1 + 1 );
}

table_getkillstreak( var_0, var_1, var_2 )
{
    return tablelookup( var_0, 0, "loadoutStreak" + var_2, var_1 + 1 );
}

loadout_getplayerstreaktype( var_0 )
{
    var_1 = undefined;

    switch ( var_0 )
    {
        case "streaktype_support":
            var_1 = "support";
            break;
        case "streaktype_specialist":
        case "specialist":
            var_1 = "specialist";
            break;
        case "streaktype_resource":
            var_1 = "resource";
            break;
        default:
            var_1 = "assault";
    }

    return var_1;
}

getloadoutstreaktypefromstreaktype( var_0 )
{
    if ( !isdefined( var_0 ) )
        return "streaktype_assault";

    switch ( var_0 )
    {
        case "support":
            return "streaktype_support";
        case "specialist":
            return "streaktype_specialist";
        case "assault":
            return "streaktype_assault";
        default:
            return "streaktype_assault";
    }
}

loadout_getclassteam( var_0 )
{
    if ( self.team == "spectator" )
        var_0 = "none";

    var_1 = undefined;

    if ( issubstr( var_0, "axis" ) )
        var_1 = "axis";
    else if ( issubstr( var_0, "allies" ) )
        var_1 = "allies";
    else
        var_1 = "none";

    return var_1;
}

loadout_clearplayer( var_0 )
{
    loadout_clearweapons( var_0 );
    _detachall( var_0 );
    scripts\mp\equipment::clearallequipment();

    if ( isdefined( self.loadoutarchetype ) )
        clearscriptable();

    scripts\mp\archetypes\archcommon::removearchetype( self.loadoutarchetype );
    loadout_clearperks( var_0 );
    scripts\mp\perks\weaponpassives::forgetpassives();
    scripts\cp_mp\gestures::cleargesture();
    scripts\cp_mp\execution::_clearexecution();
    scripts\mp\accessories::clearplayeraccessory();
    scripts\mp\perks\perkpackage::_id_12301();

    if ( !istrue( var_0 ) )
    {
        resetfunctionality();
        resetactionslots();
    }
}

loadout_clearweapons( var_0 )
{
    if ( istrue( var_0 ) )
    {
        if ( isdefined( self.primaryweaponobj ) )
            scripts\cp_mp\utility\inventory_utility::_takeweapon( self.primaryweaponobj );

        if ( isdefined( self.secondaryweaponobj ) && self.secondaryweaponobj.basename != "none" )
            scripts\cp_mp\utility\inventory_utility::_takeweapon( self.secondaryweaponobj );
    }
    else
        self takeallweapons();

    self.primaryweapon = undefined;
    self.primaryweaponobj = undefined;
    self.secondaryweapon = undefined;
    self.secondaryweaponobj = undefined;
}

loadout_giveperk( var_0 )
{
    if ( !isdefined( self.loadoutperks ) )
        self.loadoutperks = [];

    scripts\mp\utility\perk::giveperk( var_0 );
    self.loadoutperks[self.loadoutperks.size] = var_0;
}

loadout_removeperk( var_0 )
{
    if ( isdefined( self.loadoutperks ) )
    {
        var_1 = 0;
        var_2 = [];

        foreach ( var_4 in self.loadoutperks )
        {
            if ( !var_1 )
            {
                if ( var_4 == var_0 )
                {
                    scripts\mp\utility\perk::removeperk( var_4 );
                    var_1 = 1;
                    continue;
                }
            }

            var_2[var_2.size] = var_4;
        }

        self.loadoutperks = var_2;
    }
}

loadout_clearperks( var_0 )
{
    if ( istrue( var_0 ) )
    {
        if ( isdefined( self.loadoutperks ) )
        {
            foreach ( var_2 in self.loadoutperks )
                scripts\mp\utility\perk::removeperk( var_2 );
        }
    }
    else
    {
        scripts\mp\perks\perks::_clearperks();
        self notify( "all_perks_cleared" );
    }

    self.loadoutperks = [];
    self notify( "loadout_perks_cleared" );
}

loadout_getclassstruct()
{
    var_0 = spawnstruct();
    var_0.loadoutarchetype = "none";
    var_0.loadoutprimary = "none";
    var_0.loadoutprimaryattachments = [];
    var_0.loadoutprimaryattachmentids = [];

    for ( var_1 = 0; var_1 < 10; var_1++ )
    {
        var_0.loadoutprimaryattachments[var_1] = "none";
        var_0.loadoutprimaryattachmentids[var_1] = 0;
    }

    var_0.loadoutprimarycamo = "none";
    var_0.loadoutprimaryreticle = "none";
    var_0.loadoutprimarylootitemid = 0;
    var_0.loadoutprimaryvariantid = -1;
    var_0.loadoutprimarycosmeticattachment = "none";
    var_0.loadoutprimarystickers = [];

    for ( var_2 = 0; var_2 < 4; var_2++ )
        var_0.loadoutprimarystickers[var_2] = "none";

    var_0.loadoutsecondary = "none";
    var_0.loadoutsecondaryattachments = [];
    var_0.loadoutsecondaryattachmentids = [];

    for ( var_1 = 0; var_1 < 10; var_1++ )
    {
        var_0.loadoutsecondaryattachments[var_1] = "none";
        var_0.loadoutsecondaryattachmentids[var_1] = 0;
    }

    var_0.loadoutsecondarycamo = "none";
    var_0.loadoutsecondaryreticle = "none";
    var_0.loadoutsecondarylootitemid = 0;
    var_0.loadoutsecondaryvariantid = -1;
    var_0.loadoutsecondarycosmeticattachment = "none";
    var_0.loadoutsecondarystickers = [];

    for ( var_2 = 0; var_2 < 4; var_2++ )
        var_0.loadoutsecondarystickers[var_2] = "none";

    var_0.loadoutmeleeslot = "none";
    var_0.loadoutperksfromgamemode = 0;
    var_0.loadoutperks = [];
    var_0.loadoutstandardperks = [];
    var_0.loadoutextraperks = [];
    var_0.loadoutrigtrait = "specialty_null";
    var_0.loadoutusingspecialist = 0;
    var_0.loadoutequipmentprimary = "none";
    var_0.loadoutextraequipmentprimary = 0;
    var_0.loadoutequipmentsecondary = "none";
    var_0.loadoutextraequipmentsecondary = 0;
    var_0.loadoutsuper = "none";
    var_0.loadoutgesture = "none";
    var_0.loadoutaccessorydata = "none";
    var_0.loadoutaccessoryweapon = "none";
    var_0.loadoutstreaksfilled = 0;
    var_0.loadoutstreaktype = "streaktype_assault";
    var_0.loadoutkillstreak1 = "none";
    var_0.loadoutkillstreak2 = "none";
    var_0.loadoutkillstreak3 = "none";
    var_0.tweakedbyplayerduringmatch = 0;
    var_0.gamemodeforcednewloadout = 0;
    var_0.uavbestid = 0;
    return var_0;
}

zombieregenratescaleingas( var_0 )
{
    var_1 = spawnstruct();
    var_1.loadoutarchetype = var_0.loadoutarchetype;

    if ( isdefined( var_0._id_11960 ) )
        var_1._id_11960 = var_0._id_11960;

    var_1.loadoutprimary = var_0.loadoutprimary;
    var_1.loadoutprimaryattachments = var_0.loadoutprimaryattachments;
    var_1.loadoutprimaryattachmentids = var_0.loadoutprimaryattachmentids;
    var_1.loadoutprimarycamo = var_0.loadoutprimarycamo;
    var_1.loadoutprimaryreticle = var_0.loadoutprimaryreticle;
    var_1.loadoutprimarylootitemid = var_0.loadoutprimarylootitemid;
    var_1.loadoutprimaryvariantid = var_0.loadoutprimaryvariantid;
    var_1.loadoutprimarycosmeticattachment = var_0.loadoutprimarycosmeticattachment;
    var_1.loadoutprimarystickers = var_0.loadoutprimaryweaponstickers;

    if ( isdefined( var_0._id_11961 ) )
        var_1._id_11961 = var_0._id_11961;

    var_1.loadoutsecondary = var_0.loadoutsecondary;
    var_1.loadoutsecondaryattachments = var_0.loadoutsecondaryattachments;
    var_1.loadoutsecondaryattachmentids = var_0.loadoutsecondaryattachmentids;
    var_1.loadoutsecondarycamo = var_0.loadoutsecondarycamo;
    var_1.loadoutsecondaryreticle = var_0.loadoutsecondaryreticle;
    var_1.loadoutsecondarylootitemid = var_0.loadoutsecondarylootitemid;
    var_1.loadoutsecondaryvariantid = var_0.loadoutsecondaryvariantid;
    var_1.loadoutsecondarycosmeticattachment = var_0.loadoutsecondarycosmeticattachment;
    var_1.loadoutsecondarystickers = var_0.loadoutsecondarystickers;
    var_1.loadoutmeleeslot = var_0.loadoutmeleeslot;
    var_1.loadoutperksfromgamemode = var_0.loadoutperksfromgamemode;
    var_1.loadoutperks = var_0.loadoutperks;
    var_1.loadoutstandardperks = var_0.loadoutstandardperks;
    var_1.loadoutextraperks = var_0.loadoutextraperks;
    var_1.loadoutrigtrait = var_0.loadoutrigtrait;
    var_1.loadoutusingspecialist = var_0.loadoutusingspecialist;
    var_1.loadoutequipmentprimary = var_0.loadoutequipmentprimary;
    var_1.loadoutextraequipmentprimary = var_0.loadoutextraequipmentprimary;
    var_1.loadoutequipmentsecondary = var_0.loadoutequipmentsecondary;
    var_1.loadoutextraequipmentsecondary = var_0.loadoutextraequipmentsecondary;
    var_1.loadoutsuper = var_0.loadoutsuper;
    var_1.loadoutgesture = var_0.loadoutgesture;
    var_1.loadoutaccessorydata = var_0.loadoutaccessorydata;
    var_1.loadoutaccessoryweapon = var_0.loadoutaccessoryweapon;
    var_1.loadoutstreaksfilled = var_0.loadoutstreaksfilled;
    var_1.loadoutstreaktype = var_0.loadoutstreaktype;
    var_1.loadoutkillstreak1 = var_0.loadoutkillstreak1;
    var_1.loadoutkillstreak2 = var_0.loadoutkillstreak2;
    var_1.loadoutkillstreak3 = var_0.loadoutkillstreak3;
    var_1.tweakedbyplayerduringmatch = var_0.tweakedbyplayerduringmatch;
    var_1.gamemodeforcednewloadout = var_0.gamemodeforcednewloadout;
    var_1.uavbestid = var_0.uavbestid;
    var_1 = loadout_updateclass( var_1, "copied" );
    return var_1;
}

loadout_updateclassteam( var_0, var_1, var_2 )
{
    var_2 = loadout_getclassteam( var_1 );
    var_3 = getclassindex( var_1 );
    self.class_num = var_3;
    self.classteam = var_2;
    var_0.loadoutarchetype = scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_2, var_3, "class", "archetype" );
    var_0.loadoutprimary = scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_2, var_3, "class", "weaponSetups", 0, "weapon" );

    if ( var_0.loadoutprimary == "none" )
        var_0.loadoutprimary = "iw8_fists";
    else
    {
        for ( var_4 = 0; var_4 < 10; var_4++ )
            var_0.loadoutprimaryattachments[var_4] = scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_2, var_3, "class", "weaponSetups", 0, "attachmentSetup", var_4, "attachment" );

        for ( var_5 = 0; var_5 < 4; var_5++ )
            var_0.loadoutprimarystickers[var_5] = scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_2, var_3, "class", "weaponSetups", 0, "sticker", var_5 );
    }

    var_0.loadoutprimarycamo = scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_2, var_3, "class", "weaponSetups", 0, "camo" );
    var_0.loadoutprimaryreticle = scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_2, var_3, "class", "weaponSetups", 0, "reticle" );
    var_0.loadoutsecondary = scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_2, var_3, "class", "weaponSetups", 1, "weapon" );

    for ( var_4 = 0; var_4 < 10; var_4++ )
        var_0.loadoutsecondaryattachments[var_4] = scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_2, var_3, "class", "weaponSetups", 1, "attachmentSetup", var_4, "attachment" );

    for ( var_5 = 0; var_5 < 4; var_5++ )
        var_0.loadoutsecondarystickers[var_5] = scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_2, var_3, "class", "weaponSetups", 1, "sticker", var_5 );

    var_0.loadoutsecondarycamo = scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_2, var_3, "class", "weaponSetups", 1, "camo" );
    var_0.loadoutsecondaryreticle = scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_2, var_3, "class", "weaponSetups", 1, "reticle" );
    var_0.loadoutmeleeslot = "none";
    var_0.loadoutequipmentprimary = "none";
    var_0.loadoutextraequipmentprimary = 0;
    var_0.loadoutequipmentsecondary = "none";
    var_0.loadoutextraequipmentsecondary = 0;
    var_0.loadoutsuper = "none";
    var_0.loadoutgesture = scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_2, var_3, "class", "gesture" );
    var_0.loadoutstreaksfilled = 1;
    var_0.loadoutkillstreak1 = recipe_getkillstreak( var_2, var_3, 0 );
    var_0.loadoutkillstreak2 = recipe_getkillstreak( var_2, var_3, 1 );
    var_0.loadoutkillstreak3 = recipe_getkillstreak( var_2, var_3, 2 );
}

loadout_updateclasscustom( var_0, var_1 )
{
    var_2 = getclassindex( var_1 );
    self.class_num = var_2;

    if ( !isdefined( var_2 ) )
    {
        var_3 = scripts\engine\utility::ter_op( isdefined( self.name ), self.name, "<undefined>" );
        var_4 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, "<undefined>" );
        scripts\mp\utility\script::laststand_dogtags( "loadout_updateClassCustom() called on " + var_3 + " with invalid class = " + var_4 );
    }

    var_0.loadoutarchetype = cac_getcharacterarchetype();
    var_0.loadoutprimary = cac_getweapon( var_2, 0 );

    for ( var_5 = 0; var_5 < 10; var_5++ )
    {
        var_0.loadoutprimaryattachments[var_5] = cac_getweaponattachment( var_2, 0, var_5 );
        var_0.loadoutprimaryattachmentids[var_5] = force_interrupt_current_combat_action( var_2, 0, var_5 );
    }

    var_0.loadoutprimarycamo = cac_getweaponcamo( var_2, 0 );
    var_0.loadoutprimaryreticle = cac_getweaponreticle( var_2, 0 );
    var_0.loadoutprimarylootitemid = cac_getweaponlootitemid( var_2, 0 );
    var_0.loadoutprimaryvariantid = cac_getweaponvariantid( var_2, 0 );
    var_0.loadoutprimarycosmeticattachment = cac_getweaponcosmeticattachment( var_2, 0 );

    for ( var_6 = 0; var_6 < 4; var_6++ )
        var_0.loadoutprimarystickers[var_6] = cac_getweaponsticker( var_2, 0, var_6 );

    var_0.loadoutsecondary = cac_getweapon( var_2, 1 );

    for ( var_5 = 0; var_5 < 10; var_5++ )
    {
        var_0.loadoutsecondaryattachments[var_5] = cac_getweaponattachment( var_2, 1, var_5 );
        var_0.loadoutsecondaryattachmentids[var_5] = force_interrupt_current_combat_action( var_2, 1, var_5 );
    }

    var_0.loadoutsecondarycamo = cac_getweaponcamo( var_2, 1 );
    var_0.loadoutsecondaryreticle = cac_getweaponreticle( var_2, 1 );
    var_0.loadoutsecondarylootitemid = cac_getweaponlootitemid( var_2, 1 );
    var_0.loadoutsecondaryvariantid = cac_getweaponvariantid( var_2, 1 );
    var_0.loadoutsecondarycosmeticattachment = cac_getweaponcosmeticattachment( var_2, 1 );

    for ( var_6 = 0; var_6 < 4; var_6++ )
        var_0.loadoutsecondarystickers[var_6] = cac_getweaponsticker( var_2, 1, var_6 );

    var_0.loadoutequipmentprimary = cac_getequipmentprimary( var_2 );
    var_0.loadoutextraequipmentprimary = cac_getextraequipmentprimary( var_2 );
    var_0.loadoutequipmentsecondary = cac_getequipmentsecondary( var_2 );
    var_0.loadoutextraequipmentsecondary = cac_getextraequipmentsecondary( var_2 );
    var_0.loadoutsuper = cac_getsuper();
    var_0.loadoutgesture = cac_getgesture();
    loadout_updateclassaccessory( var_0 );
    var_0.loadoutstreaksfilled = 1;
    var_0.loadoutkillstreak1 = cac_getkillstreak( 0, var_1 );
    var_0.loadoutkillstreak2 = cac_getkillstreak( 1, var_1 );
    var_0.loadoutkillstreak3 = cac_getkillstreak( 2, var_1 );
    var_0.loadoutusingspecialist = cac_getusingspecialist( var_2 );
    var_7 = 0;

    foreach ( var_9 in var_0.loadoutprimaryattachments )
    {
        if ( var_9 != "none" )
            var_7++;
    }

    var_11 = 0;

    foreach ( var_9 in var_0.loadoutsecondaryattachments )
    {
        if ( var_9 != "none" )
            var_11++;
    }

    var_14 = int( tablelookup( "mp/statstable.csv", 4, var_0.loadoutprimary, 18 ) );

    if ( var_14 < var_7 )
    {
        for ( var_5 = 0; var_5 < 10; var_5++ )
        {
            var_0.loadoutprimaryattachments[var_5] = "none";
            var_0.loadoutprimaryattachmentids[var_5] = 0;
        }
    }

    var_14 = int( tablelookup( "mp/statstable.csv", 4, var_0.loadoutsecondary, 18 ) );

    if ( var_14 < var_11 )
    {
        for ( var_5 = 0; var_5 < 10; var_5++ )
        {
            var_0.loadoutsecondaryattachments[var_5] = "none";
            var_0.loadoutsecondaryattachmentids[var_5] = 0;
        }
    }
}

loadout_updateclassgamemode( var_0, var_1 )
{
    var_2 = getclassindex( var_1 );
    self.class_num = var_2;
    var_3 = self.pers["gamemodeLoadout"];

    if ( isdefined( var_3["loadoutArchetype"] ) )
        var_0.loadoutarchetype = var_3["loadoutArchetype"];
    else if ( isbot( self ) )
    {
        var_4 = scripts\mp\bots\bots_loadout::bot_loadout_class_callback();
        var_0.loadoutarchetype = var_4["loadoutArchetype"];
    }
    else
        var_0.loadoutarchetype = cac_getcharacterarchetype();

    if ( isdefined( var_3["loadoutRigTrait"] ) )
        var_0.loadoutrigtrait = var_3["loadoutRigTrait"];

    if ( isdefined( var_3["loadoutPrimaryAddBlueprintAttachments"] ) )
        var_0._id_11960 = var_3["loadoutPrimaryAddBlueprintAttachments"];

    if ( isdefined( var_3["loadoutPrimary"] ) )
        var_0.loadoutprimary = var_3["loadoutPrimary"];

    for ( var_5 = 0; var_5 < 10; var_5++ )
    {
        var_6 = getattachmentloadoutstring( var_5, "primary" );

        if ( isdefined( var_3[var_6] ) )
            var_0.loadoutprimaryattachments[var_5] = var_3[var_6];
    }

    for ( var_7 = 0; var_7 < 4; var_7++ )
    {
        var_8 = getstickerloadoutstring( var_7, "primary" );

        if ( isdefined( var_3[var_8] ) )
            var_0.loadoutprimarystickers[var_7] = var_3[var_8];
    }

    if ( isdefined( var_3["loadoutPrimaryCamo"] ) )
        var_0.loadoutprimarycamo = var_3["loadoutPrimaryCamo"];

    if ( isdefined( var_3["loadoutPrimaryCosmeticAttachment"] ) )
        var_0.loadoutprimarycosmeticattachment = var_3["loadoutPrimaryCosmeticAttachment"];

    if ( isdefined( var_3["loadoutPrimaryReticle"] ) )
        var_0.loadoutprimaryreticle = var_3["loadoutPrimaryReticle"];

    if ( isdefined( var_3["loadoutPrimaryVariantID"] ) )
        var_0.loadoutprimaryvariantid = var_3["loadoutPrimaryVariantID"];

    if ( isdefined( var_3["loadoutPrimaryVariantID"] ) && scripts\mp\utility\game::getgametype() == "arena" )
    {
        if ( isdefined( var_3["roundWinStreakPrimaryCamoTeam"] ) && isdefined( self.pers["team"] ) && var_3["roundWinStreakPrimaryCamoTeam"] == self.pers["team"] )
        {
            if ( isdefined( var_3["roundWinStreakPrimaryCamo"] ) )
                var_0.loadoutprimarycamo = var_3["roundWinStreakPrimaryCamo"];
        }

        if ( var_3["loadoutPrimaryVariantID"] != -1 )
            setomnvar( "ui_arena_primaryVariantID", var_3["loadoutPrimaryVariantID"] );
    }

    if ( isdefined( var_3["loadoutSecondaryAddBlueprintAttachments"] ) )
        var_0._id_11961 = var_3["loadoutSecondaryAddBlueprintAttachments"];

    if ( isdefined( var_3["loadoutSecondary"] ) )
        var_0.loadoutsecondary = var_3["loadoutSecondary"];

    for ( var_5 = 0; var_5 < 10; var_5++ )
    {
        var_6 = getattachmentloadoutstring( var_5, "secondary" );

        if ( isdefined( var_3[var_6] ) )
            var_0.loadoutsecondaryattachments[var_5] = var_3[var_6];
    }

    for ( var_7 = 0; var_7 < 4; var_7++ )
    {
        var_8 = getstickerloadoutstring( var_7, "secondary" );

        if ( isdefined( var_3[var_8] ) )
            var_0.loadoutsecondarystickers[var_7] = var_3[var_8];
    }

    if ( isdefined( var_3["loadoutSecondaryCamo"] ) )
        var_0.loadoutsecondarycamo = var_3["loadoutSecondaryCamo"];

    if ( isdefined( var_3["loadoutSecondaryCosmeticAttachment"] ) )
        var_0.loadoutsecondarycosmeticattachment = var_3["loadoutSecondaryCosmeticAttachment"];

    if ( isdefined( var_3["loadoutSecondaryReticle"] ) )
        var_0.loadoutsecondaryreticle = var_3["loadoutSecondaryReticle"];

    if ( isdefined( var_3["loadoutSecondaryVariantID"] ) )
        var_0.loadoutsecondaryvariantid = var_3["loadoutSecondaryVariantID"];

    if ( isdefined( var_3["loadoutSecondaryVariantID"] ) && scripts\mp\utility\game::getgametype() == "arena" && var_3["loadoutSecondaryVariantID"] != -1 )
    {
        if ( isdefined( var_3["roundWinStreakecondaryCamoTeam"] ) && isdefined( self.pers["team"] ) && var_3["roundWinStreakecondaryCamoTeam"] == self.pers["team"] )
        {
            if ( isdefined( var_3["roundWinStreakSecondaryCamo"] ) )
                var_0.loadoutsecondarycamo = var_3["roundWinStreakSecondaryCamo"];
        }

        if ( var_3["loadoutSecondaryVariantID"] != -1 )
            setomnvar( "ui_arena_secondaryVariantID", var_3["loadoutSecondaryVariantID"] );
    }

    if ( isdefined( var_3["loadoutMeleeSlot"] ) )
        var_0.loadoutmeleeslot = var_3["loadoutMeleeSlot"];

    var_0.loadoutperksfromgamemode = isdefined( var_3["loadoutPerks"] );

    if ( isdefined( var_3["loadoutPerks"] ) )
        var_0.loadoutperks = var_3["loadoutPerks"];

    var_0._id_1195E = isdefined( var_3["loadoutExtraPerks"] );

    if ( isdefined( var_3["loadoutExtraPerks"] ) )
        var_0.loadoutextraperks = var_3["loadoutExtraPerks"];

    if ( isdefined( var_3["loadoutEquipmentPrimary"] ) )
        var_0.loadoutequipmentprimary = var_3["loadoutEquipmentPrimary"];

    if ( isdefined( var_3["loadoutExtraEquipmentPrimary"] ) )
        var_0.loadoutextraequipmentprimary = var_3["loadoutExtraEquipmentPrimary"];

    if ( isdefined( var_3["loadoutEquipmentSecondary"] ) )
        var_0.loadoutequipmentsecondary = var_3["loadoutEquipmentSecondary"];

    if ( isdefined( var_3["loadoutExtraEquipmentSecondary"] ) )
        var_0.loadoutextraequipmentsecondary = var_3["loadoutExtraEquipmentSecondary"];

    if ( isdefined( var_3["loadoutSuper"] ) )
        var_0.loadoutsuper = var_3["loadoutSuper"];

    if ( isbot( self ) )
    {
        var_0.loadoutaccessoryweapon = "none";
        var_0.loadoutaccessorydata = "none";
        var_0.loadoutaccessorylogic = "none";
    }
    else
        loadout_updateclassaccessory( var_0 );

    if ( isdefined( var_3["loadoutGesture"] ) )
    {
        if ( var_3["loadoutGesture"] == "playerData" )
        {
            if ( isbot( self ) )
                var_0.loadoutgesture = "none";
            else
                var_0.loadoutgesture = cac_getgesture();
        }
        else
            var_0.loadoutgesture = var_3["loadoutGesture"];
    }

    if ( isdefined( var_3["loadoutKillstreak1"] ) && var_3["loadoutKillstreak1"] != "specialty_null" || isdefined( var_3["loadoutKillstreak2"] ) && var_3["loadoutKillstreak2"] != "specialty_null" || isdefined( var_3["loadoutKillstreak3"] ) && var_3["loadoutKillstreak3"] != "specialty_null" )
    {
        var_0.loadoutstreaksfilled = 1;
        var_0.loadoutkillstreak1 = var_3["loadoutKillstreak1"];
        var_0.loadoutkillstreak2 = var_3["loadoutKillstreak2"];
        var_0.loadoutkillstreak3 = var_3["loadoutKillstreak3"];
    }

    if ( isdefined( var_3["loadoutUsingSpecialist"] ) )
        var_0.loadoutusingspecialist = 1;
}

zone_get_node_nearest_2d_bounds( var_0, var_1 )
{
    var_2 = getclassindex( var_1 );
    self.class_num = var_2;
    var_3 = self.pers["gamemodeLoadout"];
    var_4 = issubstr( var_1, "custgamemode_d" );

    if ( !var_4 )
    {
        var_0.loadoutarchetype = cac_getcharacterarchetype();

        if ( isdefined( var_3["loadoutPrimaryAddBlueprintAttachments"] ) )
            var_0._id_11960 = var_3["loadoutPrimaryAddBlueprintAttachments"];

        if ( isdefined( var_3["loadoutPrimary"] ) )
        {
            var_0.loadoutprimary = var_3["loadoutPrimary"];

            for ( var_5 = 0; var_5 < 10; var_5++ )
            {
                var_6 = getattachmentloadoutstring( var_5, "primary" );

                if ( isdefined( var_3[var_6] ) )
                    var_0.loadoutprimaryattachments[var_5] = var_3[var_6];
            }

            for ( var_7 = 0; var_7 < 4; var_7++ )
            {
                var_8 = getstickerloadoutstring( var_7, "primary" );

                if ( isdefined( var_3[var_8] ) )
                    var_0.loadoutprimarystickers[var_7] = var_3[var_8];
            }

            if ( isdefined( var_3["loadoutPrimaryCamo"] ) )
                var_0.loadoutprimarycamo = var_3["loadoutPrimaryCamo"];

            if ( isdefined( var_3["loadoutPrimaryCosmeticAttachment"] ) )
                var_0.loadoutprimarycosmeticattachment = var_3["loadoutPrimaryCosmeticAttachment"];

            if ( isdefined( var_3["loadoutPrimaryReticle"] ) )
                var_0.loadoutprimaryreticle = var_3["loadoutPrimaryReticle"];

            if ( isdefined( var_3["loadoutPrimaryVariantID"] ) )
                var_0.loadoutprimaryvariantid = var_3["loadoutPrimaryVariantID"];
        }
        else
        {
            var_0.loadoutprimary = cac_getweapon( var_2, 0 );

            for ( var_5 = 0; var_5 < 10; var_5++ )
            {
                var_0.loadoutprimaryattachments[var_5] = cac_getweaponattachment( var_2, 0, var_5 );
                var_0.loadoutprimaryattachmentids[var_5] = force_interrupt_current_combat_action( var_2, 0, var_5 );
            }

            var_0.loadoutprimarycamo = cac_getweaponcamo( var_2, 0 );
            var_0.loadoutprimaryreticle = cac_getweaponreticle( var_2, 0 );
            var_0.loadoutprimarylootitemid = cac_getweaponlootitemid( var_2, 0 );
            var_0.loadoutprimaryvariantid = cac_getweaponvariantid( var_2, 0 );
            var_0.loadoutprimarycosmeticattachment = cac_getweaponcosmeticattachment( var_2, 0 );

            for ( var_7 = 0; var_7 < 4; var_7++ )
                var_0.loadoutprimarystickers[var_7] = cac_getweaponsticker( var_2, 0, var_7 );
        }

        if ( isdefined( var_3["loadoutSecondaryAddBlueprintAttachments"] ) )
            var_0._id_11961 = var_3["loadoutSecondaryAddBlueprintAttachments"];

        if ( isdefined( var_3["loadoutSecondary"] ) )
        {
            var_0.loadoutsecondary = var_3["loadoutSecondary"];

            for ( var_5 = 0; var_5 < 10; var_5++ )
            {
                var_6 = getattachmentloadoutstring( var_5, "secondary" );

                if ( isdefined( var_3[var_6] ) )
                    var_0.loadoutsecondaryattachments[var_5] = var_3[var_6];
            }

            for ( var_7 = 0; var_7 < 4; var_7++ )
            {
                var_8 = getstickerloadoutstring( var_7, "secondary" );

                if ( isdefined( var_3[var_8] ) )
                    var_0.loadoutsecondarystickers[var_7] = var_3[var_8];
            }

            if ( isdefined( var_3["loadoutSecondaryCamo"] ) )
                var_0.loadoutsecondarycamo = var_3["loadoutSecondaryCamo"];

            if ( isdefined( var_3["loadoutSecondaryCosmeticAttachment"] ) )
                var_0.loadoutsecondarycosmeticattachment = var_3["loadoutSecondaryCosmeticAttachment"];

            if ( isdefined( var_3["loadoutSecondaryReticle"] ) )
                var_0.loadoutsecondaryreticle = var_3["loadoutSecondaryReticle"];

            if ( isdefined( var_3["loadoutSecondaryVariantID"] ) )
                var_0.loadoutsecondaryvariantid = var_3["loadoutSecondaryVariantID"];
        }
        else
        {
            var_0.loadoutsecondary = cac_getweapon( var_2, 1 );

            for ( var_5 = 0; var_5 < 10; var_5++ )
            {
                var_0.loadoutsecondaryattachments[var_5] = cac_getweaponattachment( var_2, 1, var_5 );
                var_0.loadoutsecondaryattachmentids[var_5] = force_interrupt_current_combat_action( var_2, 1, var_5 );
            }

            var_0.loadoutsecondarycamo = cac_getweaponcamo( var_2, 1 );
            var_0.loadoutsecondaryreticle = cac_getweaponreticle( var_2, 1 );
            var_0.loadoutsecondarylootitemid = cac_getweaponlootitemid( var_2, 1 );
            var_0.loadoutsecondaryvariantid = cac_getweaponvariantid( var_2, 1 );
            var_0.loadoutsecondarycosmeticattachment = cac_getweaponcosmeticattachment( var_2, 1 );

            for ( var_7 = 0; var_7 < 4; var_7++ )
                var_0.loadoutsecondarystickers[var_7] = cac_getweaponsticker( var_2, 1, var_7 );
        }

        if ( isdefined( var_3["loadoutMeleeSlot"] ) )
            var_0.loadoutmeleeslot = var_3["loadoutMeleeSlot"];

        var_0.loadoutequipmentprimary = cac_getequipmentprimary( var_2 );
        var_0.loadoutextraequipmentprimary = cac_getextraequipmentprimary( var_2 );
        var_0.loadoutequipmentsecondary = cac_getequipmentsecondary( var_2 );
        var_0.loadoutextraequipmentsecondary = cac_getextraequipmentsecondary( var_2 );
        var_0.loadoutsuper = cac_getsuper();
        var_0.loadoutgesture = cac_getgesture();
        loadout_updateclassaccessory( var_0 );
        var_0.loadoutstreaksfilled = 1;
        var_0.loadoutkillstreak1 = cac_getkillstreak( 0, var_1 );
        var_0.loadoutkillstreak2 = cac_getkillstreak( 1, var_1 );
        var_0.loadoutkillstreak3 = cac_getkillstreak( 2, var_1 );
        var_0.loadoutusingspecialist = cac_getusingspecialist( var_2 );
    }
    else
    {
        if ( isdefined( var_3["loadoutPrimaryAddBlueprintAttachments"] ) )
            var_0._id_11960 = var_3["loadoutPrimaryAddBlueprintAttachments"];

        if ( isdefined( var_3["loadoutPrimary"] ) )
        {
            var_0.loadoutprimary = var_3["loadoutPrimary"];

            for ( var_5 = 0; var_5 < 10; var_5++ )
            {
                var_6 = getattachmentloadoutstring( var_5, "primary" );

                if ( isdefined( var_3[var_6] ) )
                    var_0.loadoutprimaryattachments[var_5] = var_3[var_6];
            }

            for ( var_7 = 0; var_7 < 4; var_7++ )
            {
                var_8 = getstickerloadoutstring( var_7, "primary" );

                if ( isdefined( var_3[var_8] ) )
                    var_0.loadoutprimarystickers[var_7] = var_3[var_8];
            }

            if ( isdefined( var_3["loadoutPrimaryCamo"] ) )
                var_0.loadoutprimarycamo = var_3["loadoutPrimaryCamo"];

            if ( isdefined( var_3["loadoutPrimaryCosmeticAttachment"] ) )
                var_0.loadoutprimarycosmeticattachment = var_3["loadoutPrimaryCosmeticAttachment"];

            if ( isdefined( var_3["loadoutPrimaryReticle"] ) )
                var_0.loadoutprimaryreticle = var_3["loadoutPrimaryReticle"];

            if ( isdefined( var_3["loadoutPrimaryVariantID"] ) )
                var_0.loadoutprimaryvariantid = var_3["loadoutPrimaryVariantID"];
        }
        else if ( !isagent( self ) && self calloutmarkerping_getent() && getdvarint( "scr_forceHeadlessCustomization", 1 ) == 1 )
            zoomkey( var_0 );
        else
        {
            var_0.loadoutprimary = table_getweapon( level.classtablename, var_2, 0 );

            for ( var_5 = 0; var_5 < 10; var_5++ )
                var_0.loadoutprimaryattachments[var_5] = table_getweaponattachment( level.classtablename, var_2, 0, var_5 );

            var_0.loadoutprimarycamo = table_getweaponcamo( level.classtablename, var_2, 0 );
            var_0.loadoutprimaryreticle = table_getweaponreticle( level.classtablename, var_2, 0 );
            var_0.loadoutsecondary = table_getweapon( level.classtablename, var_2, 1 );

            for ( var_5 = 0; var_5 < 10; var_5++ )
                var_0.loadoutsecondaryattachments[var_5] = table_getweaponattachment( level.classtablename, var_2, 1, var_5 );

            var_0.loadoutsecondarycamo = table_getweaponcamo( level.classtablename, var_2, 1 );
            var_0.loadoutsecondaryreticle = table_getweaponreticle( level.classtablename, var_2, 1 );
        }

        var_0.loadoutequipmentprimary = table_getequipmentprimary( level.classtablename, var_2 );
        var_0.loadoutextraequipmentprimary = table_getextraequipmentprimary( level.classtablename, var_2 );
        var_0.loadoutequipmentsecondary = table_getequipmentsecondary( level.classtablename, var_2 );
        var_0.loadoutextraequipmentsecondary = table_getextraequipmentsecondary( level.classtablename, var_2 );
        var_0.loadoutgesture = table_getgesture( level.classtablename, var_2 );
        var_0.loadoutsuper = table_getsuper( level.classtablename, var_2 );
        var_0.loadoutusingspecialist = table_getspecialist( level.classtablename, var_2 );
        loadout_updateclassaccessory( var_0 );
        var_0.loadoutarchetype = cac_getcharacterarchetype();
        var_0.loadoutkillstreak1 = cac_getkillstreak( 0, var_1 );
        var_0.loadoutkillstreak2 = cac_getkillstreak( 1, var_1 );
        var_0.loadoutkillstreak3 = cac_getkillstreak( 2, var_1 );
        var_0.loadoutrigtrait = cac_getloadoutarchetypeperk();

        if ( getdvarint( "scr_superForceLightTank", 0 ) )
            var_0.loadoutsuper = "super_bradley";
    }
}

loadout_updateclasscallback( var_0 )
{
    if ( !isdefined( self.classcallback ) )
        scripts\engine\utility::error( "self.classCallback function reference required for class 'callback'" );

    var_1 = self [[ self.classcallback ]]();

    if ( !isdefined( var_1 ) )
        scripts\engine\utility::error( "array required from self.classCallback for class 'callback'" );

    if ( isdefined( var_1["loadoutArchetype"] ) )
        var_0.loadoutarchetype = var_1["loadoutArchetype"];

    if ( isdefined( var_1["loadoutPrimaryAddBlueprintAttachments"] ) )
        var_0._id_11960 = var_1["loadoutPrimaryAddBlueprintAttachments"];

    if ( isdefined( var_1["loadoutPrimary"] ) )
        var_0.loadoutprimary = var_1["loadoutPrimary"];

    for ( var_2 = 0; var_2 < 10; var_2++ )
    {
        var_3 = getattachmentloadoutstring( var_2, "primary" );

        if ( isdefined( var_1[var_3] ) )
            var_0.loadoutprimaryattachments[var_2] = var_1[var_3];
    }

    if ( isdefined( var_1["loadoutPrimaryCamo"] ) )
        var_0.loadoutprimarycamo = var_1["loadoutPrimaryCamo"];

    if ( isdefined( var_1["loadoutPrimaryReticle"] ) )
        var_0.loadoutprimaryreticle = var_1["loadoutPrimaryReticle"];

    if ( isdefined( var_1["loadoutPrimaryVariantID"] ) )
        var_0.loadoutprimaryvariantid = var_1["loadoutPrimaryVariantID"];

    if ( isdefined( var_1["loadoutSecondaryAddBlueprintAttachments"] ) )
        var_0._id_11961 = var_1["loadoutSecondaryAddBlueprintAttachments"];

    if ( isdefined( var_1["loadoutSecondary"] ) )
        var_0.loadoutsecondary = var_1["loadoutSecondary"];

    for ( var_2 = 0; var_2 < 10; var_2++ )
    {
        var_3 = getattachmentloadoutstring( var_2, "secondary" );

        if ( isdefined( var_1[var_3] ) )
            var_0.loadoutsecondaryattachments[var_2] = var_1[var_3];
    }

    if ( isdefined( var_1["loadoutSecondaryCamo"] ) )
        var_0.loadoutsecondarycamo = var_1["loadoutSecondaryCamo"];

    if ( isdefined( var_1["loadoutSecondaryReticle"] ) )
        var_0.loadoutsecondaryreticle = var_1["loadoutSecondaryReticle"];

    if ( isdefined( var_1["loadoutSecondaryVariantID"] ) )
        var_0.loadoutsecondaryvariantid = var_1["loadoutSecondaryVariantID"];

    if ( isdefined( var_1["loadoutMeleeSlot"] ) )
        var_0.loadoutmeleeslot = var_1["loadoutMeleeSlot"];

    if ( isdefined( var_1["loadoutEquipmentPrimary"] ) )
        var_0.loadoutequipmentprimary = var_1["loadoutEquipmentPrimary"];

    if ( isdefined( var_1["loadoutExtraEquipmentPrimary"] ) )
        var_0.loadoutextraequipmentprimary = var_1["loadoutExtraEquipmentPrimary"];

    if ( isdefined( var_1["loadoutEquipmentSecondary"] ) )
        var_0.loadoutequipmentsecondary = var_1["loadoutEquipmentSecondary"];

    if ( isdefined( var_1["loadoutExtraEquipmentSecondary"] ) )
        var_0.loadoutextraequipmentsecondary = var_1["loadoutExtraEquipmentSecondary"];

    if ( isdefined( var_1["loadoutSuper"] ) )
        var_0.loadoutsuper = var_1["loadoutSuper"];

    if ( isdefined( var_1["loadoutGesture"] ) )
        var_0.loadoutgesture = var_1["loadoutGesture"];

    var_0.loadoutstreaksfilled = isdefined( var_1["loadoutStreak1"] ) || isdefined( var_1["loadoutStreak2"] ) || isdefined( var_1["loadoutStreak3"] );

    if ( isdefined( var_1["loadoutStreakType"] ) )
        var_0.loadoutstreaktype = var_1["loadoutStreakType"];

    if ( isdefined( var_1["loadoutStreak1"] ) )
        var_0.loadoutkillstreak1 = var_1["loadoutStreak1"];

    if ( isdefined( var_1["loadoutStreak2"] ) )
        var_0.loadoutkillstreak2 = var_1["loadoutStreak2"];

    if ( isdefined( var_1["loadoutStreak3"] ) )
        var_0.loadoutkillstreak3 = var_1["loadoutStreak3"];
}

loadout_updateclassdefault( var_0, var_1 )
{
    var_2 = getclassindex( var_1 );
    self.class_num = var_2;

    if ( !isdefined( var_2 ) )
    {
        var_3 = "<undefined>";
        var_4 = "<undefined>";

        if ( isdefined( self.name ) )
            var_3 = self.name;

        if ( isdefined( var_1 ) )
            var_4 = var_1;

        scripts\mp\utility\script::laststand_dogtags( "loadout_updateClassDefault() called on " + var_3 + " with invalid class = " + var_4 );
    }

    if ( !isagent( self ) && self calloutmarkerping_getent() && getdvarint( "scr_forceHeadlessCustomization", 1 ) == 1 )
    {
        zoomkey( var_0 );
        loadout_updateclassaccessoryheadless( var_0 );
    }
    else
    {
        zoneislocked( var_0, var_2 );
        loadout_updateclassaccessory( var_0 );
    }

    var_0.loadoutequipmentprimary = table_getequipmentprimary( level.classtablename, var_2 );
    var_0.loadoutextraequipmentprimary = table_getextraequipmentprimary( level.classtablename, var_2 );
    var_0.loadoutequipmentsecondary = table_getequipmentsecondary( level.classtablename, var_2 );
    var_0.loadoutextraequipmentsecondary = table_getextraequipmentsecondary( level.classtablename, var_2 );
    var_0.loadoutgesture = table_getgesture( level.classtablename, var_2 );
    var_0.loadoutsuper = table_getsuper( level.classtablename, var_2 );
    var_0.loadoutusingspecialist = table_getspecialist( level.classtablename, var_2 );
    var_0.loadoutarchetype = cac_getcharacterarchetype();
    var_0.loadoutkillstreak1 = cac_getkillstreak( 0, var_1 );
    var_0.loadoutkillstreak2 = cac_getkillstreak( 1, var_1 );
    var_0.loadoutkillstreak3 = cac_getkillstreak( 2, var_1 );
    var_0.loadoutrigtrait = cac_getloadoutarchetypeperk();

    if ( getdvarint( "scr_superForceLightTank", 0 ) )
        var_0.loadoutsuper = "super_bradley";
}

zoneislocked( var_0, var_1 )
{
    var_0.loadoutprimary = table_getweapon( level.classtablename, var_1, 0 );

    for ( var_2 = 0; var_2 < 10; var_2++ )
        var_0.loadoutprimaryattachments[var_2] = table_getweaponattachment( level.classtablename, var_1, 0, var_2 );

    var_0.loadoutprimarycamo = table_getweaponcamo( level.classtablename, var_1, 0 );
    var_0.loadoutprimaryreticle = table_getweaponreticle( level.classtablename, var_1, 0 );
    var_0.loadoutsecondary = table_getweapon( level.classtablename, var_1, 1 );

    for ( var_2 = 0; var_2 < 10; var_2++ )
        var_0.loadoutsecondaryattachments[var_2] = table_getweaponattachment( level.classtablename, var_1, 1, var_2 );

    var_0.loadoutsecondarycamo = table_getweaponcamo( level.classtablename, var_1, 1 );
    var_0.loadoutsecondaryreticle = table_getweaponreticle( level.classtablename, var_1, 1 );
}

zoomkey( var_0 )
{
    if ( !isdefined( self.showextractiontime ) )
    {
        if ( !isdefined( level.showextractiontime ) )
        {
            var_1 = randomint( 200 );
            level.showextractiontime = var_1;
            level.showhint = var_1;
        }
        else
        {
            level.showextractiontime++;
            level.showhint++;
        }

        self.showextractiontime = level.showextractiontime;
        self.showhint = level.showhint;
    }

    var_2 = zone_stompeenemyprogressupdate( self.showextractiontime, 1 );
    var_3 = zone_stompeenemyprogressupdate( self.showhint, 0 );
    var_4 = var_2[0];
    var_5 = var_2[1];
    var_6 = var_3[0];
    var_7 = var_3[1];
    var_0.loadoutprimary = var_4;

    foreach ( var_10, var_9 in var_5.attachcustomtoidmap )
    {
        var_0.loadoutprimaryattachments[var_0.loadoutprimaryattachments.size] = var_10;
        var_0.loadoutprimaryattachmentids[var_0.loadoutprimaryattachmentids.size] = var_9;
    }

    var_0.loadoutprimaryvariantid = var_5.variantid;
    var_0.loadoutsecondary = var_6;

    foreach ( var_10, var_9 in var_7.attachcustomtoidmap )
    {
        var_0.loadoutsecondaryattachments[var_0.loadoutsecondaryattachments.size] = var_10;
        var_0.loadoutsecondaryattachmentids[var_0.loadoutsecondaryattachmentids.size] = var_9;
    }

    var_0.loadoutsecondaryvariantid = var_7.variantid;
}

zone_stompeenemyprogressupdate( var_0, var_1 )
{
    var_2 = 0;
    var_3 = -1;
    var_4 = getdvarint( "scr_limit_headless_to_core", 1 );

    for (;;)
    {
        foreach ( var_8, var_6 in level.weaponlootmapdata )
        {
            if ( var_6.variantid == 0 || var_6.update_focus_fire_objective || !isdefined( var_6.attachcustomtoidmap ) )
                continue;

            if ( var_4 && isdefined( var_6.tut_bot_nameplate ) && !var_6.tut_bot_nameplate )
                continue;

            var_7 = strtok( var_8, "|" )[0];

            if ( var_1 != scripts\mp\utility\weapon::iscacprimaryweapon( var_7 ) )
                continue;

            var_3++;

            if ( var_3 == var_0 )
                return [ var_7, var_6 ];
        }
    }
}

loadout_updateclassaccessory( var_0 )
{
    var_1 = cac_getaccessoryweapon();
    var_2 = cac_getaccessorydata();
    var_3 = force_interrupt_all_current_combat_actions();
    loadout_updateclassaccessoryinternal( var_0, var_1, var_2, var_3 );
}

loadout_updateclassaccessoryheadless( var_0 )
{
    var_1 = getarraykeys( level.accessoryweaponbyindex );

    if ( !isdefined( self.headlessaccessoryindex ) )
    {
        if ( !isdefined( level.headlessaccessoryindex ) )
        {
            var_2 = randomint( var_1.size );
            level.headlessaccessoryindex = var_2;
        }
        else
        {
            level.headlessaccessoryindex++;

            if ( level.headlessaccessoryindex >= var_1.size )
                level.headlessaccessoryindex = 0;
        }

        self.headlessaccessoryindex = level.headlessaccessoryindex;
    }

    var_3 = var_1[self.headlessaccessoryindex];
    var_4 = scripts\mp\accessories::getaccessoryweaponbyindex( var_3 );
    var_5 = scripts\mp\accessories::getaccessorydatabyindex( var_3 );
    var_6 = scripts\mp\accessories::register_respawn_functions( var_3 );
    loadout_updateclassaccessoryinternal( var_0, var_4, var_5, var_6 );
}

loadout_updateclassaccessoryinternal( var_0, var_1, var_2, var_3 )
{
    var_4 = getdvarint( "scr_limit_accessories", -1 );

    if ( var_4 >= 0 )
    {
        if ( !isdefined( level.limitaccessorieslist ) )
            level.limitaccessorieslist = [];

        if ( level.limitaccessorieslist.size < var_4 )
            level.limitaccessorieslist[level.limitaccessorieslist.size] = var_1;
        else if ( scripts\engine\utility::array_contains( level.limitaccessorieslist, var_1 ) )
        {

        }
        else
        {
            var_0.loadoutaccessoryweapon = "none";
            var_0.loadoutaccessorydata = "none";
            var_0.loadoutaccessorylogic = "none";
            return;
        }
    }

    var_0.loadoutaccessoryweapon = var_1;
    var_0.loadoutaccessorydata = var_2;
    var_0.loadoutaccessorylogic = var_3;
}

loadout_updatestreaktype( var_0 )
{
    if ( istrue( var_0.loadoutusingspecialist ) )
        self.streaktype = "streaktype_specialist";
    else
        self.streaktype = "streaktype_assault";

    var_0.loadoutstreaktype = self.streaktype;
}

loadout_updateabilities( var_0, var_1 )
{
    if ( !isdefined( self.pers["loadoutPerks"] ) )
        self.pers["loadoutPerks"] = [];

    if ( !isdefined( self.pers["loadoutStandardPerks"] ) )
        self.pers["loadoutStandardPerks"] = [];

    if ( !isdefined( self.pers["loadoutExtraPerks"] ) )
        self.pers["loadoutExtraPerks"] = [];

    if ( !isdefined( self.pers["loadoutRigTrait"] ) )
        self.pers["loadoutRigTrait"] = [];

    if ( !isdefined( self.pers["loadoutUsingSpecialist"] ) )
        self.pers["loadoutUsingSpecialist"] = 0;

    var_2 = getsubstr( var_1, 0, 7 ) == "default";
    var_3 = getsubstr( var_1, 0, 14 ) == "custgamemode_d";

    if ( var_0.loadoutperksfromgamemode )
    {
        var_0.loadoutstandardperks = var_0.loadoutperks;

        if ( var_0._id_1195E )
            var_0.loadoutextraperks = var_0.loadoutextraperks;
    }
    else if ( !scripts\mp\utility\perk::perksenabled() )
        return;
    else if ( isai( self ) )
    {
        if ( isdefined( self.pers["loadoutPerks"] ) )
            var_0.loadoutperks = self.pers["loadoutPerks"];
    }
    else
    {
        if ( var_1 == "juggernaut" || var_1 == "copied" )
            return;

        var_4 = loadout_getclassteam( var_1 );

        for ( var_5 = 0; var_5 < 3; var_5++ )
        {
            var_6 = "specialty_null";

            if ( var_4 != "none" )
            {
                var_7 = getclassindex( var_1 );
                var_6 = scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_4, var_7, "class", "loadoutPerks" );
            }
            else if ( var_2 || var_3 )
            {
                var_7 = getclassindex( var_1 );
                var_6 = table_getperk( level.classtablename, var_7, var_5 );
            }
            else
                var_6 = cac_getloadoutperk( self.class_num, var_5 );

            if ( isdefined( var_6 ) && var_6 != "specialty_null" )
            {
                var_0.loadoutperks[var_0.loadoutperks.size] = var_6;
                var_0.loadoutstandardperks[var_0.loadoutstandardperks.size] = var_6;
            }
        }

        for ( var_5 = 0; var_5 < 3; var_5++ )
        {
            var_6 = "specialty_null";

            if ( var_4 != "none" )
            {
                var_7 = getclassindex( var_1 );
                var_6 = scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_4, var_7, "class", "extraPerks" );
            }
            else if ( var_2 || var_3 )
            {
                var_7 = getclassindex( var_1 );
                var_6 = table_getextraperk( level.classtablename, var_7, var_5 );
            }
            else
                var_6 = cac_getloadoutextraperk( self.class_num, var_5 );

            if ( isdefined( var_6 ) && var_6 != "specialty_null" )
                var_0.loadoutextraperks[var_0.loadoutextraperks.size] = var_6;
        }

        var_6 = "specialty_null";

        if ( var_4 != "none" )
        {
            var_7 = getclassindex( var_1 );
            var_6 = scripts\mp\utility\game::getmatchrulesdatawithteamandindex( "defaultClasses", var_4, var_7, "class", "archetypePerk" );
        }
        else
            var_6 = cac_getloadoutarchetypeperk();

        if ( isdefined( var_6 ) && var_6 != "specialty_null" )
        {
            var_0.loadoutperks[var_0.loadoutperks.size] = var_6;
            self.pers["loadoutRigTrait"] = var_6;
            var_0.loadoutrigtrait = var_6;
        }

        var_7 = getclassindex( var_1 );
        return;
    }
}

loadout_getclasstype( var_0 )
{
    var_1 = loadout_getclassteam( var_0 );

    if ( var_1 == "none" && !isdefined( var_0 ) )
        return "custom";

    if ( var_1 != "none" )
        return "team";
    else if ( issubstr( var_0, "custom" ) )
        return "custom";
    else if ( var_0 == "gamemode" )
        return "gamemode";
    else if ( issubstr( var_0, "custgamemode" ) )
        return "custgamemode";
    else if ( var_0 == "callback" )
        return "callback";
    else if ( var_0 == "juggernaut" )
        return "juggernaut";
    else if ( var_0 == "copied" )
        return "copied";
    else
        return "default";
}

_id_1194E( var_0, var_1 )
{
    var_2 = loadout_getclasstype( var_1 );

    switch ( var_2 )
    {
        case "team":
            break;
        case "custom":
            break;
        case "custgamemode":
            break;
        case "gamemode":
            _id_1194F( var_0, var_1 );
            break;
        case "callback":
            break;
        case "default":
            break;
        case "juggernaut":
            break;
    }

    return var_0;
}

loadout_updateclass( var_0, var_1 )
{
    if ( !isagent( self ) && self calloutmarkerping_getent() && getdvarint( "scr_forceHeadlessCustomization", 1 ) == 1 && scripts\mp\utility\game::getgametype() != "br" )
        var_1 = "default" + ( randomint( 5 ) + 1 );

    var_2 = loadout_getclasstype( var_1 );

    switch ( var_2 )
    {
        case "team":
            loadout_updateclassteam( var_0, var_1 );
            break;
        case "custom":
            loadout_updateclasscustom( var_0, var_1 );
            break;
        case "gamemode":
            loadout_updateclassgamemode( var_0, var_1 );
            break;
        case "custgamemode":
            zone_get_node_nearest_2d_bounds( var_0, var_1 );
            break;
        case "callback":
            loadout_updateclasscallback( var_0 );
            break;
        case "default":
            loadout_updateclassdefault( var_0, var_1 );
            break;
        case "juggernaut":
            break;
        case "copied":
            break;
    }

    if ( !istrue( game["isLaunchChunk"] ) )
        self.pers["defaultOperatorSkinIndex"] = scripts\mp\teams::pickdefaultoperatorskin( var_0.loadoutprimary );

    loadout_updatehasnvg( var_0 );
    loadout_updateclassfistweapons( var_0 );
    loadout_updatestreaktype( var_0 );
    loadout_updateabilities( var_0, var_1 );
    var_0 = loadout_validateclass( var_0, var_1 );

    if ( !isbot( self ) && isdefined( level.set_systems_init_flag ) && level.set_systems_init_flag )
        zvelscale( var_0 );
    else
        loadout_updateclassfinalweapons( var_0 );

    if ( isdefined( level._id_11C88 ) )
        self [[ level._id_11C88 ]]( var_0 );

    return var_0;
}

loadout_updateclassfistweapons( var_0 )
{
    if ( isdefined( level.set_systems_init_flag ) && level.set_systems_init_flag && issameweapon( var_0.loadoutprimary ) )
        var_0.loadoutprimary = var_0.loadoutprimary;
    else if ( var_0.loadoutprimary == "none" )
        var_0.loadoutprimary = "iw8_fists";

    if ( scripts\mp\utility\game::handle_carry_special_item() )
    {
        if ( var_0.loadoutsecondary == "none" )
            var_0.loadoutsecondary = "none";
    }
    else if ( var_0.loadoutsecondary == "none" && var_0.loadoutprimary != "iw8_fists" && !istrue( self.isjuggernaut ) )
        var_0.loadoutsecondary = "iw8_fists";
    else if ( var_0.loadoutprimary == "iw8_fists" && var_0.loadoutsecondary == "iw8_fists" )
        var_0.loadoutsecondary = "none";
}

loadout_updatehasnvg( var_0 )
{
    if ( scripts\cp_mp\utility\game_utility::isnightmap() )
        var_0.loadouthasnvg = 1;
}

loadout_validateclass( var_0, var_1 )
{
    var_2 = scripts\mp\utility\game::isanymlgmatch() && issubstr( var_1, "default" );

    if ( issubstr( var_1, "custom" ) || var_2 )
        return scripts\mp\validation::validateloadout( var_0 );

    return var_0;
}

loadout_forcearchetype( var_0 )
{
    var_1 = getdvarint( "forceArchetype", 0 );

    if ( var_1 > 0 )
    {
        var_2 = getdvarint( "forceArchetype", 0 );

        switch ( var_2 )
        {
            case 1:
                var_0.loadoutarchetype = "archetype_assault";
                break;
            default:
                var_0.loadoutarchetype = "archetype_assault";
                break;
        }
    }
    else if ( var_1 == -1 )
    {
        var_3 = [ "archetype_assault" ];
        var_4 = randomint( var_3.size );
        var_0.loadoutarchetype = var_3[var_4];
        self iprintlnbold( "Random Archetype: " + var_3[var_4] );
    }
}

loadout_updateplayerarchetype( var_0 )
{
    if ( !istrue( self.btestclient ) )
    {
        if ( !isdefined( level.aonrules ) || level.aonrules == 0 )
        {

        }
    }

    self.loadoutarchetype = var_0.loadoutarchetype;
    scripts\mp\weapons::updatemovespeedscale();
    var_1 = 1;
    var_2 = 2;
    var_3 = 4;
    var_4 = 8;
    var_5 = 0;
    var_6 = undefined;
    var_7 = undefined;
    var_8 = 400;
    var_9 = 400;
    var_10 = 900;

    if ( scripts\cp_mp\utility\game_utility::isrealismenabled() )
    {
        var_9 = 133.333;
        var_10 = 1800;
    }

    switch ( self.loadoutarchetype )
    {
        case "archetype_assault":
            var_5 = var_1 | var_2 | var_3;
            var_6 = scripts\mp\archetypes\archassault::applyarchetype;
            var_7 = "vestlight";
            self.clothtype = var_7;
            break;
        default:
            if ( !istrue( self.btestclient ) )
            {
                if ( !isdefined( level.aonrules ) || level.aonrules == 0 )
                {

                }
            }

            break;
    }

    self setcamerathirdperson( 0 );

    if ( getdvarint( "debug_iw7_backwards_compat" ) )
    {
        self allowdoublejump( var_5 & var_1 );
        self allowwallrun( var_5 & var_3 );
        self allowdodge( var_5 & var_4 );
    }
    else
    {
        self allowdoublejump( 0 );
        self allowwallrun( 0 );
        self allowdodge( 0 );
    }

    self allowslide( var_5 & var_2 );
    self allowlean( 0 );
    self energy_setmax( 0, var_8 );
    self energy_setenergy( 0, var_8 );
    self energy_setrestorerate( 0, var_9 );
    self energy_setresttimems( 0, var_10 );
    self energy_setmax( 1, 50 );
    self energy_setenergy( 1, 50 );
    self energy_setrestorerate( 1, 10 );
    self energy_setresttimems( 1, scripts\engine\utility::ter_op( scripts\mp\utility\game::isanymlgmatch(), 2500, 0 ) );

    if ( isdefined( var_6 ) )
        self [[ var_6 ]]();
}

loadout_updateclassfinalweapons( var_0 )
{
    if ( istrue( var_0._id_11960 ) )
        var_0.loadoutprimaryobject = fixsuperforbr( var_0.loadoutprimary, var_0.loadoutprimaryattachments, var_0.loadoutprimarycamo, var_0.loadoutprimaryreticle, var_0.loadoutprimaryvariantid, var_0.loadoutprimaryattachmentids, var_0.loadoutprimarycosmeticattachment, var_0.loadoutprimarystickers, istrue( var_0.loadouthasnvg ) );
    else
        var_0.loadoutprimaryobject = buildweapon( var_0.loadoutprimary, var_0.loadoutprimaryattachments, var_0.loadoutprimarycamo, var_0.loadoutprimaryreticle, var_0.loadoutprimaryvariantid, var_0.loadoutprimaryattachmentids, var_0.loadoutprimarycosmeticattachment, var_0.loadoutprimarystickers, istrue( var_0.loadouthasnvg ) );

    var_0.loadoutprimaryfullname = createheadicon( var_0.loadoutprimaryobject );

    if ( var_0.loadoutsecondary == "none" )
    {
        var_0.loadoutsecondaryfullname = "none";
        var_0.loadoutsecondaryobject = undefined;
    }
    else
    {
        if ( istrue( var_0._id_11961 ) )
            var_0.loadoutsecondaryobject = fixsuperforbr( var_0.loadoutsecondary, var_0.loadoutsecondaryattachments, var_0.loadoutsecondarycamo, var_0.loadoutsecondaryreticle, var_0.loadoutsecondaryvariantid, var_0.loadoutsecondaryattachmentids, var_0.loadoutsecondarycosmeticattachment, var_0.loadoutsecondarystickers, istrue( var_0.loadouthasnvg ) );
        else
            var_0.loadoutsecondaryobject = buildweapon( var_0.loadoutsecondary, var_0.loadoutsecondaryattachments, var_0.loadoutsecondarycamo, var_0.loadoutsecondaryreticle, var_0.loadoutsecondaryvariantid, var_0.loadoutsecondaryattachmentids, var_0.loadoutsecondarycosmeticattachment, var_0.loadoutsecondarystickers, istrue( var_0.loadouthasnvg ) );

        var_0.loadoutsecondaryfullname = createheadicon( var_0.loadoutsecondaryobject );
    }

    if ( var_0.loadoutmeleeslot != "none" )
    {
        self giveweapon( var_0.loadoutmeleeslot );
        self assignweaponmeleeslot( var_0.loadoutmeleeslot );
    }
}

loadout_updateplayerweapons( var_0, var_1, var_2, var_3 )
{
    var_4 = respawnitems_getrespawnitems();
    var_5 = respawnitems_hasweapondata( var_4 );
    var_6 = level.magcount;
    var_7 = loadout_giveprimaryweapon( var_0, var_4, var_5 );
    var_8 = loadout_givesecondaryweapon( var_0, var_4, var_5 );
    zombievehiclelaststand( var_0, var_7, var_8, var_4, var_5, var_6 );
    self.loadoutmeleeslot = var_0.loadoutmeleeslot;

    if ( !isdefined( var_7 ) )
        scripts\mp\utility\script::laststand_dogtags( var_0.loadoutprimary );

    if ( isdefined( var_7 ) && self hasweapon( var_7 ) )
        var_9 = var_7;
    else
        var_9 = var_8;

    if ( isdefined( var_8 ) && var_8.basename != "none" && isdefined( var_7 ) && var_7.basename == "iw8_fists_mp" )
        var_9 = var_8;

    if ( !isai( self ) )
        scripts\cp_mp\utility\inventory_utility::_switchtoweapon( var_9 );

    if ( !isdefined( var_2 ) || var_2 )
    {
        var_3 = shouldskipfirstraise( var_9, var_3 );

        if ( !isagent( self ) )
            self setspawnweapon( var_9, !var_3 );
    }

    self.spawnweaponobj = var_9;
    _id_11951();
}

zombierespawning()
{
    if ( isdefined( self.primaryweaponobj ) && !self hasweapon( self.primaryweaponobj ) )
    {
        loadout_giveprimaryweapon( self.classstruct );
        thread _id_13C58();
    }

    if ( isdefined( self.secondaryweaponobj ) && !self hasweapon( self.secondaryweaponobj ) )
    {
        loadout_givesecondaryweapon( self.classstruct );
        thread _id_13C58();
    }
}

loadout_giveprimaryweapon( var_0, var_1, var_2 )
{
    self.loadoutprimary = var_0.loadoutprimary;
    self.loadoutprimarycamo = var_0.loadoutprimarycamo;
    self.loadoutprimaryattachments = var_0.loadoutprimaryattachments;
    self.loadoutprimaryattachmentids = var_0.loadoutprimaryattachmentids;
    self.loadoutprimaryreticle = var_0.loadoutprimaryreticle;
    self.loadoutprimarylootitemid = var_0.loadoutprimarylootitemid;
    self.loadoutprimaryvariantid = var_0.loadoutprimaryvariantid;
    var_3 = zombiespawninair( "primary", var_0.loadoutprimaryobject, var_1, var_2 );
    self.primaryweapon = var_0.loadoutprimaryfullname;
    self.primaryweaponobj = var_0.loadoutprimaryobject;
    self.pers["primaryWeapon"] = var_0.loadoutprimaryfullname;
    return var_3;
}

loadout_givesecondaryweapon( var_0, var_1, var_2 )
{
    self.loadoutsecondary = var_0.loadoutsecondary;
    self.loadoutsecondarycamo = var_0.loadoutsecondarycamo;
    self.loadoutsecondaryattachments = var_0.loadoutsecondaryattachments;
    self.loadoutsecondaryattachmentids = var_0.loadoutsecondaryattachmentids;
    self.loadoutsecondaryreticle = var_0.loadoutsecondaryreticle;
    self.loadoutsecondarylootitemid = var_0.loadoutsecondarylootitemid;
    self.loadoutsecondaryvariantid = var_0.loadoutsecondaryvariantid;
    var_3 = zombiespawninair( "secondary", var_0.loadoutsecondaryobject, var_1, var_2 );
    self.secondaryweapon = var_0.loadoutsecondaryfullname;
    self.secondaryweaponobj = var_0.loadoutsecondaryobject;
    self.pers["secondaryWeapon"] = var_0.loadoutsecondaryfullname;
    return var_3;
}

zombiespawninair( var_0, var_1, var_2, var_3 )
{
    var_4 = undefined;

    if ( !istrue( var_3 ) )
        var_4 = var_1;
    else
        var_4 = respawnitems_getweaponobj( var_2, var_0 );

    if ( !getqueuedspleveltransients( var_4 ) )
    {
        if ( scripts\mp\riotshield::isriotshield( var_4 ) && !scripts\mp\flags::gameflag( "prematch_done" ) && isdefined( self.infil ) && !istrue( self.stopchallengetimers ) )
        {

        }
        else
        {
            var_4 = scripts\mp\weapons::updatesavedaltstate( var_4 );
            scripts\cp_mp\utility\inventory_utility::_giveweapon( var_4, undefined, undefined, 1 );
            scripts\mp\weapons::updatetogglescopestate( var_4 );
            scripts\mp\perks\weaponpassives::loadoutweapongiven( var_4 );
        }
    }

    return var_4;
}

zombievehiclelaststand( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = [];

    if ( isdefined( var_0.loadoutprimaryobject ) && var_0.loadoutprimaryobject.basename != "none" )
        var_6[var_6.size] = var_0.loadoutprimaryobject;

    if ( isdefined( var_0.loadoutsecondaryobject ) && var_0.loadoutsecondaryobject.basename != "none" )
        var_6[var_6.size] = var_0.loadoutsecondaryobject;

    foreach ( var_8 in var_6 )
        var_8.should_spawn_boss_one = var_8 hasattachment( "maxammo", 1 );

    if ( isdefined( level._id_11C73 ) )
        self [[ level._id_11C73 ]]( var_6 );
    else if ( istrue( var_4 ) )
    {
        respawnitems_giveweaponammo( var_3, "primary" );
        respawnitems_giveweaponammo( var_3, "secondary" );
    }
    else if ( var_5 != 3 )
    {
        if ( isdefined( var_1 ) )
            spawnammocountoverride_giveweaponammo( var_1, "primary", var_5 );

        if ( isdefined( var_2 ) )
            spawnammocountoverride_giveweaponammo( var_2, "secondary", var_5 );
    }
    else
    {
        foreach ( var_8 in var_6 )
        {
            if ( istrue( var_8.should_spawn_boss_one ) )
            {
                var_11 = weaponmaxammo( var_8 ) - weaponstartammo( var_8 );
                var_12 = self getweaponammostock( var_8 );
                self setweaponammostock( var_8, var_12 + var_11 );
            }
        }
    }

    if ( !istrue( var_4 ) && var_5 == 3 )
    {
        foreach ( var_8 in var_6 )
        {
            if ( istrue( var_8.hasalternate ) )
            {
                var_15 = var_8 getaltweapon();
                var_16 = weaponclass( var_15 );

                if ( var_16 == "grenade" && istrue( var_8.should_spawn_boss_one ) )
                    self setweaponammostock( var_15, 1 );
                else if ( var_16 == "spread" )
                    self setweaponammoclip( var_15, scripts\engine\utility::ter_op( istrue( var_8.should_spawn_boss_one ), 8, 6 ) );

                continue;
            }

            if ( scripts\mp\utility\weapon::turnexfiltoside( var_8 ) )
                self setweaponammostock( var_8, self getweaponammostock( var_8 ) + weaponclipsize( var_8 ) * 3 );
        }
    }
}

_id_11951()
{
    scripts\mp\weapons::updatemovespeedscale();
}

loadout_updateplayerperks( var_0 )
{
    loadout_giveperk( "specialty_selectivehearing" );

    if ( scripts\mp\utility\game::islaststandenabled() )
        scripts\mp\utility\perk::giveperk( "specialty_pistoldeath" );

    loadout_giveperk( "specialty_location_marking" );

    if ( scripts\cp_mp\utility\game_utility::isnightmap() )
        loadout_giveperk( "specialty_tracker_jammer" );

    if ( var_0.loadoutstandardperks.size > 0 )
    {
        var_1 = getdvarint( "scr_loadoutPerksOff", 0 ) == 0;

        if ( var_1 )
            scripts\mp\perks\perks::giveperks( var_0.loadoutperks, 0 );
    }

    self.pers["loadoutPerks"] = var_0.loadoutperks;
    self.pers["loadoutStandardPerks"] = var_0.loadoutstandardperks;
    self.pers["loadoutExtraPerks"] = var_0.loadoutextraperks;
    self.pers["loadoutRigTrait"] = var_0.loadoutrigtrait;
    self.pers["loadoutUsingSpecialist"] = var_0.loadoutusingspecialist;

    if ( isdefined( self.avoidkillstreakonspawntimer ) && self.avoidkillstreakonspawntimer > 0 )
        thread scripts\mp\perks\perks::giveperksafterspawn();

    if ( !isagent( self ) && scripts\mp\utility\dvars::getintproperty( "scr_showperksonspawn", 1 ) == 1 && game["state"] != "postgame" )
        scripts\mp\perks\perks::setomnvarsforperklist( "ui_spawn_perk_", self.pers["loadoutPerks"] );
}

loadout_updateplayerequipment( var_0 )
{
    var_1 = respawnitems_getrespawnitems();
    var_2 = respawnitems_hasequipmentdata( var_1 );
    self.loadoutequipmentprimary = var_0.loadoutequipmentprimary;
    self.loadoutequipmentsecondary = var_0.loadoutequipmentsecondary;
    var_3 = undefined;

    if ( !var_2 )
        var_3 = var_0.loadoutequipmentprimary;
    else
        var_3 = respawnitems_getequipmentref( var_1, "primary" );

    var_4 = undefined;

    if ( !var_2 )
        var_4 = var_0.loadoutequipmentsecondary;
    else
        var_4 = respawnitems_getequipmentref( var_1, "secondary" );

    scripts\mp\equipment::giveequipment( var_3, "primary" );
    scripts\mp\equipment::giveequipment( var_4, "secondary" );

    if ( var_2 )
    {
        respawnitems_giveequipmentammo( var_1, "primary" );
        respawnitems_giveequipmentammo( var_1, "secondary" );
    }

    if ( scripts\cp_mp\utility\game_utility::isnightmap() )
    {
        thread scripts\mp\equipment\nvg::runnvg();
        thread loadout_updateplayernvgs();
    }
}

loadout_updateplayernvgs()
{
    self endon( "death_or_disconnect" );
    self notify( "loadout_updatePlayerNVGs" );
    self endon( "loadout_updatePlayerNVGs" );
    var_0 = 0;

    if ( game["roundsPlayed"] == 0 && !istrue( self.hasspawned ) )
    {
        if ( !scripts\mp\flags::gameflag( "infil_will_run" ) || scripts\mp\flags::gameflag( "infil_started" ) )
            var_0 = 1;
    }
    else if ( istrue( self.pers["useNVG"] ) )
        var_0 = 1;

    if ( istrue( self.inspawncamera ) )
        scripts\engine\utility::_id_143A5( "spawned_player", "fadeUp_start" );

    while ( !isdefined( self.operatorcustomization ) )
        waitframe();

    if ( var_0 )
        self nightvisionviewon( 1 );

    scripts\mp\equipment\nvg::nvg_update3rdperson( var_0 );
}

loadout_updateplayersuper( var_0 )
{
    var_1 = scripts\cp_mp\vehicles\light_tank::light_tank_supported();

    if ( !var_1 && var_0.loadoutsuper == "super_bradley" )
        var_0.loadoutsuper = "super_pac_sentry";

    var_2 = var_0.loadoutsuper;
    var_3 = respawnitems_getrespawnitems();
    var_4 = respawnitems_hassuperdata( var_3 );

    if ( var_4 )
        var_2 = respawnitems_getsuperref( var_3 );

    if ( isdefined( scripts\mp\supers::getcurrentsuper() ) )
    {
        var_5 = scripts\mp\supers::getcurrentsuperref();

        if ( var_5 == var_2 && !haschangedarchetype() )
        {
            scripts\mp\supers::givesuperweapon( self.super );
            return;
        }
    }

    if ( var_2 == "none" || !level.allowsupers )
    {
        scripts\mp\supers::clearsuper();
        self.loadoutsuper = undefined;
    }
    else if ( level.allowsupers && isdefined( self.pers["gamemodeLoadout"] ) && isdefined( self.pers["gamemodeLoadout"]["loadoutSuper"] ) )
    {
        self.loadoutsuper = self.pers["gamemodeLoadout"]["loadoutSuper"];
        scripts\mp\supers::givesuper( self.loadoutsuper, 1 );
    }
    else if ( var_2 == "super_bradley" && !scripts\cp_mp\vehicles\light_tank::light_tank_supported() )
    {
        scripts\mp\supers::clearsuper();
        self.loadoutsuper = undefined;
    }
    else
    {
        self.loadoutsuper = var_0.loadoutsuper;
        scripts\mp\supers::givesuper( var_2, 1 );

        if ( var_4 )
        {
            scripts\mp\supers::setsuperbasepoints( respawnitems_getsuperpoints( var_3 ) );
            scripts\mp\supers::setsuperextrapoints( respawnitems_getsuperextrapoints( var_3 ) );
        }
    }
}

loadout_updateplayergesture( var_0 )
{
    if ( !istrue( self.btestclient ) )
    {
        if ( var_0.loadoutgesture != "none" )
        {
            self.loadoutgesture = var_0.loadoutgesture;
            scripts\cp_mp\gestures::givegesture( var_0.loadoutgesture );
        }
    }
}

zombiethermalon( var_0 )
{
    var_1 = getdvarint( "scr_t9_watch_suppression", 0 );

    if ( var_1 && isdefined( var_0.loadoutaccessorydata ) )
    {
        var_2 = scripts\mp\accessories::register_script_model_animation( var_0.loadoutaccessorydata );

        if ( isdefined( var_2 ) && var_2 == "t9" )
            return 1;
    }

    return 0;
}

loadout_updateplayeraccessory( var_0 )
{
    if ( !istrue( self.btestclient ) )
    {
        if ( isdefined( var_0.loadoutaccessoryweapon ) && var_0.loadoutaccessoryweapon != "none" )
        {
            if ( zombiethermalon( var_0 ) )
                return;

            self.loadoutaccessorydata = var_0.loadoutaccessorydata;
            self.loadoutaccessoryweapon = var_0.loadoutaccessoryweapon;
            scripts\mp\accessories::giveplayeraccessory( var_0.loadoutaccessorydata, var_0.loadoutaccessoryweapon, var_0.loadoutaccessorylogic );
        }
    }
}

loadout_updateplayerstreaktype( var_0 )
{
    self.streaktype = loadout_getplayerstreaktype( var_0.loadoutstreaktype );
}

loadout_updateplayerkillstreaks( var_0, var_1 )
{
    if ( !level.allowkillstreaks )
    {
        var_0.loadoutkillstreak1 = "none";
        var_0.loadoutkillstreak2 = "none";
        var_0.loadoutkillstreak3 = "none";
    }

    if ( var_0.loadoutstreaksfilled == 0 && isdefined( self.streakdata ) && self.streakdata.streaks.size > 0 && var_1 == "gamemode" )
    {
        var_2 = 0;

        foreach ( var_4 in self.streakdata.streaks )
        {
            if ( var_2 == 0 )
            {
                var_0.loadoutkillstreak1 = var_4;
                var_2++;
                continue;
            }

            if ( var_2 == 1 )
            {
                var_0.loadoutkillstreak2 = var_4;
                var_2++;
                continue;
            }

            if ( var_2 == 2 )
            {
                var_0.loadoutkillstreak3 = var_4;
                break;
            }
        }
    }

    if ( scripts\mp\utility\game::usefloorrocks() )
    {
        var_2 = 0;
        var_6 = getdvar( "scr_game_classtable_streak_override", "uav,precision_airstrike,directional_uav" );

        if ( var_6 != "" )
        {
            var_6 = strtok( var_6, "," );

            foreach ( var_4 in var_6 )
            {
                if ( var_2 == 0 )
                {
                    var_0.loadoutkillstreak1 = var_6[0];
                    var_2++;
                    continue;
                }

                if ( var_2 == 1 )
                {
                    var_0.loadoutkillstreak2 = var_6[1];
                    var_2++;
                    continue;
                }

                if ( var_2 == 2 )
                {
                    var_0.loadoutkillstreak3 = var_6[2];
                    break;
                }
            }
        }
    }

    if ( level.allowkillstreaks && getdvar( "scr_restrict_killstreaks", "" ) != "" )
    {
        var_9 = [];

        if ( getdvar( "scr_template_killstreaks", "" ) != "" )
        {
            var_9 = strtok( getdvar( "scr_template_killstreaks", "" ), " " );

            for ( var_10 = 0; var_10 < 3; var_10++ )
            {
                if ( var_10 < var_9.size )
                {
                    var_11 = var_9[var_10];

                    if ( !isdefined( level.killstreaksetups[var_11] ) )
                        var_9[var_10] = "none";

                    continue;
                }

                var_9[var_10] = "none";
            }
        }
        else
        {
            var_9[0] = "toma_strike";
            var_9[1] = "hover_jet";
            var_9[2] = "chopper_gunner";
        }

        var_12 = strtok( getdvar( "scr_restrict_killstreaks", "" ), " " );

        foreach ( var_14 in var_12 )
        {
            if ( var_0.loadoutkillstreak1 == var_14 )
            {
                var_0.loadoutkillstreak1 = var_9[0];
                continue;
            }

            if ( var_0.loadoutkillstreak2 == var_14 )
            {
                var_0.loadoutkillstreak2 = var_9[1];
                continue;
            }

            if ( var_0.loadoutkillstreak3 == var_14 )
                var_0.loadoutkillstreak3 = var_9[2];
        }
    }

    var_16 = [ var_0.loadoutkillstreak1, var_0.loadoutkillstreak2, var_0.loadoutkillstreak3 ];

    if ( level.allowkillstreaks )
    {
        self.pers["hackedStreaks"] = 0;
        var_16 = replacetankwithwheelson( var_0 );
    }

    self.loadoutusingspecialist = var_0.loadoutusingspecialist;
    self getfollowedplayer( self.loadoutusingspecialist );

    if ( var_0.loadoutusingspecialist && level.allowkillstreaks )
        var_16 = replacewithspecialistkillstreaks( var_0 );

    var_17 = respawnitems_getrespawnitems();
    var_18 = respawnitems_hasstreakdata( var_17 );

    if ( var_18 && level.allowkillstreaks )
        var_16 = respawnitems_getstreaks( var_17 );

    if ( level.allowkillstreaks )
        var_16 = sortkillstreaksbycost( var_16 );

    if ( !isagent( self ) )
    {
        var_19 = scripts\mp\killstreaks\killstreaks::arekillstreaksequipped( var_16 );

        if ( !var_19 )
        {
            self notify( "givingLoadout" );
            var_20 = scripts\mp\killstreaks\killstreaks::getgimmeslotkillstreakstructs();
            var_21 = scripts\mp\killstreaks\killstreaks::getavailableequippedkillstreakstructs();

            if ( !scripts\mp\utility\perk::_hasperk( "specialty_support_killstreaks" ) && !isdefined( self.earnedmaxkillstreak ) )
                scripts\mp\killstreaks\killstreaks::clearkillstreaks();

            for ( var_22 = 0; var_22 < var_16.size; var_22++ )
            {
                var_23 = var_16[var_22];

                if ( isdefined( var_23 ) && var_23 != "none" && var_23 != "" )
                    scripts\mp\killstreaks\killstreaks::equipkillstreak( var_23, var_22 + 1 );
            }

            for ( var_24 = var_20.size - 1; var_24 >= 0; var_24-- )
            {
                var_23 = var_20[var_24];

                if ( !var_23.isspecialist )
                    scripts\mp\killstreaks\killstreaks::awardkillstreakfromstruct( var_20[var_24], "other" );
            }

            for ( var_24 = 0; var_24 < var_21.size; var_24++ )
            {
                var_23 = var_21[var_24];

                if ( !var_23.isspecialist )
                    scripts\mp\killstreaks\killstreaks::awardkillstreakfromstruct( var_21[var_24], "other" );
            }
        }
    }

    self notify( "equipKillstreaksFinished" );
}

sortkillstreaksbycost( var_0 )
{
    for ( var_1 = 0; var_1 < var_0.size - 1; var_1++ )
    {
        if ( isdefined( var_0[var_1] ) && var_0[var_1] != "none" && var_0[var_1] != "" )
        {
            for ( var_2 = var_1 + 1; var_2 < var_0.size; var_2++ )
            {
                if ( isdefined( var_0[var_2] ) && var_0[var_2] != "none" && var_0[var_2] != "" )
                {
                    var_3 = scripts\mp\killstreaks\killstreaks::calcstreakcost( var_0[var_1] );
                    var_4 = scripts\mp\killstreaks\killstreaks::calcstreakcost( var_0[var_2] );

                    if ( var_4 < var_3 )
                    {
                        var_5 = var_0[var_2];
                        var_0[var_2] = var_0[var_1];
                        var_0[var_1] = var_5;
                    }
                }
            }
        }
    }

    return var_0;
}

loadout_updateplayeractionslots( var_0, var_1 )
{
    self setactionslot( 3, "altmode" );
}

loadout_updatefieldupgrades( var_0, var_1 )
{
    if ( var_1 == "juggernaut" )
        return;

    self.loadoutfieldupgrade1 = var_0.loadoutfieldupgrade1;
    self.loadoutfieldupgrade2 = var_0.loadoutfieldupgrade2;

    if ( setgamebattleplayerstats( self.loadoutfieldupgrade1 ) )
        self.loadoutfieldupgrade1 = "super_deadsilence";

    if ( setgamebattleplayerstats( self.loadoutfieldupgrade2 ) )
        self.loadoutfieldupgrade2 = "super_deadsilence";

    if ( scripts\mp\utility\game::isanymlgmatch() || self.loadoutfieldupgrade1 == self.loadoutfieldupgrade2 )
        self.loadoutfieldupgrade2 = "none";

    if ( level.allowsupers )
    {
        var_2 = scripts\cp_mp\utility\game_utility::getmapname();

        if ( issubstr( var_2, "mp_m_" ) && var_2 != "mp_m_speed" )
        {
            self.loadoutfieldupgrade1 = player_give_killstreak( self.loadoutfieldupgrade1 );
            self.loadoutfieldupgrade2 = player_give_killstreak( self.loadoutfieldupgrade2 );

            if ( self.loadoutfieldupgrade1 == self.loadoutfieldupgrade2 )
                self.loadoutfieldupgrade2 = "none";
        }

        thread scripts\mp\supers::watchplayersuperdelayweapon();
        thread scripts\mp\perks\perkpackage::perkpackage_initperkpackages();

        if ( scripts\mp\utility\game::getgametype() == "br" )
        {
            var_3 = player_get_carepackage_sentry( self.loadoutfieldupgrade1 );

            if ( isdefined( level.forcegivesuper ) )
            {
                self [[ level.forcegivesuper ]]( var_3 );
                return;
            }

            return;
        }
    }
    else if ( scripts\mp\utility\game::getgametype() == "br" )
    {
        self._id_11954 = player_get_carepackage_sentry( self.loadoutfieldupgrade1 );

        if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        {
            if ( isdefined( level.forcegivesuper ) )
                self [[ level.forcegivesuper ]]( "super_ammo_drop" );
        }

        self.loadoutfieldupgrade1 = "none";
        self.loadoutfieldupgrade2 = "none";

        if ( getdvarint( "scr_disablePerks", 0 ) == 0 )
            scripts\mp\perks\perkpackage::perkpackage_initpersdata();
    }
}

player_get_carepackage_sentry( var_0 )
{
    if ( !isdefined( var_0 ) || var_0 == "none" )
        return "super_ammo_drop";

    return var_0;
}

player_give_killstreak( var_0 )
{
    switch ( var_0 )
    {
        case "super_weapon_drop":
        case "super_emp_drone":
        case "super_recon_drone":
            var_0 = "super_ammo_drop";
            break;
        default:
            break;
    }

    return var_0;
}

loadout_updateplayer( var_0, var_1, var_2, var_3, var_4 )
{
    loadout_updateplayerstreaktype( var_1 );
    loadout_updateplayerarchetype( var_1 );

    if ( !istrue( level.noweaponsonstart ) )
        loadout_updateplayerweapons( var_1, var_2, var_3, var_4 );

    loadout_updateplayerperks( var_1 );

    if ( !istrue( level.noweaponsonstart ) )
        loadout_updateplayerequipment( var_1 );

    if ( !istrue( game["isLaunchChunk"] ) && scripts\mp\utility\game::getgametype() != "br" )
        loadout_updateplayerkillstreaks( var_1, var_2 );

    loadout_updateplayeractionslots( var_1, var_2 );

    if ( !istrue( game["isLaunchChunk"] ) )
        loadout_updatefieldupgrades( var_0, var_2 );

    self.pers["lastClass"] = self.class;
    self.lastclass = self.class;
    self.lastarchetypeinfo = self.changedarchetypeinfo;

    if ( isdefined( self.gamemode_chosenclass ) )
    {
        self.pers["class"] = self.gamemode_chosenclass;
        self.pers["lastClass"] = self.gamemode_chosenclass;
        self.class = self.gamemode_chosenclass;
        self.lastclass = self.gamemode_chosenclass;
        self.gamemode_chosenclass = undefined;
    }

    if ( isdefined( self.revive_chosenclass ) )
    {
        self.pers["class"] = self.revive_chosenclass;
        self.pers["lastClass"] = self.revive_chosenclass;
        self.class = self.revive_chosenclass;
        self.lastclass = self.revive_chosenclass;
    }

    scripts\mp\teams::setupplayermodel();
    loadout_updateplayeraccessory( var_1 );
}

setmlgspectatorclientloadoutdata( var_0, var_1 )
{
    if ( isagent( var_0 ) )
        return;

    var_0 endon( "disconnect" );
    var_0 notify( "setMLGSpectatorClientLoadoutData()" );
    var_0 endon( "setMLGSpectatorClientLoadoutData()" );
    var_0 updatemlgammoinfo();
    var_0 disableplayeruseforallplayers( level.laststand );
    var_0 setclientweaponinfo( 0, var_1.loadoutprimaryfullname );
    var_0 setclientweaponinfo( 1, var_1.loadoutsecondaryfullname );

    if ( isdefined( self.equipment["primary"] ) )
    {
        var_2 = scripts\mp\equipment::getequipmenttableinfo( self.equipment["primary"] );
        var_0 setclientloadoutinfo( "primaryPower", var_2.id );
    }

    if ( isdefined( self.equipment["secondary"] ) )
    {
        var_3 = scripts\mp\equipment::getequipmenttableinfo( self.equipment["secondary"] );
        var_0 setclientloadoutinfo( "secondaryPower", var_3.id );
    }

    if ( scripts\mp\codcasterclientmatchdata::shouldlogcodcasterclientmatchdata() )
    {
        var_4 = scripts\mp\codcasterclientmatchdata::getcodcasterplayervalue( var_0, "damageDone" );
        scripts\mp\codcasterclientmatchdata::setcodcasterplayervalue( var_0, "damageDone", var_4 );
    }

    if ( isdefined( self.loadoutfieldupgrade1 ) )
        var_0 setclientloadoutinfo( "fieldUpgrade", scripts\mp\supers::getsuperid( self.loadoutfieldupgrade1 ) );

    var_5 = scripts\mp\supers::getsuperid( var_1.loadoutsuper );
    var_0 setclientloadoutinfo( "super", var_5 );

    if ( isai( var_0 ) )
    {
        for ( var_6 = 0; var_6 < var_1.loadoutperks.size; var_6++ )
        {
            var_7 = var_1.loadoutperks[var_6];
            var_8 = scripts\mp\perks\perks::getperkid( var_7 );
            var_0 setclientloadoutinfo( var_6 + 1 + "_perk", var_8 );
        }
    }
    else
    {
        if ( var_1.loadoutperksfromgamemode )
            var_1.loadoutstandardperks = var_1.loadoutperks;

        for ( var_6 = 0; var_6 < self.pers["loadoutPerks"].size; var_6++ )
        {
            var_7 = self.pers["loadoutPerks"][var_6];
            var_8 = scripts\mp\perks\perks::getperkid( var_7 );
            var_0 setclientloadoutinfo( var_6 + 1 + "_perk", var_8 );
        }

        for ( var_6 = 0; var_6 < var_1.loadoutextraperks.size; var_6++ )
        {
            var_7 = var_1.loadoutextraperks[var_6];
            var_8 = scripts\mp\perks\perks::getperkid( var_7 );
            var_0 setclientloadoutinfo( var_6 + 1 + "_extraPerk", var_8 );
        }
    }

    var_9 = var_1.loadoutrigtrait;
    var_10 = scripts\mp\perks\perks::getperkid( var_9 );
    var_0 setclientloadoutinfo( "rigTrait", var_10 );
    var_11 = scripts\mp\archetypes\archcommon::getrigindexfromarchetyperef( var_1.loadoutarchetype );
    var_0 setclientloadoutinfo( "archetype", var_11 );
}

shouldallowinstantclassswap()
{
    if ( scripts\cp_mp\utility\player_utility::isinvehicle( 1 ) || istrue( self.isjuggernaut ) )
        disableclassswapallowed();

    if ( !isdefined( self.instantclassswapallowed ) )
        return 1;

    return self.instantclassswapallowed;
}

swaploadout()
{
    if ( scripts\engine\utility::ent_flag_exist( "swapLoadout_blocked" ) && scripts\engine\utility::ent_flag( "swapLoadout_blocked" ) )
    {
        self endon( "death_or_disconnect" );
        self endon( "joined_team" );
        self endon( "joined_spectators" );
        self notify( "swapLoadout" );
        self endon( "swapLoadout" );

        if ( !scripts\engine\utility::ent_flag( "swapLoadout_pending" ) )
            scripts\engine\utility::ent_flag_set( "swapLoadout_pending" );

        self waittill( "swapLoadout_blocked" );
    }

    setclass( self.pers["class"] );
    self.tag_stowed_back = undefined;
    self.tag_stowed_hip = undefined;
    scripts\mp\weapons::savetogglescopestates();
    scripts\mp\weapons::savealtstates();

    if ( scripts\mp\utility\game::allowclasschoice() )
        scripts\mp\utility\stats::incpersstat( "classChanges", 1 );

    giveloadout( self.pers["team"], self.pers["class"], undefined, 1 );
    var_0 = scripts\mp\utility\game::unset_relic_grounded() && !scripts\mp\flags::gameflag( "prematch_done" );

    if ( var_0 && isdefined( level.calculateclientmatchdataextrainfopayload ) )
        self [[ level.calculateclientmatchdataextrainfopayload ]]();

    if ( scripts\engine\utility::ent_flag_exist( "swapLoadout_pending" ) && scripts\engine\utility::ent_flag( "swapLoadout_pending" ) )
    {
        scripts\engine\utility::ent_flag_clear( "swapLoadout_pending" );
        scripts\engine\utility::ent_flag_set( "swapLoadout_complete" );
    }
}

giveloadout( var_0, var_1, var_2, var_3, var_4 )
{
    self notify( "giveLoadout_start" );
    self.gettingloadout = 1;

    if ( isdefined( self.perks ) )
        self.oldperks = self.perks;

    loadout_clearplayer( var_3 );
    var_5 = zombiesignorevehicleexplosions();
    var_5 = _id_1194E( var_5, var_1 );
    self.select_bridge_two_spawners = var_5;
    var_6 = undefined;

    if ( isdefined( self.preloadedclassstruct ) )
    {
        var_6 = self.preloadedclassstruct;
        self.preloadedclassstruct = undefined;
        self.class_num = getclassindex( var_1 );

        if ( scripts\mp\flags::gameflag( "prematch_done" ) )
            self setmoverantilagged( self.class_num );
    }
    else
    {
        var_6 = loadout_getclassstruct();
        var_6 = loadout_updateclass( var_6, var_1 );
    }

    self.classstruct = var_6;
    loadout_updateplayer( var_5, var_6, var_1, var_2, var_4 );

    if ( var_1 != "juggernaut" )
    {
        if ( scripts\mp\flags::gameflag( "prematch_done" ) )
            loadout_lognewlygivenloadout( var_5, var_6, var_1 );
    }

    self.gettingloadout = 0;
    respawnitems_clear();
    self notify( "changed_kit" );
    self notify( "giveLoadout" );
    scripts\mp\rank::tryresetrankxp();

    if ( !istrue( game["isLaunchChunk"] ) && !isagent( self ) )
        scripts\mp\killstreaks\killstreaks::resetforloadoutswitch();

    scripts\mp\playerlogic::trydisableminimap();
}

loadout_lognewlygivenloadout( var_0, var_1, var_2 )
{
    if ( !isplayer( self ) && !isalive( self ) )
        return;

    if ( isagent( self ) )
        return;

    if ( level.codcasterenabled )
        thread setmlgspectatorclientloadoutdata( self, var_1 );

    if ( getdvarint( "TLRPKRKMS" ) == 0 )
        return;

    if ( var_1.uavbestid )
    {
        var_3 = 99;
        var_4 = "copied";
    }
    else
    {
        var_3 = getclassindex( var_2 );
        var_4 = loadout_getclasstype( var_2 );
        var_5 = getsubstr( var_2, 0, 7 ) == "default";

        if ( var_5 )
            var_3 = var_3 + 20;
    }

    var_6 = var_1.tweakedbyplayerduringmatch || var_1.gamemodeforcednewloadout;
    var_1.tweakedbyplayerduringmatch = 0;
    var_1.gamemodeforcednewloadout = 0;
    var_7 = 0;

    if ( !isdefined( self.pers["loggedClasses"] ) )
        self.pers["loggedClasses"] = [];

    var_8 = -1;

    foreach ( var_12, var_10 in self.pers["loggedClasses"] )
    {
        var_11 = self.pers["loggedClasses"][var_12];

        if ( var_11 == var_3 )
        {
            if ( var_6 )
            {
                var_7 = var_7 + 1;
                continue;
            }

            var_8 = var_12;
        }
    }

    if ( var_8 == -1 || var_1.uavbestid )
    {
        var_8 = self.pers["loggedClasses"].size;
        self.pers["loggedClasses"][var_8] = var_3;
        loadout_logloadout( var_0, var_1, var_8, var_7, var_4 );
    }

    self.loadoutindex = var_8;
}

loadout_logloadout( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = 1;
    var_6 = var_4;
    var_7 = var_3;

    if ( isdefined( self.matchdatalifeindex ) )
        var_8 = self.matchdatalifeindex;
    else
        var_8 = -1;

    var_9 = scripts\mp\matchdata::gettimefrommatchstart( gettime() );
    var_10 = var_1.loadoutprimary;
    var_11 = [];

    for ( var_12 = 0; var_12 < 10; var_12++ )
    {
        var_11[var_12] = var_1.loadoutprimaryattachments[var_12];

        if ( !isdefined( var_11[var_12] ) )
            var_11[var_12] = "";
    }

    var_13 = var_1.loadoutprimarycamo;
    var_14 = var_1.loadoutprimaryreticle;
    var_15 = var_1.loadoutprimarylootitemid;
    var_16 = var_1.loadoutprimaryvariantid;
    var_17 = var_1.loadoutsecondary;
    var_18 = [];

    for ( var_12 = 0; var_12 < 10; var_12++ )
    {
        var_18[var_12] = var_1.loadoutsecondaryattachments[var_12];

        if ( !isdefined( var_18[var_12] ) )
            var_18[var_12] = "";
    }

    var_19 = var_1.loadoutsecondarycamo;
    var_20 = var_1.loadoutsecondaryreticle;
    var_21 = var_1.loadoutsecondarylootitemid;
    var_22 = var_1.loadoutsecondaryvariantid;
    var_23 = var_1.loadoutequipmentprimary;
    var_24 = var_1.loadoutequipmentsecondary;
    var_25 = [];
    var_26 = 3;

    for ( var_27 = 0; var_27 < var_26; var_27++ )
    {
        var_28 = "specialty_null";

        if ( isdefined( var_1.loadoutstandardperks[var_27] ) )
            var_28 = var_1.loadoutstandardperks[var_27];

        var_25[var_27] = var_28;
    }

    var_29 = [];
    var_30 = var_1.loadoutextraperks.size;

    if ( var_30 > 3 )
        var_30 = 3;

    for ( var_27 = 0; var_27 < var_30; var_27++ )
        var_29[var_27] = var_1.loadoutextraperks[var_27];

    for ( var_27 = 0; var_27 < 3; var_27++ )
    {
        if ( !isdefined( var_29[var_27] ) )
            var_29[var_27] = "null";
    }

    self dlog_recordplayerevent( "dlog_event_player_loadout", [ "loadout_index", var_2, "class_type", var_6, "mid_match_edit_count", var_7, "first_use_life_index", var_8, "time_ms_from_match_start", var_9, "primary_weapon_setup_weapon", var_10, "primary_weapon_setup_attachment_0", var_11[0], "primary_weapon_setup_attachment_1", var_11[1], "primary_weapon_setup_attachment_2", var_11[2], "primary_weapon_setup_attachment_3", var_11[3], "primary_weapon_setup_attachment_4", var_11[4], "primary_weapon_setup_camo", var_13, "primary_weapon_setup_reticle", var_14, "primary_weapon_setup_loot_item_id", var_15, "primary_weapon_setup_variant_id", var_16, "secondary_weapon_setup_weapon", var_17, "secondary_weapon_setup_attachment_0", var_18[0], "secondary_weapon_setup_attachment_1", var_18[1], "secondary_weapon_setup_attachment_2", var_18[2], "secondary_weapon_setup_attachment_3", var_18[3], "secondary_weapon_setup_attachment_4", var_18[4], "secondary_weapon_setup_camo", var_19, "secondary_weapon_setup_reticle", var_20, "secondary_weapon_setup_loot_item_id", var_21, "secondary_weapon_setup_variant_id", var_22, "primary_grenade", var_23, "tactical_gear", var_24, "loadout_perk_0", var_25[0], "loadout_perk_1", var_25[1], "loadout_perk_2", var_25[2], "extra_loadout_perk_0", var_29[0], "extra_loadout_perk_1", var_29[1], "extra_loadout_perk_2", var_29[2], "killstreak_0", var_1.loadoutkillstreak1, "killstreak_1", var_1.loadoutkillstreak2, "killstreak_2", var_1.loadoutkillstreak3, "field_upgrade_0", var_0.loadoutfieldupgrade1, "field_upgrade_1", var_0.loadoutfieldupgrade2 ] );
}

hasvalidationinfraction()
{
    return isdefined( self.pers ) && isdefined( self.pers["validationInfractions"] ) && self.pers["validationInfractions"] > 0;
}

recordvalidationinfraction()
{
    if ( isdefined( self.pers ) && isdefined( self.pers["validationInfractions"] ) )
        self.pers["validationInfractions"] = self.pers["validationInfractions"] + 1;
}

_detachall( var_0 )
{
    if ( !istrue( var_0 ) )
        self.headmodel = undefined;

    if ( isdefined( self.riotshieldmodel ) )
        scripts\mp\riotshield::riotshield_detach( 1 );

    if ( isdefined( self.riotshieldmodelstowed ) )
        scripts\mp\riotshield::riotshield_detach( 0 );

    if ( !istrue( var_0 ) )
        self detachall();

    scripts\mp\equipment\nvg::clearnvg( istrue( var_0 ) );
}

trackriotshield_ontrophystow()
{
    self endon( "death_or_disconnect" );
    self endon( "faux_spawn" );

    for (;;)
    {
        self waittill( "grenade_pullback", var_0 );

        if ( var_0.basename != "trophy_mp" )
            continue;

        if ( !isdefined( self.riotshieldmodel ) )
            continue;

        scripts\mp\riotshield::riotshield_move( 1 );
        self waittill( "offhand_end" );

        if ( scripts\mp\riotshield::isriotshield( self getcurrentweapon() ) && isdefined( self.riotshieldmodelstowed ) )
            scripts\mp\riotshield::riotshield_move( 0 );
    }
}

valuehud( var_0 )
{
    if ( isdefined( var_0 ) && var_0.basename != "none" )
    {
        if ( scripts\mp\utility\weapon::issuperweapon( var_0.basename ) )
            return 1;

        var_1 = scripts\mp\utility\weapon::getequipmenttype( var_0.basename );

        if ( isdefined( var_1 ) && var_1 == "lethal" )
            return 1;
    }

    return 0;
}

_id_13C57()
{
    for (;;)
    {
        self waittill( "grenade_pullback", var_0 );

        if ( !nullweapon( var_0 ) && var_0.basename == "c4_mp_p" && scripts\mp\riotshield::isriotshield( self getcurrentweapon() ) )
            self._id_1207E = 1;

        waitframe();
    }
}

_id_13C5D()
{
    if ( !istrue( self._id_1207E ) )
    {
        var_0 = self getheldoffhand();

        if ( !nullweapon( var_0 ) && var_0.basename != "c4_mp_p" && scripts\mp\riotshield::isriotshield( self getcurrentweapon() ) && valuehud( var_0 ) )
            self._id_1207E = 1;
    }
}

_id_13C5F()
{
    self._id_12D52 = undefined;
    self._id_12D51 = undefined;

    for (;;)
    {
        self waittill( "weapon_switch_started", var_0 );

        if ( !scripts\mp\riotshield::isriotshield( var_0 ) )
        {
            self._id_12D52 = gettime() + 200;
            continue;
        }

        self._id_12D52 = undefined;
        self._id_12D51 = undefined;
    }
}

_id_13C5E()
{
    for (;;)
    {
        self waittill( "weapon_switch_canceled", var_0 );
        waittillframeend;

        if ( scripts\mp\riotshield::isriotshield( var_0 ) )
        {
            self._id_12D52 = undefined;
            self._id_12D51 = undefined;
        }
    }
}

_id_13C58( var_0 )
{
    self notify( "trackRiotShield_monitorShieldAttach" );
    self endon( "trackRiotShield_monitorShieldAttach" );
    self endon( "death_or_disconnect" );
    self endon( "faux_spawn" );
    self endon( "riotshield_detach" );

    if ( isdefined( self.infil ) )
        scripts\mp\flags::gameflagwait( "prematch_done" );

    childthread _id_13C57();

    if ( isdefined( var_0 ) )
        self._id_1443A = var_0;
    else if ( !isdefined( self._id_1443A ) )
        self._id_1443A = 0;

    while ( scripts\mp\riotshield::riotshield_hasweapon() )
    {
        _id_13C5D();

        if ( !istrue( self.inlaststand ) )
        {
            if ( self._id_1443A )
            {
                self.watch_for_heli_bosses_dead = 1;
                self.watch_for_heli_death = gettime() + 1000;
            }
            else if ( isdefined( self.watch_for_heli_death ) && gettime() >= self.watch_for_heli_death )
            {
                self.watch_for_heli_bosses_dead = undefined;
                self.watch_for_heli_death = undefined;
            }

            self._id_1443A = 0;
        }
        else
        {
            self.watch_for_heli_bosses_dead = undefined;
            self.watch_for_heli_death = undefined;
            self._id_1443A = 1;
        }

        if ( self isonladder() )
            _id_13C5A();
        else if ( self isinexecutionattack() )
            _id_13C5A();
        else if ( self isinexecutionvictim() )
            _id_13C5B();
        else if ( self isparachuting() || self isskydiving() )
            _id_13C5A();
        else if ( istrue( self.watch_for_heli_bosses_dead ) )
            _id_13C5A();
        else if ( istrue( self._id_1207E ) )
        {
            if ( nullweapon( self getheldoffhand() ) )
            {
                self._id_1207E = undefined;
                _id_13C5C();
            }
            else
                _id_13C5A();
        }
        else
            _id_13C5C();

        waitframe();
    }

    _id_13C5C();
}

_id_13C5A()
{
    var_0 = isdefined( self.riotshieldmodel );
    var_1 = isdefined( self.riotshieldmodelstowed );

    if ( !var_1 )
    {
        if ( var_0 )
            scripts\mp\riotshield::riotshield_move( 1 );
        else
            scripts\mp\riotshield::riotshield_attach( 0, scripts\mp\riotshield::riotshield_getmodel() );
    }
}

_id_13C59()
{
    var_0 = isdefined( self.riotshieldmodel );
    var_1 = isdefined( self.riotshieldmodelstowed );

    if ( !var_0 )
    {
        if ( var_1 )
            scripts\mp\riotshield::riotshield_move( 0 );
        else
            scripts\mp\riotshield::riotshield_attach( 1, scripts\mp\riotshield::riotshield_getmodel() );
    }
}

_id_13C5B()
{
    var_0 = isdefined( self.riotshieldmodel );
    var_1 = isdefined( self.riotshieldmodelstowed );

    if ( var_0 )
        scripts\mp\riotshield::riotshield_detach( 1 );

    if ( var_1 )
        scripts\mp\riotshield::riotshield_detach( 0 );
}

_id_13C5C()
{
    if ( scripts\mp\riotshield::riotshield_hasweapon() )
    {
        var_0 = scripts\mp\riotshield::isriotshield( self getcurrentweapon() );

        if ( var_0 )
        {
            _id_13C59();
            return;
        }

        _id_13C5A();
        return;
    }
    else
    {
        var_1 = isdefined( self.riotshieldmodel );
        var_2 = isdefined( self.riotshieldmodelstowed );

        if ( var_1 )
            scripts\mp\riotshield::riotshield_detach( 1 );

        if ( var_2 )
            scripts\mp\riotshield::riotshield_detach( 0 );
    }
}

riotshieldonweaponchange( var_0 )
{
    if ( scripts\mp\riotshield::riotshield_hasweapon() )
        thread _id_13C58();
    else
    {
        _id_13C5C();
        _id_12D4E();
        self notify( "riotshield_detach" );
    }
}

_id_12D4E( var_0 )
{
    self.watch_for_heli_bosses_dead = undefined;
    self.watch_for_heli_death = undefined;
    self._id_1443A = undefined;

    if ( istrue( var_0 ) )
    {
        self.hasriotshield = undefined;
        self.hasriotshieldequipped = undefined;
        self.riotshieldmodel = undefined;
        self.riotshieldmodelstowed = undefined;
    }
}

fixsuperforbr( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    var_9 = buildweaponassetname( var_0, var_4 );
    var_10 = scripts\mp\utility\weapon::weaponattachcustomtoidmap( var_0, var_4 );

    if ( !isdefined( var_10 ) )
        var_10 = [];

    var_11 = [];

    foreach ( var_16, var_13 in var_10 )
    {
        var_14 = scripts\mp\utility\weapon::attachmentmap_tounique( var_16, var_9 );
        var_15 = scripts\mp\utility\weapon::carryiteminfo( var_14 );

        if ( isdefined( var_15 ) )
            var_11[var_15] = 1;
    }

    if ( isdefined( var_1 ) )
    {
        foreach ( var_19, var_16 in var_1 )
        {
            if ( var_11.size > 0 )
            {
                var_14 = scripts\mp\utility\weapon::attachmentmap_tounique( var_16, var_9 );
                var_15 = scripts\mp\utility\weapon::carryitemomnvar( var_14 );

                if ( isdefined( var_11[var_15] ) )
                    continue;
            }

            var_18 = 0;

            if ( isdefined( var_5 ) && isdefined( var_5[var_19] ) )
                var_18 = var_5[var_19];

            var_10[var_16] = var_18;
        }
    }

    return buildweapon_attachmentidmap( var_0, var_10, var_2, var_3, var_4, var_6, var_7, var_8 );
}

fixcollision( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = scripts\mp\utility\weapon::weaponattachcustomtoidmap( var_0, var_3 );

    if ( !isdefined( var_7 ) )
        var_7 = [];

    return buildweapon_attachmentidmap( var_0, var_7, var_1, var_2, var_3, var_4, var_5, var_6 );
}

buildweapon_attachmentidmap( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = [];
    var_9 = [];

    foreach ( var_12, var_11 in var_1 )
    {
        var_8[var_8.size] = var_12;
        var_9[var_9.size] = var_11;
    }

    return buildweapon( var_0, var_8, var_2, var_3, var_4, var_9, var_5, var_6, var_7 );
}

buildweapon( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    if ( isdefined( var_1 ) )
    {

    }
    else
        var_1 = [];

    if ( !isdefined( var_2 ) )
        var_2 = "none";

    if ( isdefined( var_4 ) && var_4 <= 0 )
        var_4 = undefined;

    var_9 = buildweaponassetname( var_0, var_4 );
    var_10 = buildweaponattachmentidmap( var_1, var_5 );

    if ( istrue( var_8 ) )
    {
        if ( scripts\mp\utility\weapon::weaponsupportslaserir( var_9 ) )
        {
            var_11 = scripts\mp\utility\weapon::getweaponnvgattachment( var_9 );

            if ( !isdefined( var_10[var_11] ) )
            {
                if ( var_10.size > 0 )
                    var_10[var_11] = 0;
            }
        }
    }

    var_12 = buildweaponuniqueattachmenttoidmap( var_0, var_10, var_4 );

    if ( isdefined( var_6 ) && var_6 != "none" )
    {
        var_6 = player_get_secondary_weapon_object( var_6 );
        var_12[var_6] = 0;
    }

    var_12 = filterinvalidattachmentsfromidmap( var_12, var_9 );
    var_12 = getbrendsplashpostgamestate( var_12, var_9 );

    if ( !isdefined( var_9 ) || var_9 == "" )
        scripts\mp\utility\script::laststand_dogtags( "buildWeapon - bad weaponAssetName - rootName: " + scripts\engine\utility::ter_op( isdefined( var_0 ), var_0, "null" ) + ", variant: " + scripts\engine\utility::ter_op( isdefined( var_4 ), var_4, "none" ) );

    var_13 = getcompleteweaponname( var_9, [], undefined, var_2, var_4 );

    if ( isdefined( var_9 ) && !isdefined( var_13 ) )
        scripts\mp\utility\script::laststand_dogtags( "buildWeapon - null weapon: weaponAssetName = " + var_9 + ", rootName = " + scripts\engine\utility::ter_op( isdefined( var_0 ), var_0, "null" ) + ", variant = " + scripts\engine\utility::ter_op( isdefined( var_4 ), var_4, "none" ) );

    foreach ( var_16, var_15 in var_12 )
        var_13 = var_13 withattachment( var_16, var_15 );

    if ( isdefined( var_7 ) )
    {
        for ( var_17 = 0; var_17 < var_7.size; var_17++ )
        {
            var_18 = var_7[var_17];

            if ( var_18 == "none" )
                continue;

            if ( "i/" != getsubstr( var_18, 0, 2 ) )
                var_18 = "i/" + var_7[var_17];

            var_13 = var_13 setsticker( var_17, var_18 );
        }
    }

    if ( isdefined( var_13.scope ) && !isstartstr( var_13.scope, "ironsdefault" ) )
    {
        var_19 = getreticleindex( var_3 );

        if ( isdefined( var_19 ) )
            var_13 = var_13 withreticle( var_19 );
    }

    return var_13;
}

player_get_secondary_weapon_object( var_0 )
{
    switch ( var_0 )
    {
        case "t9_charm_rebirthIsland_01":
            var_0 = "t9_charm_rebirthisland_01";
        default:
            break;
    }

    return var_0;
}

buildweaponattachmentidmap( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_5, var_4 in var_0 )
    {
        if ( isdefined( var_1 ) && var_5 < var_1.size )
        {
            var_2[var_4] = var_1[var_5];
            continue;
        }

        var_2[var_4] = 0;
    }

    return var_2;
}

buildweaponuniqueattachmenttoidmap( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1 ) )
        var_1 = [];

    var_1 = scripts\engine\utility::array_remove_key( var_1, "none" );
    var_3 = scripts\mp\utility\weapon::weaponattachdefaulttoidmap( var_0, var_2 );
    var_4 = buildweaponassetname( var_0, var_2 );
    var_5 = [];

    if ( isdefined( var_3 ) )
        var_5 = combinedefaultandcustomattachmentidmaps( var_3, var_1 );

    var_6 = [];

    if ( var_5.size > 0 )
    {
        var_5 = filterattachmenttoidmap( var_5, var_0 );

        foreach ( var_10, var_8 in var_5 )
        {
            var_9 = scripts\mp\utility\weapon::attachmentmap_tounique( var_10, var_4 );
            var_6[var_9] = var_8;
        }
    }

    var_11 = [];
    var_12 = 0;
    var_13 = undefined;

    foreach ( var_20, var_8 in var_6 )
    {
        var_15 = scripts\mp\utility\weapon::attachmentmap_toextra( var_20 );

        if ( isdefined( var_15 ) )
        {
            var_16 = 0;

            if ( isdefined( var_2 ) )
            {
                var_17 = scripts\mp\utility\weapon::attachmentmap_tobase( var_15 );
                var_16 = scripts\mp\utility\weapon::attachmentmap_extratovariantid( var_17, var_0, var_2 );
            }
            else if ( var_8 != 0 )
                var_16 = var_8;

            var_18 = scripts\mp\utility\weapon::attachmentmap_tounique( var_15, var_4 );
            var_11[var_18] = var_16;
        }

        var_19 = scripts\mp\utility\weapon::attachmentmap_tobase( var_20 );

        if ( !isdefined( var_13 ) && tv_station_fastrope_two_infil_rider_start_targetname( var_19 ) )
            var_13 = var_20;

        if ( !var_12 && ( useeventtype( var_19 ) || useeventtimestamp( var_20 ) ) )
            var_12 = 1;
    }

    if ( var_11.size > 0 )
        var_6 = scripts\engine\utility::array_combine_unique_keys( var_6, var_11 );

    if ( isdefined( var_13 ) && var_12 && !issubstr( var_0, "s4_" ) )
    {
        var_13 = scripts\engine\utility::ter_op( var_13 == "calsmg_mike4", "calsil_mike4smg", "calsil" );
        var_6[var_13] = 0;
    }

    return var_6;
}

combinedefaultandcustomattachmentidmaps( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_5, var_4 in var_0 )
    {
        if ( scripts\engine\utility::array_contains_key( var_1, var_5 ) )
            continue;

        var_2[var_5] = var_4;
    }

    foreach ( var_5, var_4 in var_1 )
        var_2[var_5] = var_4;

    return var_2;
}

filterattachmenttoidmap( var_0, var_1 )
{
    var_2 = [];
    var_3 = [];
    var_4 = [];
    var_5 = getfirstarraykey( var_0 );
    var_4[0] = var_5;

    for ( var_6 = 0; var_6 < var_4.size; var_6++ )
    {
        var_7 = var_4[var_6];

        if ( var_7 != "none" )
        {
            var_8 = scripts\mp\utility\weapon::attachmentmap_tounique( var_7, var_1 );
            var_9 = 1;

            for ( var_10 = 0; var_10 < var_2.size; var_10++ )
            {
                var_11 = var_2[var_10];

                if ( var_11 == "" )
                    continue;

                if ( var_7 == var_11 )
                {
                    var_9 = 0;
                    break;
                }

                var_12 = scripts\mp\utility\weapon::attachmentsconflict( var_7, var_11, var_1, var_8, var_3[var_10] );

                if ( var_12 == var_7 )
                {
                    var_2[var_10] = "";
                    var_3[var_10] = "";
                    continue;
                }

                if ( var_12 != "" )
                {
                    var_2[var_10] = "";
                    var_3[var_10] = "";
                    var_9 = 0;
                    var_13 = [];
                    var_13 = strtok( var_12, " " );

                    for ( var_14 = 0; var_14 < var_13.size; var_14++ )
                        var_4[var_4.size] = var_13[var_14];

                    break;
                }
            }

            if ( var_9 )
            {
                var_15 = var_2.size;
                var_2[var_15] = var_7;
                var_3[var_15] = var_8;
            }
        }

        if ( var_6 == var_4.size - 1 )
        {
            var_5 = getnextarraykey( var_0, var_5 );

            if ( isdefined( var_5 ) )
                var_4[var_4.size] = var_5;
        }
    }

    var_16 = [];

    for ( var_6 = 0; var_6 < var_2.size; var_6++ )
    {
        var_7 = var_2[var_6];

        if ( var_7 != "" )
        {
            var_17 = scripts\engine\utility::ter_op( isdefined( var_0[var_7] ), var_0[var_7], 0 );
            var_16[var_7] = var_17;
        }
    }

    return var_16;
}

filterinvalidattachmentsfromidmap( var_0, var_1 )
{
    var_2 = getcompleteweaponname( var_1 );
    var_3 = [];

    foreach ( var_6, var_5 in var_0 )
    {
        if ( var_2 canuseattachment( var_6 ) )
        {
            var_3[var_6] = var_5;
            continue;
        }

        thread invalidattachmentwarning( var_6, var_1 );
    }

    return var_3;
}

getbrendsplashpostgamestate( var_0, var_1 )
{
    if ( !isdefined( level.attachmentoverridetobase ) )
        level.attachmentoverridetobase = [];

    var_2 = [];

    foreach ( var_10, var_4 in var_0 )
    {
        var_5 = var_10;

        foreach ( var_9, var_7 in var_0 )
        {
            var_8 = scripts\mp\utility\weapon::attachmentmap_tobase( var_10 );

            if ( isdefined( level.carryingplayer[var_9] ) && isdefined( level.carryingplayer[var_9][var_8] ) )
            {
                var_5 = level.carryingplayer[var_9][var_8];
                level.attachmentoverridetobase[var_5] = var_8;
            }
        }

        var_2[var_5] = var_4;
    }

    return var_2;
}

invalidattachmentwarning( var_0, var_1 )
{
    var_2 = "Invalid Attachment: " + var_0 + " on " + var_1;

    if ( isdefined( self ) && isplayer( self ) )
    {
        if ( getdvarint( "scr_playtest", 0 ) == 1 )
            self iprintlnbold( var_2 );
        else
        {

        }
    }
}

buildweaponassetname( var_0, var_1 )
{
    return scripts\mp\utility\weapon::weaponassetnamemap( var_0, var_1 );
}

getreticleindex( var_0 )
{
    if ( !isdefined( var_0 ) )
        return undefined;

    var_1 = int( tablelookup( "mp/reticleTable.csv", 1, var_0, 5 ) );

    if ( !isdefined( var_1 ) || var_1 == 0 )
        return undefined;

    return var_1;
}

tv_station_fastrope_two_infil_rider_start_targetname( var_0 )
{
    return var_0 == "calcust" || var_0 == "calsmg" || var_0 == "calsmgdrums";
}

useeventtimestamp( var_0 )
{
    return scripts\engine\utility::string_starts_with( var_0, "barsil_" ) || var_0 == "barcust2_mpapa5" || scripts\engine\utility::string_starts_with( var_0, "front_valpha" ) || var_0 == "barlight_valpha" || var_0 == "barheavy_valpha" || var_0 == "barshort_valpha";
}

useeventtype( var_0 )
{
    return scripts\engine\utility::string_starts_with( var_0, "silencer" );
}

vehicle_checkpiggybackexploit( var_0 )
{
    return var_0 _meth_87B8();
}

getweaponpassives( var_0, var_1 )
{
    return scripts\mp\loot::getpassivesforweapon( var_0, var_1 );
}

weaponhaspassive( var_0, var_1, var_2 )
{
    var_3 = getweaponpassives( var_0, var_1 );

    if ( !isdefined( var_3 ) || var_3.size <= 0 )
        return 0;

    foreach ( var_5 in var_3 )
    {
        if ( var_2 == var_5 )
            return 1;
    }

    return 0;
}

getweaponvariantattachments( var_0, var_1 )
{
    var_2 = [];
    var_3 = getweaponpassives( var_0, var_1 );

    if ( isdefined( var_3 ) )
    {
        foreach ( var_5 in var_3 )
        {
            var_6 = scripts\mp\passives::getpassiveattachment( var_5 );

            if ( !isdefined( var_6 ) )
                continue;

            var_2[var_2.size] = var_6;
        }
    }

    return var_2;
}

replenishloadout()
{
    var_0 = self.pers["team"];
    var_1 = self.pers["class"];
    var_2 = self getweaponslistall();

    for ( var_3 = 0; var_3 < var_2.size; var_3++ )
    {
        var_4 = var_2[var_3];
        self givemaxammo( var_4 );
        self setweaponammoclip( var_4, 9999 );
        var_5 = var_4.basename;

        if ( var_5 == "claymore_mp" || var_5 == "claymore_detonator_mp" )
            self setweaponammostock( var_4, 2 );
    }
}

onplayerconnecting()
{
    for (;;)
    {
        level waittill( "connected", var_0 );
        var_0 enableplayerbreathsystem( 0 );

        if ( !isdefined( var_0.pers["class"] ) )
            var_0.pers["class"] = "";

        if ( !isdefined( var_0.pers["lastClass"] ) )
            var_0.pers["lastClass"] = "";

        var_0.class = var_0.pers["class"];
        var_0.lastclass = var_0.pers["lastClass"];
        var_0.changedarchetypeinfo = var_0.pers["changedArchetypeInfo"];
        var_0.lastarchetypeinfo = undefined;

        if ( !isdefined( var_0.pers["validationInfractions"] ) )
            var_0.pers["validationInfractions"] = 0;
    }
}

onplayerspawned()
{
    level endon( "game_ended" );

    for (;;)
    {
        level waittill( "player_spawned", var_0 );
        var_0 enableplayerbreathsystem( 1 );

        if ( getdvarint( "scr_br_alt_mode_zxp", 0 ) )
        {
            if ( istrue( var_0.iszombie ) )
            {
                var_0 _meth_87AA( "zombie" );
                var_0 setentitysoundcontext( "gender", "zombie" );
            }
            else if ( isdefined( var_0.operatorcustomization ) && isdefined( var_0.operatorcustomization.gender ) && var_0.operatorcustomization.gender == "female" )
                var_0 _meth_87AA( "female" );
            else
                var_0 _meth_87AA( "" );
        }
        else if ( getdvarint( "scr_br_alt_mode_gxp", 0 ) )
        {
            if ( istrue( var_0.unset_relic_gun_game ) )
            {
                var_0 _meth_87AA( "ghost" );
                var_0 setentitysoundcontext( "gender", "zombie" );
            }
            else if ( isdefined( var_0.operatorcustomization ) && isdefined( var_0.operatorcustomization.gender ) && var_0.operatorcustomization.gender == "female" )
                var_0 _meth_87AA( "female" );
            else
                var_0 _meth_87AA( "" );
        }
        else if ( istrue( level.setplayerselfrevivingextrainfo ) && scripts\mp\utility\game::getgametype() == "infect" && var_0.team == "axis" )
            var_0 _meth_87AA( "zombie" );
        else if ( isdefined( var_0.operatorcustomization ) && isdefined( var_0.operatorcustomization.gender ) && var_0.operatorcustomization.gender == "female" )
            var_0 _meth_87AA( "female" );
        else
            var_0 _meth_87AA( "" );

        var_0 stoplocalsound( "deaths_door_death" );

        if ( isdefined( var_0._id_12135 ) )
        {
            var_0 clearsoundsubmix( "iw8_mp_spawn_camera" );
            var_0._id_12135 stoploopsound( self._id_12136 );
            var_0._id_12135 delete();
            var_0._id_12135 = undefined;
            var_0._id_12136 = undefined;
        }

        if ( isdefined( var_0.operatorcustomization.clothtype ) && var_0.operatorcustomization.clothtype != "" )
        {
            if ( istrue( var_0.iszombie ) )
                var_0 setclothtype( "cloth" );
            else
                var_0 setclothtype( var_0.operatorcustomization.clothtype );

            continue;
        }

        var_0 setclothtype( "vestlight" );
    }
}

fadeaway( var_0, var_1 )
{
    wait( var_0 );
    self fadeovertime( var_1 );
    self.alpha = 0;
}

setclass( var_0 )
{
    self.curclass = var_0;
}

haschangedclass()
{
    if ( isdefined( self.lastclass ) && self.lastclass != self.class || !isdefined( self.lastclass ) )
        return 1;

    if ( scripts\mp\utility\game::getgametype() == "infect" && ( !isdefined( self.last_infected_class ) || self.last_infected_class != self.infected_class ) )
        return 1;

    return 0;
}

haschangedarchetype()
{
    if ( isdefined( self.changedarchetypeinfo ) )
    {
        if ( !isdefined( self.lastarchetypeinfo ) )
            return 1;

        if ( self.changedarchetypeinfo != self.lastarchetypeinfo )
            return 1;
    }

    return 0;
}

resetactionslots()
{
    self setactionslot( 1, "" );
    self setactionslot( 2, "" );
    self setactionslot( 3, "" );
    self setactionslot( 4, "" );

    if ( !isagent( self ) && !self isconsoleplayer() )
    {
        self setactionslot( 5, "" );
        self setactionslot( 6, "" );
        self setactionslot( 7, "" );
    }
}

resetfunctionality()
{
    self enableequipdeployvfx( 0 );

    if ( !isagent( self ) )
    {
        self setclientomnvar( "ui_hide_hud", 0 );
        vehicle_allowplayeruse( self, 1 );

        if ( level.minimaponbydefault )
            self setclientomnvar( "ui_hide_minimap", 0 );
        else
            self setclientomnvar( "ui_hide_minimap", 1 );
    }

    scripts\common\input_allow::clear_all_allow_info();
    scripts\cp_mp\vehicles\vehicle_occupancy::_id_141CA( self, 1 );
    scripts\common\utility::allow_script_weapon_switch( 0 );
    self.doublejumpenergy = undefined;
    self.doublejumpenergyrestorerate = undefined;
    self.enabledcollisionnotifies = undefined;
    self.enabledequipdeployvfx = undefined;
    self.minimapstatetracker = undefined;
    self.isstunned = undefined;
    self.isblinded = undefined;
    self.nocorpse = undefined;
    self.prematchlook = undefined;
    self.ladderexecutionblocked = undefined;
    scripts\mp\damage::resetattackerlist();
    scripts\mp\damage::clearcorpsetablefuncs();
    _id_12D4E();
    scripts\cp_mp\utility\player_utility::cleardemeanorsafe();
    scripts\mp\weapons::clearburnfx();
    scripts\mp\equipment\molotov::_id_11CB6();
    scripts\mp\equipment\throwing_knife_mp::_id_13B52();
    scripts\mp\equipment\flash_grenade::clearflash( 1 );
    scripts\mp\equipment\gas_grenade::gas_clear( 1 );

    if ( !isagent( self ) )
    {
        scripts\mp\utility\player::spawn_carriables_from_scriptables_total_percentage();
        scripts\cp_mp\killstreaks\helper_drone::markeduioff();
    }

    scripts\cp_mp\killstreaks\white_phosphorus::clearloopingcoughaudio();
    scripts\mp\utility\player::_resetenableignoreme();
    scripts\cp_mp\utility\player_utility::_id_125D0();
}

clearscriptable()
{
    self setscriptablepartstate( "CompassIcon", "defaultIcon" );
}

changearchetype( var_0, var_1, var_2 )
{
    if ( isdefined( self.changedarchetypeinfo ) )
    {
        var_3 = self.changedarchetypeinfo;

        if ( var_3.archetype == var_0 && var_3.super == var_1 && var_3.trait == var_2 )
            return;
    }

    var_4 = spawnstruct();
    var_4.archetype = var_0;
    var_4.super = var_1;
    var_4.trait = var_2;
    self.changedarchetypeinfo = var_4;
    self.pers["changedArchetypeInfo"] = var_4;

    if ( isdefined( self.pers["class"] ) && self.pers["class"] != "" )
    {
        preloadandqueueclass( self.pers["class"] );

        if ( shouldallowinstantclassswap() )
            thread swaploadout();
        else if ( isalive( self ) )
            self iprintlnbold( game["strings"]["change_rig"] );
    }
}

getattachmentloadoutstring( var_0, var_1 )
{
    var_2 = scripts\engine\utility::ter_op( var_1 == "primary", "loadoutPrimaryAttachment", "loadoutSecondaryAttachment" );

    if ( var_0 == 0 )
        return var_2;

    return var_2 + ( var_0 + 1 );
}

getstickerloadoutstring( var_0, var_1 )
{
    var_2 = scripts\engine\utility::ter_op( var_1 == "primary", "loadoutPrimarySticker", "loadoutSecondarySticker" );

    if ( var_0 == 0 )
        return var_2;

    return var_2 + ( var_0 + 1 );
}

getmaxprimaryattachments()
{
    return 10;
}

getmaxsecondaryattachments()
{
    return 10;
}

getmaxattachments( var_0 )
{
    return scripts\engine\utility::ter_op( var_0 == "primary", getmaxprimaryattachments(), getmaxsecondaryattachments() );
}

fillemptystreakslots( var_0, var_1 )
{
    if ( !level.allowkillstreaks )
        return;

    var_2 = [];
    var_3 = [];

    foreach ( var_6, var_5 in var_0 )
    {
        if ( var_5 == "none" )
        {
            var_2[var_2.size] = var_6;
            continue;
        }

        var_3[var_3.size] = var_5;
    }

    if ( var_2.size > 0 )
        self.pers["hackedStreaks"] = 1;

    foreach ( var_8 in var_2 )
    {
        var_9 = findfirststreakdifferentcost( var_3 );

        if ( var_8 + 1 == 1 )
            var_1.loadoutkillstreak1 = var_9;
        else if ( var_8 + 1 == 2 )
            var_1.loadoutkillstreak2 = var_9;
        else
            var_1.loadoutkillstreak3 = var_9;

        var_3[var_3.size] = var_9;
    }

    return [ var_1.loadoutkillstreak1, var_1.loadoutkillstreak2, var_1.loadoutkillstreak3 ];
}

findfirststreakdifferentcost( var_0 )
{
    var_1 = [];

    foreach ( var_8, var_3 in game["killstreakTable"].tabledatabyref )
    {
        if ( !istrue( int( var_3["shownInMenu"] ) ) )
            continue;

        var_4 = 0;

        foreach ( var_6 in var_0 )
        {
            if ( var_8 == var_6 || scripts\mp\killstreaks\killstreaks::calcstreakcost( var_8 ) == scripts\mp\killstreaks\killstreaks::calcstreakcost( var_6 ) )
            {
                var_4 = 1;
                break;
            }
        }

        if ( !istrue( var_4 ) )
            var_1[var_1.size] = var_8;
    }

    return var_1[0];
}

replacetankwithwheelson( var_0 )
{
    if ( !level.allowkillstreaks )
        return;

    var_1 = scripts\cp_mp\vehicles\light_tank::light_tank_supported();

    if ( !var_1 )
    {
        if ( var_0.loadoutkillstreak1 == "bradley" )
            var_0.loadoutkillstreak1 = "pac_sentry";
        else if ( var_0.loadoutkillstreak2 == "bradley" )
            var_0.loadoutkillstreak2 = "pac_sentry";
        else if ( var_0.loadoutkillstreak3 == "bradley" )
            var_0.loadoutkillstreak3 = "pac_sentry";

        self.pers["hackedStreaks"] = 1;
    }

    return [ var_0.loadoutkillstreak1, var_0.loadoutkillstreak2, var_0.loadoutkillstreak3 ];
}

replacewithspecialistkillstreaks( var_0 )
{
    return [ "specialist_perk_1", "specialist_perk_2", "specialist_perk_3", "specialist_perk_bonus" ];
}

updateinstantclassswapallowed()
{
    self endon( "disconnect" );
    self endon( "death" );
    level endon( "game_ended" );
    self.instantclassswapallowed = 1;

    if ( scripts\mp\utility\game::getgametype() == "br" )
    {
        var_0 = scripts\mp\gamelogic::generate_randomized_primary_weapon_objs( scripts\mp\utility\game::round_vehicle_logic() );

        if ( var_0 )
        {
            scripts\mp\flags::gameflagwait( "prematch_fade_done" );
            _id_13FE4();
        }
    }
    else
    {
        scripts\mp\flags::gameflagwait( "prematch_done" );
        _id_13FE4();
    }

    disableclassswapallowed();
}

_id_13FE4()
{
    self endon( "death" );
    var_0 = scripts\engine\utility::ter_op( scripts\mp\utility\game::ismlgmatch(), 5, 15 );

    if ( scripts\mp\gamelogic::generate_randomized_primary_weapon_objs( scripts\mp\utility\game::round_vehicle_logic() ) )
    {
        while ( scripts\mp\utility\game::updatehistoryhud( self ) )
            waitframe();

        self waittill( "parachute_complete" );
    }

    if ( scripts\mp\utility\perk::_hasperk( "specialty_tune_up" ) )
        var_0 = scripts\engine\utility::ter_op( scripts\mp\utility\game::ismlgmatch(), 5, 5 );

    wait( var_0 );
}

disableclassswapallowed()
{
    if ( istrue( self.instantclassswapallowed ) )
    {
        self.instantclassswapallowed = 0;

        if ( scripts\mp\utility\game::isteamreviveenabled() )
        {
            self.revive_chosenclass = self.class;
            self.pers["next_round_class"] = self.class;
        }
    }
}

isvalidclass( var_0 )
{
    return isdefined( var_0 ) && var_0 != "";
}

getclassindex( var_0 )
{
    return level.classmap[var_0];
}

preloadandqueueclass( var_0, var_1 )
{
    var_2 = loadout_getorbuildclassstruct( var_0 );
    preloadandqueueclassstruct( var_2, var_1 );
    return var_2;
}

preloadandqueueclassstruct( var_0, var_1, var_2 )
{
    var_3 = scripts\mp\playerlogic::getplayerassets( var_0 );
    scripts\mp\playerlogic::loadplayerassets( [ var_3 ], var_1, var_2 );
    self.preloadedclassstruct = var_0;
}

loadout_getorbuildclassstruct( var_0 )
{
    if ( self.team == "spectator" && !isdefined( var_0 ) )
        var_0 = "custom1";

    var_1 = loadout_getclasstype( var_0 );
    var_2 = getcachedloadoutstruct( var_0, var_1 );
    var_3 = var_1 == "custom" || var_1 == "default";

    if ( var_3 && scripts\mp\utility\game::unset_relic_grounded() )
        self.wam_sequence = var_0;

    if ( isdefined( var_2 ) )
    {
        if ( !isdefined( var_2.loadoutprimaryobject ) && isdefined( var_2.loadoutprimaryfullname ) )
            var_2.loadoutprimaryobject = asmdevgetallstates( var_2.loadoutprimaryfullname );

        if ( !isdefined( var_2.loadoutsecondaryobject ) && isdefined( var_2.loadoutsecondaryfullname ) )
            var_2.loadoutsecondaryobject = asmdevgetallstates( var_2.loadoutsecondaryfullname );
    }

    if ( isdefined( var_2 ) )
    {
        if ( var_0 == "gamemode" )
        {
            var_4 = loadout_getclassstruct();
            var_4 = loadout_updateclass( var_4, var_0 );
            var_5 = compareclassstructs( var_4, var_2 );

            if ( !var_5 )
            {
                var_4.gamemodeforcednewloadout = 1;
                trytocacheclassstruct( var_4, var_0, var_1 );
                return var_4;
            }
        }

        return var_2;
    }

    var_6 = loadout_getclassstruct();
    var_6 = loadout_updateclass( var_6, var_0 );
    trytocacheclassstruct( var_6, var_0, var_1 );
    return var_6;
}

zombiesignorevehicleexplosions()
{
    if ( !isdefined( self.pers["globalLoadoutStruct"] ) )
        _id_11950();

    return self.pers["globalLoadoutStruct"];
}

_id_11950()
{
    var_0 = spawnstruct();

    if ( !isagent( self ) )
    {
        var_0.loadoutfieldupgrade1 = cac_getfieldupgrade( 0 );
        var_0.loadoutfieldupgrade2 = cac_getfieldupgrade( 1 );
    }
    else
    {
        var_0.loadoutfieldupgrade1 = "none";
        var_0.loadoutfieldupgrade2 = "none";
    }

    self.pers["globalLoadoutStruct"] = var_0;
}

zombieregenratescaleoutgas()
{
    var_0 = zombiesignorevehicleexplosions();
    _id_11950();
    var_1 = zombiesignorevehicleexplosions();

    if ( var_0.loadoutfieldupgrade1 != var_1.loadoutfieldupgrade1 )
        return 1;

    if ( var_0.loadoutfieldupgrade2 != var_1.loadoutfieldupgrade2 )
        return 1;

    return 0;
}

_id_1194F( var_0, var_1 )
{
    var_2 = self.pers["gamemodeLoadout"];

    if ( isdefined( var_2["loadoutFieldUpgrade1"] ) )
        var_0.loadoutfieldupgrade1 = var_2["loadoutFieldUpgrade1"];

    if ( isdefined( var_2["loadoutFieldUpgrade2"] ) )
        var_0.loadoutfieldupgrade2 = var_2["loadoutFieldUpgrade2"];
}

loadout_editcachedclassstruct( var_0 )
{
    var_1 = loadout_getclasstype( var_0 );
    var_2 = getcachedloadoutstruct( var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        var_3 = loadout_getclassstruct();
        var_3 = loadout_updateclass( var_3, var_0 );
        var_4 = compareclassstructs( var_3, var_2 );

        if ( !var_4 )
        {
            var_3.tweakedbyplayerduringmatch = 1;
            trytocacheclassstruct( var_3, var_0, var_1 );
            return 1;
        }
    }

    return 0;
}

getcachedloadoutstruct( var_0, var_1 )
{
    switch ( var_1 )
    {
        case "custgamemode":
        case "custom":
        case "gamemode":
        case "default":
            if ( !isdefined( self.pers["classCache"] ) )
                break;

            return self.pers["classCache"][var_0];
    }

    return undefined;
}

trytocacheclassstruct( var_0, var_1, var_2 )
{
    switch ( var_2 )
    {
        case "custgamemode":
        case "custom":
        case "gamemode":
        case "default":
            addclassstructtocache( var_0, var_1 );
            break;
    }
}

addclassstructtocache( var_0, var_1 )
{
    if ( !isdefined( self.pers["classCache"] ) )
        self.pers["classCache"][var_1] = [];

    self.pers["classCache"][var_1] = var_0;
}

loadout_emptycacheofloadout( var_0 )
{
    if ( !isdefined( self.pers["classCache"] ) )
        return;

    self.pers["classCache"][var_0] = undefined;
}

loadout_gamemodeloadoutchanged()
{
    self.pers["classCache"]["gamemode"] = undefined;
}

copyclassfornextlife( var_0 )
{
    self setclientomnvar( "ui_loadout_copied", gettime() );
    thread allow_cp_munitions();
    var_1 = undefined;

    if ( isdefined( var_0.juggcontext ) && isdefined( var_0.juggcontext.prevclassstruct ) )
        var_1 = var_0.juggcontext.prevclassstruct;
    else
        var_1 = var_0.classstruct;

    self.pers["copiedClass"] = zombieregenratescaleingas( var_1 );
    self.pers["lastKiller"] = var_0;
}

allow_cp_munitions()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self waittill( "spawned" );
    self setclientomnvar( "ui_loadout_changed", 11 );
}

zombiesdamagezombies( var_0, var_1 )
{
    var_0.loadoutsuper = var_1.loadoutsuper;
    var_0.loadoutstreaksfilled = var_1.loadoutstreaksfilled;
    var_0.loadoutstreaktype = var_1.loadoutstreaktype;
    var_0.loadoutkillstreak1 = var_1.loadoutkillstreak1;
    var_0.loadoutkillstreak2 = var_1.loadoutkillstreak2;
    var_0.loadoutkillstreak3 = var_1.loadoutkillstreak3;
    var_0.loadoutaccessoryweapon = var_1.loadoutaccessoryweapon;
    var_0.loadoutaccessorydata = var_1.loadoutaccessorydata;
    var_0.loadoutaccessorylogic = var_1.loadoutaccessorylogic;
    var_0.tweakedbyplayerduringmatch = 0;
    var_0.gamemodeforcednewloadout = 0;
    var_0.uavbestid = 1;
}

shouldskipfirstraise( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = 0;

    if ( !istrue( self.hasspawned ) )
        var_1 = 1;

    if ( scripts\cp_mp\utility\game_utility::shouldskipfirstraise() && istrue( self.hasspawned ) )
        var_1 = 1;

    if ( istrue( self._id_1443D ) )
        var_1 = 1;

    if ( weaponclass( var_0.basename ) == "mg" && !istrue( self.usingascender ) )
        var_1 = 1;

    if ( scripts\mp\utility\game::getgametype() == "infect" && istrue( self.faux_spawn_infected ) )
        var_1 = 1;

    return var_1;
}

respawnitems_saveplayeritemstostruct( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_3 = 0;

    if ( !isdefined( var_0 ) || var_0 )
        respawnitems_saveweapons( var_4 );

    if ( !isdefined( var_1 ) || var_1 )
        respawnitems_saveequipmentitems( var_4 );

    if ( !isdefined( var_2 ) || var_2 )
        respawnitems_savestreaks( var_4 );

    if ( !isdefined( var_3 ) || var_3 )
        respawnitems_savesuper( var_4 );

    return var_4;
}

respawnitems_assignrespawnitems( var_0 )
{
    self.respawnitems = var_0;
}

respawnitems_hasrespawnitems()
{
    return isdefined( self.respawnitems );
}

respawnitems_getrespawnitems()
{
    if ( isdefined( self.respawnitems ) )
        return self.respawnitems;

    return undefined;
}

respawnitems_clear()
{
    self.respawnitems = undefined;
}

respawnitems_saveweapons( var_0 )
{
    var_1 = [];
    var_2 = self.primaryweapons;
    var_3 = self.currentweapon;

    foreach ( var_5 in var_2 )
    {
        if ( scripts\mp\utility\weapon::iscacprimaryorsecondary( var_5 ) )
            var_1[var_1.size] = var_5;
    }

    var_7 = undefined;

    if ( isdefined( self.lastcacweaponobj ) )
        var_7 = self.lastcacweaponobj;
    else if ( !scripts\mp\utility\weapon::iscacprimaryorsecondary( self.currentweapon ) )
        var_7 = self.currentweapon;
    else if ( var_1.size > 0 )
        var_7 = var_1[0];

    if ( getqueuedspleveltransients( var_7 ) )
        var_7 = getcompleteweaponname( "iw8_fists_mp" );

    respawnitems_saveweapon( var_7, "primary", var_0 );
    var_8 = undefined;

    foreach ( var_5 in var_1 )
    {
        if ( !isnullweapon( var_5, var_7, 1 ) )
        {
            var_8 = var_5;
            break;
        }
    }

    if ( isdefined( var_8 ) )
        respawnitems_saveweapon( var_8, "secondary", var_0 );
}

respawnitems_saveweapon( var_0, var_1, var_2 )
{
    if ( !isdefined( var_2.weapons ) )
        var_2.weapons = [];

    var_3 = spawnstruct();
    var_2.weapons[var_1] = var_3;
    var_3.weaponobj = var_0;
    var_3.clipammo = self getweaponammoclip( var_0 );
    var_3.stockammo = self getweaponammostock( var_0 );

    if ( var_0.hasalternate )
    {
        var_4 = var_0 getaltweapon();
        var_3.altclipammo = self getweaponammoclip( var_4 );
        var_3.altstockammo = self getweaponammostock( var_4 );
    }
}

respawnitems_saveequipmentitems( var_0 )
{
    respawnitems_saveequipment( "primary", var_0 );
    respawnitems_saveequipment( "secondary", var_0 );
}

respawnitems_saveequipment( var_0, var_1 )
{
    var_2 = scripts\mp\equipment::getcurrentequipment( var_0 );

    if ( !isdefined( var_2 ) )
        var_2 = "none";

    if ( !isdefined( var_1.equipment ) )
        var_1.equipment = [];

    var_3 = spawnstruct();
    var_1.equipment[var_0] = var_3;
    var_3.item = var_2;

    if ( var_2 != "none" )
        var_3.ammo = scripts\mp\equipment::getequipmentammo( var_3.item );
    else
        var_3.ammo = 0;
}

respawnitems_savestreaks( var_0 )
{
    var_1 = spawnstruct();
    var_1.streaks = [];
    var_1.streakpoints = self.streakpoints;

    if ( !isdefined( self.streakpoints ) )
        return;

    var_2 = scripts\mp\killstreaks\killstreaks::getkillstreakinslot( 1 );

    if ( isdefined( var_2 ) )
        var_1.streaks[var_1.streaks.size] = var_2.streakname;

    var_2 = scripts\mp\killstreaks\killstreaks::getkillstreakinslot( 2 );

    if ( isdefined( var_2 ) )
        var_1.streaks[var_1.streaks.size] = var_2.streakname;

    var_2 = scripts\mp\killstreaks\killstreaks::getkillstreakinslot( 3 );

    if ( isdefined( var_2 ) )
        var_1.streaks[var_1.streaks.size] = var_2.streakname;

    if ( var_1.streaks.size <= 0 )
        return;

    var_0.streakstate = var_1;
}

respawnitems_savesuper( var_0 )
{
    var_1 = scripts\mp\supers::getcurrentsuperref();

    if ( !isdefined( var_1 ) )
        return;

    var_2 = spawnstruct();
    var_0.superstate = var_2;
    var_2.super = var_1;
    var_2.superpoints = scripts\mp\supers::getcurrentsuperbasepoints();
    var_2.extrapoints = scripts\mp\supers::getcurrentsuperextrapoints();
}

respawnitems_hasweapondata( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    return isdefined( var_0.weapons );
}

respawnitems_getweaponobj( var_0, var_1 )
{
    return var_0.weapons[var_1].weaponobj;
}

respawnitems_giveweaponammo( var_0, var_1 )
{
    var_2 = var_0.weapons[var_1];
    self setweaponammoclip( var_2.weaponobj, var_2.clipammo );
    self setweaponammostock( var_2.weaponobj, var_2.stockammo );

    if ( var_2.weaponobj.hasalternate )
    {
        var_3 = var_2.weaponobj getaltweapon();
        self setweaponammoclip( var_3, var_2.altclipammo );
        self setweaponammostock( var_3, var_2.altstockammo );
    }
}

respawnitems_hasequipmentdata( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    return isdefined( var_0.equipment );
}

respawnitems_getequipmentref( var_0, var_1 )
{
    return var_0.equipment[var_1].item;
}

respawnitems_giveequipmentammo( var_0, var_1 )
{
    var_2 = respawnitems_getequipmentref( var_0, var_1 );

    if ( !isdefined( var_2 ) || var_2 == "none" )
        return;

    var_3 = var_0.equipment[var_1].ammo;

    if ( !isdefined( var_3 ) )
        return;

    scripts\mp\equipment::setequipmentammo( var_2, var_3 );
}

respawnitems_hasstreakdata( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    return isdefined( var_0.streakstate );
}

respawnitems_getstreakpoints( var_0 )
{
    return var_0.streakstate.streakpoints;
}

respawnitems_getstreaks( var_0 )
{
    return var_0.streakstate.streaks;
}

respawnitems_hassuperdata( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    return isdefined( var_0.superstate );
}

respawnitems_getsuperref( var_0 )
{
    return var_0.superstate.super;
}

respawnitems_getsuperpoints( var_0 )
{
    return var_0.superstate.superpoints;
}

respawnitems_getsuperextrapoints( var_0 )
{
    return var_0.superstate.extrapoints;
}

spawnammocountoverride_giveweaponammo( var_0, var_1, var_2 )
{
    var_3 = var_0;
    var_4 = !var_2;

    if ( var_4 && !update_health_bar_to_players( var_0 ) )
    {
        var_5 = 0;
        var_6 = 0;

        if ( var_0 hasattachment( "akimbo", 1 ) )
            self setweaponammoclip( var_3, var_5, "left" );
    }
    else
    {
        var_5 = var_3.clipsize;
        var_6 = var_2 - 1;
    }

    if ( var_2 == 7 )
        var_6 = weaponmaxammo( var_3 );
    else if ( issubstr( var_3.basename, "iw8_sh_charlie725" ) && !var_4 )
        var_6 = var_3.clipsize * var_6 + 18;
    else
        var_6 = var_3.clipsize * var_6;

    self setweaponammoclip( var_3, var_5 );
    self setweaponammostock( var_3, var_6 );

    if ( var_0.hasalternate )
    {
        var_7 = var_0 getaltweapon();

        if ( var_4 )
        {
            var_8 = 0;
            var_9 = 0;
        }
        else
        {
            var_8 = self getweaponammoclip( var_7 );
            var_9 = self getweaponammostock( var_7 );
        }

        self setweaponammoclip( var_7, var_8 );
        self setweaponammostock( var_7, var_9 );
    }
}

update_health_bar_to_players( var_0 )
{
    var_1 = scripts\mp\utility\weapon::isknifeonly( var_0.basename ) || scripts\mp\utility\weapon::turret_aimed_at_last_known( var_0.basename ) || scripts\mp\utility\weapon::isaxeweapon( var_0.basename ) || scripts\mp\utility\weapon::update_health_bar_to_player( var_0 ) || scripts\mp\riotshield::isriotshield( var_0.basename );
    return var_1;
}

compareclassstructs( var_0, var_1 )
{
    if ( var_0.loadoutarchetype != var_1.loadoutarchetype )
        return 0;

    if ( var_0.loadoutprimary != var_1.loadoutprimary )
        return 0;

    if ( !checkclassstructarray( var_0.loadoutprimaryattachments, var_1.loadoutprimaryattachments ) )
        return 0;

    if ( !checkclassstructarray( var_0.loadoutprimaryattachmentids, var_1.loadoutprimaryattachmentids ) )
        return 0;

    if ( var_0.loadoutprimarycamo != var_1.loadoutprimarycamo )
        return 0;

    if ( var_0.loadoutprimaryreticle != var_1.loadoutprimaryreticle )
        return 0;

    if ( var_0.loadoutprimarylootitemid != var_1.loadoutprimarylootitemid )
        return 0;

    if ( var_0.loadoutprimaryvariantid != var_1.loadoutprimaryvariantid )
        return 0;

    if ( var_0.loadoutprimarycosmeticattachment != var_1.loadoutprimarycosmeticattachment )
        return 0;

    if ( var_0.loadoutsecondary != var_1.loadoutsecondary )
        return 0;

    if ( !checkclassstructarray( var_0.loadoutsecondaryattachments, var_1.loadoutsecondaryattachments ) )
        return 0;

    if ( !checkclassstructarray( var_0.loadoutsecondaryattachmentids, var_1.loadoutsecondaryattachmentids ) )
        return 0;

    if ( var_0.loadoutsecondarycamo != var_1.loadoutsecondarycamo )
        return 0;

    if ( var_0.loadoutsecondaryreticle != var_1.loadoutsecondaryreticle )
        return 0;

    if ( var_0.loadoutsecondarylootitemid != var_1.loadoutsecondarylootitemid )
        return 0;

    if ( var_0.loadoutsecondaryvariantid != var_1.loadoutsecondaryvariantid )
        return 0;

    if ( var_0.loadoutsecondarycosmeticattachment != var_1.loadoutsecondarycosmeticattachment )
        return 0;

    if ( !checkclassstructarray( var_0.loadoutperks, var_1.loadoutperks ) )
        return 0;

    if ( !checkclassstructarray( var_0.loadoutstandardperks, var_1.loadoutstandardperks ) )
        return 0;

    if ( !checkclassstructarray( var_0.loadoutextraperks, var_1.loadoutextraperks ) )
        return 0;

    if ( var_0.loadoutusingspecialist != var_1.loadoutusingspecialist )
        return 0;

    if ( var_0.loadoutmeleeslot != var_1.loadoutmeleeslot )
        return 0;

    if ( var_0.loadoutperksfromgamemode != var_1.loadoutperksfromgamemode )
        return 0;

    if ( var_0.loadoutrigtrait != var_1.loadoutrigtrait )
        return 0;

    if ( var_0.loadoutequipmentprimary != var_1.loadoutequipmentprimary )
        return 0;

    if ( var_0.loadoutextraequipmentprimary != var_1.loadoutextraequipmentprimary )
        return 0;

    if ( var_0.loadoutequipmentsecondary != var_1.loadoutequipmentsecondary )
        return 0;

    if ( var_0.loadoutextraequipmentsecondary != var_1.loadoutextraequipmentsecondary )
        return 0;

    if ( var_0.loadoutsuper != var_1.loadoutsuper )
        return 0;

    if ( var_0.loadoutgesture != var_1.loadoutgesture )
        return 0;

    if ( var_0.loadoutstreaksfilled != var_1.loadoutstreaksfilled )
        return 0;

    if ( var_0.loadoutstreaktype != var_1.loadoutstreaktype )
        return 0;

    if ( var_0.loadoutkillstreak1 != var_1.loadoutkillstreak1 )
        return 0;

    if ( var_0.loadoutkillstreak2 != var_1.loadoutkillstreak2 )
        return 0;

    if ( var_0.loadoutkillstreak3 != var_1.loadoutkillstreak3 )
        return 0;

    return 1;
}

checkclassstructarray( var_0, var_1 )
{
    if ( var_0.size != var_1.size )
        return 0;

    foreach ( var_4, var_3 in var_0 )
    {
        if ( !isdefined( var_1[var_4] ) )
            return 0;

        if ( var_1[var_4] != var_3 )
            return 0;
    }

    return 1;
}

computerrebootsequence_init()
{
    scripts\engine\utility::ent_flag_init( "swapLoadout_blocked" );
    scripts\engine\utility::ent_flag_init( "swapLoadout_pending" );
    scripts\engine\utility::ent_flag_init( "swapLoadout_complete" );
    scripts\engine\utility::ent_flag_set( "swapLoadout_blocked" );
}

_id_13F02()
{
    if ( scripts\engine\utility::ent_flag_exist( "swapLoadout_blocked" ) && scripts\engine\utility::ent_flag( "swapLoadout_blocked" ) )
        scripts\engine\utility::ent_flag_clear( "swapLoadout_blocked" );
}

zvelscale( var_0 )
{
    var_0.loadoutprimaryobject = var_0.loadoutprimary;

    if ( issameweapon( var_0.loadoutprimary ) )
        var_0.loadoutprimaryfullname = createheadicon( var_0.loadoutprimaryobject );

    if ( var_0.loadoutsecondary == "none" )
    {
        var_0.loadoutsecondaryfullname = "none";
        var_0.loadoutsecondaryobject = undefined;
    }
    else
    {
        if ( istrue( var_0._id_11961 ) )
            var_0.loadoutsecondaryobject = fixsuperforbr( var_0.loadoutsecondary, var_0.loadoutsecondaryattachments, var_0.loadoutsecondarycamo, var_0.loadoutsecondaryreticle, var_0.loadoutsecondaryvariantid, var_0.loadoutsecondaryattachmentids, var_0.loadoutsecondarycosmeticattachment, var_0.loadoutsecondarystickers, istrue( var_0.loadouthasnvg ) );
        else
            var_0.loadoutsecondaryobject = buildweapon( var_0.loadoutsecondary, var_0.loadoutsecondaryattachments, var_0.loadoutsecondarycamo, var_0.loadoutsecondaryreticle, var_0.loadoutsecondaryvariantid, var_0.loadoutsecondaryattachmentids, var_0.loadoutsecondarycosmeticattachment, var_0.loadoutsecondarystickers, istrue( var_0.loadouthasnvg ) );

        var_0.loadoutsecondaryfullname = createheadicon( var_0.loadoutsecondaryobject );
    }

    if ( var_0.loadoutmeleeslot != "none" )
    {
        self giveweapon( var_0.loadoutmeleeslot );
        self assignweaponmeleeslot( var_0.loadoutmeleeslot );
    }
}
