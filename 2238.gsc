// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "toma_strike", "init" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "toma_strike", "init" ) ]]();

    level.toma_strikes = [];
    init_toma_strike_vo();
}

init_toma_strike_vo()
{
    game["dialog"]["cluster_strike_hit"] = "cluster_strike_hit";
    game["dialog"]["cluster_strike_miss"] = "cluster_strike_miss";
}

trytomastriketriggered( var_0 )
{
    var_1 = var_0.streakname;
    var_2 = getdvarint( "scr_toma_strike_type", 3 );
    return 1;
}

weapondetonatedtomastrike( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_3 = getdvarint( "scr_toma_strike_type", 3 );
    var_2 thread tomastrike_attacktarget( var_3, undefined, var_1, var_0 );
}

weapongiventomastrike( var_0 )
{
    if ( isdefined( level.toma_strikes ) && level.toma_strikes.size >= 2 )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "KILLSTREAKS/AIR_SPACE_TOO_CROWDED" );

        var_0 notify( "killstreak_finished_with_deploy_weapon" );
        return 0;
    }

    return 1;
}

weaponswitchendedtomastrike( var_0, var_1 )
{
    var_2 = getdvarint( "scr_toma_strike_type", 3 );

    if ( scripts\cp_mp\utility\game_utility::_id_140A9() )
        thread scripts\cp_mp\killstreaks\airstrike::airstrike_watchforads( var_0 );
}

weaponfiredtomastrike( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0._id_13A81 ) )
    {
        var_3 = tomastrike_getownerlookat( self );

        if ( !isdefined( var_3 ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
                [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "KILLSTREAKS/INVALID_POINT" );

            return "continue";
        }
    }

    if ( isdefined( level.gametype ) )
    {
        if ( level.gametype == "br" && isdefined( self.scrambledby ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
                self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "MP_BR_INGAME_TU_WZ335/JAMMED" );

            return "continue";
        }
    }

    if ( scripts\cp_mp\emp_debuff::is_empd() )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
            self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "KILLSTREAKS/CANNOT_BE_USED" );

        return "continue";
    }

    var_4 = undefined;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "sound", "playKillstreakDeployDialog" ) )
    {
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "sound", "playKillstreakDeployDialog" ) ]]( self, var_0.streakname );
        var_4 = 2.0;
    }

    thread scripts\cp_mp\utility\killstreak_utility::playkillstreakoperatordialog( "use_" + var_0.streakname, 1, var_4 );
    return "success";
}

tryusetomastrike()
{
    var_0 = scripts\cp_mp\utility\killstreak_utility::createstreakinfo( "toma_strike", self );
    return tryusetomastrikefromstruct( var_0 );
}

tryusetomastrikefromstruct( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( isdefined( level.killstreaktriggeredfunc ) )
    {
        if ( !level [[ level.killstreaktriggeredfunc ]]( var_0 ) )
            return 0;
    }

    var_1 = getdvarint( "scr_toma_strike_type", 3 );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getGameType" ) )
    {
        var_2 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getGameType" ) ]]();

        if ( var_2 == "br" )
            var_1 = 5;
    }

    if ( var_1 == 4 )
    {
        var_3 = scripts\mp\killstreaks\throwback_marker::throwbackmarker_trythrowbackmarker( var_0, ::weapondetonatedtomastrike );

        if ( !istrue( var_3 ) )
            return 0;
    }
    else if ( var_1 == 5 && isdefined( self.waitandunloadinfils ) )
    {
        var_0._id_13A81 = self.waitandunloadinfils;
        self.waitandunloadinfils = undefined;
        var_4 = weaponfiredtomastrike( var_0, undefined, undefined );

        if ( var_4 != "success" )
            return 0;
    }
    else
    {
        if ( scripts\cp_mp\utility\game_utility::_id_140A9() )
            var_5 = getcompleteweaponname( "iw8_spotter_scope_mp_ch3", [ "spotterscope" ] );
        else
            var_5 = getcompleteweaponname( "iw8_green_beam_mp" );

        var_3 = scripts\cp_mp\killstreaks\killstreakdeploy::streakdeploy_doweaponfireddeploy( var_0, var_5, "weapon_fired", ::weapongiventomastrike, ::weaponswitchendedtomastrike, ::weaponfiredtomastrike );

        if ( !istrue( var_3 ) )
            return 0;
    }

    if ( isdefined( level.killstreakbeginusefunc ) )
    {
        if ( !level [[ level.killstreakbeginusefunc ]]( var_0 ) )
            return 0;
    }

    if ( tomastrike_isremotevehicletype( var_1 ) )
    {
        var_6 = 1;

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "currentActiveVehicleCount" ) && scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "maxVehiclesAllowed" ) )
        {
            if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "currentActiveVehicleCount" ) ]]() >= [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "maxVehiclesAllowed" ) ]]() || level.fauxvehiclecount + var_6 >= [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "maxVehiclesAllowed" ) ]]() )
            {
                self iprintlnbold( &"KILLSTREAKS/TOO_MANY_VEHICLES" );
                var_0 notify( "killstreak_finished_with_deploy_weapon" );
                return 0;
            }
        }

        var_3 = scripts\cp_mp\killstreaks\killstreakdeploy::streakdeploy_doweapontabletdeploy( var_0, ::weapongiventomastrike, ::weaponswitchendedtomastrike );

        if ( !istrue( var_3 ) )
            return 0;
    }

    var_7 = undefined;

    if ( var_1 == 0 )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle", "incrementFauxVehicleCount" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle", "incrementFauxVehicleCount" ) ]]();

        var_7 = createtomastrikedrone( self, var_0 );

        if ( !isdefined( var_7 ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle", "decrementFauxVehicleCount" ) )
                [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle", "decrementFauxVehicleCount" ) ]]();

            return 0;
        }
    }
    else if ( var_1 == 1 )
    {
        if ( level.toma_cameras.size == 0 )
        {
            var_8 = [ "ks_strike_camera_1", "ks_strike_camera_2", "ks_strike_camera_3", "ks_strike_camera_4" ];

            foreach ( var_10 in var_8 )
            {
                var_11 = scripts\engine\utility::getstruct( var_10, "targetname" );

                if ( !isdefined( var_11 ) )
                {
                    var_0 notify( "killstreak_finished_with_deploy_weapon" );
                    return;
                }

                var_12 = spawn( "script_model", var_11.origin );
                var_12.angles = var_11.angles;
                var_12.targetname = var_11.targetname;
                var_12 setmodel( "tag_player" );
                level.toma_cameras[level.toma_cameras.size] = var_12;
            }
        }
    }
    else if ( var_1 == 2 )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle", "incrementFauxVehicleCount" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle", "incrementFauxVehicleCount" ) ]]();

        var_7 = createtomastrikebomber( self, var_0 );

        if ( !isdefined( var_7 ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle", "decrementFauxVehicleCount" ) )
                [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle", "decrementFauxVehicleCount" ) ]]();

            return 0;
        }
    }
    else
        level.toma_strikes[level.toma_strikes.size] = self;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "teamPlayerCardSplash" ) )
        level thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "teamPlayerCardSplash" ) ]]( "used_toma_strike", self );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "logKillstreakEvent" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "logKillstreakEvent" ) ]]( var_0.streakname, self.origin );

    if ( var_1 != 4 )
        thread starttomastrike( var_1, var_7, level.toma_cameras, var_0 );

    if ( isdefined( level.killstreakfinishusefunc ) )
        level thread [[ level.killstreakfinishusefunc ]]( var_0 );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "toma_strike", "munitionUsed" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "toma_strike", "munitionUsed" ) ]]();

    return 1;
}

_id_13BDA( var_0, var_1, var_2 )
{
    var_3 = spawnstruct();
    var_3.origin = var_0;
    var_3.angles = var_1;
    var_3.pers = [];
    var_3.team = "neutral";
    var_3.defaultoperatorteam = "neutral";
    var_3.classname = "worldspawn";

    if ( !isdefined( var_2 ) )
        var_2 = var_3 scripts\cp_mp\utility\killstreak_utility::createstreakinfo( "toma_strike", var_3 );

    var_2.owner = var_3;
    var_2._id_13A81 = var_0;
    var_2._id_121AF = anglestoforward( var_1 );
    var_2._id_133DC = 1;
    var_3 thread starttomastrike( 5, undefined, undefined, var_2 );
}

createtomastrikedrone( var_0, var_1 )
{
    var_2 = scripts\cp_mp\utility\killstreak_utility::removeextracthelipad();
    var_3 = ( 0, 0, 0 );

    if ( isdefined( var_2 ) )
        var_3 = ( 0, 0, var_2.origin[2] );
    else
        var_3 = ( 0, 0, 600 );

    var_3 = var_3 - ( 0, 0, 900 );
    var_4 = spawnhelicopter( var_0, var_0.origin + ( 0, 0, 1000 ), var_0.angles, "veh_toma_drone_mp", "veh8_mil_air_mquebec8" );

    if ( !isdefined( var_4 ) )
        return;

    var_4.speed = 100;
    var_4.accel = 50;
    var_4.health = 9999;
    var_4.maxhealth = 2000;
    var_4.lifetime = 10;
    var_4.team = var_0.team;
    var_4.owner = var_0;
    var_4.angles = var_0.angles;
    var_4.streakinfo = var_1;
    var_4.streakname = var_1.streakname;
    var_4.currentdamagestate = 0;
    var_4.scorepopup = "destroyed_toma_strike";
    var_4.vodestroyed = "destroyed_toma_strike";
    var_4.votimeout = "timeout_toma_strike";
    var_4.destroyedsplash = "callout_destroyed_toma_strike";
    var_4.currentvisionset = "proto_apache_flir_mp";
    level.toma_strikes[level.toma_strikes.size] = var_4;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "addToActiveKillstreakList" ) )
        var_4 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "addToActiveKillstreakList" ) ]]( var_1.streakname, "Killstreak_Air", var_0, 0, 1, 25 );

    var_4 setmaxpitchroll( 15, 15 );
    var_4 vehicle_setspeed( var_4.speed, var_4.accel );
    var_4 sethoverparams( 50, 5, 2.5 );
    var_4 setturningability( 1 );
    var_4 setyawspeed( 500, 100, 25, 0.5 );
    var_4 setotherent( var_0 );
    var_4 setentityowner( var_0 );
    var_4 setcandamage( 1 );
    var_4 setneargoalnotifydist( 100 );
    return var_4;
}

createtomastrikebomber( var_0, var_1 )
{
    var_2 = scripts\cp_mp\utility\killstreak_utility::removeextracthelipad();
    var_3 = ( 0, 0, 0 );

    if ( isdefined( var_2 ) )
        var_3 = ( 0, 0, var_2.origin[2] + 8000 );
    else
        var_3 = ( 0, 0, 5000 );

    var_3 = var_3 - ( 0, 0, 900 );
    var_4 = level.mapcenter - anglestoforward( var_0.angles ) * 5000 + var_3;
    var_5 = level.mapcenter + anglestoforward( var_0.angles ) * 20000 + var_3;
    var_6 = spawn( "script_model", var_4 );
    var_6 setmodel( "veh8_mil_air_acharlie130" );
    var_6.health = 9999;
    var_6.maxhealth = 2000;
    var_6.angles = var_0.angles;
    var_6.owner = var_0;
    var_6.team = var_0.team;
    var_6.streakinfo = var_1;
    var_6.streakname = var_1.streakname;
    var_6.pathstart = var_4;
    var_6.pathgoal = var_5;
    var_6.flaresreservecount = 1;
    var_6 setotherent( var_0 );
    var_6 setentityowner( var_0 );
    var_6 setcandamage( 1 );
    var_6 scriptmoveroutline();
    var_6 scriptmoverthermal();
    var_6.camera = spawn( "script_model", var_6.origin - ( 0, 0, 10 ) );
    var_6.camera setmodel( "tag_player" );
    var_6.camera.angles = vectortoangles( level.mapcenter - var_6.camera.origin );
    var_6.camera linkto( var_6 );
    var_6.cloudsfx = spawn( "script_model", var_6.camera.origin - ( 0, 0, 10 ) );
    var_6.cloudsfx setmodel( "ks_toma_strike_mp" );
    var_6.cloudsfx.angles = var_6.angles;
    var_6.cloudsfx linkto( var_6.camera );
    level.toma_strikes[level.toma_strikes.size] = var_6;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "addToActiveKillstreakList" ) )
        var_6 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "addToActiveKillstreakList" ) ]]( var_1.streakname, "Killstreak_Air", var_0, 0, 1, 25 );

    return var_6;
}

starttomastrike( var_0, var_1, var_2, var_3 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );

    if ( tomastrike_isremotevehicletype( var_0 ) )
    {
        scripts\common\utility::allow_fire( 0 );
        scripts\common\utility::allow_weapon_switch( 0 );
        scripts\common\utility::allow_crouch( 0 );
        scripts\common\utility::allow_prone( 0 );
        scripts\common\utility::allow_usability( 0 );
        scripts\common\utility::allow_killstreaks( 0 );
        self.restoreangles = self.angles;
        var_4 = 1;
        var_5 = spawn( "script_model", self.origin );
        var_5 setmodel( "ks_toma_strike_marker_mp" );
        var_5 setotherent( self );
        var_6 = [];

        foreach ( var_8 in level.players )
        {
            if ( level.teambased && var_8.team == self.team )
                continue;

            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "perk", "hasPerk" ) )
            {
                if ( var_8 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "perk", "hasPerk" ) ]]( "specialty_noscopeoutline" ) )
                    continue;
            }

            var_6[var_6.size] = var_8;
        }

        var_10 = scripts\cp_mp\targetmarkergroups::targetmarkergroup_on( "thermalvisionenemydefault", self, var_6, self, 0, 1, 1 );
        var_11 = scripts\cp_mp\targetmarkergroups::targetmarkergroup_on( "thermalvisionfriendlydefault", self, self, self );

        if ( var_0 == 0 )
        {
            if ( !isdefined( var_1 ) )
                return;

            self setplayerangles( var_1.angles );
            self cameralinkto( var_1, "tag_origin" );
            self remotecontrolvehicle( var_1 );
            var_1 thread tomastrike_watchearlyexit();
            var_1 thread tomastrike_watchdamage();
            var_1 thread tomastrike_watchowner();
            var_1 thread tomastrike_watchdestroyed( var_5 );
            thread tomastrike_watchlifetime( var_5, var_1 );
            var_1.playersfx = spawn( "script_origin", var_1.origin );
            var_1.playersfx linkto( var_1 );
            var_1.playersfx playloopsound( "veh_apache_killstreak_amb_lr" );
            self setclientomnvar( "ui_killstreak_health", ( var_1.maxhealth - var_1.damagetaken ) / var_1.maxhealth );
        }
        else if ( var_0 == 1 )
        {
            if ( !isdefined( var_2 ) || var_2.size == 0 )
                return;

            var_4 = 0;
            scripts\cp_mp\utility\player_utility::_freezecontrols( 1, undefined, "tomaStrike" );
            thread tomastrike_watchcameraswitch( var_2, var_5 );
            thread tomastrike_watchlifetime( var_5, var_1 );
        }
        else if ( var_0 == 2 )
        {
            if ( !isdefined( var_1 ) )
                return;

            self playerlinkweaponviewtodelta( var_1.camera, "tag_player", 1, 180, 180, 10, 90, 0 );
            self playerlinkedsetviewznear( 0 );
            var_1 thread tomastrike_watchearlyexit();
            var_1 thread tomastrike_watchdamage();
            var_1 thread tomastrike_watchowner();
            var_1 thread tomastrike_watchdestroyed( var_5 );
            var_1 thread tomastrike_watchleave( var_5 );
            var_1 thread tomastrike_playearthquakeloop();

            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "flares", "handleIncomingStinger" ) )
                var_1 thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "flares", "handleIncomingStinger" ) ]]( ::tomastrike_handlemissiledetection );

            if ( isplayer( var_1.owner ) )
                var_1.owner setclienttriggeraudiozone( "cluster_strike", 2 );

            var_1.cloudsfx setscriptablepartstate( "clouds", "on" );
            var_1 moveto( var_1.pathgoal, 70 );
        }

        self.clusterammoleft = 3;
        self setclientomnvar( "ui_cluster_controls", 1 );
        self setclientomnvar( "ui_cluster_missiles_left", self.clusterammoleft );
        self visionsetkillstreakforplayer( "proto_toma_strike_mp" );
        thread tomastrike_movetargetguide( var_5, var_1 );
        thread tomastrike_watchammousage( var_5, var_1, var_4 );
        thread tomastrike_watchlasertarget( var_0, var_5, var_1, var_3 );
        thread tomastrike_watchreturnplayer( var_3, var_0, var_10, var_11 );
    }
    else
    {
        thread tomastrike_attacktarget( var_0, undefined, undefined, var_3 );
        var_3 notify( "killstreak_finished_with_deploy_weapon" );
        thread _id_13BD9( var_3 );
        scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( 20 );
        self notify( "cluster_strike_finished" );
        scripts\cp_mp\utility\killstreak_utility::_id_12AA7( var_3 );
    }
}

tomastrike_handlemissiledetection( var_0, var_1, var_2, var_3 )
{
    self endon( "death" );

    for (;;)
    {
        if ( !isdefined( var_2 ) )
            break;

        var_4 = var_2 getpointinbounds( 0, 0, 0 );
        var_5 = distance( self.origin, var_4 );

        if ( var_5 < 4000 && var_2.flaresreservecount > 0 )
        {
            var_2.flaresreservecount--;

            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "flares", "playFx" ) )
                var_2 thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "flares", "playFx" ) ]]( undefined, var_3 );

            var_6 = undefined;

            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "flares", "deploy" ) )
                var_6 = var_2 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "flares", "deploy" ) ]]();

            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "updateScrapAssistDataForceCredit" ) )
                var_2 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "updateScrapAssistDataForceCredit" ) ]]( var_0 );

            self missile_settargetent( var_6 );
            self notify( "missile_pairedWithFlare" );
            return;
        }

        waitframe();
    }
}

tomastrike_watchearlyexit()
{
    self.owner endon( "disconnect" );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "allowRideKillstreakPlayerExit" ) )
        self thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "allowRideKillstreakPlayerExit" ) ]]( "death" );

    self waittill( "killstreakExit" );
    self notify( "death" );
}

tomastrike_watchlifetime( var_0, var_1 )
{
    self endon( "disconnect" );
    self endon( "stop_marker_guide" );
    var_2 = 1;

    if ( isdefined( var_1 ) )
    {
        var_1 endon( "death" );
        var_1 endon( "leaving" );
        var_2 = 0;
    }

    level endon( "game_ended" );
    self setclientomnvar( "ui_killstreak_countdown", gettime() + int( 10000 ) );
    scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( 10 );
    scripts\cp_mp\utility\killstreak_utility::playkillstreakoperatordialog( "timeout_toma_strike" );

    if ( isdefined( var_1 ) )
        var_1 notify( "death" );

    self notify( "tomaStrike_returnPlayer", var_2 );

    if ( isdefined( var_0 ) )
        var_0 delete();

    self notify( "stop_marker_guide" );
}

tomastrike_watchdamage()
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "toma_strike", "monitorDamage" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "toma_strike", "monitorDamage" ) ]]( self.maxhealth, "hitequip", ::tomastrike_watchdeathdamage, ::tomastrike_modifydamage, 1 );
}

tomastrike_modifydamage( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.objweapon;
    var_3 = var_0.meansofdeath;
    var_4 = var_0.damage;
    var_5 = var_0.idflags;
    var_6 = var_4;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "getModifiedAntiKillstreakDamage" ) )
        var_6 = self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "getModifiedAntiKillstreakDamage" ) ]]( var_1, var_2, var_3, var_6, self.maxhealth, 2, 3, 4 );

    if ( isdefined( self.owner ) && self.owner scripts\cp_mp\utility\player_utility::isusingremote() )
    {
        if ( istrue( self.largeprojectiledamage ) )
        {
            earthquake( 0.25, 0.2, self.origin, 150 );
            self.owner playrumbleonentity( "damage_heavy" );
        }
        else
        {
            earthquake( 0.15, 0.15, self.origin, 150 );
            self.owner playrumbleonentity( "damage_light" );
        }
    }

    self.currenthealth = self.maxhealth - ( self.damagetaken + var_6 );
    self.owner setclientomnvar( "ui_killstreak_health", self.currenthealth / self.maxhealth );
    return var_6;
}

tomastrike_watchdeathdamage( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.objweapon;
    var_3 = var_0.meansofdeath;
    var_4 = var_0.damage;
    var_5 = var_0.idflags;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "damage", "onKillstreakKilled" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "damage", "onKillstreakKilled" ) ]]( self.streakname, var_1, var_2, var_3, var_4, self.scorepopup, self.vodestroyed, self.destroyedsplash );

    self notify( "death" );
}

tomastrike_watchdestroyed( var_0 )
{
    self endon( "gone" );
    self waittill( "death" );

    if ( !isdefined( self ) )
        return;

    self.owner notify( "toma_strike_end" );

    if ( isdefined( self.owner ) && self.owner scripts\cp_mp\utility\player_utility::isusingremote() )
        self.owner notify( "tomaStrike_returnPlayer", 0 );

    thread tomastrike_explode( self.owner, self.origin, "toma_proj_mp", var_0 );
}

tomastrike_watchleave( var_0 )
{
    self endon( "death" );
    level endon( "game_ended" );
    scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( 35.0 );
    self notify( "leaving" );

    if ( isdefined( self.owner ) && self.owner scripts\cp_mp\utility\player_utility::isusingremote() )
        self.owner notify( "tomaStrike_returnPlayer", 0 );

    if ( isdefined( self.turret ) )
        self.turret delete();

    if ( isdefined( self.camera ) )
        self.camera delete();

    if ( isdefined( self.cloudsfx ) )
        self.cloudsfx delete();

    if ( isdefined( var_0 ) )
        var_0 delete();

    thread tomastrike_watchgoal( var_0 );
}

tomastrike_watchgoal( var_0 )
{
    self endon( "death" );
    level endon( "game_ended" );

    while ( self.origin != self.pathgoal )
        waitframe();

    level.toma_strikes = scripts\engine\utility::array_remove( level.toma_strikes, self );

    if ( isdefined( self.playersfx ) )
    {
        self.playersfx stoploopsound();
        self.playersfx delete();
    }

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle", "decrementFauxVehicleCount" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle", "decrementFauxVehicleCount" ) ]]();

    self delete();
}

tomastrike_playearthquakeloop()
{
    self endon( "death" );
    self endon( "leaving" );
    level endon( "game_ended" );

    for (;;)
    {
        self.owner earthquakeforplayer( 0.07, 0.1, self gettagorigin( "tag_origin" ), 700 );
        wait 0.1;
    }
}

tomastrike_watchowner()
{
    self endon( "death" );
    level endon( "game_ended" );
    self.owner scripts\engine\utility::_id_143A6( "disconnect", "joined_team", "joined_spectators" );
    self notify( "death" );
}

tomastrike_watchcameraswitch( var_0, var_1 )
{
    self endon( "disconnect" );
    self endon( "stop_marker_guide" );
    var_2 = var_0[0];
    self playerlinkweaponviewtodelta( var_2, "tag_player", 1, 45, 45, 20, 70, 0 );
    self setplayerangles( var_2.angles );
    self.currentclustercamera = var_2;
    self notifyonplayercommand( "switch_camera_left", "+actionslot 3" );
    self notifyonplayercommand( "switch_camera_left", "+moveleft" );
    self notifyonplayercommand( "switch_camera_right", "+actionslot 4" );
    self notifyonplayercommand( "switch_camera_right", "+moveright" );
    var_3 = 0;
    var_4 = var_0.size - 1;
    var_5 = var_3;

    for (;;)
    {
        var_6 = scripts\engine\utility::_id_143AD( "switch_camera_left", "switch_camera_right" );
        var_7 = var_0[var_5].origin;
        var_8 = self getplayerangles();

        if ( !isdefined( var_6 ) )
            continue;

        switch ( var_6 )
        {
            case "switch_camera_left":
                var_5++;

                if ( var_5 > var_4 )
                    var_5 = var_3;

                break;
            case "switch_camera_right":
                var_5--;

                if ( var_5 < var_3 )
                    var_5 = var_4;

                break;
        }

        tomastrike_playercameratransition( var_7, var_8, var_0[var_5], var_1 );
        waitframe();
    }
}

tomastrike_playercameratransition( var_0, var_1, var_2, var_3 )
{
    level endon( "game_ended" );
    var_4 = spawn( "script_model", var_0 );
    var_4 setmodel( "tag_player" );
    var_4.owner = self;
    var_4.angles = var_1;
    self playerlinkweaponviewtodelta( var_4, "tag_player", 1, 0, 0, 0, 0, 0 );
    self playerlinkedsetviewznear( 0 );
    self visionsetfadetoblackforplayer( "bw", 0.25 );
    self visionsetkillstreakforplayer( "" );
    self visionsetnakedforplayer( "tac_ops_slamzoom", 0.25 );
    self setclientomnvar( "ui_cluster_controls", 0 );
    var_3 setscriptablepartstate( "target", "off", 0 );
    var_4 moveto( var_2.origin, 0.25 );
    var_4 rotateto( var_2.angles, 0.25 );
    var_4 waittill( "rotatedone" );
    scripts\mp\utility\player::restorebasevisionset( 0.2 );
    scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( 0.1 );
    self setclientomnvar( "ui_cluster_controls", 1 );
    self visionsetfadetoblackforplayer( "", 0 );
    self visionsetkillstreakforplayer( "proto_toma_strike_mp" );
    scripts\mp\utility\player::restorebasevisionset( 0 );
    var_3 setscriptablepartstate( "target", "guide", 0 );
    self playerlinkweaponviewtodelta( var_2, "tag_player", 1, 45, 45, 20, 70, 0 );
    self.currentclustercamera = var_2;
    var_4 delete();
}

tomastrike_watchreturnplayer( var_0, var_1, var_2, var_3 )
{
    self endon( "disconnect" );
    self waittill( "tomaStrike_returnPlayer", var_4 );
    tomastrike_returnplayer( var_0, var_1, var_4, var_2, var_3 );
}

tomastrike_watchlasertarget( var_0, var_1, var_2, var_3 )
{
    self endon( "disconnect" );
    self endon( "stop_marker_guide" );

    if ( isdefined( var_2 ) )
    {
        var_2 endon( "death" );
        var_2 endon( "leaving" );
    }

    level endon( "game_ended" );
    self notifyonplayercommand( "drone_target_start", "+attack" );

    for (;;)
    {
        self waittill( "drone_target_start" );

        if ( self.clusterammoleft == 0 )
            continue;

        var_4 = spawn( "script_model", self.origin );
        var_4 setmodel( "ks_toma_strike_marker_mp" );
        var_4 setotherent( self );
        var_4.owner = self;
        thread tomastrike_startlasertarget( var_0, var_2, var_1, var_4, var_3 );

        if ( var_0 == 2 )
            scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( 2 );
    }
}

tomastrike_watchammousage( var_0, var_1, var_2 )
{
    self endon( "disconnect" );
    self endon( "stop_marker_guide" );
    var_3 = 1;

    if ( isdefined( var_1 ) )
    {
        var_1 endon( "death" );
        var_1 endon( "leaving" );
        var_3 = 0;
    }

    for (;;)
    {
        self waittill( "ammo_used" );
        self.clusterammoleft--;
        self setclientomnvar( "ui_cluster_missiles_left", self.clusterammoleft );

        if ( self.clusterammoleft == 0 && istrue( var_2 ) )
        {
            var_0 setscriptablepartstate( "target", "off", 0 );
            self setclientomnvar( "ui_cluster_controls", 2 );
            wait 5;
            var_0 setscriptablepartstate( "target", "guide", 0 );
            self.clusterammoleft = 3;
            self setclientomnvar( "ui_cluster_controls", 1 );
            self setclientomnvar( "ui_cluster_missiles_left", self.clusterammoleft );
            continue;
        }

        self setclientomnvar( "ui_cluster_missiles_left", self.clusterammoleft );

        if ( self.clusterammoleft == 0 )
        {
            self notify( "tomaStrike_returnPlayer", var_3 );

            if ( isdefined( var_0 ) )
                var_0 delete();

            self notify( "stop_marker_guide" );
            break;
        }
    }
}

tomastrike_movetargetguide( var_0, var_1 )
{
    self endon( "disconnect" );
    self endon( "stop_marker_guide" );

    if ( isdefined( var_1 ) )
    {
        var_1 endon( "death" );
        var_1 endon( "leaving" );
    }

    var_0 setscriptablepartstate( "target", "guide", 0 );

    for (;;)
    {
        var_2 = tomastrike_getownerlookat( self );
        var_0.origin = var_2;
        waitframe();
    }
}

tomastrike_getownerlookat( var_0 )
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "aim_override" ) )
        return var_0 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "aim_override" ) ]]();

    var_1 = [ "physicscontents_solid", "physicscontents_water", "physicscontents_sky", "physicscontents_glass", "physicscontents_clipshot", "physicscontents_missileclip", "physicscontents_ainosight", "physicscontents_vehicleclip" ];
    var_2 = physics_createcontents( var_1 );
    var_3 = var_0 getvieworigin();
    var_4 = var_3 + anglestoforward( var_0 getplayerangles() ) * 50000;
    var_5 = var_0 scripts\cp_mp\utility\killstreak_utility::_id_125F8();
    var_6 = scripts\engine\trace::ray_trace( var_3, var_4, var_5, var_2 );
    var_7 = undefined;

    if ( isdefined( var_6["hittype"] ) && var_6["hittype"] != "hittype_none" )
        var_7 = var_6["position"];

    return var_7;
}

tomastrike_watchlaserrelease( var_0 )
{
    var_1 = self.owner;
    var_1 endon( "disconnect" );
    var_1 endon( "drone_target_placed" );
    self endon( "death" );
    level endon( "game_ended" );
    thread tomastrike_watchdronedeath();
    var_1 waittill( "drone_target_release" );
    var_1 notify( "drone_target_cancel" );
    var_0 setscriptablepartstate( "target", "off", 0 );
}

tomastrike_watchdronedeath()
{
    var_0 = self.owner;
    var_0 endon( "disconnect" );
    var_0 endon( "drone_target_release" );
    self waittill( "death" );
    var_0 notify( "toma_strike_end" );
    var_0 notify( "drone_target_cancel" );
}

tomastrike_startlasertarget( var_0, var_1, var_2, var_3, var_4 )
{
    level endon( "game_ended" );
    var_3.origin = var_2.origin;
    var_3 setscriptablepartstate( "target", "placed", 0 );

    if ( var_0 == 1 )
        var_3 thread delayscriptablechangethread( 7 );
    else
        var_3 thread delayscriptablechangethread( 3 );

    self playlocalsound( "weap_cluster_target_beep" );
    self notify( "ammo_used" );

    if ( isdefined( self ) )
        thread tomastrike_attacktarget( var_0, var_1, var_3, var_4 );
}

tomastrike_attacktarget( var_0, var_1, var_2, var_3 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    self notify( "drone_target_placed" );
    var_3.shots_fired++;
    var_4 = undefined;
    var_5 = undefined;

    if ( var_0 == 0 || var_0 == 2 )
    {
        var_4 = var_1.origin - ( 0, 0, 10 ) + anglestoforward( var_1.angles ) * 20;
        var_5 = var_1.angles;
    }
    else if ( var_0 == 1 )
    {
        var_4 = self.currentclustercamera.origin - ( 0, 0, 3000 );
        var_5 = anglestoright( self.currentclustercamera.angles );
    }
    else
    {
        var_4 = self.origin + ( 0, 0, 5000 );

        if ( !istrue( var_3.vehicle_process_node_when_at_goal ) )
            var_4 = var_4 - anglestoforward( self.angles ) * 5000;

        var_5 = anglestoright( self.angles );
    }

    var_6 = undefined;

    if ( isdefined( var_2 ) )
    {
        if ( isvector( var_2 ) )
            var_6 = var_2;
        else
            var_6 = var_2.origin;
    }
    else
    {
        if ( var_0 == 5 && isdefined( var_3._id_13A81 ) )
            var_6 = var_3._id_13A81;
        else
            var_6 = tomastrike_getownerlookat( self );

        if ( !istrue( var_3._id_11EAE ) )
        {
            var_2 = spawn( "script_model", var_6 );
            var_2 setmodel( "ks_toma_strike_marker_mp" );

            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "requestObjectiveID" ) )
                var_2.objidnum = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "requestObjectiveID" ) ]]( 99 );

            var_7 = scripts\cp_mp\utility\script_utility::_id_140DE( "game", "isGameTypeBR", 0 );

            if ( var_7 )
                var_2.icon = "icon_waypoint_clusterstrike_ww2";
            else
                var_2.icon = "icon_waypoint_clusterstrike";

            if ( isplayer( self ) )
                var_2 setotherent( self );

            if ( !istrue( var_3._id_133DC ) )
                var_2 toma_strike_setmarkerobjective( var_2.objidnum, var_2.icon, self, 50 );

            var_2 thread toma_strike_handlemarkerscriptable();
        }
    }

    var_8 = 6;
    var_9 = 300;

    if ( var_0 == 5 )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "br", "challengeEvaluator" ) )
        {
            var_10 = spawnstruct();
            var_10.streakinfo = var_3;
            var_10._id_13A8A = var_6;
            self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "br", "challengeEvaluator" ) ]]( "br_mastery_pointBlank_tomahawk", var_10 );
        }

        var_8 = 6;

        if ( isdefined( var_3._id_11F47 ) )
            var_8 = var_3._id_11F47;

        var_9 = 900;

        if ( isdefined( var_3._id_129E3 ) )
            var_9 = var_3._id_129E3;

        var_11 = var_9;

        if ( isdefined( var_3._id_11ECE ) )
            var_11 = var_3._id_11ECE;

        if ( !istrue( var_3._id_133C9 ) && scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "dangerNotifyPlayersInRange" ) )
            self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "dangerNotifyPlayersInRange" ) ]]( var_6, var_11 + 300, var_3.streakname );
    }

    if ( var_0 == 0 || var_0 == 2 )
    {
        scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( 0.3 );
        var_4 = var_1.origin - ( 0, 0, 10 ) + anglestoforward( var_1.angles ) * 20;
        var_12 = var_6;
        var_13 = spawnstruct();
        var_13.sourcepos = var_4;
        var_13.goalpos = var_12;
        var_13.initvelocity = var_13.goalpos - var_13.sourcepos;
        thread tomastrike_firestrike( var_13, var_3, var_1 );
    }
    else if ( var_0 == 1 || var_0 == 3 || var_0 == 4 || var_0 == 5 )
    {
        var_14 = 2;

        if ( isdefined( var_3._id_121AF ) )
            var_15 = var_3._id_121AF;
        else
            var_15 = anglestoforward( self getplayerangles() );

        var_16 = anglestoforward( self.angles );
        var_17 = anglestoright( self.angles );
        scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( var_14 );

        for ( var_19 = 0; var_19 < var_8; var_19++ )
        {
            var_20 = undefined;

            if ( istrue( var_3.vehicle_process_node_when_at_goal ) )
                var_20 = var_4;

            var_13 = findunobstructedfiringinfo( var_6, var_9, var_15, var_16, var_17, var_20 );
            thread tomastrike_firestrike( var_13, var_3 );
            scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( randomfloatrange( 1.35, 2.5 ) );
        }

        level.toma_strikes = scripts\engine\utility::array_remove( level.toma_strikes, self );
    }
}

findunobstructedfiringinfo( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = spawnstruct();

    if ( isdefined( var_5 ) )
        var_7 = var_5;
    else
        var_7 = _id_13BD5( var_0, var_2, var_3, var_4 );

    var_8 = vectornormalize( var_0 - ( var_7[0], var_7[1], 0 ) );
    var_9 = _id_13BD6( var_0, var_1, var_8 );
    var_10 = ( 0, 0, -1 * getdvarint( "NPOQPMP", 800 ) );
    var_11 = ( var_9.point - 0.5 * var_10 * squared( 4 ) - var_7 ) / 4;
    var_13 = var_7 + var_11 * 3.925 + 0.5 * var_10 * squared( 3.925 );
    var_6.sourcepos = var_7;
    var_6.num_of_frame_frozen = var_9.num_of_frame_frozen;
    var_6.num_of_subway_cars = var_9.num_of_subway_cars;
    var_6.goalpos = var_9.point;
    var_6.preexplpos = var_13;
    var_6.initvelocity = var_11;
    return var_6;
}

delayscriptablechangethread( var_0 )
{
    self.owner endon( "disconnect" );
    self endon( "death" );
    self.owner scripts\engine\utility::_id_143B9( var_0, "stop_marker_guide" );
    self setscriptablepartstate( "target", "off", 0 );
    self delete();
}

tomastrike_screeninterference( var_0, var_1 )
{
    var_2 = self.owner;
    var_2 endon( "disconnect" );

    if ( isdefined( var_2 ) )
    {
        var_2 visionsetthermalforplayer( var_1 );

        if ( isdefined( var_0 ) )
        {
            scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( var_0 );
            var_2 visionsetthermalforplayer( self.currentvisionset );
        }
    }
}

_id_13BD6( var_0, var_1, var_2 )
{
    var_3 = randomint( var_1 );
    var_4 = randomint( 360 );
    var_5 = var_0[0] + var_3 * cos( var_4 );
    var_6 = var_0[1] + var_3 * sin( var_4 );
    var_7 = var_0[2];
    var_8 = ( var_5, var_6, var_7 );

    if ( isdefined( var_2 ) )
        var_8 = var_8 - var_2 * 100;

    var_9 = 10000;

    if ( isdefined( level._id_13BD3 ) )
        var_9 = level._id_13BD3;

    var_10 = spawnstruct();
    var_11 = scripts\engine\trace::create_default_contents( 1 );
    var_12 = scripts\engine\trace::ray_trace( var_8 + ( 0, 0, var_9 ), var_8 - ( 0, 0, var_9 ), undefined, var_11 );

    if ( isdefined( var_12["entity"] ) )
    {
        var_13 = var_12["entity"];
        var_10.num_of_frame_frozen = var_13;

        if ( _id_13BD8( var_13 ) || _id_13BD7( var_13 ) )
            var_10.num_of_subway_cars = "flying";
    }

    if ( isdefined( var_12["position"] ) )
        var_8 = var_12["position"];

    var_10.point = var_8;
    return var_10;
}

_id_13BD8( var_0 )
{
    return var_0 scripts\cp_mp\vehicles\vehicle::isvehicle() && istrue( var_0 scripts\cp_mp\vehicles\vehicle::vehiclecanfly() );
}

_id_13BD7( var_0 )
{
    return isdefined( var_0.streakinfo ) && isdefined( var_0.sentientpool ) && var_0.sentientpool == "Killstreak_Air";
}

tomastrike_firestrike( var_0, var_1, var_2 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );

    if ( isdefined( var_2 ) )
    {
        self earthquakeforplayer( 0.35, 1, var_2.origin, 1000 );
        self playlocalsound( "weap_cluster_fire" );
    }

    var_3 = isplayer( self ) || isagent( self );

    if ( var_3 )
    {
        var_4 = magicgrenademanual( "toma_proj_mp", var_0.sourcepos, var_0.initvelocity, 5, self );
        var_4 setmissileminimapvisible( 1 );
        var_4 setentityowner( self );
        var_4 setotherent( self );
    }
    else
    {
        var_4 = magicgrenademanual( "toma_proj_mp", var_0.sourcepos, var_0.initvelocity, 5 );
        var_4 setmissileminimapvisible( 1 );
    }

    var_4 setscriptablepartstate( "launch", "active", 0 );
    var_4 setscriptablepartstate( "trail", "active", 0 );

    if ( isdefined( var_1._id_121A9 ) )
        var_5 = var_1._id_121A9;
    else
        var_5 = "ks_toma_strike_missile_mp";

    var_4.explodeent = spawn( "script_model", var_4.origin );
    var_4.explodeent setmodel( var_5 );
    var_4.explodeent linkto( var_4 );
    var_4.explodeent dontinterpolate();

    if ( var_3 )
        var_4.explodeent setentityowner( self );

    var_6 = spawn( "script_model", var_0.sourcepos );
    var_6 linkto( var_4, "tag_origin", ( 10, 0, 10 ), ( 0, 0, 0 ) );
    var_4.killcament = var_6;
    var_4.owner = self;
    var_4.streakinfo = var_1;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "spawn", "addSpawnDangerZone" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "spawn", "addSpawnDangerZone" ) ]]( var_0.goalpos, 512, 300, self.team, 6, self, 1 );

    var_4 thread _id_13BD4();
    var_4 thread toma_strike_watch_airexplosion( var_0.preexplpos, var_0.num_of_frame_frozen, var_0.num_of_subway_cars );
    var_4 thread toma_strike_watch_stuck( vectortoangles( var_0.initvelocity ), gettime(), var_0.initvelocity );
}

tomastrike_getmissileendpos( var_0 )
{
    var_1 = var_0;

    foreach ( var_3 in level.players )
    {
        if ( level.teambased && var_3.team == self.team )
            continue;
        else if ( !level.teambased && var_3 == self )
            continue;

        if ( !var_3 scripts\cp_mp\utility\player_utility::_isalive() )
            continue;

        if ( istrue( var_3.markedfortoma ) )
            continue;

        if ( distancesquared( var_0, var_3.origin ) > 250000 )
            continue;

        var_3.markedfortoma = 1;
        var_1 = var_3.origin;
        var_3 thread clearmarkonrespawn();
        break;
    }

    return var_1;
}

clearmarkonrespawn()
{
    self endon( "disconnect" );
    scripts\engine\utility::_id_143B9( 10, "death" );
    self.markedfortoma = undefined;
}

tomastrike_returnplayer( var_0, var_1, var_2, var_3, var_4 )
{
    scripts\common\utility::allow_fire( 1 );
    scripts\common\utility::allow_weapon_switch( 1 );
    scripts\common\utility::allow_crouch( 1 );
    scripts\common\utility::allow_prone( 1 );
    scripts\common\utility::allow_usability( 1 );
    scripts\common\utility::allow_killstreaks( 1 );
    self clearclienttriggeraudiozone( 1 );

    if ( var_1 == 1 )
        scripts\cp_mp\utility\player_utility::_freezecontrols( 0, undefined, "tomaStrike" );

    if ( !istrue( var_2 ) )
    {
        if ( var_1 == 0 )
        {
            self remotecontrolvehicleoff();
            self cameraunlink();
            self setplayerangles( self.restoreangles );
            self.restoreangles = undefined;
        }
        else if ( var_1 == 2 )
            self unlink();
    }
    else
    {
        self unlink();
        self setplayerangles( self.restoreangles );
        self.restoreangles = undefined;
    }

    self setclientomnvar( "ui_cluster_controls", 0 );
    self setclientomnvar( "ui_cluster_missiles_left", 0 );
    self visionsetkillstreakforplayer( "", 0 );
    self visionsetfadetoblackforplayer( "", 0 );
    scripts\mp\utility\player::restorebasevisionset( 0 );
    scripts\cp_mp\targetmarkergroups::targetmarkergroup_off( var_3 );
    scripts\cp_mp\targetmarkergroups::targetmarkergroup_off( var_4 );
    var_0 notify( "killstreak_finished_with_deploy_weapon" );
}

tomastrike_explode( var_0, var_1, var_2, var_3 )
{
    self playsound( "weap_hellfire_impact" );

    if ( isdefined( self.playersfx ) )
    {
        self.playersfx stoploopsound();
        self.playersfx delete();
    }

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "shellshock", "grenade_earthQuakeAtPosition" ) )
        level thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "shellshock", "grenade_earthQuakeAtPosition" ) ]]( var_1, 1.2 );

    level.toma_strikes = scripts\engine\utility::array_remove( level.toma_strikes, self );

    if ( isdefined( self.turret ) )
        self.turret delete();

    if ( isdefined( self.camera ) )
        self.camera delete();

    if ( isdefined( self.cloudsfx ) )
        self.cloudsfx delete();

    if ( isdefined( var_3 ) )
        var_3 delete();

    self delete();

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle", "decrementFauxVehicleCount" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle", "decrementFauxVehicleCount" ) ]]();
}

toma_strike_missile_explode( var_0 )
{
    self endon( "death" );
    self.exploding = 1;
    self.explodeent unlink();
    self.explodeent.origin = var_0;
    self.explodeent setscriptablepartstate( "explode", "active", 0 );
    thread toma_strike_delay_hide();
    scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( 3 );

    if ( isdefined( self.explodeent ) )
        self.explodeent delete();

    self delete();
}

toma_strike_delay_hide()
{
    self endon( "death" );
    wait 0.05;
    self setscriptablepartstate( "trail", "neutral", 0 );
    self hide();
}

_id_13BD4()
{
    self endon( "death" );
    var_0 = self.owner;
    var_0 waittill( "disconnect" );

    if ( isdefined( self.killcament ) )
        self.killcament delete();

    self setmissileminimapvisible( 0 );
    thread toma_strike_missile_explode( self.origin );
    self notify( "missile_dest_failed" );
}

toma_strike_watch_airexplosion( var_0, var_1, var_2 )
{
    self endon( "death" );
    self endon( "missile_dest_failed" );
    self.killcament thread toma_strike_move_killcam( 3.675, var_0 );
    scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( 3.925 );
    self setmissileminimapvisible( 0 );
    thread toma_strike_missile_explode( var_0 );

    if ( isdefined( var_1 ) && isdefined( var_2 ) && var_2 == "flying" )
    {
        var_3 = self.owner;

        if ( !isplayer( var_3 ) )
            var_3 = self;

        var_1 dodamage( 500, var_0, var_3, self, "MOD_EXPLOSIVE", getcompleteweaponname( "toma_proj_mp" ) );
    }
}

toma_strike_move_killcam( var_0, var_1 )
{
    self endon( "death" );
    scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( var_0 );
    self unlink();
    self moveto( var_1, 3 );
    scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( 7 );
    self delete();
}

toma_strike_watch_stuck( var_0, var_1, var_2 )
{
    self endon( "death" );
    self endon( "missile_dest_failed" );
    self waittill( "missile_stuck", var_3 );
    self setmissileminimapvisible( 0 );

    if ( gettime() - var_1 < 3925.0 )
    {
        thread toma_strike_missile_explode( self.origin );
        self notify( "missile_dest_failed" );
    }
    else
    {
        wait 0.05;
        var_4 = -1 * getdvarint( "NPOQPMP", 800 );
        var_5 = ( gettime() - var_1 ) / 1000;
        var_6 = var_2 + ( 0, 0, var_4 * var_5 );

        if ( isdefined( var_3 ) && isplayer( var_3 ) )
        {
            toma_strike_stuck_player( self, var_3, var_0, var_6 );
            return;
        }

        toma_strike_stuck( var_3, var_0, var_6 );
    }
}

toma_strike_stuck( var_0, var_1, var_2 )
{
    var_3 = undefined;
    var_4 = vectornormalize( var_2 );
    var_5 = anglestoup( self.angles );
    var_6 = anglestoright( var_1 );

    if ( abs( vectordot( var_4, var_5 ) ) >= 0.9848 )
        var_3 = toma_strike_rebuild_angles_up_right( var_5, var_6 );
    else
        var_3 = toma_strike_rebuild_angles_up_forward( var_5, var_4 );

    self.angles = var_3;
    thread toma_strike_launch_cluster( self, self.origin, var_3, var_0, gettime() );
}

toma_strike_stuck_player( var_0, var_1, var_2, var_3 )
{
    var_3 = var_3 * ( 0, 0, 1 );
    var_4 = var_0.origin;
    var_5 = ( 0, 0, -1 );
    var_6 = var_4 + var_5 * 128;
    var_7 = physics_createcontents( [ "physicscontents_solid", "physicscontents_glass", "physicscontents_water", "physicscontents_sky", "physicscontents_item", "physicscontents_vehicle" ] );
    var_8 = physics_raycast( var_4, var_6, var_7, var_0, 0, "physicsquery_closest", 1 );

    if ( isdefined( var_8 ) && var_8.size > 0 )
    {
        var_6 = var_8[0]["position"];
        var_9 = var_8[0]["normal"];
        var_10 = var_8[0]["entity"];
        var_6 = var_6 - var_9 * 1;
        var_11 = -1 * getdvarint( "NPOQPMP", 800 );
        var_12 = vectordot( var_6 - var_4, var_5 );
        var_13 = sqrt( 2 * var_12 / ( -1 * var_11 ) );
        var_14 = var_9;
        var_15 = anglestoright( var_2 );
        var_16 = toma_strike_rebuild_angles_up_right( var_14, var_15 );
        thread toma_strike_launch_cluster( var_0, var_6, var_16, var_10, gettime() + var_13 * 1000 );
    }
}

toma_strike_launch_cluster( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = var_0.owner;
    var_6 = var_0.killcament;
    var_7 = anglestoup( var_2 );
    var_8 = var_1 + var_7 * 1;
    var_9 = var_8 + var_7 * 25;
    var_10 = physics_createcontents( [ "physicscontents_solid", "physicscontents_glass", "physicscontents_water", "physicscontents_sky", "physicscontents_item", "physicscontents_vehicle" ] );
    var_11 = physics_raycast( var_8, var_9, var_10, var_0, 0, "physicsquery_closest", 1 );

    if ( isdefined( var_11 ) && var_11.size > 0 )
        var_9 = var_11[0]["position"] - var_7 * 1;

    var_12 = var_9;
    var_13 = toma_strike_get_shared_data( var_5, var_0.streakinfo, var_4, var_6 );
    var_14 = toma_strike_get_cast_data();
    var_15 = toma_strike_create_branch( var_13, var_14, undefined, var_12, var_2, var_3, 0, undefined, undefined );
    var_13.branches[var_13.branches.size] = var_15;
    var_15.killcament = var_6;
    var_16 = anglestoforward( var_2 );
    var_17 = anglestoright( var_2 );
    var_18 = anglestoup( var_2 );
    var_19 = rotatepointaroundvector( var_18, var_16, 30 );
    var_20 = vectornormalize( vectorcross( var_19, var_18 ) );
    var_21 = vectorcross( var_20, var_16 );
    var_22 = axistoangles( var_19, var_20, var_21 );
    var_14 = toma_strike_get_cast_data();
    var_15 = toma_strike_create_branch( var_13, var_14, undefined, var_12, var_22, var_3, 0, undefined, undefined );
    var_15.killcament = var_6;
    var_13.branches[var_13.branches.size] = var_15;
    var_19 = rotatepointaroundvector( var_18, var_16, -30 );
    var_20 = vectornormalize( vectorcross( var_19, var_18 ) );
    var_21 = vectorcross( var_20, var_16 );
    var_22 = axistoangles( var_19, var_20, var_21 );
    var_14 = toma_strike_get_cast_data();
    var_15 = toma_strike_create_branch( var_13, var_14, undefined, var_12, var_22, var_3, 0, undefined, undefined );
    var_15.killcament = var_6;
    var_13.branches[var_13.branches.size] = var_15;
    var_13 toma_strike_shared_data_register_cast();

    foreach ( var_15 in var_13.branches )
        var_15 thread toma_strike_start_branch();
}

toma_strike_start_branch()
{
    var_0 = self.killcament;

    if ( !isdefined( self.preventstarttime ) )
        self.preventstarttime = gettime();

    if ( !isdefined( self.startingcasttype ) )
    {
        if ( !self.shareddata toma_strike_shared_data_is_complete() )
        {
            var_1 = toma_strike_branch_create_explosion( self.startingorigin, self.startingangles, self.startingstuckto, self.shareddata.streakinfo );
            var_1.killcament = var_0;
            var_1 thread toma_strike_start_explosion();
            self.iscomplete = 1;
            self.shareddata toma_strike_shared_data_is_complete( 1 );
        }
    }
    else
    {
        self.caststart = self.startingorigin;
        self.castend = undefined;
        self.castangles = self.startingangles;
        self.castdir = undefined;
        self.casttype = self.startingcasttype;
        self.startingorigin = undefined;
        self.startingangles = undefined;
        self.startingcasttype = undefined;

        for (;;)
        {
            if ( self.shareddata toma_strike_shared_data_is_complete() )
                break;

            if ( toma_strike_branch_is_complete() )
                break;

            if ( !self.shareddata toma_strike_shared_data_can_cast_this_frame() )
            {
                waitframe();
                continue;
            }

            if ( self.casttype == 0 )
            {
                var_2 = self.castdata.firstforwardmodanglesfunc;

                if ( isdefined( var_2 ) )
                {
                    self.castangles = [[ var_2 ]]( self.castangles );
                    self.castdata.firstforwardmodanglesfunc = undefined;
                }
            }

            self.castdir = toma_strike_get_cast_dir( self.castangles, self.casttype );
            self.castend = self.caststart + self.castdir * toma_strike_get_cast_dist( self.casttype, self.castdata );
            var_3 = undefined;
            var_4 = undefined;
            var_5 = undefined;
            var_6 = undefined;
            var_7 = undefined;
            var_8 = physics_raycast( self.caststart, self.castend, self.shareddata.castcontents, undefined, 0, "physicsquery_closest", 1 );

            if ( isdefined( var_8 ) && var_8.size > 0 )
            {
                var_3 = 1;
                var_4 = var_8[0]["position"];
                var_5 = var_8[0]["normal"];
                var_6 = var_8[0]["entity"];
            }

            switch ( self.casttype )
            {
                case 0:
                    if ( istrue( var_3 ) )
                    {
                        toma_strike_branch_register_cast( self.casttype, 0, var_4 );
                        var_9 = 1;

                        if ( isdefined( self.castdata.firstforwarddist ) )
                        {
                            var_10 = var_4 - self.caststart;
                            var_11 = vectordot( var_10, self.castdir );
                            self.castdata.firstforwarddist = self.castdata.firstforwarddist - var_11;

                            if ( self.castdata.firstforwarddist > self.castdata.firstforwardmindist )
                                var_9 = 0;
                            else
                                self.castdata.firstforwarddist = undefined;
                        }

                        var_7 = toma_strike_rebuild_angles_up_right( var_5, anglestoright( self.castangles ) );

                        if ( var_9 )
                        {
                            var_1 = toma_strike_branch_create_explosion( var_4, var_7, var_6, self.shareddata.streakinfo );
                            var_1.killcament = var_0;
                            var_1 thread toma_strike_start_explosion();
                        }

                        self.casttype = 2;
                        self.caststart = var_4 + var_5 * 1;
                        self.castangles = var_7;
                    }
                    else
                    {
                        toma_strike_branch_register_cast( self.casttype, undefined, undefined );

                        if ( isdefined( self.castdata.firstforwarddist ) )
                        {
                            var_10 = self.castend - self.caststart;
                            var_11 = vectordot( var_10, self.castdir );
                            self.castdata.firstforwarddist = self.castdata.firstforwarddist - var_11;

                            if ( self.castdata.firstforwarddist <= self.castdata.firstforwardmindist )
                                self.castdata.firstforwarddist = undefined;
                        }

                        self.casttype = 1;
                        self.caststart = self.castend;
                    }

                    break;
                case 1:
                    if ( istrue( var_3 ) )
                    {
                        var_7 = toma_strike_rebuild_angles_up_right( var_5, anglestoright( self.castangles ) );
                        var_1 = toma_strike_branch_create_explosion( var_4, var_7, var_6, self.shareddata.streakinfo );
                        var_1.killcament = var_0;
                        var_1 thread toma_strike_start_explosion();
                        var_12 = vectordot( anglestoup( self.castangles ), var_5 );

                        if ( var_12 < 0.9848 )
                        {
                            toma_strike_branch_register_cast( self.casttype, 2, var_4 );
                            self.casttype = 2;
                            self.caststart = var_4 + var_5 * 1;
                            self.castangles = var_7;
                        }
                        else
                        {
                            toma_strike_branch_register_cast( self.casttype, 1, var_4 );
                            self.casttype = 0;
                        }
                    }
                    else
                    {
                        toma_strike_branch_register_cast( self.casttype, undefined, undefined );
                        self.caststart = self.castend;
                    }

                    break;
                case 2:
                    if ( istrue( var_3 ) )
                    {
                        toma_strike_branch_register_cast( self.casttype, 3, var_4 );
                        self.casttype = 0;
                        self.caststart = var_4 + var_5 * 1;
                    }
                    else
                    {
                        toma_strike_branch_register_cast( self.casttype, undefined, undefined );
                        self.casttype = 0;
                    }

                    break;
            }

            waittillframeend;
        }

        self.iscomplete = 1;
        self.shareddata toma_strike_shared_data_is_complete( 1 );
        self.shareddata.branches = [];
    }
}

toma_strike_branch_create_explosion( var_0, var_1, var_2, var_3 )
{
    var_4 = 50;

    if ( 1 )
        var_4 = randomintrange( 50, 350 );

    var_5 = self.preventstarttime + var_4;
    var_6 = toma_strike_create_explosion( var_0 + anglestoup( var_1 ), var_1, var_2, self.shareddata.owner, var_5, var_3 );
    self.preventstarttime = var_5;
    self.ents[self.ents.size] = var_6;
    self.shareddata toma_strike_shared_data_register_ent();
    return var_6;
}

toma_strike_create_explosion( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = spawn( "script_model", var_0 );
    var_6.angles = var_1;
    var_6.stuckto = var_2;
    var_6.owner = var_3;
    var_6.starttime = var_4;
    var_6.streakinfo = var_5;

    if ( isdefined( var_5._id_121A8 ) )
        var_7 = var_5._id_121A8;
    else
        var_7 = "ks_toma_strike_cluster_mp";

    var_6 setmodel( var_7 );

    if ( isplayer( var_3 ) )
    {
        var_6 setotherent( var_3 );
        var_6 setentityowner( var_3 );
    }

    if ( isdefined( var_2 ) )
        var_6 linkto( var_2 );

    return var_6;
}

toma_strike_start_explosion()
{
    self endon( "death" );
    self.owner endon( "disconnect" );
    self.owner endon( "joined_team" );

    if ( isdefined( self.stuckto ) )
        self.stuckto endon( "death" );

    while ( gettime() < self.starttime )
        waitframe();

    thread toma_strike_explosion_end();
}

toma_strike_explosion_end()
{
    self setscriptablepartstate( "explode", "active", 0 );
    wait 1;
    self delete();
}

toma_strike_shared_data_register_cast()
{
    self.caststotal++;
    self.caststhisframe++;
    self.frametimestamp = gettime();
}

toma_strike_shared_data_register_ent()
{
    self.entstotal++;
}

toma_strike_shared_data_can_cast_this_frame()
{
    if ( self.frametimestamp < gettime() )
    {
        self.frametimestamp = gettime();
        self.caststhisframe = 0;
    }

    return self.caststhisframe < 3;
}

toma_strike_shared_data_is_complete( var_0 )
{
    var_1 = 0;

    if ( self.caststotal >= 60 )
        var_1 = 1;
    else if ( self.entstotal >= 20 )
        var_1 = 1;
    else if ( istrue( var_0 ) )
    {
        var_2 = 1;

        foreach ( var_4 in self.branches )
        {
            if ( !var_4 toma_strike_branch_is_complete() )
            {
                var_2 = 0;
                break;
            }
        }

        if ( var_2 )
            var_1 = 1;
    }

    if ( var_1 )
        self.iscomplete = 1;

    return var_1;
}

toma_strike_branch_register_cast( var_0, var_1, var_2 )
{
    self.shareddata toma_strike_shared_data_register_cast();
    self.casts++;

    if ( isdefined( var_1 ) )
    {
        if ( var_1 == 0 || var_1 == 1 || var_1 == 2 )
            self.castfails = 0;
    }
    else if ( var_0 == 1 )
        self.castfails++;
}

toma_strike_branch_is_complete( var_0 )
{
    var_1 = 0;
    var_2 = undefined;

    if ( self.shareddata toma_strike_shared_data_is_complete() )
        var_1 = 1;
    else if ( isdefined( self.castdata ) && self.castfails >= self.castdata.maxfails )
        var_1 = 1;
    else if ( isdefined( self.castdata ) && self.casts >= self.castdata.maxcasts )
        var_1 = 1;
    else if ( isdefined( self.castdata ) && self.ents.size >= self.castdata.maxents )
        var_1 = 1;
    else if ( istrue( var_0 ) )
    {
        var_2 = 1;

        foreach ( var_4 in self.branches )
        {
            if ( !var_4 toma_strike_branch_is_complete() )
            {
                var_2 = 0;
                break;
            }
        }

        if ( var_2 )
            var_1 = 1;
    }

    if ( var_1 && !istrue( self.iscomplete ) )
    {
        var_6 = self.oncompletedfunc;

        if ( isdefined( var_6 ) )
            self [[ var_6 ]]();

        if ( istrue( var_2 ) )
        {
            var_1 = 0;

            foreach ( var_4 in self.branches )
            {
                if ( !var_4 toma_strike_branch_is_complete() )
                {
                    var_2 = 0;
                    break;
                }
            }

            if ( var_2 )
                var_1 = 1;
        }
    }

    if ( var_1 )
        self.iscomplete = 1;

    return var_1;
}

toma_strike_create_branch( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    var_9 = spawnstruct();
    var_9.shareddata = var_0;
    var_9.castdata = var_1;
    var_9.startingorigin = var_3;
    var_9.startingangles = var_4;
    var_9.startingstuckto = var_5;
    var_9.startingcasttype = var_6;
    var_9.oncompletedfunc = var_8;
    var_9.ents = [];
    var_9.branches = [];
    var_9.hitpositions = [];
    var_9.hittypes = [];
    var_9.casts = 0;
    var_9.castfails = 0;
    var_9.preventstarttime = var_7;
    return var_9;
}

toma_strike_get_shared_data( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_4.owner = var_0;
    var_4.team = var_0.team;
    var_4.streakinfo = var_1;
    var_4.impacttime = var_2;
    var_4.branches = [];
    var_4.entstotal = 0;
    var_4.caststotal = 0;
    var_4.caststhisframe = 0;
    var_4.frametimestamp = gettime();
    var_4.castcontents = physics_createcontents( [ "physicscontents_solid", "physicscontents_glass", "physicscontents_water", "physicscontents_sky", "physicscontents_item", "physicscontents_vehicle" ] );
    return var_4;
}

toma_strike_get_cast_data()
{
    var_0 = spawnstruct();
    var_0.distforward = 125;
    var_0.distdown = 50;
    var_0.distup = 25;
    var_0.maxcasts = 12;
    var_0.maxfails = 3;
    var_0.maxents = 4;
    return var_0;
}

toma_strike_get_cast_dir( var_0, var_1 )
{
    switch ( var_1 )
    {
        case 0:
            return anglestoforward( var_0 );
        case 1:
            return -1 * anglestoup( var_0 );
        case 2:
            return anglestoup( var_0 );
    }

    return undefined;
}

toma_strike_get_cast_dist( var_0, var_1 )
{
    switch ( var_0 )
    {
        case 0:
            if ( isdefined( var_1.firstforwarddist ) )
                return var_1.firstforwarddist;
            else
                return var_1.distforward;
        case 1:
            return var_1.distdown;
        case 2:
            return var_1.distup;
    }

    return undefined;
}

toma_strike_rebuild_angles_up_right( var_0, var_1 )
{
    var_2 = vectornormalize( vectorcross( var_0, var_1 ) );
    var_1 = vectorcross( var_2, var_0 );
    return axistoangles( var_2, var_1, var_0 );
}

toma_strike_rebuild_angles_up_forward( var_0, var_1 )
{
    var_2 = vectornormalize( vectorcross( var_1, var_0 ) );
    var_1 = vectorcross( var_0, var_2 );
    return axistoangles( var_1, var_2, var_0 );
}

tomastrike_isremotevehicletype( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case 2:
        case 1:
        case 0:
            var_1 = 1;
            break;
    }

    return var_1;
}

tomastrike_ismarkertype( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case 4:
        case 3:
            var_1 = 1;
            break;
    }

    return var_1;
}

toma_strike_setmarkerobjective( var_0, var_1, var_2, var_3 )
{
    objective_icon( var_0, var_1 );
    objective_showtoplayersinmask( var_0 );

    if ( isplayer( var_2 ) )
        objective_addclienttomask( var_0, var_2 );

    objective_onentity( var_0, self );
    objective_setzoffset( var_0, var_3 );
    objective_setplayintro( var_0, 0 );
    objective_setplayoutro( var_0, 0 );
    objective_setbackground( var_0, 1 );

    if ( level.teambased || !isplayer( var_2 ) )
        objective_setownerteam( var_0, var_2.team );
    else
        objective_setownerclient( var_0, var_2 );

    objective_state( var_0, "current" );
}

toma_strike_handlemarkerscriptable()
{
    self endon( "death" );
    self setscriptablepartstate( "target", "on", 0 );
    scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( 10 );

    if ( isdefined( self ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "returnObjectiveID" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "returnObjectiveID" ) ]]( self.objidnum );

        self delete();
    }
}

_id_13BD5( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\engine\trace::create_default_contents( 1 );
    var_5 = scripts\engine\trace::ray_trace( var_0 - var_1 * 30, var_0 + var_1 * 1000, undefined, var_4 );
    var_6 = var_5["position"] + var_5["normal"] * 20;
    var_7 = var_6;
    var_8 = 5000;
    var_9 = 5000;
    var_10 = [ var_7 + var_2 * 100, var_7 - var_2 * 100, var_7 + var_3 * 100, var_7 - var_3 * 100, var_7 + ( var_2 + var_3 ) * 100, var_7 + ( var_2 - var_3 ) * 100, var_7 + ( var_3 - var_2 ) * 100, var_7 + ( -1 * var_2 - var_3 ) * 100 ];
    var_11 = var_7 + ( 0, 0, var_8 * 1.5 );

    foreach ( var_13 in var_10 )
    {
        var_14 = vectornormalize( var_13 - var_7 );
        var_15 = var_7 + ( 0, 0, var_8 ) - var_14 * var_9;
        var_16 = var_7;
        var_17 = scripts\engine\trace::ray_trace_passed( var_15, var_16, undefined, var_4 );

        if ( !istrue( var_17 ) )
        {
            wait 0.05;
            continue;
        }

        var_11 = var_15;
        break;
    }

    return var_11;
}

_id_13BD9( var_0 )
{
    self endon( "cluster_strike_finished" );
    self endon( "disconnect" );
    level waittill( "game_ended" );
    scripts\cp_mp\utility\killstreak_utility::_id_12AA7( var_0 );
}
