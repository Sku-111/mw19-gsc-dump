// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

runnvg()
{
    scripts\common\input_allow::clear_allow_info( "NVG" );

    if ( !scripts\mp\flags::gameflag( "prematch_done" ) && isdefined( self.infil ) )
    {
        scripts\common\utility::brjugg_oncrateuse( 0 );
        thread brking_getrandompointinmovingcircle();
    }
    else
        scripts\common\utility::brjugg_oncrateuse( 1, undefined, 1 );

    if ( !isdefined( self.pers["useNVG"] ) )
        self.pers["useNVG"] = 0;

    if ( !isdefined( self.pers["killstreak_forcedNVGOff"] ) )
        self.pers["killstreak_forcedNVGOff"] = 0;

    thread nvg_monitor();
}

brking_getrandompointinmovingcircle()
{
    self notify( "allowNVGsAtMatchStart" );
    self endon( "allowNVGsAtMatchStart" );
    self endon( "disconnect" );
    scripts\mp\flags::gameflagwait( "prematch_done" );
    scripts\common\utility::brjugg_oncrateuse( 1 );
}

clearnvg( var_0 )
{
    if ( isdefined( self.nvg3rdpersonmodel ) )
    {
        if ( var_0 )
            self detach( self.nvg3rdpersonmodel, "j_head" );

        self.nvg3rdpersonmodel = undefined;
    }
}

savenvgstate()
{
    if ( self isnightvisionon() )
        self.pers["useNVG"] = 1;
    else if ( !self isnightvisionon() && !istrue( self.pers["killstreak_forcedNVGOff"] ) )
        self.pers["useNVG"] = 0;
}

nvg_monitor()
{
    self notify( "nvg_monitor" );
    self endon( "nvg_monitor" );
    self endon( "disconnect" );
    self endon( "death" );
    var_0 = gettime();

    for (;;)
    {
        var_1 = scripts\engine\utility::_id_143AD( "night_vision_on", "night_vision_off" );

        if ( !isdefined( var_1 ) )
            continue;

        savenvgstate();
        var_2 = var_1 == "night_vision_on";
        nvg_update3rdperson( var_2 );

        if ( istrue( var_2 ) )
            level notify( "player_enabled_nvgs" );

        var_3 = gettime();
        var_4 = var_3 - var_0;
        scripts\mp\analyticslog::logevent_nvgtoggled( gettime(), self.lifeid, self.origin, var_2, var_4, "none" );
        var_0 = var_3;
    }
}

nvg_get3rdpersonupmodel()
{
    var_0 = undefined;

    if ( isdefined( level.nvgheadoverrides[self.operatorcustomization.head] ) )
        var_0 = level.nvgheadoverrides[self.operatorcustomization.head]["up"];

    if ( !isdefined( var_0 ) )
        var_0 = "offhand_wm_nvgquad_mp_1_up";
    else if ( var_0 == "nvg_2" )
        var_0 = "offhand_wm_nvgquad_mp_2_up";
    else if ( var_0 == "nvg_3" )
        var_0 = "offhand_wm_nvgquad_mp_3_up";
    else if ( var_0 == "nvg_4" )
        var_0 = "offhand_wm_nvgquad_mp_3_up";
    else if ( var_0 == "none" )
        var_0 = undefined;
    else
        var_0 = "offhand_wm_nvgquad_mp_1_up";

    return var_0;
}

nvg_get3rdpersondownmodel()
{
    var_0 = undefined;

    if ( isdefined( level.nvgheadoverrides[self.operatorcustomization.head] ) )
        var_0 = level.nvgheadoverrides[self.operatorcustomization.head]["down"];

    if ( !isdefined( var_0 ) )
        var_0 = "offhand_wm_nvgquad_mp_1";
    else if ( var_0 == "nvg_2" )
        var_0 = "offhand_wm_nvgquad_mp_2";
    else if ( var_0 == "nvg_3" )
        var_0 = "offhand_wm_nvgquad_mp_3";
    else if ( var_0 == "nvg_4" )
        var_0 = "offhand_wm_nvgquad_mp_4";
    else if ( var_0 == "none" )
        var_0 = undefined;
    else
        var_0 = "offhand_wm_nvgquad_mp_1";

    return var_0;
}

nvg_update3rdperson( var_0 )
{
    if ( istrue( self.isjuggernaut ) )
        return;

    if ( istrue( self.unset_relic_steelballs ) )
        return;

    if ( isdefined( self.nvg3rdpersonmodel ) )
    {
        self detach( self.nvg3rdpersonmodel, "j_head" );
        self.nvg3rdpersonmodel = undefined;
    }

    if ( var_0 )
    {
        var_1 = nvg_get3rdpersondownmodel();

        if ( isdefined( var_1 ) )
        {
            self.nvg3rdpersonmodel = var_1;
            self attach( self.nvg3rdpersonmodel, "j_head" );
            return;
        }
    }
    else
    {
        var_2 = nvg_get3rdpersonupmodel();

        if ( isdefined( var_2 ) )
        {
            self.nvg3rdpersonmodel = var_2;
            self attach( self.nvg3rdpersonmodel, "j_head" );
        }
    }
}
