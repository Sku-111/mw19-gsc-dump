// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

removeincoming()
{
    var_0 = 3;

    if ( scripts\mp\utility\game::getgametype() == "br" )
        var_0 = 1;

    return var_0;
}

initkillstreakdata()
{
    var_0 = spawnstruct();
    level.killstreakglobals = var_0;
    var_0.costomnvars = [];
    var_0.costomnvars[1] = "ui_score_streak_cost";
    var_0.costomnvars[2] = "ui_score_streak_two_cost";
    var_0.costomnvars[3] = "ui_score_streak_three_cost";
    var_0.slotomnvars = [];
    var_0.slotomnvars[0] = "ui_score_streak_index_0";
    var_0.slotomnvars[1] = "ui_score_streak_index_1";
    var_0.slotomnvars[2] = "ui_score_streak_index_2";
    var_0.slotomnvars[3] = "ui_score_streak_index_3";
    var_0.availableomnvars = [];
    var_0.availableomnvars[0] = "ui_score_streak_available_0";
    var_0.availableomnvars[1] = "ui_score_streak_available_1";
    var_0.availableomnvars[2] = "ui_score_streak_available_2";
    var_0.availableomnvars[3] = "ui_score_streak_available_3";
    parsestreaktable();
    scripts\mp\utility\join_team_aggregator::registeronplayerjointeamcallback( ::killstreakonteamchange );
}

parsestreaktable()
{
    var_0 = level.killstreakglobals;

    if ( isdefined( game["killstreakTable"] ) )
    {
        var_0.streaktable = game["killstreakTable"];
        return;
    }

    var_1 = spawnstruct();
    game["killstreakTable"] = var_1;
    var_0.streaktable = var_1;
    var_1.tabledatabyref = [];
    var_2 = 1;

    for (;;)
    {
        var_3 = tablelookupbyrow( "mp/killstreakTable.csv", var_2, 1 );

        if ( var_3 == "" )
            break;

        var_1.tabledatabyref[var_3] = [];
        var_1.tabledatabyref[var_3]["index"] = int( tablelookupbyrow( "mp/killstreakTable.csv", var_2, 0 ) );
        var_1.tabledatabyref[var_3]["brIndex"] = int( tablelookupbyrow( "mp/killstreakTable.csv", var_2, 27 ) );
        var_1.tabledatabyref[var_3]["hudIcon"] = tablelookupbyrow( "mp/killstreakTable.csv", var_2, 12 );
        var_1.tabledatabyref[var_3]["overheadIcon"] = tablelookupbyrow( "mp/killstreakTable.csv", var_2, 13 );
        var_1.tabledatabyref[var_3]["enemyUseDialog"] = int( tablelookupbyrow( "mp/killstreakTable.csv", var_2, 10 ) );
        var_1.tabledatabyref[var_3]["kills"] = int( tablelookupbyrow( "mp/killstreakTable.csv", var_2, 4 ) );
        var_1.tabledatabyref[var_3]["supportCost"] = int( tablelookupbyrow( "mp/killstreakTable.csv", var_2, 5 ) );
        var_1.tabledatabyref[var_3]["scoreCost"] = int( tablelookupbyrow( "mp/killstreakTable.csv", var_2, 6 ) );
        var_1.tabledatabyref[var_3]["name"] = tablelookupbyrow( "mp/killstreakTable.csv", var_2, 2 );
        var_1.tabledatabyref[var_3]["shownInMenu"] = tablelookupbyrow( "mp/killstreakTable.csv", var_2, 16 );

        if ( var_3 != "none" )
        {
            var_4 = tablelookupbyrow( "mp/killstreakTable.csv", var_2, 7 );
            game["dialog"][var_3] = var_4;
            var_5 = tablelookupbyrow( "mp/killstreakTable.csv", var_2, 8 );
            game["dialog"]["allies_friendly_" + var_3 + "_inbound"] = var_5 + "_friendly_use";
            game["dialog"]["allies_enemy_" + var_3 + "_inbound"] = var_5 + "_enemy_use";
            var_6 = tablelookupbyrow( "mp/killstreakTable.csv", var_2, 9 );
            game["dialog"]["axis_friendly_" + var_3 + "_inbound"] = var_6 + "_friendly_use";
            game["dialog"]["axis_enemy_" + var_3 + "_inbound"] = var_6 + "_enemy_use";
            game["dialog"]["use_" + var_3] = var_5 + "_use";
            game["dialog"]["destroyed_" + var_3] = var_5 + "_destroyed";
            game["dialog"]["timeout_" + var_3] = var_5 + "_timeout";
            var_7 = int( tablelookupbyrow( "mp/killstreakTable.csv", var_2, 11 ) );
            scripts\mp\rank::registerscoreinfo( "killstreak_" + var_3, "value", var_7 );
        }

        var_2++;
    }
}

onplayerconnect()
{
    for (;;)
    {
        level waittill( "connected", var_0 );

        if ( !isdefined( var_0.pers["startedMapSelect"] ) )
            var_0.pers["startedMapSelect"] = 0;

        if ( !isdefined( var_0.pers["streakData"] ) )
            var_0.pers["streakData"] = createplayerstreakdatastruct();

        var_0.streakdata = var_0.pers["streakData"];
        var_0 scripts\mp\utility\stats::initpersstat( "streakPoints" );
        var_0.streakpoints = var_0 scripts\mp\utility\stats::getpersstat( "streakPoints" );
        var_0.previousstreakpoints = var_0.streakpoints;
        var_0.nukepoints = var_0 scripts\mp\utility\stats::getpersstat( "cur_kill_streak" );
        var_0 visionsetmissilecamforplayer( game["thermal_vision"] );

        if ( !level.roundretainstreaks )
            var_0 resetstreakavailability( 1 );
    }
}

onplayerspawned()
{
    if ( isdefined( level.deathretainstreaks ) && !level.deathretainstreaks )
        resetstreakavailability( 1 );

    selectfirstavailablekillstreak();

    if ( !isdefined( self.earnedstreaklevel ) )
        self.earnedstreaklevel = 0;

    self.triggeringstreak = undefined;
    setstreakcounttonext();
    updatekillstreakselectedui();
    updatekillstreakuislots();
    updatestreakmeterui();
    updatestreakcosts();
    _id_13DB8();
}

createplayerstreakdatastruct()
{
    var_0 = spawnstruct();
    var_0.streaks = [];
    return var_0;
}

getplayerstreakdata()
{
    return self.streakdata;
}

resetforloadoutswitch()
{
    updatespecialistui();
    updatestreakcosts();

    if ( isdefined( self.oldperks ) && isdefined( self.perks ) && self.oldperks.size > 0 )
    {
        if ( scripts\engine\utility::array_contains_key( self.perks, "specialty_support_killstreaks" ) && scripts\engine\utility::array_contains_key( self.oldperks, "specialty_support_killstreaks" ) )
            return;
        else if ( !scripts\engine\utility::array_contains_key( self.oldperks, "specialty_support_killstreaks" ) )
            return;
        else
        {
            resetstreakpoints();
            resetstreakavailability();
            updatekillstreakuislots();
            updatekillstreakselectedui();
        }
    }
}

setupinputnotifications()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );

    if ( isbot( self ) )
        return;

    scripts\mp\flags::gameflagwait( "prematch_done" );
    self notifyonplayercommand( "ks_select_up", "+actionslot 1" );
    self notifyonplayercommand( "ks_select_down", "+actionslot 2" );
    self notifyonplayercommand( "ks_action_5", "+actionslot 5" );
    self notifyonplayercommand( "ks_action_6", "+actionslot 6" );
    self notifyonplayercommand( "ks_action_3", "+actionslot 3" );
    self notifyonplayercommand( "ks_action_4", "+actionslot 4" );
    self setactionslot( 4, "" );
}

updatestreakcount()
{
    if ( self.streakpoints == self.previousstreakpoints )
        return;

    var_0 = self.streakpoints;
    self setkillstreakpoints( int( min( self.streakpoints, 16384 ) ) );

    if ( !isdefined( self.nextstreakcost ) || self.streakpoints >= self.nextstreakcost )
        setstreakcounttonext();
}

resetstreakcount()
{
    self setkillstreakpoints( 0 );
    self setclientomnvar( "ui_score_streak_cost", 0 );
    var_0 = scripts\mp\utility\game::getgametype() == "br";

    if ( !var_0 )
    {
        self setclientomnvar( "ui_score_streak_two_cost", 0 );
        self setclientomnvar( "ui_score_streak_three_cost", 0 );
    }

    setstreakcounttonext();
    self resetclientkillstreakavailability();
}

setstreakcounttonext()
{
    if ( !isdefined( self.streaktype ) )
    {
        self.nextstreakcost = 0;
        self setnextkillstreakcost( 0 );
        return;
    }

    if ( findmaxstreakcost() == 0 )
    {
        self.nextstreakcost = 0;
        self setnextkillstreakcost( 0 );
        return;
    }

    var_0 = self.nextstreakcost;
    var_1 = getnextstreakname();

    if ( !isdefined( var_1 ) )
        return;

    var_2 = calcstreakcost( var_1 );
    self.nextstreakcost = var_2;

    if ( scripts\mp\utility\perk::_hasperk( "specialty_support_killstreaks" ) && isdefined( getkillstreakinslot( 1 ) ) && !istrue( self.earnedmaxkillstreak ) )
    {
        var_3 = 0;

        foreach ( var_5 in self.streakdata.streaks )
        {
            if ( istrue( var_5.earned ) )
            {
                var_3 = 1;
                continue;
            }

            var_3 = 0;
        }

        if ( var_3 && !isdefined( self.earnedmaxkillstreak ) )
        {
            self.earnedmaxkillstreak = 1;
            self.nextstreakcost = 0;
            self setnextkillstreakcost( 0 );
            self setkillstreakpoints( 0 );
            self setclientomnvar( "ui_score_streak_cost", 0 );
            var_7 = scripts\mp\utility\game::getgametype() == "br";

            if ( !var_7 )
            {
                self setclientomnvar( "ui_score_streak_two_cost", 0 );
                self setclientomnvar( "ui_score_streak_three_cost", 0 );
            }

            return;
        }
    }

    self setnextkillstreakcost( var_2 );
}

getnextstreakname()
{
    if ( self.streakpoints == findmaxstreakcost() && self.streaktype != "specialist" )
        var_0 = 0;
    else
        var_0 = self.streakpoints;

    for ( var_1 = 1; var_1 <= 4; var_1++ )
    {
        var_2 = getkillstreakinslot( var_1 );

        if ( var_2.currentcost > var_0 )
            return var_2.streakname;
    }

    return undefined;
}

updatestreakmeterui()
{
    self setclientomnvar( "ui_score_streak", self.streakpoints );
}

updatestreakcosts()
{
    updatestreakcost( 1 );
    updatestreakcost( 2 );
    updatestreakcost( 3 );
    updatestreakcost( 4 );
}

updatestreakcost( var_0 )
{
    var_1 = level.killstreakglobals;
    var_2 = getkillstreakinslot( var_0 );

    if ( isdefined( var_2 ) )
    {
        var_3 = calcstreakcost( var_2.streakname );
        var_2.currentcost = var_3;

        if ( var_0 <= removeincoming() )
        {
            var_4 = var_1.costomnvars[var_0];
            self setclientomnvar( var_4, var_3 );
        }
    }
}

findmaxstreakcost()
{
    for ( var_0 = 4; var_0 >= 1; var_0-- )
    {
        var_1 = getkillstreakinslot( var_0 );

        if ( !isdefined( var_1 ) )
            continue;

        return var_1.currentcost;
    }

    return 0;
}

updatekillstreakuislots()
{
    if ( !scripts\mp\utility\player::isreallyalive( self ) )
        return;

    var_0 = level.killstreakglobals;

    for ( var_1 = 0; var_1 <= removeincoming(); var_1++ )
        updatekillstreakuislot( var_1 );
}

updatekillstreakuislot( var_0 )
{
    if ( var_0 > removeincoming() )
        return;

    if ( isdefined( level._id_11C8C ) && ![[ level._id_11C8C ]]( var_0 ) )
        return;

    var_1 = level.killstreakglobals;
    var_2 = getkillstreakinslot( var_0 );

    if ( isdefined( var_2 ) && isdefined( var_2.streakname ) )
    {
        var_3 = undefined;

        if ( istrue( self.loadoutusingspecialist ) && var_0 != 0 )
        {
            var_4 = scripts\mp\perks\perks::getspecialistperkforstreak( var_2.streakname );
            var_3 = scripts\mp\perks\perks::getperkid( var_4 );
        }
        else
            var_3 = scripts\mp\utility\killstreak::getkillstreakindex( var_2.streakname );

        self setclientomnvar( var_1.slotomnvars[var_0], var_3 );
        self setclientomnvar( var_1.availableomnvars[var_0], var_2.available );
        ammobox_getbufferedattachment( var_0, var_3 );
        ammobox_clearbufferedattachmentweapon( var_0, var_2.available );
    }
    else
    {
        self setclientomnvar( var_1.slotomnvars[var_0], 0 );
        self setclientomnvar( var_1.availableomnvars[var_0], 0 );
        ammobox_getbufferedattachment( var_0, 0 );
        ammobox_clearbufferedattachmentweapon( var_0, 0 );
    }
}

updatekillstreakselectedui()
{
    var_0 = getselectedkillstreakindex();

    if ( isdefined( var_0 ) )
        self setclientomnvar( "ui_score_streak_selected_slot", var_0 );
    else
        self setclientomnvar( "ui_score_streak_selected_slot", -1 );
}

updatespecialistui()
{
    if ( isdefined( self.loadoutusingspecialist ) )
        self setclientomnvar( "ui_score_streak_is_specialist", self.loadoutusingspecialist );
}

killstreakonteamchange( var_0 )
{
    if ( istrue( var_0.changedteams ) )
        var_0 clearkillstreaks();
}

listenkillstreakaction( var_0, var_1 )
{
    if ( isdefined( var_0 ) && var_0 == "streak_select" )
        dokillstreakaction( undefined, var_1 );
}

dokillstreakaction( var_0, var_1 )
{
    if ( isdefined( self.triggeringstreak ) )
        return;

    if ( isdefined( var_0 ) && issubstr( var_0, "ks_" ) )
        var_1 = gettriggeredslotfromnotify( var_0 );

    if ( !isdefined( var_1 ) )
        return;

    var_2 = getkillstreakinslot( var_1 );

    if ( !isdefined( var_2 ) || var_2.available == 0 || var_2.available == -1 )
        return;

    setselectedkillstreak( var_1 );
    thread triggerkillstreak( var_2, var_1 );
}

trytriggerkillstreakfromsuper( var_0 )
{
    var_1 = createstreakitemstruct( var_0 );
    var_1.available = 1;
    return triggerkillstreak( var_1 );
}

gettriggeredslotfromnotify( var_0 )
{
    var_1 = undefined;

    if ( !isai( self ) )
    {
        if ( !self usinggamepad() )
        {
            if ( var_0 == "ks_action_3" || var_0 == "ks_action_4" || var_0 == "ks_action_5" || var_0 == "ks_action_6" )
                var_1 = getselectedkillstreakindex();
        }
    }
    else if ( scripts\mp\utility\game::getgametype() == "grnd" && !scripts\engine\utility::is_player_gamepad_enabled() )
    {
        switch ( var_0 )
        {
            case "ks_action_3":
                var_1 = 0;
                break;
            case "ks_action_4":
                var_1 = 0;
                break;
            case "ks_action_5":
                var_1 = 0;
                break;
            case "ks_action_6":
                var_1 = 0;
                break;
        }
    }
    else
    {
        switch ( var_0 )
        {
            case "ks_action_3":
                var_1 = 1;
                break;
            case "ks_action_4":
                var_1 = 2;
                break;
            case "ks_action_5":
                var_1 = 3;
                break;
            case "ks_action_6":
                var_1 = 0;
                break;
        }
    }

    return var_1;
}

iskillstreakvisibleforcodcaster( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    switch ( var_0 )
    {
        case "counter_uav":
        case "dronedrop":
        case "directional_uav":
        case "uav":
            return 0;
        default:
            return 1;
    }
}

triggerkillstreak( var_0, var_1 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    var_2 = var_0.streaksetupinfo;

    if ( !scripts\common\utility::is_killstreaks_allowed() )
    {
        scripts\mp\hud_message::showerrormessage( "KILLSTREAKS/CANNOT_BE_USED" );
        return 0;
    }

    if ( scripts\mp\utility\game::getgametype() == "br" && isdefined( self.scrambledby ) )
    {
        if ( var_0.streakname != "explosive_bow" )
        {
            scripts\mp\hud_message::showerrormessage( "MP_BR_INGAME_TU_WZ335/JAMMED" );
            return 0;
        }
    }

    if ( isdefined( level._id_11C6C ) && !self [[ level._id_11C6C ]]( var_0, var_1 ) )
    {
        scripts\mp\hud_message::showerrormessage( "KILLSTREAKS/CANNOT_BE_USED" );
        return 0;
    }

    if ( var_0.isspecialist || isdefined( self.triggeringstreak ) && self.triggeringstreak == var_0 )
        return 0;

    self.triggeringstreak = var_0;
    scripts\cp_mp\killstreaks\killstreakdeploy::streakdeploy_cancelalldeployments();
    var_3 = scripts\cp_mp\utility\killstreak_utility::createstreakinfo( var_0.streakname, self );
    var_3.mpstreaksysteminfo = var_0;
    var_4 = scripts\mp\utility\game::getgametype() == "br";

    if ( var_4 )
        var_0.uniqueid = var_3.id;

    scripts\mp\gamelogic::sethasdonecombat( self, 1 );
    var_5 = self [[ var_2.triggeredfunc ]]( var_3 );
    self.triggeringstreak = undefined;

    if ( !istrue( var_5 ) )
        return 0;

    if ( isdefined( var_1 ) )
        onsuccessfulstreakactivation( var_0, var_1 );

    return 1;
}

onkillstreaktriggered( var_0 )
{
    return 1;
}

onkillstreakbeginuse( var_0 )
{
    var_1 = var_0.owner;

    if ( !isdefined( var_1 ) )
        return 0;

    if ( !var_1 scripts\mp\utility\killstreak::validateusestreak( var_0.streakname ) )
        return 0;

    return 1;
}

onkillstreakfinishuse( var_0, var_1 )
{

}

forceactivatekillstreak( var_0, var_1 )
{
    var_2 = createstreakitemstruct( var_0 );
    triggerkillstreak( var_2 );
}

forceactivategimmekillstreak()
{
    var_0 = getkillstreakinslot( 0 );
    triggerkillstreak( var_0 );
}

onsuccessfulstreakactivation( var_0, var_1 )
{
    var_2 = var_0.streakname;

    if ( istrue( level._id_145EC ) && self.streaktype != "specialist" )
        var_0.available = -1;
    else
        var_0.available = -1;

    ammobox_clearbufferedattachmentweapon( var_1, var_0.available );
    var_3 = scripts\mp\utility\game::getgametype() == "br";

    if ( isdefined( var_1 ) )
    {
        if ( var_3 || ( var_1 == 0 || var_1 >= 5 ) )
            removekillstreak( var_1 );

        selectnextavailablekillstreak();
        updatekillstreakuislot( var_1 );
    }
    else
    {

    }

    thread scripts\cp\vehicles\vehicle_compass_cp::usedkillstreak( var_2 );
    scripts\mp\utility\print::printgameaction( "killstreak started - " + var_2, self );
    scripts\mp\utility\dialog::playkillstreakusedialog( var_2 );
    var_6 = scripts\mp\matchdata::gettimefrommatchstart( gettime() );
    var_0.attackerisinflictor = var_6;
    scripts\mp\analyticslog::logevent_killstreakactivated( self, var_0._id_13913, var_0.streakname, var_0.isgimme, var_6, self.origin );

    switch ( var_2 )
    {
        case "care_package":
            scripts\mp\utility\stats::incpersstat( "killstreakCarePackageUsed", 1 );
            break;
        case "emergency_airdrop":
            scripts\mp\utility\stats::incpersstat( "killstreakEmergencyAirdropUsed", 1 );
            break;
    }

    combatrecordkillstreakuse( var_2 );

    if ( isdefined( self.petwatch ) )
    {
        scripts\cp_mp\pet_watch::addkillstreakcharge();

        if ( var_0.currentcost > 7 )
            scripts\cp_mp\pet_watch::addtopkillstreakcharge();

        if ( var_2 == "nuke" )
            scripts\cp_mp\pet_watch::addnukecharge();
        else if ( var_2 == "juggernaut" )
            scripts\cp_mp\pet_watch::battle_tracks_standingonsamevehiclewithsametracksowner();
    }
}

createstreakitemstruct( var_0 )
{
    var_1 = spawnstruct();
    var_1.available = 0;
    var_1.streakname = var_0;
    var_1.isgimme = 0;
    var_1.streaksetupinfo = getkillstreaksetupinfo( var_0 );
    var_1.madeavailabletime = -1;
    var_1.currentcost = calcstreakcost( var_0 );
    var_1.isspecialist = scripts\mp\perks\perks::usescriptablemeleeblood( var_0 );
    var_1._id_136D2 = scripts\mp\perks\perks::getspecialistperkforstreak( var_0 );
    return var_1;
}

awardkillstreak( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = createstreakitemstruct( var_0 );
    awardkillstreakfromstruct( var_6, var_1, var_2, var_3, var_4, var_5 );
}

awardkillstreakfromstruct( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_0.isgimme = 1;
    var_6 = 0;

    if ( isdefined( var_5 ) )
        var_6 = var_5;

    if ( isdefined( var_0 ) )
    {
        if ( !isdefined( var_2 ) )
            var_2 = var_0.streaklifeid;

        if ( !isdefined( var_3 ) )
            var_3 = var_0._id_13913;
    }

    slotkillstreak( var_0, var_6 );
    setselectedkillstreak( var_6 );
    makekillstreakavailable( var_6, var_1, var_2, var_3, var_4 );
}

equipkillstreak( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_1 ) )
        return;

    var_2 = createstreakitemstruct( var_0 );
    slotkillstreak( var_2, var_1 );
}

equipslotonekillstreak( var_0 )
{
    equipkillstreak( var_0, 1 );
}

equipslottwokillstreak( var_0 )
{
    equipkillstreak( var_0, 2 );
}

equipslotthreekillstreak( var_0 )
{
    equipkillstreak( var_0, 3 );
}

pushgimmeslotstreakontostack()
{
    var_0 = getplayerstreakdata();

    if ( isdefined( var_0.streaks[36] ) )
        return 0;

    var_1 = var_0.streaks[0];

    if ( !isdefined( var_1 ) )
        return 1;

    for ( var_2 = 5; var_2 < 37; var_2++ )
    {
        if ( !isdefined( var_0.streaks[var_2] ) )
        {
            var_0.streaks[var_2] = var_1;
            var_0.streaks[0] = undefined;
            break;
        }
    }

    return 1;
}

popstackedstreakintogimmeslot()
{
    var_0 = getplayerstreakdata();
    var_1 = var_0.streaks[0];
    var_2 = undefined;
    var_3 = undefined;

    for ( var_4 = 5; var_4 < 37; var_4++ )
    {
        var_5 = var_0.streaks[var_4];

        if ( isdefined( var_5 ) )
        {
            var_2 = var_5;
            var_3 = var_4;
            continue;
        }

        break;
    }

    var_0.streaks[0] = var_2;

    if ( isdefined( var_3 ) )
        var_0.streaks[var_3] = undefined;
}

deletestackedstreak( var_0 )
{
    var_1 = getplayerstreakdata();

    if ( var_0 == 36 )
    {
        var_1.streaks[var_0] = undefined;
        return;
    }

    for ( var_2 = var_0; var_2 < 36; var_2++ )
    {
        var_3 = var_1.streaks[var_2 + 1];

        if ( !isdefined( var_3 ) )
            break;

        var_1.streaks[var_0] = var_3;
    }
}

removekillstreak( var_0 )
{
    self.streakdata.streaks[var_0] = undefined;

    if ( var_0 == 0 )
        popstackedstreakintogimmeslot();
    else if ( var_0 >= 5 )
        deletestackedstreak( var_0 );
}

clearkillstreaks()
{
    self.streakdata.streaks = [];
    resetstreakpoints();
    resetstreakavailability();
    clearkillstreakselection();
    updatekillstreakuislots();
    updatekillstreakselectedui();
}

slotkillstreak( var_0, var_1 )
{
    if ( var_1 == 0 )
    {
        if ( !pushgimmeslotstreakontostack() )
            return;
    }
    else
    {

    }

    self.streakdata.streaks[var_1] = var_0;
    updatekillstreakuislot( var_1 );

    if ( var_1 != 0 )
        updatestreakcost( var_1 );
}

earnkillstreak( var_0, var_1 )
{
    var_2 = getkillstreakinslot( var_0 );
    var_3 = var_2.streakname;
    scripts\mp\utility\script::bufferednotify( "earned_killstreak_buffered", var_3 );
    self.earnedstreaklevel = var_1;

    if ( scripts\mp\utility\perk::_hasperk( "specialty_support_killstreaks" ) )
        self.streakdata.streaks[var_0].earned = 1;

    self.streakdata.streaks[var_0].lifeid = scripts\cp_mp\utility\killstreak_utility::getcurrentplayerlifeidforkillstreak();

    if ( !level.gameended )
    {
        thread scripts\mp\hud_message::showkillstreaksplash( var_3, var_1 );
        combatrecordincrementkillstreakawardedstat( var_3 );
    }

    setstreakcounttonext();
    makekillstreakavailable( var_0, "earned" );
}

makekillstreakavailable( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = getkillstreakinslot( var_0 );

    if ( !isdefined( var_5 ) )
        return;

    var_6 = var_5.streakname;

    if ( isdefined( var_5._id_136D2 ) )
        var_6 = var_5._id_136D2;

    loadassociatedkillstreakweapons( var_6 );
    var_7 = var_5.streaksetupinfo;

    if ( self.team == "spectator" )
        return;

    var_5.available = 1;
    ammobox_clearbufferedattachmentweapon( var_0, var_5.available );
    setselectedkillstreak( var_0 );
    updatekillstreakuislot( var_0 );

    if ( isdefined( var_7.availablefunc ) )
        self [[ var_7.availablefunc ]]( var_5 );

    if ( var_5.isgimme )
        self notify( "received_earned_killstreak" );

    var_5.madeavailabletime = scripts\mp\matchdata::gettimefrommatchstart( gettime() );
    var_5.streaklifeid = self.lifeid;
    var_5._id_13913 = self.matchdatalifeindex;
    var_5.owner = self;
    var_5._id_121B0 = self getxuid();

    if ( isdefined( var_2 ) )
        var_5.streaklifeid = var_2;

    if ( isdefined( var_3 ) )
        var_5._id_13913 = var_3;

    if ( isdefined( var_4 ) )
    {
        var_5.owner = var_4;
        var_5._id_121B0 = var_4 getxuid();
    }

    scripts\cp\vehicles\vehicle_compass_cp::_id_12047( var_5.streakname, var_1 );
    scripts\mp\analyticslog::logevent_killstreakavailable( self, var_5._id_13913, var_6, var_5.isgimme, var_5.madeavailabletime, self.origin );

    if ( isdefined( self.petwatch ) && var_0 == removeincoming() )
    {
        var_8 = 0;
        var_9 = 0;
        var_10 = getallavailablekillstreakstructs();

        foreach ( var_12 in var_10 )
        {
            var_13 = getvisiblekillstreakavailable( var_12.streakname );

            switch ( var_13 )
            {
                case 1:
                    var_8 = var_12.streaklifeid == self.lifeid;
                    break;
                case 2:
                    var_9 = var_12.streaklifeid == self.lifeid;
                    break;
                default:
                    break;
            }
        }

        if ( var_8 && var_9 )
            scripts\cp_mp\pet_watch::battle_tracks_getplayerdataenum();
        else
            scripts\cp_mp\pet_watch::battle_tracks_getnewtogglestate();
    }
}

ammobox_getbufferedattachment( var_0, var_1 )
{
    if ( var_0 > removeincoming() )
        return;

    self setclientkillstreakavailability( var_0, var_1 );
}

ammobox_clearbufferedattachmentweapon( var_0, var_1 )
{
    if ( var_0 > removeincoming() )
        return;

    self setpowerammo( var_0, var_1 );
}

givekillstreak( var_0, var_1, var_2 )
{
    awardkillstreak( var_0, "other" );
}

calcstreakcost( var_0 )
{
    var_1 = int( scripts\mp\utility\killstreak::getkillstreakkills( var_0 ) );

    if ( isdefined( self ) && isplayer( self ) )
        var_1 = var_1 + getperkadjustedkillstreakcost( var_0, var_1 );

    var_1 = int( clamp( var_1, 0, 7000 ) );
    return var_1;
}

getperkadjustedkillstreakcost( var_0, var_1 )
{
    var_2 = 0;

    if ( scripts\mp\utility\perk::_hasperk( "specialty_support_killstreaks" ) )
    {
        var_3 = scripts\mp\utility\killstreak::getkillstreakindex( var_0 );
        var_2 = 175 * var_3;
    }

    if ( scripts\mp\utility\perk::_hasperk( "specialty_hardline" ) && var_1 > 0 && var_0 != "nuke" )
    {
        if ( scripts\mp\utility\perk::_hasperk( "specialty_killstreak_to_scorestreak" ) )
            var_2 = var_2 - 125;
        else
            var_2--;
    }

    return var_2;
}

killstreakselectionwatcher()
{
    self endon( "death_or_disconnect" );
    self endon( "faux_spawn" );
    level endon( "game_ended" );

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_143AD( "ks_select_up", "ks_select_down" );

        if ( !scripts\engine\utility::is_player_gamepad_enabled() )
            continue;

        if ( !istrue( self.iscarrying ) )
        {
            var_1 = getselectedkillstreakindex();

            if ( !isdefined( var_1 ) )
                continue;

            var_2 = var_1;

            if ( var_0 == "ks_select_up" )
                var_2 = getnextselectablekillstreakslot( var_1 );
            else if ( var_0 == "ks_select_down" )
                var_2 = getpreviousselectablekillstreakslot( var_1 );
            else
            {

            }

            setselectedkillstreak( var_2 );
        }
    }
}

selectfirstavailablekillstreak()
{
    var_0 = getplayerstreakdata();

    if ( isdefined( var_0.streaks[0] ) )
    {
        if ( var_0.streaks[0].available == 1 )
        {
            setselectedkillstreak( 0 );
            return;
        }
    }
    else
    {
        for ( var_1 = removeincoming(); var_1 >= 0; var_1-- )
        {
            var_2 = var_0.streaks[var_1];

            if ( isdefined( var_2 ) && var_2.available == 1 )
            {
                setselectedkillstreak( var_1 );
                return;
            }
        }
    }

    clearkillstreakselection();
}

getnextselectablekillstreakslot( var_0 )
{
    var_1 = var_0;
    var_2 = scripts\engine\utility::ter_op( var_0 >= removeincoming(), 0, var_0 + 1 );
    var_3 = var_0;
    var_4 = var_2;

    while ( var_4 != var_3 )
    {
        var_5 = self.streakdata.streaks[var_4];

        if ( isdefined( var_5 ) && var_5.available == 1 )
        {
            var_1 = var_4;
            break;
        }

        var_4++;

        if ( var_4 > removeincoming() )
            var_4 = 0;
    }

    return var_1;
}

getpreviousselectablekillstreakslot( var_0 )
{
    var_1 = var_0;
    var_2 = scripts\engine\utility::ter_op( var_0 <= 0, removeincoming(), var_0 - 1 );
    var_3 = var_0;
    var_4 = var_2;

    while ( var_4 != var_3 )
    {
        var_5 = self.streakdata.streaks[var_4];

        if ( isdefined( var_5 ) && var_5.available == 1 )
        {
            var_1 = var_4;
            break;
        }

        var_4--;

        if ( var_4 < 0 )
            var_4 = removeincoming();
    }

    return var_1;
}

selectmostexpensivekillstreak()
{
    var_0 = undefined;
    var_1 = -1;

    for ( var_2 = removeincoming(); var_2 >= 0; var_2-- )
    {
        var_3 = self.streakdata.streaks[var_2];

        if ( isdefined( var_3 ) && var_3.available == 1 )
        {
            if ( var_3.currentcost > var_1 )
            {
                var_0 = var_2;
                var_1 = var_3.currentcost;
            }
        }
    }

    if ( !isdefined( var_0 ) )
    {
        clearkillstreakselection();
        return;
    }

    setselectedkillstreak( var_0 );
}

selectnextavailablekillstreak()
{
    var_0 = undefined;
    var_1 = -1;

    for ( var_2 = 0; var_2 <= removeincoming(); var_2++ )
    {
        var_3 = self.streakdata.streaks[var_2];

        if ( isdefined( var_3 ) && var_3.available == 1 )
        {
            if ( istrue( var_3.isgimme ) )
            {
                var_0 = var_2;
                break;
            }
            else if ( var_3.currentcost > var_1 )
            {
                var_0 = var_2;
                var_1 = var_3.currentcost;
            }
        }
    }

    if ( !isdefined( var_0 ) )
    {
        clearkillstreakselection();
        return;
    }

    setselectedkillstreak( var_0 );
}

setselectedkillstreak( var_0 )
{
    if ( var_0 != 0 && istrue( self.loadoutusingspecialist ) )
        return;

    var_1 = getkillstreakinslot( var_0 );
    self.currentselectedkillstreakslot = var_0;
    updatekillstreakselectedui();

    if ( scripts\mp\utility\game::unset_relic_grounded() )
    {
        var_2 = game["killstreakTable"].tabledatabyref[var_1.streakname]["brIndex"];
        scripts\mp\gametypes\br_public.gsc::updatebrextradata( "selectedKillstreakId", var_2 );
    }
}

clearkillstreakselection()
{
    self.currentselectedkillstreakslot = undefined;
    updatekillstreakselectedui();

    if ( scripts\mp\utility\game::unset_relic_grounded() )
        scripts\mp\gametypes\br_public.gsc::updatebrextradata( "selectedKillstreakId", 0 );
}

getselectedkillstreak()
{
    var_0 = getselectedkillstreakindex();

    if ( !isdefined( var_0 ) )
        return undefined;

    return self.streakdata.streaks[var_0];
}

getselectedkillstreakindex()
{
    return self.currentselectedkillstreakslot;
}

getkillstreakinslot( var_0 )
{
    return self.streakdata.streaks[var_0];
}

getequippedkillstreakbyname( var_0 )
{
    for ( var_1 = 1; var_1 <= 3; var_1++ )
    {
        var_2 = self.streakdata.streaks[var_1];

        if ( isdefined( var_2 ) && var_2.streakname == var_0 )
            return var_2;
    }

    return undefined;
}

getequippedkillstreakslotbyname( var_0 )
{
    for ( var_1 = 1; var_1 <= 3; var_1++ )
    {
        var_2 = self.streakdata.streaks[var_1];

        if ( isdefined( var_2 ) && var_2.streakname == var_0 )
            return var_1;
    }

    return undefined;
}

getvisiblekillstreakavailable( var_0 )
{
    for ( var_1 = 0; var_1 <= removeincoming(); var_1++ )
    {
        var_2 = self.streakdata.streaks[var_1];

        if ( isdefined( var_2 ) && var_2.streakname == var_0 && var_2.available == 1 )
            return var_1;
    }

    return undefined;
}

getkillstreakvisibleslotbyname( var_0 )
{
    for ( var_1 = 0; var_1 <= removeincoming(); var_1++ )
    {
        var_2 = self.streakdata.streaks[var_1];

        if ( isdefined( var_2 ) && var_2.streakname == var_0 )
            return var_1;
    }

    return undefined;
}

getgimmeslotkillstreakstructs()
{
    var_0 = [];
    var_1 = getkillstreakinslot( 0 );

    if ( isdefined( var_1 ) )
    {
        var_0[0] = var_1;

        for ( var_2 = 5; var_2 < 37; var_2++ )
        {
            var_3 = self.streakdata.streaks[var_2];

            if ( isdefined( var_3 ) )
            {
                var_0[var_0.size] = var_3;
                continue;
            }

            break;
        }
    }

    return var_0;
}

getavailableequippedkillstreakstructs()
{
    var_0 = [];

    if ( self.streakdata.streaks.size > 0 )
    {
        for ( var_1 = 1; var_1 < 4; var_1++ )
        {
            var_2 = self.streakdata.streaks[var_1];

            if ( isdefined( var_2 ) && isdefined( var_2.streakname ) && var_2.available == 1 )
                var_0[var_0.size] = var_2;
        }
    }

    return var_0;
}

getallavailablekillstreakstructs()
{
    var_0 = [];

    if ( self.streakdata.streaks.size > 0 )
    {
        for ( var_1 = 0; var_1 < removeincoming(); var_1++ )
        {
            var_2 = self.streakdata.streaks[var_1];

            if ( isdefined( var_2 ) && isdefined( var_2.streakname ) && var_2.available == 1 )
                var_0[var_0.size] = var_2;
        }
    }

    return var_0;
}

registerkillstreak( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( level.killstreaksetups ) )
        level.killstreaksetups = [];

    var_4 = spawnstruct();
    level.killstreaksetups[var_0] = var_4;
    var_4.triggeredfunc = var_1;
    var_4.availablefunc = var_2;
    var_4.linkedtotag = var_3;
}

getkillstreaksetupinfo( var_0 )
{
    var_1 = level.killstreaksetups[var_0];
    return var_1;
}

checkstreakreward( var_0, var_1 )
{
    for ( var_2 = 1; var_2 <= 4; var_2++ )
    {
        var_3 = getkillstreakinslot( var_2 );

        if ( !isdefined( var_3 ) )
            continue;

        var_4 = var_3.currentcost;

        if ( self.previousstreakpoints >= var_4 || var_0 < var_4 )
            continue;

        if ( scripts\mp\utility\perk::_hasperk( "specialty_support_killstreaks" ) && istrue( var_3.earned ) )
            continue;

        if ( istrue( level.casualscorestreaks ) && istrue( var_1 ) )
            continue;

        if ( isdefined( var_3.lifeid ) && var_3.lifeid == self.lifeid && ( !istrue( level._id_145EC ) || istrue( level._id_145EC ) && self.streaktype == "specialist" ) || istrue( level._id_145EC ) && istrue( level.casualscorestreaks ) && self.streaktype != "specialist" && var_3.available == -1 )
            continue;

        earnkillstreak( var_2, var_4 );
    }
}

arekillstreaksequipped( var_0 )
{
    var_1 = getplayerstreakdata();

    if ( !isdefined( var_1 ) || !isdefined( var_1.streaks ) )
        return 0;

    foreach ( var_3 in var_0 )
    {
        var_4 = 0;

        for ( var_5 = 1; var_5 <= 4; var_5++ )
        {
            var_6 = var_1.streaks[var_5];

            if ( isdefined( var_6 ) )
            {
                if ( isdefined( var_6.streakname ) && var_6.streakname == var_3 )
                {
                    if ( var_6.isspecialist )
                    {
                        var_7 = scripts\mp\perks\perks::getspecialistperkforstreak( var_3 );

                        if ( var_6._id_136D2 == var_7 )
                        {
                            var_4 = 1;
                            break;
                        }
                    }
                    else
                    {
                        var_4 = 1;
                        break;
                    }
                }

                continue;
            }

            if ( var_3 == "none" )
            {
                var_4 = 1;
                break;
            }
        }

        if ( !var_4 )
            return 0;
    }

    return 1;
}

findkillstreakslotnumber( var_0 )
{
    for ( var_1 = 0; var_1 <= 37; var_1++ )
    {
        var_2 = self.streakdata.streaks[var_1];

        if ( !isdefined( var_2 ) )
        {
            if ( var_1 >= 5 )
                break;
        }
        else if ( var_0 == var_2 )
            return var_1;
    }

    return undefined;
}

streakglobals_onkillstreaktriggered( var_0 )
{
    if ( isdefined( var_0.mpstreaksysteminfo ) )
    {
        var_1 = onkillstreaktriggered( var_0 );

        if ( !var_1 )
            return 0;
    }

    return 1;
}

streakglobals_onkillstreakbeginuse( var_0 )
{
    var_1 = var_0.owner;

    if ( isdefined( var_0.mpstreaksysteminfo ) )
    {
        var_2 = onkillstreakbeginuse( var_0 );

        if ( !var_2 )
            return 0;
    }

    if ( isdefined( var_1 ) )
    {
        if ( level.codcasterenabled )
        {
            if ( iskillstreakvisibleforcodcaster( var_0.streakname ) )
                var_1 setnoteworthykillstreakactive( 1 );
        }

        if ( scripts\mp\utility\game::ismlgmatch() )
        {
            var_3 = int( tablelookup( "mp/killstreaktable.csv", 1, var_0.streakname, 4 ) );

            if ( var_3 >= 1000 )
            {
                var_4 = tablelookup( "mp/killstreaktable.csv", 1, var_0.streakname, 0 );

                if ( var_4 != "" )
                    var_5 = int( var_4 );
            }
        }
    }

    return 1;
}

streakglobals_onkillstreakfinishuse( var_0 )
{
    var_1 = var_0.owner;
    var_2 = 0;

    if ( isdefined( var_1 ) )
        var_2 = var_1 scripts\mp\utility\killstreak::hasplayerdiedwhileusingkillstreak( var_0 );

    if ( isdefined( var_0.mpstreaksysteminfo ) )
        onkillstreakfinishuse( var_0, var_2 );

    if ( isdefined( var_1 ) )
    {
        if ( !var_2 )
            var_1 notify( "killstreak_use_finished" );

        if ( level.codcasterenabled )
            var_1 setnoteworthykillstreakactive( 0 );
    }
}

givestreakpoints( var_0, var_1, var_2 )
{
    if ( istrue( game["isLaunchChunk"] ) )
        return;

    var_3 = scripts\engine\utility::ter_op( scripts\mp\utility\perk::_hasperk( "specialty_killstreak_to_scorestreak" ), var_2, var_1 );

    if ( !isdefined( var_3 ) )
        var_3 = scripts\mp\rank::getscoreinfovalue( var_0 );

    if ( var_3 == 0 )
        return;

    self.pers["killstreakToScorestreak"] = undefined;
    self.pers["killstreakToScorestreak_lifeId"] = undefined;
    var_4 = self.streakpoints + var_3;
    var_5 = findmaxstreakcost();

    if ( var_4 > var_5 )
        var_4 = var_5;

    var_6 = var_0 == "kill";

    if ( var_6 && !istrue( level.loadout_updateclassdefault_weapons ) && ( istrue( level.allowkillstreaks ) || isdefined( level._id_12305 ) ) )
    {
        var_7 = self.nukepoints + var_1;
        var_8 = calcstreakcost( "nuke" );

        if ( isdefined( level._id_12305 ) )
            var_8 = level._id_12305;

        if ( var_7 >= var_8 )
        {
            self.nukepoints = var_8;

            if ( !istrue( self.molotov_delete_scriptable ) )
            {
                thread scripts\mp\hud_message::showkillstreaksplash( "nuke", var_8 );
                awardkillstreak( "nuke", "earned" );
                self.molotov_delete_scriptable = 1;
            }
        }
        else
        {
            self.nukepoints = var_7;

            if ( isdefined( self.petwatch ) )
                scripts\cp_mp\pet_watch::_id_13FFD( self.nukepoints / var_8 );
        }
    }

    setstreakpoints( var_4 );
    checkstreakreward( var_4 );
    updatestreakmeterui();

    if ( istrue( level._id_145EC && self.streaktype != "specialist" ) )
    {
        if ( var_4 >= var_5 )
        {
            var_4 = var_4 - var_5;
            setstreakpoints( var_4 );
            self setkillstreakpoints( var_4 );
            setstreakcounttonext();
            resetstreakavailability();
        }
    }

    scripts\mp\analyticslog::logevent_reportstreakscore( var_3, gettime(), scripts\mp\rank::getscoreinfocategory( var_0, "eventID" ) );
}

isbountyevent( var_0 )
{
    return var_0 == "bounty";
}

iskillstreakkillevent( var_0 )
{
    return issubstr( var_0, "ss_kill" ) || var_0 == "killstreak_full_score";
}

resetstreakpoints()
{
    self.earnedstreaklevel = 0;
    self.nukepoints = 0;
    setstreakpoints( 0 );
    resetstreakcount();
    updatestreakmeterui();
}

resetstreakavailability( var_0 )
{
    if ( !isdefined( self ) )
        return;

    for ( var_1 = 0; var_1 <= 4; var_1++ )
    {
        var_2 = self.streakdata.streaks[var_1];

        if ( isdefined( var_2 ) && isdefined( var_2.streakname ) )
        {
            if ( istrue( var_0 ) )
                var_2.available = 0;
            else if ( istrue( var_2.isspecialist ) )
                var_2.available = 0;
            else if ( var_2.available == -1 )
                var_2.available = 0;

            ammobox_clearbufferedattachmentweapon( var_1, var_2.available );
        }
    }
}

_id_13DB8()
{
    for ( var_0 = 1; var_0 <= 4; var_0++ )
    {
        var_1 = self.streakdata.streaks[var_0];

        if ( isdefined( var_1 ) && istrue( var_1.available ) )
        {
            var_2 = var_1.streaksetupinfo;

            if ( isdefined( var_2.availablefunc ) )
                self [[ var_2.availablefunc ]]( var_1 );
        }
    }
}

setstreakpoints( var_0 )
{
    if ( var_0 < 0 )
        var_0 = 0;

    if ( isdefined( self.streakpoints ) )
        self.previousstreakpoints = self.streakpoints;
    else
        self.previousstreakpoints = 0;

    self.streakpoints = var_0;
    updatestreakcount();
}

storescorestreakpointsongameend()
{
    level waittill( "game_ended" );

    if ( level.roundretainstreakprog )
    {
        foreach ( var_1 in level.players )
        {
            if ( !isdefined( var_1 ) )
                continue;

            var_2 = 0;

            if ( isdefined( var_1.streakpoints ) )
            {
                if ( var_1 scripts\mp\utility\perk::_hasperk( "specialty_killstreak_to_scorestreak" ) )
                    var_2 = scripts\mp\perks\perkfunctions::vote_player_set( var_1.streakpoints );
                else
                    var_2 = var_1.streakpoints;
            }

            var_1.pers["streakPoints"] = var_2;
        }
    }
}

findunobstructedfiringpointaroundz( var_0, var_1, var_2, var_3 )
{
    var_4 = rotatevector( ( 0, 0, 1 ), ( -1 * var_3, 0, 0 ) );
    var_5 = vectortoangles( var_1 - var_0.origin );

    for ( var_6 = 0; var_6 < 360; var_6 = var_6 + 30 )
    {
        var_7 = var_2 * rotatevector( var_4, ( 0, var_6 + var_5[1], 0 ) );
        var_8 = var_1 + var_7;

        if ( _findunobstructedfiringpointhelper( var_0, var_8, var_1 ) )
            return var_8;
    }

    return undefined;
}

findunobstructedfiringpointaroundy( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = vectortoangles( var_0.origin - var_1 );

    for ( var_7 = var_3; var_7 <= var_4; var_7 = var_7 + var_5 )
    {
        var_8 = rotatevector( ( 1, 0, 0 ), ( var_7 - 90, 0, 0 ) );
        var_9 = var_2 * rotatevector( var_8, ( 0, var_6[1], 0 ) );
        var_10 = var_1 + var_9;

        if ( _findunobstructedfiringpointhelper( var_0, var_10, var_1 ) )
            return var_10;
    }

    return undefined;
}

_findunobstructedfiringpointhelper( var_0, var_1, var_2 )
{
    var_3 = scripts\engine\trace::_bullet_trace( var_1, var_2, 0 );

    if ( var_3["fraction"] > 0.99 )
        return 1;

    return 0;
}

findunobstructedfiringpoint( var_0, var_1, var_2 )
{
    var_3 = findunobstructedfiringpointaroundz( var_0, var_1, var_2, 30 );

    if ( !isdefined( var_3 ) )
        var_3 = findunobstructedfiringpointaroundy( var_0, var_1, var_2, 15, 75, 15 );

    return var_3;
}

killstreakhit( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( var_1 ) && isplayer( var_0 ) && isdefined( var_2.owner ) && isdefined( var_2.owner.team ) )
    {
        if ( scripts\cp_mp\utility\player_utility::playersareenemies( var_0, var_2.owner ) )
        {
            var_2 _id_14018( var_0, var_4 );

            if ( scripts\mp\utility\weapon::iskillstreakweapon( var_1.basename ) )
                return;

            var_5 = createheadicon( var_1 );

            if ( !isdefined( var_0.lasthittime[var_5] ) )
                var_0.lasthittime[var_5] = 0;

            if ( var_0.lasthittime[var_5] == gettime() )
                return;

            var_0.lasthittime[var_5] = gettime();
            var_0 thread scripts\mp\gamelogic::threadedsetweaponstatbyname( var_5, 1, "hits" );

            if ( scripts\mp\utility\game::onlinestatsenabled() )
            {
                var_6 = var_0 scripts\mp\playerstats_interface::getplayerstat( "combatStats", "totalShots" );
                var_7 = var_0 scripts\mp\playerstats_interface::getplayerstat( "combatStats", "hits" ) + 1;

                if ( var_7 <= var_6 )
                {
                    var_0 scripts\mp\playerstats_interface::setplayerstatbuffered( var_7, "combatStats", "hits" );
                    var_0 scripts\mp\playerstats_interface::setplayerstatbuffered( int( var_6 - var_7 ), "combatStats", "misses" );
                }
            }

            if ( isdefined( var_3 ) && scripts\engine\utility::isbulletdamage( var_3 ) || scripts\mp\utility\damage::isprojectiledamage( var_3 ) )
            {
                var_0.lastdamagetime = gettime();
                var_8 = scripts\mp\utility\weapon::getweapongroup( var_1.basename );

                if ( var_8 == "weapon_lmg" )
                {
                    if ( !isdefined( var_0.shotslandedlmg ) )
                        var_0.shotslandedlmg = 1;
                    else
                        var_0.shotslandedlmg++;
                }
            }
        }
    }
}

_id_14019( var_0 )
{
    _id_14018( var_0, 150 );
}

_id_14018( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || !isdefined( self ) )
        return;

    if ( !isdefined( self._id_12F3C ) )
        self._id_12F3C = [];

    var_2 = var_0 getxuid();
    var_0.shoulddeleteimmediately = 1;

    if ( !isdefined( self._id_12F3C[var_2] ) )
    {
        var_3 = spawnstruct();
        var_3.damage = 0;
        var_3.player = var_0;
        self._id_12F3C[var_2] = var_3;
    }

    self._id_12F3C[var_2].damage = self._id_12F3C[var_2].damage + var_1;
}

rocket_internal( var_0 )
{
    if ( !isdefined( self._id_12F3C ) )
        return [];

    var_1 = [];

    foreach ( var_3 in self._id_12F3C )
    {
        var_4 = var_3.damage;
        var_5 = var_3.player;

        if ( var_4 < 150 )
            continue;

        var_6 = !scripts\mp\utility\player::isfriendly( self.team, var_5 );
        var_7 = istrue( scripts\cp_mp\utility\player_utility::playersareenemies( var_5, self.owner ) );

        if ( !var_6 && !var_7 )
            continue;

        if ( isdefined( var_0 ) && var_5 == var_0 )
            continue;

        var_1[var_1.size] = var_5;
    }

    return var_1;
}

givescoreforequipment( var_0, var_1 )
{
    if ( isdefined( var_1 ) && weaponclass( var_1 ) != "rocketlauncher" && var_1.basename != "iw8_la_kgolf_mp" )
        var_1 = undefined;

    thread scripts\mp\utility\points::giveunifiedpoints( "destroyed_equipment", var_1 );
    scripts\cp_mp\gestures::processcalloutdeath( var_0, self );
}

givescorefordestroyedtacinsert()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "destroyed_tac_insert" );
}

givescorefortrophyblocks()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "trophy_defense" );
}

givescoreforblackhat()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "blackhat_hack" );
}

givescoreforhack()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "hack" );
}

givescoreforempedvehicle()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "emped_vehicle" );
}

givescoreforempedkillstreak()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "emped_killstreak" );
}

givescoreforempedplayer()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "emped_player" );
}

givescoreformarktarget( var_0 )
{
    if ( var_0 )
        thread scripts\mp\utility\points::giveunifiedpoints( "perk_marked_target" );
    else
        thread scripts\mp\utility\points::giveunifiedpoints( "perk_marked_target", undefined, 0 );
}

givescorefordestorymarkedtarget()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "perk_destroyed_target" );
}

givescoreforassistdestroymarkedtarget()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "perk_destroyed_target" );
}

givescorefortriggeredalarmeddoor()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "triggered_alarm" );
}

streaktyperesetsondeath( var_0 )
{
    switch ( var_0 )
    {
        case "assault":
        case "specialist":
            return 1;
        case "resource":
        case "support":
            return 0;
        default:
            return 1;
    }
}

initridekillstreak( var_0 )
{
    scripts\common\utility::allow_usability( 0 );
    var_1 = initridekillstreak_internal( var_0 );

    if ( isdefined( self ) )
        scripts\common\utility::allow_usability( 1 );

    return var_1;
}

initridekillstreak_internal( var_0 )
{
    if ( isdefined( var_0 ) && islaptoptimeoutkillstreak( var_0 ) )
        var_1 = "timeout";
    else
        var_1 = scripts\engine\utility::_id_143BB( 1.0, "death", "disconnect", "weapon_switch_started" );

    scripts\mp\hostmigration::waittillhostmigrationdone();

    if ( var_1 == "weapon_switch_started" )
        return "fail";

    if ( !isalive( self ) )
        return "fail";

    if ( var_1 == "disconnect" || var_1 == "death" )
    {
        if ( var_1 == "disconnect" )
            return "disconnect";

        if ( self.team == "spectator" )
            return "fail";

        return "success";
    }

    if ( scripts\mp\utility\game::iskillstreakdenied() )
        return "fail";

    if ( !isdefined( var_0 ) || !issubstr( var_0, "pointSelect" ) )
    {
        if ( var_0 == "drone_hive" )
        {
            self visionsetfadetoblackforplayer( "black_bw", 0 );
            thread scripts\mp\utility\player::set_visionset_for_watching_players( "black_bw", 0, 1.0, undefined, 1 );
            var_2 = scripts\engine\utility::_id_143B9( 0, "death_or_disconnect" );
        }
        else
        {
            self visionsetfadetoblackforplayer( "black_bw", 0.75 );
            thread scripts\mp\utility\player::set_visionset_for_watching_players( "black_bw", 0.75, 1.0, undefined, 1 );
            var_2 = scripts\engine\utility::_id_143B9( 0.8, "death_or_disconnect" );
        }
    }
    else
        var_2 = scripts\engine\utility::_id_143B9( 1.0, "death_or_disconnect" );

    self notify( "black_out_done" );
    scripts\mp\hostmigration::waittillhostmigrationdone();

    if ( var_2 != "disconnect" )
    {
        if ( !isdefined( var_0 ) || !issubstr( var_0, "pointSelect" ) )
            thread clearrideintro( 1.0 );
        else
            self notify( "intro_cleared" );

        if ( self.team == "spectator" )
            return "fail";
    }

    if ( self isonladder() )
        return "fail";

    if ( !isalive( self ) )
        return "fail";

    if ( scripts\mp\utility\game::iskillstreakdenied() )
        return "fail";

    if ( var_2 == "disconnect" )
        return "disconnect";
    else
        return "success";
}

islaptoptimeoutkillstreak( var_0 )
{
    switch ( var_0 )
    {
        case "remote_tank":
        case "remote_uav":
        case "osprey_gunner":
        case "pointSelect":
        case "drone_hive":
        case "heli_pilot":
        case "gunship":
        case "precision_airstrike":
            return 1;
    }

    return 0;
}

clearrideintro( var_0, var_1 )
{
    self endon( "disconnect" );

    if ( isdefined( var_0 ) )
        wait( var_0 );

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    self visionsetfadetoblackforplayer( "", var_1 );
    scripts\mp\utility\player::set_visionset_for_watching_players( "", var_1 );
    self notify( "intro_cleared" );
}

allowridekillstreakplayerexit( var_0, var_1 )
{
    if ( isdefined( var_0 ) )
        self endon( var_0 );

    if ( !isdefined( self.owner ) )
        return;

    var_2 = self.owner;
    level endon( "game_ended" );
    var_2 endon( "disconnect" );
    var_2 endon( "end_remote" );
    self endon( "death" );
    var_3 = 0.75;

    if ( isdefined( var_1 ) )
        var_3 = var_1;

    var_4 = level.framedurationseconds;
    var_5 = 1;

    for (;;)
    {
        var_6 = 0;

        if ( var_5 == 1 )
        {
            var_2 setclientomnvar( "ui_exit_progress", 0 );
            var_5 = 0;
        }

        while ( var_2 usebuttonpressed() )
        {
            var_6 = var_6 + var_4;
            var_5 = 1;
            var_2 setclientomnvar( "ui_exit_progress", var_6 / var_3 );

            if ( var_6 > var_3 )
            {
                self notify( "killstreakExit" );
                return;
            }

            wait( var_4 );
        }

        wait( var_4 );
    }
}

combatrecordkillstreakuse( var_0 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() )
        return;

    var_1 = scripts\mp\utility\stats::getstreakrecordtype( var_0 );

    if ( !isdefined( var_1 ) )
    {
        if ( var_0 != "nuke" && var_0 != "explosive_bow" )
        {

        }

        return;
    }

    var_2 = self getplayerdata( "mp", "playerStats", var_1, var_0, "uses" );
    self setplayerdata( "mp", "playerStats", var_1, var_0, "uses", var_2 + 1 );
}

checkcasualstreaksreset()
{
    if ( !isdefined( self ) )
        return;

    if ( isdefined( self.streaktype ) && self.streaktype == "specialist" || isdefined( self.loadoutstreaktype ) && self.loadoutstreaktype == "specialist" || !istrue( level._id_145EC ) )
    {
        var_0 = self.streakdata.streaks[self.streakdata.streaks.size];

        if ( var_0.available == 1 || var_0.available == -1 )
            return 1;
    }

    return 0;
}

loadassociatedkillstreakweapons( var_0 )
{
    var_1 = [];
    var_2 = scripts\cp_mp\utility\killstreak_utility::getkillstreakdeployweapon( var_0 );
    var_1[var_1.size] = var_2;
    var_3 = scripts\cp_mp\utility\killstreak_utility::getkillstreakgameweapons( var_0 );
    var_1 = scripts\engine\utility::array_combine( var_1, var_3 );
    self loadweaponsforplayer( var_1, 1 );
}

combatrecordincrementkillstreakawardedstat( var_0 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() )
        return;

    var_1 = scripts\mp\utility\stats::getstreakrecordtype( var_0 );

    if ( !isdefined( var_1 ) )
        return;

    var_2 = self getplayerdata( "mp", "playerStats", var_1, var_0, "awardedCount" );
    self setplayerdata( "mp", "playerStats", var_1, var_0, "awardedCount", var_2 + 1 );
}

hide_player_clip( var_0 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() )
        return;

    var_1 = scripts\mp\utility\stats::getstreakrecordtype( var_0 );

    if ( !isdefined( var_1 ) )
        return;

    var_2 = self getplayerdata( "mp", "playerStats", var_1, var_0, "extraStat1" );
    self setplayerdata( "mp", "playerStats", var_1, var_0, "extraStat1", var_2 + 1 );
}
