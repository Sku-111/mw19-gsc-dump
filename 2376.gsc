// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

setbountyhunter()
{

}

unsetbountyhunter()
{

}

sethealer()
{
    thread radialhealer();
}

radialhealer()
{
    self endon( "unset_healer" );
    self endon( "disconnect" );
    level endon( "game_ended" );

    if ( !level.teambased )
        return;

    self.teammateswithhealperk = [];

    for (;;)
    {
        if ( scripts\cp_mp\utility\player_utility::_isalive() )
        {
            var_0 = scripts\mp\utility\player::getplayersinradius( self.origin, 350, self.team, self );

            foreach ( var_2 in var_0 )
            {
                if ( var_2 scripts\mp\utility\perk::_hasperk( "specialty_healer" ) )
                    continue;

                if ( self.team == var_2.team && var_2 scripts\cp_mp\utility\player_utility::_isalive() && !isdefined( var_2.healer ) )
                {
                    var_3 = var_2 getentitynumber();

                    if ( self.teammateswithhealperk.size == 0 )
                        scripts\mp\hud_message::showmiscmessage( "healing_players" );

                    var_2.healer = self;
                    self.teammateswithhealperk[var_3] = 1;
                    var_2 scripts\mp\utility\perk::giveperk( "specialty_regenfaster" );
                    var_2 scripts\mp\utility\perk::giveperk( "specialty_regen_delay_reduced" );
                    var_2 scripts\mp\hud_message::showmiscmessage( "in_healing_range" );
                    givehealedoverlay( var_2 );
                    thread healerperkteammatewatcher( var_2 );
                    thread healerperkteammatedestructor( var_2 );
                }
            }
        }

        wait 0.3;
    }
}

healerperkteammatewatcher( var_0 )
{
    level endon( "game_ended" );
    self endon( "unset_healer" );
    self endon( "death_or_disconnect" );
    var_0 endon( "death_or_disconnect" );

    for (;;)
    {
        var_1 = 400;

        if ( distancesquared( self.origin, var_0.origin ) > var_1 * var_1 || var_0.team != self.team )
        {
            var_0 notify( "out_of_healing_range" );
            return;
        }

        var_2 = var_0 getentitynumber();

        if ( var_0.health < var_0.maxhealth && var_0.healedoverlay.alpha == var_0.healedoverlay.lowalpha )
            var_0 thread healedoverlayfade( var_0.healedoverlay, self, var_0.healedoverlay.highalpha );
        else if ( var_0.health == var_0.maxhealth )
            var_0 thread healedoverlayfade( var_0.healedoverlay, self, var_0.healedoverlay.lowalpha );

        wait 0.1;
    }
}

healerperkteammatedestructor( var_0 )
{
    level endon( "game_ended" );
    var_1 = var_0 getentitynumber();
    scripts\engine\utility::waittill_any_ents( self, "unset_healer", self, "death_or_disconnect", var_0, "death_or_disconnect", var_0, "out_of_healing_range" );

    if ( isdefined( var_0 ) )
    {
        var_0 scripts\mp\utility\perk::removeperk( "specialty_regenfaster" );
        var_0 scripts\mp\utility\perk::removeperk( "specialty_regen_delay_reduced" );
        var_0.healer = undefined;
        var_0 scripts\mp\hud_message::showmiscmessage( "out_of_healing_range" );
    }

    if ( isdefined( self ) )
    {
        self.teammateswithhealperk[var_1] = undefined;

        if ( self.teammateswithhealperk.size == 0 )
            scripts\mp\hud_message::showmiscmessage( "no_healing_players" );
    }
}

unsethealer()
{
    self notify( "unset_healer" );
}

givehealedoverlay( var_0 )
{
    var_1 = newclienthudelem( var_0 );
    var_1.x = 0;
    var_1.y = 0;
    var_1 setshader( "overlay_healer", 640, 480 );
    var_1.alignx = "left";
    var_1.aligny = "top";
    var_1.horzalign = "fullscreen";
    var_1.vertalign = "fullscreen";
    var_1.alpha = 0;
    var_1.lowalpha = 0;
    var_1.highalpha = 0.75;
    var_0.healedoverlay = var_1;
    var_0 thread healedoverlayfade( var_1, self, var_1.lowalpha );
    var_0 thread healedoverlaydestructor( var_1, self );
}

healedoverlayfade( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "out_of_healing_range" );
    var_1 endon( "death_or_disconnect" );
    var_1 endon( "unset_healer" );
    var_0 fadeovertime( 0.5 );
    var_0.alpha = var_2;
}

healedoverlaydestructor( var_0, var_1 )
{
    scripts\engine\utility::waittill_any_ents( level, "game_ended", var_1, "unset_healer", var_1, "death_or_disconnect", self, "death_or_disconnect", self, "out_of_healing_range" );

    if ( isdefined( var_0 ) )
    {
        var_0 fadeovertime( 1 );
        var_0.alpha = 0;
        wait 1;
        var_0 destroy();
    }
}

settank()
{

}

unsettank()
{

}

setsurvivor()
{

}

unsetsurvivor()
{

}

setstealth()
{

}

unsetstealth()
{

}

setbreacher()
{
    scripts\mp\door::updatealldoorslockvisibilityforplayer( self, 1 );
}

unsetbreacher()
{
    scripts\mp\door::updatealldoorslockvisibilityforplayer( self, 0 );
}

setsupport()
{

}

unsetsupport()
{

}

setdemolitions()
{

}

unsetdemolitions()
{

}

setintel()
{

}

unsetintel()
{

}

sethunter()
{

}

unsethunter()
{

}

setspotter()
{

}

unsetspotter()
{

}

setmunitions()
{

}

unsetmunitions()
{

}

setoffhandprovider()
{
    thread offhandproviderthread();
}

offhandproviderthread()
{
    level endon( "game_ended" );
    self endon( "unset_offhand_provider" );
    self endon( "death_or_disconnect" );

    for (;;)
    {
        var_0 = scripts\mp\utility\player::getplayersinradius( self.origin, 144, self.team, self );

        foreach ( var_2 in var_0 )
        {
            if ( !isdefined( var_2.ohpequipmentrefills ) )
                var_2.ohpequipmentrefills = [];

            if ( var_2 equipmentusedbyslot( "primary" ) == 0 && var_2 equipmentusedbyslot( "secondary" ) == 0 )
                continue;

            if ( !isdefined( var_2.ohpequipmentrefills[self getentitynumber()] ) && var_2 scripts\cp_mp\utility\player_utility::_isalive() )
            {
                var_2.ohpequipmentrefills[self getentitynumber()] = 1;
                var_3 = var_2 refillequipment();

                for ( var_4 = 0; var_4 < var_3["primary"]; var_4++ )
                    var_2 thread ohpequipmentfillednotification( self.name, var_2 scripts\mp\equipment::getcurrentequipment( "primary" ) );

                for ( var_4 = 0; var_4 < var_3["secondary"]; var_4++ )
                    var_2 thread ohpequipmentfillednotification( self.name, var_2 scripts\mp\equipment::getcurrentequipment( "secondary" ) );

                thread ohpallowuseonplayerdeath( var_2 );
                var_2 playsoundtoplayer( "scavenger_pack_pickup", var_2 );
            }
        }

        wait 0.1;
    }
}

ohpallowuseonplayerdeath( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_1 = self getentitynumber();
    scripts\engine\utility::waittill_any_ents_return( self, "disconnect", var_0, "death" );
    var_0.ohpequipmentrefills[var_1] = undefined;
}

unsetoffhandprovider()
{
    self notify( "unset_offhand_provider" );
}

refillequipment()
{
    var_0 = [];
    var_0["primary"] = equipmentusedbyslot( "primary", 1 );
    var_0["secondary"] = equipmentusedbyslot( "secondary", 1 );
    return var_0;
}

equipmentusedbyslot( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = 0;

    var_2 = scripts\mp\equipment::getcurrentequipment( var_0 );
    var_3 = getequipmentstartammo( var_0 );
    var_4 = scripts\mp\equipment::getequipmentammo( var_2 );

    if ( var_1 && var_3 - var_4 > 0 )
        scripts\mp\equipment::incrementequipmentammo( var_2, var_3 - var_4 );

    return var_3 - var_4;
}

getequipmentstartammo( var_0 )
{
    var_1 = scripts\mp\equipment::getcurrentequipment( var_0 );
    var_2 = scripts\mp\equipment::getequipmentstartammo( var_1 );

    if ( var_0 == "primary" && scripts\mp\utility\perk::_hasperk( "specialty_extra_deadly" ) )
        var_2 = scripts\mp\equipment::getequipmentmaxammo( var_1 );

    return var_2;
}

ohpequipmentfillednotification( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );

    if ( !isdefined( self.munitionsnotifications ) )
        self.munitionsnotifications = [];

    var_2 = self.munitionsnotifications.size;

    for ( var_3 = 0; var_3 < var_2; var_3++ )
    {
        if ( var_3 < 2 )
        {
            thread movenotificationup( self.munitionsnotifications[var_3] );
            continue;
        }

        var_4 = self.munitionsnotifications[var_3];
        self.munitionsnotifications[var_3] = undefined;
        var_4 notify( "delete_icon_elem" );
    }

    var_5 = 620;
    var_6 = 360;
    var_7 = 352.0;
    var_8 = 264.0;
    var_9 = newclienthudelem( self );
    var_9.x = var_7;
    var_9.y = var_8;
    var_9.alignx = "right";
    var_9.aligny = "top";
    var_9.sort = 2;
    var_9.alpha = 0;
    var_10 = scripts\mp\equipment::getequipmenttableinfo( var_1 );
    var_9 setshader( var_10.image, 25, 25 );
    var_9 fadeovertime( 0.15 );
    var_9 moveovertime( 0.35 );
    var_9.alpha = 1;
    var_9.x = var_5;
    var_9.y = var_6;
    self.munitionsnotifications = scripts\engine\utility::array_insert( self.munitionsnotifications, var_9, 0 );
    var_9 endon( "delete_icon_elem" );
    thread ohpcleanupnotificationondeath( var_9 );
    var_9.isanimating = 1;
    wait 0.35;
    var_9.isanimating = 0;
    wait 3;
    var_9 fadeovertime( 0.5 );
    var_9.alpha = 0;
    wait 0.5;
    var_9 notify( "delete_icon_elem" );
}

ohpcleanupnotificationondeath( var_0 )
{
    level endon( "game_ended" );
    scripts\engine\utility::waittill_any_ents( self, "death_or_disconnect", var_0, "delete_icon_elem" );

    if ( isdefined( self ) )
        self.munitionsnotifications = scripts\engine\utility::array_remove( self.munitionsnotifications, var_0 );

    var_0 destroy();
}

movenotificationup( var_0 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    var_0 endon( "delete_icon_elem" );

    if ( !istrue( var_0.isanimating ) )
        var_0 moveovertime( 0.35 );

    var_0.y = var_0.y - 25;
    wait 0.35;
}

_id_131B3()
{
    for (;;)
    {
        var_0 = scripts\engine\utility::_id_143AF( "sprint_begin", "sprint_end", "weapon_change", "death" );
        thread set_train_stopped( var_0 );
    }
}

_id_13F6A()
{
    self setmovespeedscale( 1 );
}

set_train_stopped( var_0 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );

    if ( var_0 == "sprint_begin" )
    {
        if ( self.lastweaponobj hasattachment( "gunperk_quick" ) )
            self setmovespeedscale( 1.04 );
    }
    else if ( var_0 == "sprint_end" || var_0 == "death" )
        self setmovespeedscale( 1 );
    else if ( var_0 == "weapon_change" )
    {
        waitframe();

        if ( !self.lastweaponobj hasattachment( "gunperk_quick" ) )
            self setmovespeedscale( 1 );
        else
            self setmovespeedscale( 1.04 );
    }
}

setoverkillpro()
{

}

unsetoverkillpro()
{

}

setempimmune()
{

}

unsetempimmune()
{

}

setautospot()
{
    if ( !isplayer( self ) )
        return;

    autospotadswatcher();
    autospotdeathwatcher();
}

autospotdeathwatcher()
{
    self waittill( "death" );
    self endon( "disconnect" );
    self endon( "endAutoSpotAdsWatcher" );
    level endon( "game_ended" );
    self autospotoverlayoff();
}

unsetautospot()
{
    if ( !isplayer( self ) )
        return;

    self notify( "endAutoSpotAdsWatcher" );
    self autospotoverlayoff();
}

autospotadswatcher()
{
    self endon( "death_or_disconnect" );
    self endon( "endAutoSpotAdsWatcher" );
    level endon( "game_ended" );
    var_0 = 0;

    for (;;)
    {
        waitframe();

        if ( self isusingturret() )
        {
            self autospotoverlayoff();
            continue;
        }

        var_1 = self playerads();

        if ( var_1 < 1 && var_0 )
        {
            var_0 = 0;
            self autospotoverlayoff();
        }

        if ( var_1 < 1 && !var_0 )
            continue;

        if ( var_1 == 1 && !var_0 )
        {
            var_0 = 1;
            self autospotoverlayon();
        }
    }
}

setregenfaster()
{

}

unsetregenfaster()
{

}

timeoutregenfaster()
{
    self.hasregenfaster = undefined;
    scripts\mp\utility\perk::removeperk( "specialty_regenfaster" );
    self setclientdvar( "ui_regen_faster_end_milliseconds", 0 );
    self notify( "timeOutRegenFaster" );
}

sethardshell()
{
    self.shellshockreduction = 0.25;
}

unsethardshell()
{
    self.shellshockreduction = 0;
}

setsharpfocus()
{
    thread monitorsharpfocus();
}

monitorsharpfocus()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    self endon( "stop_monitorSharpFocus" );

    for (;;)
    {
        updatesharpfocus();
        self waittill( "weapon_change" );
    }
}

updatesharpfocus()
{
    var_0 = self.currentweapon;
    var_1 = undefined;
    var_2 = scripts\mp\utility\weapon::_id_14584( var_0 );

    if ( var_2 == 5 )
        var_1 = 0.7;
    else if ( var_2 == 4 )
        var_1 = 0.1;
    else if ( var_2 == 2 )
        var_1 = 0.05;
    else if ( var_2 == 3 )
        var_1 = 0.05;
    else if ( var_2 == 1 )
        var_1 = 0.25;
    else
        var_1 = 0.05;

    scripts\mp\weapons::updateviewkickscale( var_1 );
}

unsetsharpfocus()
{
    self notify( "stop_monitorSharpFocus" );
    scripts\mp\weapons::updateviewkickscale( 1.0 );
}

updatedefaultflinchreduction()
{
    if ( isagent( self ) )
        return;

    var_0 = undefined;
    var_1 = scripts\mp\utility\weapon::_id_14584( self.currentweapon );

    if ( var_1 == 5 )
        var_0 = 0.7;
    else if ( var_1 == 4 )
        var_0 = 0.1;
    else if ( var_1 == 2 )
    {
        if ( scripts\mp\utility\game::getgametype() == "br" )
            var_0 = getdvarfloat( "scr_marksman_flinchscalar", 0.05 );
        else
            var_0 = 0.05;
    }
    else if ( var_1 == 3 )
        var_0 = 0.05;
    else if ( var_1 == 1 )
        var_0 = 0.25;
    else if ( var_1 == 6 )
        var_0 = getdvarfloat( "scr_marksman_flinchscalar", 0.05 );
    else
        var_0 = 0.05;

    scripts\mp\weapons::updateviewkickscale( var_0 );
}

_id_13121()
{
    self endon( "death_or_disconnect" );
    scripts\mp\utility\perk::giveperk( "specialty_increaseaccuracy" );
    wait( getdvarfloat( "scr_gunperk_acquisition_duration", 5.0 ) );
    scripts\mp\utility\perk::removeperk( "specialty_increaseaccuracy" );
}

_id_131D0()
{
    thread _id_11CFC();
}

_id_11CFC()
{
    self endon( "tight_grip_unset" );
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    self notifyonplayercommand( "tightgrip_fire", "+attack" );
    self notifyonplayercommand( "tightgrip_fire", "+attack_akimbo_accessible" );
    self notifyonplayercommand( "tightgrip_release", "-attack" );
    self notifyonplayercommand( "tightgrip_release", "-attack_akimbo_accessible" );

    for (;;)
    {
        self waittill( "tightgrip_fire" );

        if ( self.currentweapon hasattachment( "gunperk_tightgrip" ) )
        {
            if ( !scripts\mp\utility\perk::_hasperk( "specialty_tightgrip" ) )
                scripts\mp\utility\perk::giveperk( "specialty_tightgrip" );
            else
                self notify( "tightgrip_continue" );

            self waittill( "tightgrip_release" );
            thread lobby_patrol_enemy_watcher();
        }
    }
}

lobby_patrol_enemy_watcher()
{
    self endon( "death_or_disconnect" );
    self endon( "tightgrip_continue" );
    wait 0.2;

    if ( self hasperk( "specialty_tightgrip" ) )
        scripts\mp\utility\perk::removeperk( "specialty_tightgrip" );
}

_id_13F70()
{
    self notify( "tight_grip_unset" );
    self notifyonplayercommandremove( "tightgrip_fire", "+attack" );
    self notifyonplayercommandremove( "tightgrip_fire", "+attack_akimbo_accessible" );
    self notifyonplayercommandremove( "tightgrip_release", "-attack" );
    self notifyonplayercommandremove( "tightgrip_release", "-attack_akimbo_accessible" );

    if ( self hasperk( "specialty_tightgrip" ) )
        scripts\mp\utility\perk::removeperk( "specialty_tightgrip" );
}

_id_131B4()
{
    thread _id_11D1A();
}

_id_11D1A()
{
    self endon( "death_or_disconnect" );
    self endon( "quickscope_unset" );

    for (;;)
    {
        if ( self.currentweapon hasattachment( "gunperk_quickscope" ) && self playerads() == 1 )
        {
            thread _id_131B5();

            while ( self playerads() == 1 )
                waitframe();

            if ( scripts\mp\utility\perk::_hasperk( "specialty_increaseaccuracy" ) )
                scripts\mp\utility\perk::removeperk( "specialty_increaseaccuracy" );
        }

        waitframe();
    }
}

_id_131B5()
{
    self endon( "death_or_disconnect" );
    self notify( "quickscope_accuracy_start" );
    self endon( "quickscope_accuracy_start" );
    self endon( "quickscope_unset" );

    if ( !scripts\mp\utility\perk::_hasperk( "specialty_increaseaccuracy" ) )
        scripts\mp\utility\perk::giveperk( "specialty_increaseaccuracy" );

    wait 1.0;

    if ( scripts\mp\utility\perk::_hasperk( "specialty_increaseaccuracy" ) )
        scripts\mp\utility\perk::removeperk( "specialty_increaseaccuracy" );
}

_id_13F6B()
{
    self notify( "quickscope_unset" );

    if ( scripts\mp\utility\perk::_hasperk( "specialty_increaseaccuracy" ) )
        scripts\mp\utility\perk::removeperk( "specialty_increaseaccuracy" );
}

_id_13159()
{
    thread _id_11D08();
}

_id_11D08()
{
    self endon( "death_or_disconnect" );
    self endon( "hardscope_unset" );

    for (;;)
    {
        if ( self playerads() == 1 )
        {
            thread _id_1315A();

            while ( self playerads() == 1 )
                waitframe();

            self notify( "hardscope_cancel" );

            if ( scripts\mp\utility\perk::_hasperk( "specialty_increaseaccuracy" ) )
                scripts\mp\utility\perk::removeperk( "specialty_increaseaccuracy" );
        }

        waitframe();
    }
}

_id_1315A()
{
    self endon( "death_or_disconnect" );
    self endon( "hardscope_cancel" );
    self endon( "hardscope_unset" );
    wait 0.5;
    scripts\mp\utility\perk::giveperk( "specialty_increaseaccuracy" );
}

_id_13F65()
{
    self notify( "hardscope_unset" );

    if ( scripts\mp\utility\perk::_hasperk( "specialty_increaseaccuracy" ) )
        scripts\mp\utility\perk::removeperk( "specialty_increaseaccuracy" );
}

_id_13176()
{
    thread _id_11D13();
}

_id_11D13()
{
    self endon( "death_or_disconnect" );
    self endon( "nervesofsteel_unset" );

    for (;;)
    {
        if ( isdefined( self.health ) && isdefined( self.maxhealth ) && self.health < self.maxhealth )
        {
            scripts\mp\utility\perk::giveperk( "specialty_increaseaccuracy" );

            while ( self.health < self.maxhealth )
                waitframe();

            scripts\mp\utility\perk::removeperk( "specialty_increaseaccuracy" );
        }

        waitframe();
    }
}

_id_13F66()
{
    self notify( "nervesofsteel_unset" );

    if ( scripts\mp\utility\perk::_hasperk( "specialty_increaseaccuracy" ) )
        scripts\mp\utility\perk::removeperk( "specialty_increaseaccuracy" );
}

_id_13195()
{
    thread _id_11D15();
}

_id_11D15()
{
    self endon( "death_or_disconnect" );

    if ( self.currentweapon hasattachment( "gunperk_panic" ) )
        thread _id_13196();

    for (;;)
    {
        self waittill( "weapon_change" );
        waitframe();

        if ( self.currentweapon hasattachment( "gunperk_panic" ) )
        {
            thread _id_13196();
            continue;
        }

        if ( scripts\mp\utility\perk::_hasperk( "specialty_increaseaccuracy" ) )
            scripts\mp\utility\perk::removeperk( "specialty_increaseaccuracy" );
    }
}

_id_13196()
{
    self endon( "death_or_disconnect" );
    self notify( "panic_accuracy_set" );
    self endon( "panic_accuracy_set" );
    self endon( "panic_unset" );

    if ( !scripts\mp\utility\perk::_hasperk( "specialty_increaseaccuracy" ) )
        scripts\mp\utility\perk::giveperk( "specialty_increaseaccuracy" );

    wait 3.0;
    scripts\mp\utility\perk::removeperk( "specialty_increaseaccuracy" );
}

_id_13F68()
{
    self notify( "panic_unset" );

    if ( scripts\mp\utility\perk::_hasperk( "specialty_increaseaccuracy" ) )
        scripts\mp\utility\perk::removeperk( "specialty_increaseaccuracy" );
}

ammodisabling_run( var_0 )
{
    var_0 endon( "death_or_disconnect" );
    level endon( "game_ended" );

    if ( isdefined( var_0.disabledspeedmod ) )
        return;
    else
        var_0.disabledspeedmod = -0.05;

    var_0 shellshock( "chargemode_mp", 0.8 );
    var_0 scripts\mp\weapons::updatemovespeedscale();
    var_0 ammodisabling_impair();
    scripts\engine\utility::_id_143B9( 0.8, "death" );
    var_0 ammodisabling_impairend();
    var_0.disabledspeedmod = undefined;
    var_0 scripts\mp\weapons::updatemovespeedscale();
}

ammodisabling_impair()
{
    scripts\common\utility::allow_sprint( 0 );
    scripts\common\utility::allow_slide( 0 );
    scripts\common\utility::allow_jump( 0 );
}

ammodisabling_impairend()
{
    scripts\common\utility::allow_sprint( 1 );
    scripts\common\utility::allow_slide( 1 );
    scripts\common\utility::allow_jump( 1 );
}

setviewkickoverride()
{
    self.overrideviewkickscale = 0.05;
    self._id_1218D = 0.05;
    self._id_1218F = 0.14;
    self.overrideviewkickscalesniper = 0.26;
    self.overrideviewkickscalepistol = 0.05;

    if ( scripts\mp\utility\game::getgametype() == "br" )
        self._id_1218E = getdvarfloat( "scr_marksman_flinchscalar", 0.05 ) * getdvarfloat( "scr_br_focusperk_scalar", 0.7 );
    else
        self._id_1218E = 0.05;

    scripts\mp\weapons::updateviewkickscale();
}

unsetviewkickoverride()
{
    self.overrideviewkickscale = undefined;
    self._id_1218D = undefined;
    self._id_1218F = undefined;
    self._id_1218E = undefined;
    self.overrideviewkickscalesniper = undefined;
    self.overrideviewkickscalepistol = undefined;
    scripts\mp\weapons::updateviewkickscale();
}

setaffinityspeedboost()
{
    self.weaponaffinityspeedboost = 0.08;
    scripts\mp\weapons::updatemovespeedscale();
}

unsetaffinityspeedboost()
{
    self.weaponaffinityspeedboost = undefined;
    scripts\mp\weapons::updatemovespeedscale();
}

setaffinityextralauncher()
{
    self.weaponaffinityextralauncher = 1;
    var_0 = scripts\mp\class::buildweapon( self.loadoutprimary, self.loadoutprimaryattachments, self.loadoutprimarycamo, self.loadoutprimaryreticle, self.loadoutprimaryvariantid );
    var_1 = scripts\mp\class::buildweapon( self.loadoutsecondary, self.loadoutsecondaryattachments, self.loadoutsecondarycamo, self.loadoutsecondaryreticle, self.loadoutsecondaryvariantid );

    if ( scripts\mp\utility\weapon::getweapongroup( var_0.basename ) == "weapon_projectile" )
        self setweaponammoclip( var_0, weaponclipsize( var_0 ) );

    if ( scripts\mp\utility\weapon::getweapongroup( var_1.basename ) == "weapon_projectile" )
        self setweaponammoclip( var_1, weaponclipsize( var_1 ) );
}

unsetaffinityextralauncher()
{
    self.weaponaffinityextralauncher = undefined;
}

setdoubleload()
{
    self endon( "death_or_disconnect" );
    self endon( "endDoubleLoad" );
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( "reload" );
        var_0 = self getweaponslist( "primary" );

        foreach ( var_2 in var_0 )
        {
            var_3 = self getweaponammoclip( var_2 );
            var_4 = weaponclipsize( var_2 );
            var_5 = var_4 - var_3;
            var_6 = self getweaponammostock( var_2 );

            if ( var_3 != var_4 && var_6 > 0 )
            {
                if ( var_3 + var_6 >= var_4 )
                {
                    self setweaponammoclip( var_2, var_4 );
                    self setweaponammostock( var_2, var_6 - var_5 );
                    continue;
                }

                self setweaponammoclip( var_2, var_3 + var_6 );

                if ( var_6 - var_5 > 0 )
                {
                    self setweaponammostock( var_2, var_6 - var_5 );
                    continue;
                }

                self setweaponammostock( var_2, 0 );
            }
        }
    }
}

unsetdoubleload()
{
    self notify( "endDoubleLoad" );
}

setmarksman( var_0 )
{
    return;

    if ( !isdefined( var_0 ) )
        var_0 = 10;
    else
        var_0 = int( var_0 ) * 2;

    scripts\mp\utility\weapon::setrecoilscale( var_0 );
    self.recoilscale = var_0;
}

unsetmarksman()
{
    return;
    scripts\mp\utility\weapon::setrecoilscale( 0 );
    self.recoilscale = 0;
}

setfastcrouch()
{
    thread watchfastcrouch();
}

watchfastcrouch()
{
    self endon( "death_or_disconnect" );
    self endon( "fastcrouch_unset" );

    for (;;)
    {
        var_0 = ( self getstance() == "crouch" || self getstance() == "prone" ) && !self issprintsliding();

        if ( !isdefined( self.fastcrouchspeedmod ) )
        {
            if ( var_0 )
            {
                self.fastcrouchspeedmod = 0.25;
                scripts\mp\weapons::updatemovespeedscale();
            }
        }
        else if ( !var_0 )
        {
            self.fastcrouchspeedmod = undefined;
            scripts\mp\weapons::updatemovespeedscale();
        }

        waitframe();
    }
}

unsetfastcrouch()
{
    self notify( "fastcrouch_unset" );

    if ( isdefined( self.fastcrouchspeedmod ) )
    {
        self.fastcrouchspeedmod = undefined;
        scripts\mp\weapons::updatemovespeedscale();
    }
}

setrshieldradar()
{
    self endon( "unsetRShieldRadar" );
    wait 0.75;
    self makeportableradar();
    thread setrshieldradar_cleanup();
}

setrshieldradar_cleanup()
{
    self endon( "unsetRShieldRadar" );
    self waittill( "death_or_disconnect" );

    if ( isdefined( self ) )
        unsetrshieldradar();
}

unsetrshieldradar()
{
    self clearportableradar();
    self notify( "unsetRShieldRadar" );
}

setrshieldscrambler()
{
    self makescrambler();
    thread setrshieldscrambler_cleanup();
}

setrshieldscrambler_cleanup()
{
    self endon( "unsetRShieldScrambler" );
    self waittill( "death_or_disconnect" );

    if ( isdefined( self ) )
        unsetrshieldscrambler();
}

unsetrshieldscrambler()
{
    self clearscrambler();
    self notify( "unsetRShieldScrambler" );
}

setstunresistance( var_0 )
{
    if ( !isdefined( var_0 ) )
    {
        if ( scripts\mp\utility\game::unset_relic_grounded() )
            var_0 = 8;
        else
            var_0 = 4;
    }

    var_0 = int( var_0 );

    if ( var_0 == 10 )
        self.stunresistscalar = 0;
    else
        self.stunresistscalar = var_0 / 10;
}

unsetstunresistance()
{
    self.stunresistscalar = 1;
}

setstunmore( var_0 )
{
    self.stunmorescalar = getdvarfloat( "perk_stun_more_scalar", 1.4 );
}

unsetstunmore()
{
    self.stunmorescalar = 1;
}

getstunscalartype( var_0 )
{
    var_1 = var_0 scripts\mp\utility\perk::_hasperk( "specialty_stun_resistance" );
    var_2 = var_0 scripts\mp\utility\perk::_hasperk( "penalty_stun_more" );

    if ( var_1 && !var_2 )
        return "stun_less";
    else if ( var_2 && !var_1 )
        return "stun_more";

    return "stun_normal";
}

applystunresistence( var_0, var_1, var_2 )
{
    var_3 = getstunscalartype( var_1 );

    if ( var_3 == "stun_less" && var_0 != var_1 )
    {
        if ( isdefined( var_1.stunresistscalar ) && isdefined( var_2 ) )
            var_2 = var_2 * var_1.stunresistscalar;

        var_4 = scripts\engine\utility::ter_op( isdefined( var_0.owner ), var_0.owner, var_0 );
        var_5 = scripts\engine\utility::ter_op( isdefined( var_1.owner ), var_1.owner, var_1 );

        if ( isplayer( var_4 ) && var_4 != var_1 )
            var_0 scripts\mp\damagefeedback::updatedamagefeedback( "hittacresist", undefined, undefined, undefined, 1 );

        if ( istrue( scripts\cp_mp\utility\player_utility::playersareenemies( var_4, var_5 ) ) )
            var_1 scripts\cp\vehicles\vehicle_compass_cp::resistedstun( var_4 );
    }
    else if ( !istrue( var_1 scripts\mp\utility\player::is_allowed_to_be_stunned() ) )
        var_2 = 0.0;
    else if ( var_3 == "stun_more" && var_0 != var_1 )
    {
        if ( isdefined( var_1.stunmorescalar ) && isdefined( var_2 ) )
            var_2 = var_2 * var_1.stunmorescalar;
    }

    if ( var_1 scripts\mp\utility\game::ismatchstartprotected() )
        var_2 = var_2 * 0.1;

    return var_2;
}

setweaponlaser()
{
    if ( isagent( self ) )
        return;

    self endon( "unsetWeaponLaser" );
    wait 0.5;
    thread setweaponlaser_internal();
}

unsetweaponlaser()
{
    self notify( "unsetWeaponLaser" );

    if ( isdefined( self.perkweaponlaseron ) && self.perkweaponlaseron )
        scripts\mp\utility\weapon::disableweaponlaser();

    self.perkweaponlaseron = undefined;
    self.perkweaponlaseroffforswitchstart = undefined;
}

setweaponlaser_waitforlaserweapon( var_0 )
{
    var_0 = getweaponbasename( var_0 );

    for (;;)
    {
        if ( isdefined( var_0 ) && ( var_0 == "iw6_kac_mp" || var_0 == "iw6_arx160_mp" ) )
            break;

        self waittill( "weapon_change", var_1 );
        var_0 = var_1.basename;
    }
}

setweaponlaser_internal()
{
    self endon( "death_or_disconnect" );
    self endon( "unsetWeaponLaser" );
    self.perkweaponlaseron = 0;
    var_0 = self getcurrentweapon();

    for (;;)
    {
        setweaponlaser_waitforlaserweapon( var_0 );

        if ( self.perkweaponlaseron == 0 )
        {
            self.perkweaponlaseron = 1;
            scripts\mp\utility\weapon::enableweaponlaser();
        }

        childthread setweaponlaser_monitorads();
        childthread setweaponlaser_monitorweaponswitchstart( 1.0 );
        self.perkweaponlaseroffforswitchstart = undefined;
        self waittill( "weapon_change" );

        if ( self.perkweaponlaseron == 1 )
        {
            self.perkweaponlaseron = 0;
            scripts\mp\utility\weapon::disableweaponlaser();
        }
    }
}

setweaponlaser_monitorweaponswitchstart( var_0 )
{
    self endon( "weapon_change" );

    for (;;)
    {
        self waittill( "weapon_switch_started" );
        childthread setweaponlaser_onweaponswitchstart( var_0 );
    }
}

setweaponlaser_onweaponswitchstart( var_0 )
{
    self notify( "setWeaponLaser_onWeaponSwitchStart" );
    self endon( "setWeaponLaser_onWeaponSwitchStart" );

    if ( self.perkweaponlaseron == 1 )
    {
        self.perkweaponlaseroffforswitchstart = 1;
        self.perkweaponlaseron = 0;
        scripts\mp\utility\weapon::disableweaponlaser();
    }

    wait( var_0 );
    self.perkweaponlaseroffforswitchstart = undefined;

    if ( self.perkweaponlaseron == 0 && self playerads() <= 0.6 )
    {
        self.perkweaponlaseron = 1;
        scripts\mp\utility\weapon::enableweaponlaser();
    }
}

setweaponlaser_monitorads()
{
    self endon( "weapon_change" );

    for (;;)
    {
        if ( !isdefined( self.perkweaponlaseroffforswitchstart ) || self.perkweaponlaseroffforswitchstart == 0 )
        {
            if ( self playerads() > 0.6 )
            {
                if ( self.perkweaponlaseron == 1 )
                {
                    self.perkweaponlaseron = 0;
                    scripts\mp\utility\weapon::disableweaponlaser();
                }
            }
            else if ( self.perkweaponlaseron == 0 )
            {
                self.perkweaponlaseron = 1;
                scripts\mp\utility\weapon::enableweaponlaser();
            }
        }

        waitframe();
    }
}

setsteadyaimpro()
{
    self setaimspreadmovementscale( 0.5 );
}

unsetsteadyaimpro()
{
    self notify( "end_SteadyAimPro" );
    self setaimspreadmovementscale( 1.0 );
}

perkusedeathtracker()
{
    self endon( "disconnect" );
    self waittill( "death" );
    self._useperkenabled = undefined;
}

setendgame()
{
    if ( isdefined( self.endgame ) )
        return;

    self.maxhealth = scripts\mp\tweakables::gettweakablevalue( "player", "maxhealth" ) * 4;
    self.health = self.maxhealth;
    self.endgame = 1;
    self.attackertable[0] = "";
    self visionsetnakedforplayer( "end_game", 5 );
    thread endgamedeath( 7 );
    scripts\mp\gamelogic::sethasdonecombat( self, 1 );
}

unsetendgame()
{
    self notify( "stopEndGame" );
    self.endgame = undefined;
    scripts\mp\utility\player::restorebasevisionset( 1 );

    if ( !isdefined( self.endgametimer ) )
        return;

    self.endgametimer scripts\mp\hud_util::destroyelem();
    self.endgameicon scripts\mp\hud_util::destroyelem();
}

endgamedeath( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "joined_team" );
    level endon( "game_ended" );
    self endon( "stopEndGame" );
    wait( var_0 + 1 );
    scripts\mp\utility\damage::_suicide();
}

setsaboteur()
{
    self.objectivescaler = 1.2;
}

unsetsaboteur()
{
    self.objectivescaler = 1;
}

setcombatspeed()
{
    self endon( "death_or_disconnect" );
    self endon( "unsetCombatSpeed" );
    self.incombatspeed = 0;
    unsetcombatspeedscalar();

    for (;;)
    {
        self waittill( "damage", var_0, var_1 );

        if ( !isdefined( var_1.team ) )
            continue;

        if ( level.teambased && var_1.team == self.team )
            continue;

        if ( self.incombatspeed )
            continue;

        setcombatspeedscalar();
        self.incombatspeed = 1;
        thread endofspeedwatcher();
    }
}

endofspeedwatcher()
{
    self notify( "endOfSpeedWatcher" );
    self endon( "endOfSpeedWatcher" );
    self endon( "death_or_disconnect" );
    self waittill( "healed" );
    unsetcombatspeedscalar();
    self.incombatspeed = 0;
}

setcombatspeedscalar()
{
    if ( self.weaponspeed <= 0.8 )
        self.combatspeedscalar = 1.4;
    else if ( self.weaponspeed <= 0.9 )
        self.combatspeedscalar = 1.3;
    else
        self.combatspeedscalar = 1.2;

    scripts\mp\weapons::updatemovespeedscale();
}

unsetcombatspeedscalar()
{
    self.combatspeedscalar = 1;
    scripts\mp\weapons::updatemovespeedscale();
}

unsetcombatspeed()
{
    unsetcombatspeedscalar();
    self notify( "unsetCombatSpeed" );
}

setlightweight()
{
    if ( !isdefined( self.cranked ) )
    {
        self.movespeedscaler = scripts\mp\utility\perk::lightweightscalar();
        scripts\mp\weapons::updatemovespeedscale();
    }
}

unsetlightweight()
{
    self.movespeedscaler = 1;
    scripts\mp\weapons::updatemovespeedscale();
}

setblackbox()
{

}

unsetblackbox()
{

}

setsteelnerves()
{
    scripts\mp\utility\perk::giveperk( "specialty_bulletaccuracy" );
    scripts\mp\utility\perk::giveperk( "specialty_holdbreath" );
}

unsetsteelnerves()
{
    scripts\mp\utility\perk::removeperk( "specialty_bulletaccuracy" );
    scripts\mp\utility\perk::removeperk( "specialty_holdbreath" );
}

setdelaymine()
{

}

unsetdelaymine()
{

}

setlocaljammer()
{
    if ( scripts\cp_mp\emp_debuff::is_empd() )
        self makescrambler();
}

unsetlocaljammer()
{
    self clearscrambler();
}

setthermal()
{
    self thermalvisionon();
}

unsetthermal()
{
    self thermalvisionoff();
}

setonemanarmy()
{
    thread onemanarmyweaponchangetracker();
}

unsetonemanarmy()
{
    self notify( "stop_oneManArmyTracker" );
}

onemanarmyweaponchangetracker()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    self endon( "stop_oneManArmyTracker" );

    for (;;)
    {
        self waittill( "weapon_change", var_0 );

        if ( var_0.basename != "onemanarmy_mp" )
            continue;

        thread selectonemanarmyclass();
    }
}

isonemanarmymenu( var_0 )
{
    if ( var_0 == game["menu_onemanarmy"] )
        return 1;

    if ( isdefined( game["menu_onemanarmy_defaults_splitscreen"] ) && var_0 == game["menu_onemanarmy_defaults_splitscreen"] )
        return 1;

    if ( isdefined( game["menu_onemanarmy_custom_splitscreen"] ) && var_0 == game["menu_onemanarmy_custom_splitscreen"] )
        return 1;

    return 0;
}

selectonemanarmyclass()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    scripts\common\utility::allow_weapon_switch( 0 );
    scripts\common\utility::allow_offhand_weapons( 0 );
    scripts\common\utility::allow_usability( 0 );
    thread closeomamenuondeath();
    self waittill( "menuresponse", var_0, var_1 );
    scripts\common\utility::allow_weapon_switch( 1 );
    scripts\common\utility::allow_offhand_weapons( 1 );
    scripts\common\utility::allow_usability( 1 );

    if ( var_1 == "back" || !isonemanarmymenu( var_0 ) || scripts\mp\utility\player::isusingremote() )
    {
        var_2 = self getcurrentweapon();

        if ( var_2.basename == "onemanarmy_mp" )
        {
            scripts\common\utility::allow_weapon_switch( 0 );
            scripts\common\utility::allow_offhand_weapons( 0 );
            scripts\common\utility::allow_usability( 0 );
            scripts\cp_mp\utility\inventory_utility::_switchtoweapon( scripts\mp\utility\inventory::getlastweapon() );
            self waittill( "weapon_change" );
            scripts\common\utility::allow_weapon_switch( 1 );
            scripts\common\utility::allow_offhand_weapons( 1 );
            scripts\common\utility::allow_usability( 1 );
        }

        return;
    }

    thread giveonemanarmyclass( var_1 );
}

closeomamenuondeath()
{
    self endon( "menuresponse" );
    self endon( "disconnect" );
    level endon( "game_ended" );
    self waittill( "death" );
    scripts\common\utility::allow_weapon_switch( 1 );
    scripts\common\utility::allow_offhand_weapons( 1 );
    scripts\common\utility::allow_usability( 1 );
}

giveonemanarmyclass( var_0 )
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );

    if ( scripts\mp\utility\perk::_hasperk( "specialty_omaquickchange" ) )
    {
        var_1 = 3.0;
        scripts\mp\utility\sound::playplayerandnpcsounds( self, "foly_onemanarmy_bag3_plr", "foly_onemanarmy_bag3_npc" );
    }
    else
    {
        var_1 = 6.0;
        scripts\mp\utility\sound::playplayerandnpcsounds( self, "foly_onemanarmy_bag6_plr", "foly_onemanarmy_bag6_npc" );
    }

    thread omausebar( var_1 );
    scripts\common\utility::allow_weapon( 0 );
    scripts\common\utility::allow_offhand_weapons( 0 );
    scripts\common\utility::allow_usability( 0 );
    wait( var_1 );
    scripts\common\utility::allow_weapon( 1 );
    scripts\common\utility::allow_offhand_weapons( 1 );
    scripts\common\utility::allow_usability( 1 );
    scripts\mp\class::giveloadout( self.pers["team"], var_0 );

    if ( isdefined( self.carryflag ) )
        self attach( self.carryflag, "J_spine4", 1 );

    self notify( "changed_kit" );
    level notify( "changed_kit" );
    scripts\mp\rank::tryresetrankxp();
}

omausebar( var_0 )
{
    self endon( "disconnect" );
    var_1 = scripts\mp\hud_util::createprimaryprogressbar();
    var_2 = scripts\mp\hud_util::createprimaryprogressbartext();
    var_2 settext( &"MPUI_CHANGING_KIT" );
    var_1 scripts\mp\hud_util::updatebar( 0, 1 / var_0 );

    for ( var_3 = 0; var_3 < var_0 && isalive( self ) && !level.gameended; var_3 = var_3 + 0.05 )
        wait 0.05;

    var_1 scripts\mp\hud_util::destroyelem();
    var_2 scripts\mp\hud_util::destroyelem();
}

setafterburner()
{
    self energy_setrestorerate( 0, scripts\engine\utility::ter_op( scripts\mp\utility\game::isanymlgmatch(), 600, 1000 ) );
    self energy_setresttimems( 0, scripts\engine\utility::ter_op( scripts\mp\utility\game::isanymlgmatch(), 750, 750 ) );
}

unsetafterburner()
{
    self energy_setrestorerate( 0, 400 );
    self energy_setresttimems( 0, 900 );
}

setblastshield()
{

}

unsetblastshield()
{

}

toggleblastshield( var_0 )
{

}

blastshieldusetracker( var_0, var_1 )
{
    self endon( "death_or_disconnect" );
    self endon( "end_perkUseTracker" );
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( "empty_offhand" );

        if ( !scripts\common\utility::is_offhand_weapons_allowed() )
            continue;

        self [[ var_1 ]]( scripts\mp\utility\perk::_hasperk( "specialty_blastshield" ) );
    }
}

setfreefall()
{

}

unsetfreefall()
{

}

settacticalinsertion()
{
    scripts\mp\equipment::giveequipment( "equip_tac_insert", "secondary" );
}

unsettacticalinsertion()
{

}

setpainted( var_0 )
{
    if ( isplayer( self ) )
    {
        var_1 = 0.5;

        if ( !scripts\mp\utility\perk::_hasperk( "specialty_engineer" ) && !scripts\mp\utility\perk::_hasperk( "specialty_noscopeoutline" ) )
        {
            self.painted = 1;
            var_2 = scripts\mp\utility\outline::outlineenableforplayer( self, var_0, "outline_nodepth_orange", "perk" );
            thread watchpainted( var_2, var_1 );
            thread watchpaintedagain( var_2 );
        }
    }
}

watchpainted( var_0, var_1 )
{
    self notify( "painted_again" );
    self endon( "painted_again" );
    self endon( "disconnect" );
    level endon( "game_ended" );
    scripts\engine\utility::_id_143B9( var_1, "death" );
    self.painted = 0;
    scripts\mp\utility\outline::outlinedisable( var_0, self );
    self notify( "painted_end" );
}

watchpaintedagain( var_0 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    scripts\engine\utility::_id_143A5( "painted_again", "painted_end" );
    scripts\mp\utility\outline::outlinedisable( var_0, self );
}

ispainted()
{
    return isdefined( self.painted ) && self.painted;
}

setassists()
{

}

unsetassists()
{

}

setrefillgrenades()
{
    if ( isdefined( self.primarygrenade ) )
        self givemaxammo( self.primarygrenade );

    if ( isdefined( self.secondarygrenade ) )
        self givemaxammo( self.secondarygrenade );
}

unsetrefillgrenades()
{

}

setrefillammo()
{
    if ( isdefined( self.primaryweapon ) )
        self givemaxammo( self.primaryweapon );

    if ( isdefined( self.secondaryweapon ) )
        self givemaxammo( self.secondaryweapon );
}

unsetrefillammo()
{

}

setcomexp()
{

}

unsetcomexp()
{

}

settagger()
{
    thread settaggerinternal();
}

settaggerinternal()
{
    self endon( "death_or_disconnect" );
    self endon( "unsetTagger" );
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( "eyesOn" );
        var_0 = self getplayerssightingme();

        foreach ( var_2 in var_0 )
        {
            if ( level.teambased && var_2.team == self.team )
                continue;

            if ( isalive( var_2 ) && var_2.sessionstate == "playing" )
            {
                if ( !isdefined( var_2.perkoutlined ) )
                    var_2.perkoutlined = 0;

                if ( !var_2.perkoutlined )
                    var_2.perkoutlined = 1;

                var_2 thread outlinewatcher( self );
            }
        }
    }
}

outlinewatcher( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "eyesOff" );
    level endon( "game_ended" );

    for (;;)
    {
        var_1 = 1;
        var_2 = var_0 getplayerssightingme();

        foreach ( var_4 in var_2 )
        {
            if ( var_4 == self )
            {
                var_1 = 0;
                break;
            }
        }

        if ( var_1 )
        {
            self.perkoutlined = 0;
            self notify( "eyesOff" );
        }

        wait 0.5;
    }
}

unsettagger()
{
    self notify( "unsetTagger" );
}

setpitcher()
{
    thread setpitcherinternal();
}

setpitcherinternal()
{
    self endon( "death_or_disconnect" );
    self endon( "unsetPitcher" );
    level endon( "game_ended" );
    self setgrenadecookscale( 1.5 );

    for (;;)
    {
        self setgrenadethrowscale( 1.25 );
        self waittill( "grenade_pullback", var_0 );
        var_1 = var_0.basename;

        if ( var_1 == "airdrop_marker_mp" || var_1 == "deployable_vest_marker_mp" || var_1 == "deployable_weapon_crate_marker_mp" )
            self setgrenadethrowscale( 1 );

        self waittill( "grenade_fire", var_2, var_0 );
    }
}

unsetpitcher()
{
    self setgrenadecookscale( 1 );
    self setgrenadethrowscale( 1 );
    self notify( "unsetPitcher" );
}

setboom()
{

}

setboominternal( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "unsetBoom" );
    level endon( "game_ended" );
    var_0 endon( "death_or_disconnect" );
    waitframe();
    triggerportableradarping( self.origin, var_0, 800, 1500 );
    var_0 boomtrackplayers( self.origin, self );
}

boomtrackplayers( var_0, var_1 )
{
    var_2 = scripts\common\utility::playersinsphere( var_0, 700 );

    foreach ( var_4 in var_2 )
    {
        if ( var_1 == var_4 )
            continue;

        if ( scripts\mp\utility\player::isenemy( var_4 ) && isalive( var_4 ) && !var_4 scripts\mp\utility\perk::_hasperk( "specialty_gpsjammer" ) )
        {

        }
    }
}

boomtrackplayerdeath( var_0, var_1 )
{
    self endon( "disconnect" );
    var_0 endon( "removearchetype" );
    var_2 = scripts\engine\utility::_id_143B9( 7.0, "death" );

    if ( var_2 == "timeout" && isdefined( self.markedbyboomperk[var_1] ) )
        self.markedbyboomperk[var_1] = undefined;
    else
    {
        self waittill( "spawned_player" );
        self.markedbyboomperk = undefined;
    }
}

unsetboom()
{
    self notify( "unsetBoom" );
}

customjuiced( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "faux_spawn" );
    self endon( "unset_custom_juiced" );
    level endon( "game_ended" );
    self.isjuiced = 1;
    self.movespeedscaler = 1.1;
    scripts\mp\weapons::updatemovespeedscale();
    scripts\mp\utility\perk::giveperk( "specialty_fastreload" );
    scripts\mp\utility\perk::giveperk( "specialty_quickdraw" );
    scripts\mp\utility\perk::giveperk( "specialty_stalker" );
    scripts\mp\utility\perk::giveperk( "specialty_fastoffhand" );
    scripts\mp\utility\perk::giveperk( "specialty_fastsprintrecovery" );
    scripts\mp\utility\perk::giveperk( "specialty_quickswap" );
    thread unsetcustomjuicedondeath();
    thread unsetcustomjuicedonride();
    thread unsetcustomjuicedonmatchend();
    var_1 = var_0 * 1000 + gettime();

    if ( !isai( self ) )
    {

    }

    wait( var_0 );
    unsetcustomjuiced();
}

unsetcustomjuiced( var_0 )
{
    if ( !isdefined( var_0 ) )
    {
        self.movespeedscaler = 1;

        if ( scripts\mp\utility\perk::_hasperk( "specialty_lightweight" ) )
            self.movespeedscaler = scripts\mp\utility\perk::lightweightscalar();

        scripts\mp\weapons::updatemovespeedscale();
    }

    scripts\mp\utility\perk::removeperk( "specialty_fastreload" );
    scripts\mp\utility\perk::removeperk( "specialty_quickdraw" );
    scripts\mp\utility\perk::removeperk( "specialty_stalker" );
    scripts\mp\utility\perk::removeperk( "specialty_fastoffhand" );
    scripts\mp\utility\perk::removeperk( "specialty_fastsprintrecovery" );
    scripts\mp\utility\perk::removeperk( "specialty_quickswap" );
    self.isjuiced = undefined;

    if ( !isai( self ) )
    {

    }

    self notify( "unset_custom_juiced" );
}

unsetcustomjuicedonride()
{
    self endon( "disconnect" );
    self endon( "unset_custom_juiced" );

    for (;;)
    {
        waitframe();

        if ( scripts\mp\utility\player::isusingremote() )
        {
            thread unsetcustomjuiced();
            break;
        }
    }
}

unsetcustomjuicedondeath()
{
    self endon( "disconnect" );
    self endon( "unset_custom_juiced" );
    scripts\engine\utility::_id_143A5( "death", "faux_spawn" );
    thread unsetcustomjuiced( 1 );
}

unsetcustomjuicedonmatchend()
{
    self endon( "disconnect" );
    self endon( "unset_custom_juiced" );
    level scripts\engine\utility::_id_143A5( "round_end_finished", "game_ended" );
    thread unsetcustomjuiced();
}

settriggerhappy()
{

}

settriggerhappyinternal()
{
    self endon( "death_or_disconnect" );
    self endon( "unsetTriggerHappy" );
    level endon( "game_ended" );
    var_0 = self.lastdroppableweaponobj;
    var_1 = self getweaponammostock( var_0 );
    var_2 = self getweaponammoclip( var_0 );
    self givestartammo( var_0 );
    var_3 = self getweaponammoclip( var_0 );
    var_4 = var_3 - var_2;
    var_5 = var_1 - var_4;

    if ( var_4 > var_1 )
    {
        self setweaponammoclip( var_0, var_2 + var_1 );
        var_5 = 0;
    }

    self setweaponammostock( var_0, var_5 );
    self playlocalsound( "ammo_crate_use" );
    self setclientomnvar( "ui_trigger_happy", 1 );
    wait 0.2;
    self setclientomnvar( "ui_trigger_happy", 0 );
}

unsettriggerhappy()
{
    self setclientomnvar( "ui_trigger_happy", 0 );
    self notify( "unsetTriggerHappy" );
}

setincog()
{

}

unsetincog()
{

}

setblindeye()
{

}

unsetblindeye()
{

}

setquickswap()
{

}

unsetquickswap()
{

}

setextraammo()
{
    self endon( "death_or_disconnect" );
    self endon( "unset_extraammo" );
    level endon( "game_ended" );

    if ( self.gettingloadout )
        self waittill( "giveLoadout" );

    var_0 = scripts\mp\utility\weapon::getvalidextraammoweapons();

    foreach ( var_2 in var_0 )
    {
        if ( isdefined( var_2 ) && !nullweapon( var_2 ) && var_2 hasattachment( "maxammo", 1 ) && !istrue( var_2.first_equipped ) )
        {
            self givemaxammo( var_2 );
            var_2.first_equipped = 1;
        }
    }
}

unsetextraammo()
{
    self notify( "unset_extraammo" );
}

setextraequipment()
{
    self endon( "death_or_disconnect" );
    self endon( "unset_extraequipment" );
    level endon( "game_ended" );

    if ( self.gettingloadout )
        self waittill( "giveLoadout" );

    var_0 = self.loadoutperkoffhand;

    if ( isdefined( var_0 ) && var_0 != "specialty_null" )
    {
        if ( var_0 != "specialty_tacticalinsertion" && var_0 != "smoke_grenade_mp" && var_0 != "player_trophy_system_mp" )
            self setweaponammoclip( var_0, 2 );
    }
}

unsetextraequipment()
{
    self notify( "unset_extraequipment" );
}

setextradeadly()
{
    self endon( "death_or_disconnect" );
    self endon( "unset_extradeadly" );
    level endon( "game_ended" );

    if ( self.gettingloadout )
        self waittill( "giveLoadout" );

    var_0 = scripts\mp\equipment::getcurrentequipment( "primary" );

    if ( isdefined( var_0 ) && var_0 != "none" )
        scripts\mp\equipment::incrementequipmentammo( var_0 );
}

unsetextradeadly()
{
    self notify( "unset_extradeadly" );
}

setbattleslide()
{

}

unsetbattleslide()
{

}

setoverkill()
{

}

unsetoverkill()
{

}

setactivereload()
{

}

unsetactivereload()
{

}

setlifepack()
{
    if ( !isdefined( level._effect["life_pack_pickup"] ) )
        level._effect["life_pack_pickup"] = undefined;

    thread watchlifepackkills();
}

watchlifepackkills()
{
    self endon( "death_or_disconnect" );
    self notify( "unset_lifepack" );
    self endon( "unset_lifepack" );

    for (;;)
    {
        self waittill( "got_a_kill", var_0, var_1, var_2 );
        var_3 = self.origin;
        var_4 = 20;
        var_5 = 20;
        var_6 = spawn( "script_model", self.origin + ( 0, 0, 10 ) );
        var_6 setmodel( "weapon_life_pack" );
        var_6.owner = self;
        var_6.team = self.team;
        var_6 hidefromplayer( self );
        var_7 = spawn( "trigger_radius", self.origin, 0, var_4, var_5 );
        var_7 thread watchlifepackuse( var_6 );
        var_7 thread watchlifepackdeath( var_6 );
        var_6 thread hoverlifepack();
        var_6 rotateyaw( 1000, 30, 0.2, 0.2 );
        var_6 thread watchlifepacklifetime( 10, var_7 );
        var_6 thread watchlifepackowner();

        foreach ( var_9 in level.players )
            var_6 setlifepackvisualforplayer( var_9 );
    }
}

activatelifepackboost( var_0, var_1, var_2 )
{
    self.lifeboostactive = 1;

    if ( isdefined( var_1 ) && var_1 > 0 )
        thread watchlifepackboostlifetime( var_1 );

    if ( isdefined( var_2 ) && var_2 )
        thread watchlifepackuserdeath();

    scripts\mp\utility\perk::giveperk( "specialty_regenfaster" );
    self setclientomnvar( "ui_life_link", 1 );
    self notify( "enabled_life_pack_boost" );
    self.lifepackowner = var_0;
    thread scripts\mp\gamescore::trackbuffassistfortime( var_0, self, "medic_lifepack", var_1 );
}

watchlifepackboostlifetime( var_0 )
{
    self endon( "death_or_disconnect" );
    wait( var_0 );

    if ( isdefined( self.lifeboostactive ) )
        disablelifepackboost();
}

disablelifepackboost()
{
    if ( isdefined( self ) && isdefined( self.lifeboostactive ) )
    {
        self.lifeboostactive = undefined;
        self setclientomnvar( "ui_life_link", 0 );
        self notify( "disabled_life_pack_boost" );
        scripts\mp\utility\perk::removeperk( "specialty_regenfaster" );
        scripts\mp\gamescore::untrackbuffassist( self.lifepackowner, self, "medic_lifepack" );
        self.lifepackowner = undefined;
    }
}

setlifepackvisualforplayer( var_0 )
{
    if ( level.teambased && var_0.team == self.team && var_0 != self.owner )
    {
        setlifepackoutlinestate( var_0 );
        self showtoplayer( var_0 );
        thread watchlifepackoutlinestate( var_0 );
    }
    else
        self hidefromplayer( var_0 );
}

setlifepackoutlinestate( var_0 )
{
    if ( isdefined( var_0.lifeboostactive ) )
    {
        if ( isdefined( var_0.lifepackoutlines ) && var_0.lifepackoutlines.size > 0 )
        {
            foreach ( var_2 in var_0.lifepackoutlines )
            {
                if ( self == var_2.pack )
                {
                    scripts\mp\utility\outline::outlinedisable( var_2.id, var_2.pack );
                    var_0.lifepackoutlines = scripts\engine\utility::array_remove( var_0.lifepackoutlines, var_2 );
                    var_2 = undefined;
                }
            }
        }
    }
    else
    {
        if ( !isdefined( var_0.lifepackoutlines ) )
            var_0.lifepackoutlines = [];

        var_4 = spawnstruct();
        var_4.id = scripts\mp\utility\outline::outlineenableforplayer( self, var_0, "outline_depth_cyan", "equipment" );
        var_4.pack = self;
        var_0.lifepackoutlines = scripts\engine\utility::array_add_safe( var_0.lifepackoutlines, var_4 );
    }
}

watchlifepackoutlinestate( var_0 )
{
    self endon( "death" );

    for (;;)
    {
        var_0 scripts\engine\utility::_id_143A5( "enabled_life_pack_boost", "disabled_life_pack_boost" );
        setlifepackoutlinestate( var_0 );
    }
}

hoverlifepack()
{
    self endon( "death" );
    self endon( "phase_resource_pickup" );
    var_0 = self.origin;

    for (;;)
    {
        self moveto( var_0 + ( 0, 0, 15 ), 1, 0.2, 0.2 );
        wait 1;
        self moveto( var_0, 1, 0.2, 0.2 );
        wait 1;
    }
}

watchlifepackuse( var_0 )
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "trigger", var_1 );

        if ( !isplayer( var_1 ) )
            continue;

        if ( var_1.team != var_0.team )
            continue;

        if ( isdefined( var_1.lifeboostactive ) )
            continue;

        if ( var_1 == var_0.owner )
            continue;

        var_1 activatelifepackboost( var_0.owner, 5, 1 );
        var_1 playlocalsound( "scavenger_pack_pickup" );
        var_2 = spawnfx( scripts\engine\utility::getfx( "life_pack_pickup" ), self.origin );
        triggerfx( var_2 );
        var_2 thread scripts\mp\utility\script::delayentdelete( 2 );

        foreach ( var_4 in level.players )
        {
            if ( var_4.team == var_1.team )
                continue;

            var_2 hidefromplayer( var_4 );
        }

        var_0 delete();
    }
}

watchlifepackdeath( var_0 )
{
    self endon( "death" );
    var_0 waittill( "death" );

    if ( isdefined( self ) )
        self delete();
}

watchlifepacklifetime( var_0, var_1 )
{
    self endon( "death" );
    wait( var_0 );
    var_1 delete();
    self delete();
}

watchlifepackowner()
{
    self endon( "death" );
    self.owner waittill( "disconnect" );

    if ( isdefined( self ) )
        self delete();
}

watchlifepackuserdeath()
{
    self endon( "disconnect" );
    self waittill( "death" );
    disablelifepackboost();
}

unsetlifepack()
{
    disablelifepackboost();
    self notify( "unset_lifepack" );
}

settoughenup()
{
    if ( !isdefined( level._effect["toughen_up_screen"] ) )
        level._effect["toughen_up_screen"] = loadfx( "vfx/iw7/_requests/mp/vfx_toughen_up_scrn" );

    thread watchtoughenup();
}

watchtoughenup()
{
    self endon( "death_or_disconnect" );
    self endon( "unsetToughenUp" );
    level endon( "game_ended" );
    var_0 = 0;
    var_1 = 15;
    var_2 = 7.5;
    var_3 = 4;
    var_4 = 5;
    var_5 = 2;
    var_6 = [];
    var_6 = scripts\engine\utility::array_add_safe( var_6, ( 35, 0, 10 ) );
    var_6 = scripts\engine\utility::array_add_safe( var_6, ( 0, 35, 10 ) );
    var_6 = scripts\engine\utility::array_add_safe( var_6, ( -35, 0, 10 ) );
    var_6 = scripts\engine\utility::array_add_safe( var_6, ( 0, -35, 10 ) );
    self waittill( "spawned_player" );

    for (;;)
    {
        self waittill( "got_a_kill", var_7, var_8, var_9 );

        if ( !isdefined( self.toughenedup ) )
        {
            self.toughenedup = 1;
            var_10 = spawnfxforclient( scripts\engine\utility::getfx( "toughen_up_screen" ), self geteye(), self );
            triggerfx( var_10 );
            thread attachtoughenuparmor( "j_forehead", level.bulletstormshield["section"].friendlymodel );
            thread attachtoughenuparmor( "tag_reflector_arm_le", level.bulletstormshield["section"].friendlymodel );
            thread attachtoughenuparmor( "tag_reflector_arm_ri", level.bulletstormshield["section"].friendlymodel );
            thread attachtoughenuparmor( "j_spineupper", level.bulletstormshield["section"].friendlymodel );
            thread attachtoughenuparmor( "tag_shield_back", level.bulletstormshield["section"].friendlymodel );
            thread attachtoughenuparmor( "j_hip_le", level.bulletstormshield["section"].friendlymodel );
            thread attachtoughenuparmor( "j_hip_ri", level.bulletstormshield["section"].friendlymodel );

            if ( var_5 == 1 )
            {
                scripts\mp\utility\damage::sethealthshield( var_1 );
                thread watchtoughenuplifetime( var_4 );
            }
            else
            {
                scripts\mp\lightarmor::setlightarmorvalue( self, 100 );
                thread watchtoughenuplightarmorend();
            }

            var_10 thread watchtoughenupplayerend( self );
            continue;
        }

        if ( var_5 == 1 )
        {
            self notify( "toughen_up_reset" );
            thread watchtoughenuplifetime( var_4 );
        }
    }
}

attachtoughenuparmor( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = self gettagorigin( var_0 );
    var_6 = spawn( "script_model", var_5 );
    var_6 setmodel( var_1 );
    var_7 = ( 0, 0, 0 );
    var_8 = ( 0, 0, 0 );

    if ( isdefined( var_2 ) )
        var_7 = var_2;

    if ( isdefined( var_3 ) )
        var_8 = var_3;

    var_6.angles = self.angles;
    var_6 linkto( self, var_0, var_7, var_8 );
    var_6 thread watchtoughenupplayerend( self );
    var_6 thread watchtoughenupgameend();
    return var_6;
}

settoughenupmodel( var_0, var_1, var_2, var_3 )
{
    var_4 = spawn( "script_model", self.origin + ( 0, 0, 50 ) );
    var_4.team = self.owner.team;

    if ( var_3 == "friendly" )
        var_4 setmodel( level.bulletstormshield["section"].friendlymodel );
    else
        var_4 setmodel( level.bulletstormshield["section"].enemymodel );

    var_4 linkto( self, "tag_origin", var_1, ( 0, 90 * ( var_2 + 1 ), 0 ) );
    var_4 hide();
    var_4 thread watchtoughenupplayerend( self.owner );
    var_4 thread watchtoughenupgameend();
    var_4 thread settoughenupvisiblestate( var_3, self.owner );
}

watchtoughenuplightarmorend()
{
    self endon( "disconnect" );
    self waittill( "remove_light_armor" );
}

watchtoughenupplayerend( var_0 )
{
    self endon( "death" );
    var_0 scripts\engine\utility::_id_143A5( "death_or_disconnect", "toughen_up_end" );
    var_0.toughenedup = undefined;

    if ( var_0 scripts\mp\lightarmor::haslightarmor( var_0 ) )
        var_0 unsetlightarmor();

    if ( isdefined( self ) )
        self delete();
}

watchtoughenupgameend()
{
    self endon( "death" );
    level waittill( "game_ended" );

    if ( isdefined( self ) )
        self delete();
}

watchtoughenuplifetime( var_0 )
{
    self endon( "death" );
    self endon( "toughen_up_reset" );

    while ( var_0 > 0 )
    {
        var_0 = var_0 - 1;
        wait 1;
    }

    self notify( "toughen_up_end" );
}

settoughenupvisiblestate( var_0, var_1 )
{
    foreach ( var_3 in level.players )
    {
        if ( !isdefined( var_3 ) )
            continue;

        if ( var_3 == var_1 )
            continue;

        if ( canshowtoughenupshield( var_3, var_0 ) )
            self showtoplayer( var_3 );

        thread watchtoughenupplayerbegin( var_3, var_0 );
    }
}

watchtoughenupplayerbegin( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    level endon( "game_ended" );
    self endon( "death" );

    for (;;)
    {
        var_0 waittill( "spawned_player" );
        self hidefromplayer( var_0 );

        if ( canshowtoughenupshield( var_0, var_1 ) )
            self showtoplayer( var_0 );
    }
}

canshowtoughenupshield( var_0, var_1 )
{
    var_2 = 0;

    if ( var_1 == "friendly" && var_0.team == self.team || var_1 == "enemy" && var_0.team != self.team )
        var_2 = 1;

    return var_2;
}

unsettoughenup()
{
    scripts\mp\utility\damage::clearhealthshield();
    unsetlightarmor();
    self notify( "unsetToughenUp" );
}

setscoutping()
{
    thread updatescoutping();
}

updatescoutping()
{
    self endon( "death_or_disconnect" );
    self endon( "unsetScoutPing" );
    var_0 = 50;
    var_1 = 1200;
    var_2 = undefined;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "squadAsTeamEnabled" ) )
        var_2 = level [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "squadAsTeamEnabled" ) ]]();

    for (;;)
    {
        var_3 = var_0;
        var_4 = var_1;

        if ( isdefined( self.scoutpingradius ) )
            var_3 = self.scoutpingradius;

        if ( isdefined( self.scoutsweeptime ) )
            var_4 = self.scoutsweeptime;

        var_3 = int( var_3 );
        var_4 = int( var_4 );

        if ( var_3 != var_0 )
        {
            if ( istrue( var_2 ) && getdvarint( "scr_advanced_scout_ping_squad_only", 0 ) )
            {
                var_5 = level.squaddata[self.team][self.squadindex].players;

                foreach ( var_7 in var_5 )
                    triggerportableradarping( self.origin, self, var_3, var_4 );
            }
            else
                triggerportableradarpingteam( self.origin, self.team, var_3, var_4 );
        }

        wait( var_1 / 1200 );
    }
}

updatescoutpingvalues( var_0 )
{
    var_1 = 0;
    var_2 = 150;
    var_3 = 3000;

    if ( isdefined( self.scoutpingmod ) )
        var_1 = self.scoutpingmod;

    if ( isdefined( self.scoutpingpreviousstage ) )
    {
        if ( var_0 > self.scoutpingpreviousstage )
        {
            var_4 = var_0 - self.scoutpingpreviousstage;
            var_1 = var_1 + var_4 / 10;
        }
        else if ( var_0 < self.scoutpingpreviousstage )
        {
            var_4 = self.scoutpingpreviousstage - var_0;
            var_1 = var_1 - var_4 / 10;
        }
    }

    if ( isdefined( self.scoutpingmod ) )
    {
        if ( var_1 > self.scoutpingmod || var_1 < self.scoutpingmod )
        {
            var_2 = var_2 + var_2 * var_1 * 1.5;
            var_3 = var_3 - var_3 * var_1 / 1.5;
            self.scoutpingradius = var_2;
            self.scoutsweeptime = var_3;
        }
    }

    if ( var_0 == 0 )
    {
        self.scoutpingradius = undefined;
        self.scoutsweeptime = undefined;
    }

    self.scoutpingmod = var_1;
    self.scoutpingpreviousstage = var_0;
}

unsetscoutping()
{
    self.scoutpingradius = undefined;
    self.scoutsweeptime = undefined;
    self.scoutpingmod = undefined;
    self.scoutpingpreviousstage = undefined;
    self notify( "unsetScoutPing" );
}

setphasespeed()
{
    thread watchphasespeedshift();
    thread watchphasespeedendshift();
}

watchphasespeedshift()
{
    self endon( "death_or_disconnect" );

    for (;;)
    {
        self waittill( "phase_shift_start" );
        self.phasespeedmod = 0.2;
        scripts\mp\weapons::updatemovespeedscale();
    }
}

watchphasespeedendshift()
{
    self endon( "death_or_disconnect" );

    for (;;)
    {
        self waittill( "phase_shift_completed" );
        self.phasespeedmod = undefined;
        scripts\mp\weapons::updatemovespeedscale();
    }
}

unsetphasespeed()
{
    self.phasespeedmod = undefined;
}

setdodge()
{
    self allowdodge( 1 );
}

unsetdodge()
{
    self allowdodge( 0 );
}

setextradodge()
{
    self energy_setmax( 1, 100 );
    self energy_setenergy( 1, 100 );
}

unsetextradodge()
{
    self energy_setmax( 1, 50 );
    self energy_setenergy( 1, 50 );
}

_id_133AF( var_0 )
{
    if ( !scripts\mp\utility\perk::_hasperk( "specialty_sixth_sense" ) )
        return 0;

    if ( !scripts\cp_mp\utility\player_utility::_isalive() )
        return 0;

    if ( !isdefined( var_0 ) )
        return 0;

    if ( !var_0 scripts\cp_mp\utility\player_utility::_isalive() )
        return 0;

    if ( var_0.team == self.team )
        return 0;

    if ( distancesquared( var_0.origin, self.origin ) > 16000000 )
        return 0;

    if ( var_0 scripts\mp\utility\perk::_hasperk( "specialty_sixth_sense_immune" ) )
        return 0;

    var_1 = var_0 scripts\cp_mp\utility\player_utility::getvehicle();

    if ( isdefined( var_1 ) && isdefined( var_1.vehiclename ) )
    {
        var_2 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_occupantisvehicledriver( var_0 );

        if ( var_2 )
        {
            if ( var_1.vehiclename != "light_tank" && var_1.vehiclename != "apc_russian" )
                return 0;
        }
        else if ( var_1.vehiclename == "apc_russian" )
            return 0;
    }

    if ( var_0 scripts\mp\utility\player::isusingremote() )
    {
        var_3 = var_0 scripts\mp\utility\player::getremotename();

        if ( var_3 == "gunship" || var_3 == "radar_drone_recon" || var_3 == "chopper_gunner" || var_3 == "cruise_predator" || var_3 == "assault_drone" )
            return 0;
    }

    return 1;
}

_id_133AD( var_0, var_1, var_2, var_3 )
{
    var_4 = var_1 - var_2;
    var_5 = vectordot( var_4, var_3 );

    if ( var_5 <= 0 )
        return 0;

    var_6 = length( var_4 );
    var_7 = 12;
    var_7 = var_7 + -0.15 * sqrt( var_6 );
    var_8 = scripts\engine\math::keypad_increase_failnum( var_7 );
    var_9 = 1 - 0.5 * var_8 * var_8;

    if ( var_5 < var_9 * var_6 )
        return 0;

    return 1;
}

_id_133AE( var_0, var_1, var_2 )
{
    var_3 = var_2 - var_1;
    var_4 = vectordot( var_0, vectornormalize( var_3 ) );

    if ( var_4 < 0.382683 )
        return 1;

    return 0;
}

sixthsense_think_internal()
{
    var_0 = scripts\engine\trace::create_default_contents( 1 );
    var_1 = 0;
    var_2 = getdvarint( "scr_sixth_sense_use_eyes_on" ) == 1;
    var_3 = 0;
    var_4 = undefined;
    var_5 = undefined;
    var_6 = getsystemtimeinmicroseconds();

    foreach ( var_28, var_8 in level.sixth_sense_players )
    {
        if ( !isdefined( var_8 ) )
        {
            level.sixth_sense_players[var_28] = undefined;
            break;
        }

        var_9 = 0;

        if ( var_2 && !isbot( var_8 ) )
        {
            if ( !var_8 scripts\mp\utility\perk::_hasperk( "specialty_sixth_sense" ) )
                continue;

            if ( !var_8 scripts\cp_mp\utility\player_utility::_isalive() )
                continue;

            var_10 = var_8 scripts\mp\utility\player::getstancecenter();
            var_11 = var_8 getplayerssightingme();

            foreach ( var_13 in var_11 )
            {
                if ( var_3 >= 25 )
                {
                    var_3 = 0;
                    waitframe();
                }

                if ( !isdefined( var_8 ) )
                {
                    level.sixth_sense_players[var_28] = undefined;
                    break;
                }

                if ( !var_8 _id_133AF( var_13 ) )
                    continue;

                var_3++;
                var_14 = var_13 getvieworigin();
                var_15 = anglestoforward( var_13 getplayerangles() );

                if ( !var_8 _id_133AD( var_13, var_10, var_14, var_15 ) )
                    continue;

                var_9 = var_9 | var_8 roof_rpg_covers( var_13 );
            }
        }
        else
        {
            var_10 = var_8 gettagorigin( "j_spinelower" );
            var_17 = var_8 geteye();
            var_18 = anglestoforward( var_8 getplayerangles() );

            foreach ( var_13 in level.players )
            {
                if ( var_3 >= 25 )
                {
                    var_3 = 0;
                    waitframe();
                }

                if ( !isdefined( var_8 ) )
                {
                    level.sixth_sense_players[var_28] = undefined;
                    break;
                }

                if ( !var_8 _id_133AF( var_13 ) )
                    continue;

                var_3++;
                var_14 = var_13 getvieworigin();
                var_15 = anglestoforward( var_13 getplayerangles() );

                if ( !var_8 _id_133AD( var_13, var_10, var_14, var_15 ) )
                    continue;

                if ( _id_133AE( var_18, var_10, var_14 ) )
                {
                    var_3 = var_3 + 2;
                    var_20 = [ var_8 ];
                    var_21 = var_13 scripts\cp_mp\utility\player_utility::getvehicle();

                    if ( isdefined( var_21 ) )
                    {
                        var_22 = getchildoutlineents( var_21 );

                        foreach ( var_24 in var_22 )
                            var_20[var_20.size] = var_24;
                    }

                    var_26 = var_13.currentturret;

                    if ( isdefined( var_26 ) )
                        var_20[var_20.size] = var_26;

                    if ( scripts\engine\trace::ray_trace_detail_passed( var_14, var_17, var_20, var_0 ) )
                    {
                        var_9 = 255;
                        break;
                    }
                }
            }
        }

        if ( scripts\mp\gametypes\br_public.gsc::isbrgametypefuncdefinedwrapper( "sixthSenseThink" ) )
            var_9 = var_9 | scripts\mp\gametypes\br_public.gsc::runbrgametypefuncwrapper( "sixthSenseThink", var_8 );

        var_8 updatesixthsensevfx( var_9 );
    }
}

sixthsense_think()
{
    level.sixth_sense_players = [];

    for (;;)
    {
        waitframe();
        sixthsense_think_internal();
    }
}

setsixthsense()
{
    if ( getdvarint( "perk_sixthsensedisabled", 0 ) == 1 )
        return;

    self.sixthsenselastactivetime = 0;
    self.sixthsensestate = 0;
    updatesixthsensevfx( 0 );
    var_0 = self getentitynumber();
    level.sixth_sense_players[var_0] = self;
}

unsetsixthsense()
{
    thread health_reduction();
}

health_reduction()
{
    self endon( "disconnect" );
    self.sixthsenselastactivetime = undefined;
    self.sixthsensestate = undefined;
    self.sixthsensesource = undefined;
    self notify( "removeSixthSense" );
    var_0 = self getentitynumber();
    level.sixth_sense_players[var_0] = undefined;
    waitframe();
    updatesixthsensevfx( 0 );
}

setenhancedsixthsense()
{

}

unsetenhancedsixthsense()
{

}

updatesixthsensevfx( var_0 )
{
    self setclientomnvar( "ui_edge_glow", var_0 );
}

roof_rpg_covers( var_0 )
{
    var_1 = anglestoforward( self getplayerangles() );
    var_2 = ( var_1[0], var_1[1], var_1[2] );
    var_2 = vectornormalize( var_2 );
    var_3 = var_0.origin - self.origin;
    var_4 = ( var_3[0], var_3[1], var_3[2] );
    var_4 = vectornormalize( var_4 );
    var_5 = vectordot( var_2, var_4 );

    if ( var_5 >= 0.92388 )
        return 2;
    else if ( var_5 >= 0.5 )
        return scripts\engine\utility::ter_op( scripts\mp\utility\script::isleft2d( self.origin, var_2, var_0.origin ), 4, 1 );
    else if ( var_5 >= 0.5 )
        return scripts\engine\utility::ter_op( scripts\mp\utility\script::isleft2d( self.origin, var_2, var_0.origin ), 128, 64 );
    else if ( var_5 >= -0.707107 )
        return scripts\engine\utility::ter_op( scripts\mp\utility\script::isleft2d( self.origin, var_2, var_0.origin ), 32, 8 );
    else
        return 16;
}

markassixthsensesource( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self notify( "markAsSixthSenseSource" );
    self endon( "markAsSixthSenseSource" );
    var_1 = var_0 getentitynumber();
    self.sixthsensesource[var_1] = 1;
    var_0 scripts\engine\utility::waittill_any_in_array_or_timeout( [ "death" ], 10 );
    self.sixthsensesource[var_1] = 0;
}

setcamoelite()
{
    self endon( "death_or_disconnect" );
    self endon( "removeArchetype" );

    for (;;)
    {
        var_0 = 0;
        var_1 = level.players;
        var_2 = 0;

        foreach ( var_4 in var_1 )
        {
            if ( !isdefined( var_4 ) || !var_4 scripts\cp_mp\utility\player_utility::_isalive() )
                continue;

            if ( var_4.team == self.team )
                continue;

            if ( var_4 scripts\mp\utility\perk::_hasperk( "specialty_empimmune" ) )
                continue;

            var_5 = self.origin - var_4.origin;
            var_6 = anglestoforward( var_4 getplayerangles() );
            var_7 = vectordot( var_5, var_6 );

            if ( var_7 <= 0 )
                continue;

            var_8 = vectornormalize( var_5 );
            var_9 = vectornormalize( var_6 );
            var_7 = vectordot( var_8, var_9 );

            if ( var_7 < 12 )
                continue;

            var_0++;
            var_10 = var_4 geteye();
            var_11 = self geteye();

            if ( scripts\engine\trace::ray_trace_passed( var_10, var_11, self, scripts\engine\trace::create_default_contents( 1 ) ) )
            {
                var_2 = 1;
                break;
            }

            if ( var_0 >= 10 )
            {
                waitframe();
                var_0 = 0;
            }
        }

        updatecamoeliteoverlay( var_2 );
        waitframe();
    }
}

updatecamoeliteoverlay( var_0 )
{

}

unsetcamoelite()
{

}

setcarepackage()
{
    thread scripts\mp\killstreaks\killstreaks::givekillstreak( "airdrop_assault", 0, 0, self );
}

unsetcarepackage()
{

}

setuav()
{
    thread scripts\mp\killstreaks\killstreaks::givekillstreak( "uav", 0, 0, self );
}

unsetuav()
{

}

setjuiced( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "faux_spawn" );
    self endon( "unset_juiced" );
    level endon( "game_ended" );
    self.isjuiced = 1;
    self.movespeedscaler = 1.25;
    scripts\mp\weapons::updatemovespeedscale();
    scripts\mp\utility\perk::giveperk( "specialty_fastreload" );
    scripts\mp\utility\perk::giveperk( "specialty_quickdraw" );
    scripts\mp\utility\perk::giveperk( "specialty_stalker" );
    scripts\mp\utility\perk::giveperk( "specialty_fastoffhand" );
    scripts\mp\utility\perk::giveperk( "specialty_fastsprintrecovery" );
    scripts\mp\utility\perk::giveperk( "specialty_quickswap" );
    thread unsetjuicedondeath();
    thread unsetjuicedonride();
    thread unsetjuicedonmatchend();

    if ( !isdefined( var_0 ) )
        var_0 = 10;

    var_1 = var_0 * 1000 + gettime();

    if ( !isai( self ) )
    {

    }

    wait( var_0 );
    unsetjuiced();
}

unsetjuiced( var_0 )
{
    if ( !isdefined( var_0 ) )
    {
        self.movespeedscaler = 1;

        if ( scripts\mp\utility\perk::_hasperk( "specialty_lightweight" ) )
            self.movespeedscaler = scripts\mp\utility\perk::lightweightscalar();

        scripts\mp\weapons::updatemovespeedscale();
    }

    scripts\mp\utility\perk::removeperk( "specialty_fastreload" );
    scripts\mp\utility\perk::removeperk( "specialty_quickdraw" );
    scripts\mp\utility\perk::removeperk( "specialty_stalker" );
    scripts\mp\utility\perk::removeperk( "specialty_fastoffhand" );
    scripts\mp\utility\perk::removeperk( "specialty_fastsprintrecovery" );
    scripts\mp\utility\perk::removeperk( "specialty_quickswap" );
    self.isjuiced = undefined;

    if ( !isai( self ) )
    {

    }

    self notify( "unset_juiced" );
}

unsetjuicedonride()
{
    self endon( "disconnect" );
    self endon( "unset_juiced" );

    for (;;)
    {
        waitframe();

        if ( scripts\mp\utility\player::isusingremote() )
        {
            thread unsetjuiced();
            break;
        }
    }
}

unsetjuicedondeath()
{
    self endon( "disconnect" );
    self endon( "unset_juiced" );
    scripts\engine\utility::_id_143A5( "death", "faux_spawn" );
    thread unsetjuiced( 1 );
}

unsetjuicedonmatchend()
{
    self endon( "disconnect" );
    self endon( "unset_juiced" );
    level scripts\engine\utility::_id_143A5( "round_end_finished", "game_ended" );
    thread unsetjuiced();
}

hasjuiced()
{
    return isdefined( self.isjuiced );
}

setcombathigh()
{
    self endon( "death_or_disconnect" );
    self endon( "unset_combathigh" );
    level endon( "end_game" );
    self.damageblockedtotal = 0;

    if ( level.splitscreen )
    {
        var_0 = 56;
        var_1 = 21;
    }
    else
    {
        var_0 = 112;
        var_1 = 32;
    }

    if ( isdefined( self.juicedtimer ) )
        self.juicedtimer destroy();

    if ( isdefined( self.juicedicon ) )
        self.juicedicon destroy();

    self.combathighoverlay = newclienthudelem( self );
    self.combathighoverlay.x = 0;
    self.combathighoverlay.y = 0;
    self.combathighoverlay.alignx = "left";
    self.combathighoverlay.aligny = "top";
    self.combathighoverlay.horzalign = "fullscreen";
    self.combathighoverlay.vertalign = "fullscreen";
    self.combathighoverlay setshader( "combathigh_overlay", 640, 480 );
    self.combathighoverlay.sort = -10;
    self.combathighoverlay.archived = 1;
    self.combathightimer = scripts\mp\hud_util::createtimer( "hudsmall", 1.0 );
    self.combathightimer scripts\mp\hud_util::setpoint( "CENTER", "CENTER", 0, var_0 );
    self.combathightimer settimer( 10.0 );
    self.combathightimer.color = ( 0.8, 0.8, 0 );
    self.combathightimer.archived = 0;
    self.combathightimer.foreground = 1;
    self.combathighicon = scripts\mp\hud_util::createicon( "specialty_painkiller", var_1, var_1 );
    self.combathighicon.alpha = 0;
    self.combathighicon scripts\mp\hud_util::setparent( self.combathightimer );
    self.combathighicon scripts\mp\hud_util::setpoint( "BOTTOM", "TOP" );
    self.combathighicon.archived = 1;
    self.combathighicon.sort = 1;
    self.combathighicon.foreground = 1;
    self.combathighoverlay.alpha = 0.0;
    self.combathighoverlay fadeovertime( 1.0 );
    self.combathighicon fadeovertime( 1.0 );
    self.combathighoverlay.alpha = 1.0;
    self.combathighicon.alpha = 0.85;
    thread unsetcombathighondeath();
    thread unsetcombathighonride();
    wait 8;
    self.combathighicon fadeovertime( 2.0 );
    self.combathighicon.alpha = 0.0;
    self.combathighoverlay fadeovertime( 2.0 );
    self.combathighoverlay.alpha = 0.0;
    self.combathightimer fadeovertime( 2.0 );
    self.combathightimer.alpha = 0.0;
    wait 2;
    self.damageblockedtotal = undefined;
    scripts\mp\utility\perk::removeperk( "specialty_combathigh" );
}

unsetcombathighondeath()
{
    self endon( "disconnect" );
    self endon( "unset_combathigh" );
    self waittill( "death" );
    thread scripts\mp\utility\perk::removeperk( "specialty_combathigh" );
}

unsetcombathighonride()
{
    self endon( "disconnect" );
    self endon( "unset_combathigh" );

    for (;;)
    {
        waitframe();

        if ( scripts\mp\utility\player::isusingremote() )
        {
            thread scripts\mp\utility\perk::removeperk( "specialty_combathigh" );
            break;
        }
    }
}

unsetcombathigh()
{
    self notify( "unset_combathigh" );
    self.combathighoverlay destroy();
    self.combathighicon destroy();
    self.combathightimer destroy();
}

setlightarmor()
{
    scripts\mp\lightarmor::setlightarmorvalue( self, 150 );
}

unsetlightarmor()
{
    scripts\mp\lightarmor::lightarmor_unset( self );
}

setrevenge()
{
    self notify( "stopRevenge" );
    waitframe();

    if ( !isdefined( self.lastkilledby ) )
        return;

    if ( level.teambased && self.team == self.lastkilledby.team )
        return;

    var_0 = spawnstruct();
    var_0.showto = self;
    var_0.icon = "compassping_revenge";
    var_0.offset = ( 0, 0, 64 );
    var_0.width = 10;
    var_0.height = 10;
    var_0.archived = 0;
    var_0.delay = 1.5;
    var_0.constantsize = 0;
    var_0.pintoscreenedge = 1;
    var_0.fadeoutpinnedicon = 0;
    var_0.is3d = 0;
    self.revengeparams = var_0;
    self.lastkilledby thread scripts\cp_mp\entityheadicons::setheadicon_singleimage( var_0.showto, var_0.icon, var_0.offset, undefined, undefined, undefined, var_0.delay );
    thread watchrevengedeath();
    thread watchrevengekill();
    thread watchrevengedisconnected();
    thread watchrevengevictimdisconnected();
    thread watchstoprevenge();
}

watchrevengedeath()
{
    self endon( "stopRevenge" );
    self endon( "disconnect" );
    var_0 = self.lastkilledby;

    for (;;)
    {
        var_0 waittill( "spawned_player" );
        var_0 thread scripts\cp_mp\entityheadicons::setheadicon_singleimage( self.revengeparams.showto, self.revengeparams.icon, self.revengeparams.offset, undefined, undefined, undefined, self.revengeparams.delay );
    }
}

watchrevengekill()
{
    self endon( "stopRevenge" );
    self waittill( "killed_enemy" );
    self notify( "stopRevenge" );
}

watchrevengedisconnected()
{
    self endon( "stopRevenge" );
    self.lastkilledby waittill( "disconnect" );
    self notify( "stopRevenge" );
}

watchstoprevenge()
{
    var_0 = self.lastkilledby;
    self waittill( "stopRevenge" );

    if ( !isdefined( var_0 ) )
        return;

    foreach ( var_3, var_2 in var_0.entityheadicons )
    {
        if ( !isdefined( var_2 ) )
            continue;

        var_2 destroy();
    }
}

watchrevengevictimdisconnected()
{
    var_0 = self.objidfriendly;
    var_1 = self.lastkilledby;
    var_1 endon( "disconnect" );
    level endon( "game_ended" );
    self endon( "stopRevenge" );
    self waittill( "disconnect" );

    if ( !isdefined( var_1 ) )
        return;

    foreach ( var_4, var_3 in var_1.entityheadicons )
    {
        if ( !isdefined( var_3 ) )
            continue;

        var_3 destroy();
    }
}

unsetrevenge()
{
    self notify( "stopRevenge" );
}

setphaseslide()
{
    self.canphaseslide = 1;
}

unsetphaseslide()
{
    self.canphaseslide = 0;
}

setteleslide()
{
    self.canteleslide = 1;
}

unsetteleslide()
{
    self.canteleslide = 0;
}

setphaseslashrephase()
{
    self.hasrephase = 1;
}

unsetphaseslashrephase()
{
    self.hasrephase = 0;
}

setphasefall()
{

}

unsetphasefall()
{

}

setextenddodge()
{

}

unsetextenddodge()
{

}

setauraquickswap()
{
    scripts\mp\archetypes\archassault::auraquickswap_run();
}

unsetauraquickswap()
{

}

setauraspeed()
{

}

unsetauraspeed()
{

}

setmarktargets()
{
    scripts\mp\perks\perk_mark_targets::marktarget_init();
}

unsetmarktargets()
{

}

setbatterypack()
{

}

unsetbatterypack()
{

}

setcamoclone()
{

}

unsetcamoclone()
{

}

setblockhealthregen()
{
    self.healthregendisabled = 1;
    self notify( "force_regeneration" );
}

unsetblockhealthregen()
{
    self.healthregendisabled = undefined;
    self notify( "force_regeneration" );
}

setscorestreakpack()
{

}

unsetscorestreakpack()
{

}

setsuperpack()
{

}

unsetsuperpack()
{

}

setspawncloak()
{

}

unsetspawncloak()
{

}

setdodgedefense()
{
    scripts\cp_mp\utility\damage_utility::adddamagemodifier( "dodgeDefense", 0.5, 0, ::dodgedefenseignorefunc );
}

unsetdodgedefense()
{
    scripts\cp_mp\utility\damage_utility::removedamagemodifier( "dodgeDefense", 0 );
}

dodgedefenseignorefunc( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( !( isdefined( var_2.dodging ) && var_2.dodging && var_2 scripts\mp\utility\perk::_hasperk( "specialty_dodge_defense" ) ) )
        return 1;

    return 0;
}

setdodgewave()
{

}

unsetdodgewave()
{

}

setgroundpound()
{

}

unsetgroundpound()
{

}

setmeleekill()
{
    self giveweapon( "iw7_fistsperk_mp" );
    self assignweaponmeleeslot( "iw7_fistsperk_mp" );

    if ( self hasweapon( "iw8_fists_mp" ) )
    {
        var_0 = self getcurrentweapon();
        scripts\cp_mp\utility\inventory_utility::_takeweapon( "iw8_fists_mp" );
        self giveweapon( "iw7_fistslethal_mp" );

        if ( var_0.basename == "iw8_fists_mp" )
        {
            scripts\cp_mp\utility\inventory_utility::_switchtoweapon( "iw7_fistslethal_mp" );

            if ( isdefined( self.gettingloadout ) && self.gettingloadout && isdefined( self.spawnweaponobj ) && self.spawnweaponobj.basename == "iw8_fists_mp" )
            {
                self.spawnweaponobj = getcompleteweaponname( "iw7_fistslethal_mp" );
                self setspawnweapon( self.spawnweaponobj );
            }
        }
    }
}

unsetmeleekill()
{
    scripts\cp_mp\utility\inventory_utility::_takeweapon( "iw7_fistsperk_mp" );

    if ( self hasweapon( "iw7_fistslethal_mp" ) )
    {
        var_0 = self.currentweapon;
        scripts\cp_mp\utility\inventory_utility::_takeweapon( "iw7_fistslethal_mp" );
        self giveweapon( "iw8_fists_mp" );

        if ( var_0.basename == "iw7_fistslethal_mp" )
            scripts\cp_mp\utility\inventory_utility::_switchtoweapon( "iw8_fists_mp" );
    }
}

setpowercell()
{

}

unsetpowercell()
{

}

sethardline()
{
    self endon( "death_or_disconnect" );
    self endon( "perk_end_hardline" );
    scripts\mp\killstreaks\killstreaks::updatestreakcosts();
    scripts\mp\killstreaks\killstreaks::checkstreakreward( self.streakpoints, 1 );
    scripts\mp\killstreaks\killstreaks::updatestreakmeterui();
    self.hardlineactive["assists"] = 0;
}

watchhardlineassists()
{
    self endon( "death_or_disconnect" );
    self endon( "perk_end_hardline" );
}

unsethardline()
{
    self.hardlineactive = undefined;
    self notify( "perk_end_hardline" );
}

setoverclock()
{

}

unsetoverclock()
{

}

setovercharge()
{
    thread _calloutmarkerping_handleluinotify_added::_id_1313D( "ui_overcharge", 1 );
}

unsetovercharge()
{
    thread _calloutmarkerping_handleluinotify_added::_id_1313D( "ui_overcharge", 0 );
}

setsupersprintenhanced()
{
    thread watchforsupersprintenhancedused();
}

unsetsupersprintenhanced()
{
    self notify( "unsetSuperSprintEnhanced" );
}

watchforsupersprintenhancedused()
{
    self endon( "unsetSuperSprintEnhanced" );
    self endon( "disconnect" );
    var_0 = 0;

    while ( 2000 > var_0 )
    {
        waitframe();

        if ( isdefined( self ) && istrue( self issupersprinting() ) )
        {
            var_1 = level.frameduration;
            var_0 = var_0 + var_1;
        }
    }

    scripts\mp\gamelogic::sethasdonecombat( self, 1 );
}

settracker()
{

}

unsettracker()
{

}

setpersonaltrophy()
{

}

unsetpersonaltrophy()
{

}

setdisruptorpunch()
{

}

unsetdisruptorpunch()
{

}

setequipmentping()
{
    if ( !scripts\mp\utility\game::lpcfeaturegated() )
        level.equipmentpingactive = 1;
}

unsetequipmentping()
{

}

setruggedeqp()
{

}

unsetruggedeqp()
{

}

feedbackruggedeqp( var_0, var_1, var_2, var_3 )
{

}

setmanatarms()
{

}

unsetmanatarms()
{

}

setoutlinekillstreaks()
{
    thread outlinekillstreaks_enablemarksafterprematch();
}

outlinekillstreaks_enablemarksafterprematch()
{
    self endon( "unsetOutlineKillstreak" );
    self endon( "disconnect" );
    scripts\mp\flags::gameflagwait( "prematch_done" );
    var_0 = 1000000;

    if ( level.gametype == "br" )
        var_0 = 1000;

    if ( isdefined( self ) )
    {
        self enableentitymarks( "killstreak", var_0 );
        self enableentitymarks( "air_killstreak", var_0 );
        self.perkoutlinekillstreaksset = 1;
        _calloutmarkerping_predicted_timeout::_id_14130( self );
    }
}

unsetoutlinekillstreaks()
{
    if ( istrue( self.perkoutlinekillstreaksset ) )
    {
        self disableentitymarks( "killstreak" );
        self disableentitymarks( "air_killstreak" );
        self.perkoutlinekillstreaksset = undefined;
    }

    _calloutmarkerping_predicted_timeout::_id_14130( self );
    self notify( "unsetOutlineKillstreak" );
}

setengineer()
{
    thread engineer_enablemarksafterprematch();
}

engineer_enablemarksafterprematch()
{
    self endon( "unsetEngineer" );
    self endon( "disconnect" );
    scripts\mp\flags::gameflagwait( "prematch_done" );
    var_0 = 1000000;

    if ( level.gametype == "br" )
        var_0 = 1000;

    if ( isdefined( self ) )
    {
        self enableentitymarks( "equipment", var_0 );
        self.perkengineerset = 1;
    }
}

unsetengineer()
{
    if ( istrue( self.perkengineerset ) )
    {
        self disableentitymarks( "equipment" );
        self.perkengineerset = undefined;
    }

    self notify( "unsetEngineer" );
}

setnoscopeoutline()
{
    if ( !isdefined( level.noscopeoutlinesetnotifs ) )
    {
        level.noscopeoutlinesetnotifs = [];
        level.noscopeoutlineunsetnotifs = [];
        level thread processnoscopeoutlinesetnotifs();
        level thread processnoscopeoutlineunsetnotifs();
    }

    level.noscopeoutlinesetnotifs[level.noscopeoutlinesetnotifs.size] = self;
}

unsetnoscopeoutline()
{
    level.noscopeoutlineunsetnotifs[level.noscopeoutlineunsetnotifs.size] = self;
}

processnoscopeoutlinesetnotifs()
{
    level endon( "game_ended" );

    for (;;)
    {
        if ( level.noscopeoutlinesetnotifs.size > 0 )
        {
            var_0 = 0;

            while ( isdefined( level.noscopeoutlinesetnotifs[var_0] ) )
            {
                level notify( "set_noscopeoutline", level.noscopeoutlinesetnotifs[var_0] );
                level.noscopeoutlinesetnotifs[var_0] notify( "set_noscopeoutline" );
                var_0++;
                waitframe();
            }

            level.noscopeoutlinesetnotifs = [];
            continue;
        }

        waitframe();
    }
}

processnoscopeoutlineunsetnotifs()
{
    level endon( "game_ended" );

    for (;;)
    {
        if ( level.noscopeoutlineunsetnotifs.size > 0 )
        {
            var_0 = 0;

            while ( isdefined( level.noscopeoutlineunsetnotifs[var_0] ) )
            {
                level notify( "unset_noscopeoutline", level.noscopeoutlineunsetnotifs[var_0] );
                level.noscopeoutlineunsetnotifs[var_0] notify( "unset_noscopeoutline" );
                var_0++;
                waitframe();
            }

            level.noscopeoutlineunsetnotifs = [];
            continue;
        }

        waitframe();
    }
}

setcloak()
{

}

unsetcloak()
{

}

setwalllock()
{

}

unsetwalllock()
{

}

setrush()
{

}

unsetrush()
{
    self notify( "removeCombatHigh" );
    self.speedonkillmod = undefined;
}

sethover()
{
    thread runhover();
}

unsethover()
{

}

setmomentum()
{
    self endon( "death_or_disconnect" );
    self endon( "momentum_unset" );
    self.momentumspeedincrease = 0;
    scripts\mp\weapons::updatemovespeedscale();

    for (;;)
    {
        self waittill( "killed_enemy" );
        thread _id_11CD0();
    }
}

unsetmomentum()
{
    self notify( "momentum_unset" );
    self.momentumspeedincrease = undefined;
    scripts\mp\weapons::updatemovespeedscale();
}

_id_11CD0()
{
    self endon( "death_or_disconnect" );
    self endon( "momentum_unset" );
    self.momentumspeedincrease = self.momentumspeedincrease + 0.04;
    self.momentumspeedincrease = min( self.momentumspeedincrease, 0.12 );
    scripts\mp\weapons::updatemovespeedscale();
    thread _id_11CCF();
}

_id_11CCF()
{
    self endon( "death_or_disconnect" );
    self notify( "momentum_reset_speed" );
    self endon( "momentum_reset_speed" );
    wait 5.0;
    self.momentumspeedincrease = 0;
    scripts\mp\weapons::updatemovespeedscale();
}

setscavengereqp()
{

}

unsetscavengereqp()
{

}

setspawnview()
{

}

unsetspawnview()
{
    foreach ( var_1 in level.players )
        var_1 notify( "end_spawnview" );
}

setheadgear( var_0 )
{

}

unsetheadgear()
{

}

setftlslide()
{

}

unsetftlslide()
{

}

setimprovedprone()
{

}

unsetimprovedprone()
{

}

setghost()
{
    thread startgpsjammer();
}

unsetghost()
{
    thread removegpsjammer();
}

setsupportkillstreaks()
{
    self endon( "disconnect" );
    self waittill( "equipKillstreaksFinished" );

    if ( !isdefined( self.streakdata.streaks[1] ) )
    {
        foreach ( var_1 in self.streakdata.streaks["killstreaks"] )
            var_1.earned = 0;
    }
}

unsetsupportkillstreaks()
{
    self notify( "end_support_killstreaks" );
}

setoverrideweaponspeed()
{
    self.overrideweaponspeed_speedscale = 0.98;
    scripts\mp\weapons::updatemovespeedscale();
}

unsetoverrideweaponspeed()
{
    self.overrideweaponspeed_speedscale = undefined;
}

setcloakaerial()
{

}

unsetcloakaerial()
{

}

setspawnradar()
{
    self.hasspawnradar = 1;
}

unsetspawnradar()
{
    self.hasspawnradar = 1;
}

setimprovedmelee()
{

}

unsetimprovedmelee()
{

}

setthief()
{

}

unsetthief()
{

}

setadsawareness()
{
    thread runadsawareness();
    self setscriptablepartstate( "heightened_senses", "default" );
}

runadsawareness()
{
    self endon( "death_or_disconnect" );
    self endon( "unsetADSAwareness" );
    self.awarenessradius = 256;
    self.awarenessqueryrate = 2.0;
    thread awarenessmonitorstance();

    for (;;)
    {
        wait( self.awarenessqueryrate );
        var_0 = scripts\common\utility::playersinsphere( self.origin, self.awarenessradius );

        foreach ( var_2 in level.players )
        {
            if ( var_2.team == self.team )
                continue;

            if ( var_2 scripts\mp\utility\perk::_hasperk( "specialty_coldblooded" ) )
                continue;

            if ( var_2 isonground() && !var_2 issprinting() && !var_2 iswallrunning() && !var_2 issprintsliding() )
                continue;

            thread playincomingwarning( var_2 );
        }
    }
}

playincomingwarning( var_0 )
{
    self setscriptablepartstate( "heightened_senses", "scrn_pulse" );
    self playrumbleonentity( "damage_heavy" );
    var_0 playsoundtoplayer( "ghost_senses_ping", self );
    wait 0.2;

    if ( isdefined( self ) )
    {
        self setscriptablepartstate( "heightened_senses", "default" );

        if ( scripts\cp_mp\utility\player_utility::_isalive() )
        {
            self playrumbleonentity( "damage_heavy" );

            if ( isdefined( var_0 ) && var_0 scripts\cp_mp\utility\player_utility::_isalive() )
                var_0 playsoundtoplayer( "ghost_senses_ping", self );
        }
    }
}

awarenessmonitorstance()
{
    self endon( "death_or_disconnect" );

    for (;;)
    {
        var_0 = self getstance();
        var_1 = self getvelocity();

        switch ( var_0 )
        {
            case "stand":
                self.awarenessradius = 400;
                self.awarenessqueryrate = 2.0;
                break;
            case "crouch":
                self.awarenessradius = 650;
                self.awarenessqueryrate = 1.0;
                break;
            case "prone":
                self.awarenessradius = 700;
                self.awarenessqueryrate = 0.5;
                break;
        }

        wait 0.01;
    }
}

awarenessaudiopulse()
{
    self endon( "death_or_disconnect" );
    self endon( "stop_awareness" );

    for (;;)
    {
        playsoundatpos( self.origin + ( 0, 0, 5 ), "ghost_senses_ping" );
        wait 2.0;
    }
}

unsetadsawareness()
{
    self notify( "unsetADSAwareness" );
    self setscriptablepartstate( "heightened_senses", "default" );
}

setrearguard()
{

}

unsetrearguard()
{
    self.hasrearguardshield = undefined;
}

setsolobuddyboost()
{
    self.hassolobuddyboost = 1;
}

unsetsolobuddyboost()
{
    self.hassolobuddyboost = undefined;
}

setthrowingknifemelee()
{
    self giveweapon( self._id_13B5C );
    self assignweaponmeleeslot( self._id_13B5C );
    thread watchthrowingknifescavenge();

    if ( self._id_13B5C == "iw8_throwingknife_fire_melee_mp" )
        thread _id_144FD();
    else if ( self._id_13B5C == "iw8_throwingknife_electric_melee_mp" )
        thread _id_144FC();
}

unsetthrowingknifemelee()
{
    if ( isdefined( self._id_13B5C ) && self hasweapon( self._id_13B5C ) )
        self takeweapon( self._id_13B5C );

    self notify( "specialty_equip_throwingKnife_end" );

    if ( isdefined( self._id_13B5C ) && self._id_13B5C == "iw8_throwingknife_fire_melee_mp" )
        votesys_think();
    else if ( isdefined( self._id_13B5C ) && self._id_13B5C == "iw8_throwingknife_electric_melee_mp" )
        votesys_new();
}

_id_144FD()
{
    self endon( "death_or_disconnect" );
    self endon( "specialty_equip_throwingKnife_end" );

    for (;;)
    {
        self waittill( "weapon_change", var_0 );

        if ( var_0.basename == "iw8_throwingknife_fire_melee_mp" )
        {
            self setscriptablepartstate( "WeaponVFXViewmodel", "flamingKnife" );
            self waittill( "weapon_change" );
            self setscriptablepartstate( "WeaponVFXViewmodel", "neutral" );
        }
    }
}

votesys_think()
{
    self setscriptablepartstate( "WeaponVFXViewmodel", "neutral" );
}

_id_144FC()
{
    self endon( "death_or_disconnect" );
    self endon( "specialty_equip_throwingKnife_end" );

    for (;;)
    {
        self waittill( "weapon_change", var_0 );

        if ( var_0.basename == "iw8_throwingknife_electric_melee_mp" )
        {
            self setscriptablepartstate( "WeaponVFXViewmodel", "electricKnife" );
            self waittill( "weapon_change" );
            self setscriptablepartstate( "WeaponVFXViewmodel", "neutral" );
        }
    }
}

votesys_new()
{
    self setscriptablepartstate( "WeaponVFXViewmodel", "neutral" );
}

watchthrowingknifescavenge()
{
    self endon( "death_or_disconnect" );
    self endon( "specialty_equip_throwingKnife_end" );

    for (;;)
    {
        self waittill( "offhand_fired", var_0 );

        if ( scripts\mp\utility\weapon::isthrowingknife( var_0 ) )
        {
            var_1 = self getammocount( var_0 );

            if ( var_1 == 0 )
            {
                if ( isdefined( self._id_13B5C ) && self hasweapon( self._id_13B5C ) )
                    self takeweapon( self._id_13B5C );
            }

            while ( self getammocount( var_0 ) == 0 )
                wait 0.05;

            self giveweapon( self._id_13B5C );
            self assignweaponmeleeslot( self._id_13B5C );
        }
    }
}

setbulletoutline()
{
    self.bulletoutline = spawnstruct();
    self.bulletoutline.player = self;
    self.bulletoutline.enemies = [];
    self.bulletoutline.enemyids = [];
    self.bulletoutline.enemyendtimes = [];
    self.bulletoutline thread watchbulletoutline();
    self.bulletoutline thread watchbulletoutlinecleanup();
}

unsetbulletoutline()
{
    self notify( "unsetBulletOutline" );
    self.bulletoutline = undefined;
}

watchbulletoutline()
{
    self.player endon( "death_or_disconnect" );
    self.player endon( "unsetBulletOutline" );

    while ( isdefined( self.player ) )
    {
        var_0 = gettime();

        foreach ( var_3, var_2 in self.enemies )
        {
            if ( !isdefined( var_2 ) )
            {
                bulletoutlineremoveenemy( undefined, var_3 );
                continue;
            }

            if ( var_2 scripts\mp\utility\perk::_hasperk( "specialty_noscopeoutline" ) )
            {
                bulletoutlineremoveenemy( var_2, var_3 );
                continue;
            }

            if ( var_0 >= self.enemyendtimes[var_3] )
                bulletoutlineremoveenemy( var_2, var_3 );
        }

        waitframe();
    }
}

watchbulletoutlinecleanup()
{
    self.player scripts\engine\utility::_id_143A5( "disconnect", "unsetBulletOutline" );

    foreach ( var_2, var_1 in self.enemies )
    {
        if ( isdefined( var_1 ) )
            bulletoutlineremoveenemy( var_1, var_2 );
    }
}

bulletoutlineaddenemy( var_0, var_1, var_2 )
{
    var_3 = var_0 getentitynumber();
    var_4 = gettime() + var_1 * 1000;
    self.enemies[var_3] = var_0;

    if ( !isdefined( self.enemyids[var_3] ) )
        self.enemyids[var_3] = scripts\mp\utility\outline::outlineenableforplayer( var_0, self.player, "outline_depth_red", "perk" );

    if ( !isdefined( self.enemyendtimes[var_3] ) || !isdefined( var_2 ) || var_2 )
        self.enemyendtimes[var_3] = var_4;
}

bulletoutlineremoveenemy( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = var_0 getentitynumber();

    self.enemies[var_1] = undefined;
    self.enemyendtimes[var_1] = undefined;

    if ( isdefined( var_0 ) )
        scripts\mp\utility\outline::outlinedisable( self.enemyids[var_1], var_0 );

    self.enemyids[var_1] = undefined;
}

bulletoutlinecheck( var_0, var_1, var_2, var_3 )
{
    if ( !( var_3 == "MOD_HEAD_SHOT" || var_3 == "MOD_RIFLE_BULLET" || var_3 == "MOD_PISTOL_BULLET" || var_3 == "MOD_EXPLOSIVE_BULLET" ) )
        return;

    if ( !isdefined( var_0 ) || !isdefined( var_1 ) )
        return;

    if ( !isplayer( var_0 ) || !isplayer( var_1 ) )
        return;

    var_4 = var_0;

    if ( isdefined( var_0.owner ) )
        var_4 = var_0.owner;

    var_5 = var_1;

    if ( isdefined( var_1.owner ) )
        var_5 = var_1.owner;

    if ( !istrue( scripts\cp_mp\utility\player_utility::playersareenemies( var_4, var_5 ) ) )
        return;

    if ( isplayer( var_0 ) && isplayer( var_1 ) && scripts\mp\utility\outline::outlineoccluded( var_0 geteye(), var_1 geteye() ) )
        return;

    if ( isdefined( var_0.bulletoutline ) && !var_1 scripts\mp\utility\perk::_hasperk( "specialty_noscopeoutline" ) )
        var_0.bulletoutline bulletoutlineaddenemy( var_1, 1 );

    if ( isdefined( var_1.bulletoutline ) && !var_0 scripts\mp\utility\perk::_hasperk( "specialty_noscopeoutline" ) )
        var_1.bulletoutline bulletoutlineaddenemy( var_0, 2.0, 0 );
}

markempsignatures( var_0, var_1 )
{
    if ( !isdefined( var_0.empmarked ) )
        var_0.empmarked = [];

    if ( isdefined( var_0.empmarked[var_1] ) && var_0.empmarked[var_1] == "active" )
        return;

    var_0.empmarked[var_1] = "active";
    thread empvfx( var_0, var_1 );
    var_0 scripts\engine\utility::_id_143A5( "death", "cloak_end" );
    var_0.empmarked[var_1] = undefined;
}

empvfx( var_0, var_1 )
{
    var_2 = [ "j_shoulder_ri", "j_shoulder_le", "j_hip_ri", "j_hip_le", "j_spine4", "j_wrist_ri", "j_wrist_le" ];
    var_0.empmarked[var_1] = undefined;
}

startgpsjammer()
{
    self endon( "remove_gpsjammer" );
    self endon( "death_or_disconnect" );

    if ( isai( self ) )
    {
        while ( isdefined( self.avoidkillstreakonspawntimer ) && self.avoidkillstreakonspawntimer > 0 )
            waitframe();
    }

    if ( level.minspeedsq == 0 )
        return;

    if ( level.timeperiod < 0.05 )
        return;

    self.timesincelastweaponfire = 0.0;
    thread ghostadvanceduavwatcher();

    if ( scripts\mp\utility\game::unset_relic_grounded() && getdvarint( "perk_ghost_only_while_moving", 1 ) )
        thread _id_11D12();
    else
    {
        self setplayerghost( 1 );
        self._id_122FE = 1;
    }

    self.timesincelastweaponfire = 0.0;

    for (;;)
    {
        self waittill( "weapon_fired", var_0 );

        if ( scripts\mp\class::vehicle_checkpiggybackexploit( var_0 ) )
            continue;

        doghostweaponfired();
    }
}

doghostweaponfired()
{
    self endon( "remove_gpsjammer" );
    self endon( "death_or_disconnect" );
    self setplayerghost( 0 );
    self.playbattlechattersound = 1;
    thread checkforghostweaponfire();

    while ( self.timesincelastweaponfire < 3.0 )
    {
        wait( level.timeperiod );
        self.timesincelastweaponfire = self.timesincelastweaponfire + level.timeperiod;
    }

    self notify( "ghost_restored" );
    self.timesincelastweaponfire = 0.0;

    if ( self._id_122FE )
        self setplayerghost( 1 );

    self.playbattlechattersound = undefined;
}

checkforghostweaponfire()
{
    self endon( "death_or_disconnect" );
    self endon( "remove_gpsjammer" );
    self endon( "ghost_restored" );

    for (;;)
    {
        self waittill( "weapon_fired" );
        self.timesincelastweaponfire = 0.0;
    }
}

ghostadvanceduavwatcher()
{
    self endon( "death_or_disconnect" );
    self endon( "remove_gpsjammer" );
    var_0 = scripts\mp\utility\game::getgametype() == "br";

    if ( var_0 )
    {
        self setplayeradvanceduavdot( 1 );
        return;
    }

    for (;;)
    {
        if ( level.teambased )
        {
            var_1 = sat_setup_interactions();

            if ( var_1 )
            {
                self setplayeradvanceduavdot( 1 );
                self setplayerghost( 0 );

                while ( var_1 )
                {
                    waitframe();
                    var_1 = sat_setup_interactions();
                }

                self setplayerghost( 1 );
                self setplayeradvanceduavdot( 0 );
            }
        }
        else
        {
            foreach ( var_3 in level.players )
            {
                if ( var_3 == self )
                    continue;

                if ( istrue( level.activeadvanceduavs[var_3.guid] ) && level.activeadvanceduavs[var_3.guid] > 0 )
                {
                    self setplayeradvanceduavdot( 1 );
                    self setplayerghost( 0 );

                    while ( istrue( level.activeadvanceduavs[var_3.guid] ) && level.activeadvanceduavs[var_3.guid] > 0 )
                        level waittill( "uav_update" );

                    self setplayerghost( 1 );
                    self setplayeradvanceduavdot( 0 );
                }
            }
        }

        waitframe();
    }
}

sat_setup_interactions()
{
    var_0 = 0;
    var_1 = undefined;

    if ( !isdefined( level.audio_heli_end_fade_out ) || !isdefined( level.activeadvanceduavs ) )
        return var_0;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "squadAsTeamEnabled" ) )
        var_1 = level [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "squadAsTeamEnabled" ) ]]();

    if ( istrue( var_1 ) && getdvarint( "scr_uav_for_squad_only", 1 ) )
    {
        var_2 = 0;

        foreach ( var_5, var_4 in level.squaddata[self.team] )
            var_2 = var_2 + level.activeadvanceduavs[self.team + var_5];

        var_0 = level.audio_heli_end_fade_out - var_2 > 0;
    }
    else
        var_0 = level.audio_heli_end_fade_out - level.activeadvanceduavs[self.team] > 0;

    return var_0;
}

_id_11D12()
{
    self endon( "remove_gpsjammer" );
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    var_0 = getdvarint( "perk_ghost_speed_threshold", 190 );
    self._id_122FE = 0;
    var_1 = 0;

    for (;;)
    {
        var_2 = self.super;
        var_3 = isdefined( var_2 ) && isdefined( var_2.staticdata.ref ) && isdefined( var_2.usepercent );

        if ( var_3 && var_2.staticdata.ref == "super_deadsilence" && var_2.usepercent > 0 || isdefined( self.vehicle ) )
        {
            if ( !self._id_122FE )
            {
                self._id_122FE = 1;
                var_1 = 0;
                self setplayerghost( 1 );
            }

            if ( var_1 && self._id_122FE )
            {
                self notify( "enable_ghost" );
                var_1 = 0;
            }

            waitframe();
            continue;
        }

        var_4 = self getvelocity();
        var_5 = abs( var_4[0] ) + abs( var_4[1] ) + abs( var_4[2] );

        if ( var_5 >= var_0 && !self._id_122FE && !self isjumping() && !istrue( self.playbattlechattersound ) )
        {
            self._id_122FE = 1;
            var_1 = 0;
            self setplayerghost( 1 );
        }
        else if ( var_5 >= var_0 && var_1 && self._id_122FE )
        {
            self notify( "enable_ghost" );
            var_1 = 0;
        }
        else if ( var_5 < var_0 && self._id_122FE && !var_1 )
        {
            thread _id_122FD();
            var_1 = 1;
        }

        waitframe();
    }
}

_id_122FD()
{
    self endon( "enable_ghost" );
    self endon( "remove_gpsjammer" );
    self endon( "disconnect" );
    wait( getdvarfloat( "perk_ghost_falloff_delay", 2.0 ) );

    if ( !isdefined( self ) )
        return;

    self._id_122FE = 0;
    self setplayerghost( 0 );
}

removegpsjammer()
{
    self notify( "remove_gpsjammer" );
    self setplayerghost( 0 );
    self._id_122FE = undefined;
    self setplayeradvanceduavdot( 0 );
}

setgroundpoundshield()
{
    level._effect["groundPoundShield_impact"] = loadfx( "vfx/iw7/_requests/mp/vfx_debug_warning.vfx" );
}

unsetgroundpoundshield()
{
    self notify( "groundPoundShield_unset" );
}

groundpoundshield_onimpact( var_0 )
{
    thread groundpoundshield_raiseondelay();
}

groundpoundshield_raiseondelay()
{
    self endon( "death_or_disconnect" );
    self endon( "groundPound_unset" );
    self endon( "groundPoundLand" );
    wait 0.25;
    groundpoundshield_raise();
}

groundpoundshield_raise()
{
    if ( isdefined( self.groundpoundshield ) )
        thread groundpoundshield_lower( self.groundpoundshield );

    var_0 = self.origin + anglestoforward( self.angles ) * 5;
    var_1 = self.angles + ( 0, 90, 0 );
    var_2 = spawn( "script_model", var_0 );
    var_2.angles = var_1;
    var_2 setmodel( "weapon_shinguard_col_wm" );
    var_3 = spawn( "script_model", var_0 );
    var_3.angles = var_1;
    var_3 setmodel( "weapon_shinguard_fr_wm" );
    var_3.outlineid = scripts\mp\utility\outline::outlineenableforall( var_3, "outline_nodepth_cyan", "equipment" );
    var_4 = spawn( "script_model", var_0 );
    var_4.angles = var_1;
    var_4 setmodel( "weapon_shinguard_en_wm" );
    var_4.outlineid = scripts\mp\utility\outline::outlineenableforall( var_4, "outline_nodepth_orange", "equipment" );
    var_2.visfr = var_3;
    var_2.visen = var_4;
    var_2.owner = self;
    var_2 setcandamage( 1 );
    var_2.health = 9999;
    var_2.shieldhealth = 210;
    self.groundpoundshield = var_2;
    var_5 = level.characters;

    foreach ( var_7 in var_5 )
    {
        if ( !isdefined( var_7 ) )
            continue;

        if ( level.teambased && var_7.team == self.team )
        {
            var_4 hidefromplayer( var_7 );
            continue;
        }

        var_3 hidefromplayer( var_7 );
    }

    thread groundpoundshield_monitorjoinedteam( var_2 );
    thread groundpoundshield_loweronleavearea( var_2 );
    thread groundpoundshield_lowerontime( var_2, 3.25 );
    thread groundpoundshield_loweronjump( var_2 );
    thread groundpoundshield_deleteondisconnect( var_2 );
    thread groundpoundshield_monitorhealth( var_2 );
    thread groundpound_raisefx();
    return var_2;
}

groundpoundshield_lower( var_0 )
{
    self notify( "groundPoundShield_end" );

    if ( !isdefined( var_0 ) )
        return;

    thread groundpoundshield_lowerfx();
    thread groundpoundshield_deleteshield( var_0 );
}

groundpoundshield_break( var_0 )
{
    self notify( "groundPoundShield_end" );

    if ( !isdefined( var_0 ) )
        return;

    thread groundpoundshield_breakfx();
    thread groundpoundshield_deleteshield( var_0 );
}

groundpoundshield_monitorhealth( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "groundPound_unset" );
    self endon( "groundPoundShield_end" );
    self endon( "groundPoundShield_deleteShield" );

    for (;;)
    {
        var_0 waittill( "damage", var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );

        if ( isdefined( var_2 ) )
        {
            if ( var_2 == self || var_2.team != self.team )
                var_0.shieldhealth = var_0.shieldhealth - var_1;
        }

        var_0.health = 9999;
        thread groundpoundshield_damagedfx( var_2, var_4, var_3 );

        if ( var_0.shieldhealth <= 0 )
        {
            thread groundpoundshield_break( var_0 );
            return;
        }
        else if ( var_0.shieldhealth <= 105.0 )
        {
            if ( var_0.visfr.model != "weapon_shinguard_dam_wm" )
            {
                var_0.visfr setmodel( "weapon_shinguard_dam_wm" );
                scripts\mp\utility\outline::outlinerefresh( var_0.visfr );
            }

            if ( var_0.visen.model != "weapon_shinguard_dam_wm" )
            {
                var_0.visen setmodel( "weapon_shinguard_dam_wm" );
                scripts\mp\utility\outline::outlinerefresh( var_0.visen );
            }
        }
    }
}

groundpoundshield_loweronjump( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "groundPound_unset" );
    self endon( "groundPoundShield_end" );
    self endon( "groundPoundShield_deleteShield" );
    var_1 = self isjumping();
    var_2 = undefined;

    for (;;)
    {
        var_2 = var_1;
        var_1 = self isjumping();

        if ( !var_2 && var_1 )
        {
            thread groundpoundshield_lower( var_0 );
            return;
        }

        waitframe();
    }
}

groundpoundshield_lowerontime( var_0, var_1 )
{
    self endon( "death_or_disconnect" );
    self endon( "groundPound_unset" );
    self endon( "groundPoundShield_end" );
    self endon( "groundPoundShield_deleteShield" );
    wait( var_1 );
    thread groundpoundshield_lower( var_0 );
}

groundpoundshield_loweronleavearea( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "groundPound_unset" );
    self endon( "groundPoundShield_end" );
    self endon( "groundPoundShield_deleteShield" );

    while ( isdefined( var_0 ) )
    {
        if ( lengthsquared( var_0.origin - self.origin ) > 11664 )
        {
            thread groundpoundshield_lower( var_0 );
            return;
        }

        waitframe();
    }
}

groundpoundshield_deleteondisconnect( var_0 )
{
    self endon( "groundPoundShield_deleteShield" );
    scripts\engine\utility::_id_143A5( "death_or_disconnect", "groundPound_unset" );
    thread groundpoundshield_deleteshield( var_0 );
}

groundpoundshield_monitorjoinedteam( var_0 )
{

}

groundpoundshield_deleteshield( var_0 )
{
    self notify( "groundPoundShield_deleteShield" );
    scripts\mp\utility\outline::outlinedisable( var_0.visen.outlineid, var_0.visen );
    scripts\mp\utility\outline::outlinedisable( var_0.visfr.outlineid, var_0.visfr );
    var_0.visfr delete();
    var_0.visen delete();
    var_0 delete();
}

groundpound_raisefx()
{
    self endon( "disconnect" );
    self endon( "groundPound_unset" );
    self endon( "groundPoundShield_end" );
    self endon( "groundPoundShield_deleteShield" );
}

groundpoundshield_lowerfx()
{
    self endon( "disconnect" );
    self endon( "groundPound_unset" );
    self endon( "groundPoundShield_end" );
    self endon( "groundPoundShield_deleteShield" );
}

groundpoundshield_damagedfx( var_0, var_1, var_2 )
{
    self endon( "disconnect" );
    self endon( "groundPound_unset" );
    self endon( "groundPoundShield_end" );
    self endon( "groundPoundShield_deleteShield" );
    playfx( scripts\engine\utility::getfx( "groundPoundShield_impact" ), var_1, -1 * var_2 );
    playsoundatpos( var_1, "ds_shield_impact" );
    var_0 scripts\mp\damagefeedback::updatedamagefeedback( "hitbulletstorm" );
}

groundpoundshield_breakfx()
{
    self endon( "disconnect" );
    self endon( "groundPound_unset" );
    self endon( "groundPoundShield_end" );
    self endon( "groundPoundShield_deleteShield" );
}

setgroundpoundshock()
{
    level._effect["groundPoundShock_impact_sm"] = loadfx( "vfx/iw7/_requests/mp/vfx_debug_warning.vfx" );
    level._effect["groundPoundShock_impact_lrg"] = loadfx( "vfx/iw7/_requests/mp/vfx_debug_warning.vfx" );
}

unsetgroundpoundshock()
{
    self notify( "groundPoundShock_unset" );
}

groundpoundshock_onimpact( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "groundPound_unset" );
    self endon( "groundPoundShock_unset" );
    var_1 = undefined;
    var_2 = undefined;

    switch ( var_0 )
    {
        case "groundPoundLandTier0":
            var_2 = scripts\engine\utility::getfx( "groundPoundShock_impact_sm" );
            var_1 = 144;
            break;
        case "groundPoundLandTier1":
            var_2 = scripts\engine\utility::getfx( "groundPoundShock_impact_sm" );
            var_1 = 180;
            break;
        case "groundPoundLandTier2":
            var_2 = scripts\engine\utility::getfx( "groundPoundShock_impact_lrg" );
            var_1 = 216;
            break;
    }

    thread groundpoundshock_onimpactfx( var_1, var_2 );
    var_3 = undefined;

    if ( level.teambased )
        var_3 = scripts\mp\utility\teams::getenemyplayers( self.team, 1 );
    else
        var_3 = level.characters;

    var_4 = var_1 * var_1;
    var_5 = scripts\engine\trace::create_contents( 0, 1, 0, 0, 1, 0, 0 );

    foreach ( var_7 in var_3 )
    {
        if ( lengthsquared( var_7 geteye() - self geteye() ) > var_4 )
            continue;

        var_8 = physics_raycast( self geteye(), var_7 geteye(), var_5, undefined, 0, "physicsquery_closest" );

        if ( isdefined( var_8 ) && var_8.size > 0 )
            continue;

        thread groundpoundshock_empplayer( var_7 );
    }
}

groundpoundshock_empplayer( var_0 )
{
    var_0 endon( "death_or_disconnect" );
    thread scripts\mp\gamescore::trackdebuffassistfortime( self, var_0, "groundpound_mp", 3 );
}

groundpoundshock_onimpactfx( var_0, var_1 )
{
    playfx( var_1, self.origin + ( 0, 0, 20 ), ( 0, 0, 1 ) );
}

setgroundpoundboost()
{

}

unsetgroundpoundboost()
{
    self notify( "groundPoundBoost_unset" );
}

groundpoundboost_onimpact( var_0 )
{
    scripts\common\utility::set_doublejumpenergy( self energy_getmax( 0 ) );
}

setbattleslideshield()
{
    level._effect["battleSlideShield_damage"] = loadfx( "vfx/iw7/_requests/mp/vfx_debug_warning.vfx" );
    thread battleslideshield_monitor();
}

unsetbattleslideshield()
{
    self notify( "battleSlideShield_unset" );
}

battleslideshield_monitor()
{
    self endon( "death_or_disconnect" );
    self endon( "battleSlide_unset" );
    self notify( "battleSlideShield_monitor" );
    self endon( "battleSlideShield_monitor" );

    for (;;)
    {
        self waittill( "sprint_slide_begin" );
        thread battleslideshield_raise();
    }
}

battleslideshield_monitorhealth( var_0 )
{
    self endon( "disconnect" );
    self endon( "battleSlide_unset" );

    while ( isdefined( var_0 ) )
    {
        var_0 waittill( "damage", var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );
        thread battleslideshield_damagedfx( var_0, var_2, var_4, var_3 );

        if ( var_0.health <= 0 )
        {
            thread battleslideshield_break( var_0 );
            var_0 delete();
            continue;
        }

        if ( var_0.health <= 125.0 )
        {
            if ( var_0.model != "weapon_shinguard_dam_wm" )
                var_0 setmodel( "weapon_shinguard_dam_wm" );

            continue;
        }

        if ( var_0.model != "weapon_shinguard_wm" )
            var_0 setmodel( "weapon_shinguard_wm" );
    }
}

battleslideshield_raise()
{
    if ( isdefined( self.battleslideshield ) )
        thread battleslideshield_lower( self.battleslideshield );

    var_0 = scripts\engine\utility::spawn_tag_origin();
    var_0 setmodel( "weapon_shinguard_wm" );
    var_0 setcandamage( 1 );
    var_0.health = 250;
    var_0 linkto( self, "tag_origin", ( 30, 0, 0 ), ( 0, 90, 0 ) );
    var_0 show();
    self.battleslideshield = var_0;
    thread battleslideshield_killonjumpfall( var_0 );
    thread battleslideshield_killonsprint( var_0 );
    thread battleslideshield_killontime( var_0 );
    thread battleslideshield_unlinkonstop( var_0 );
    thread battleslideshield_monitorhealth( var_0 );
    thread battleslideshield_killondeathdisconnectunset( var_0 );
    thread battleslideshield_raisefx( var_0 );
    return var_0;
}

battleslideshield_lower( var_0 )
{
    self notify( "battleSlideShield_end" );

    if ( !isdefined( var_0 ) )
        return;

    thread battleslideshield_lowerfx( var_0 );
    var_0 delete();
}

battleslideshield_killondeathdisconnectunset( var_0 )
{
    var_0 endon( "death" );
    scripts\engine\utility::_id_143A5( "death_or_disconnect", "battleSlide_unset" );
    var_0 delete();
}

battleslideshield_killonjumpfall( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "battleSlide_unset" );
    self endon( "battleSlideShield_unlink" );
    self endon( "battleSlideShield_end" );
    var_0 endon( "death" );

    for (;;)
    {
        if ( !self isonground() )
        {
            var_0 delete();
            self notify( "battleSlideShield_end" );
            return;
        }

        waitframe();
    }
}

battleslideshield_killonsprint( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "battleSlide_unset" );
    self endon( "battleSlideShield_unlink" );
    self endon( "battleSlideShield_end" );
    var_0 endon( "death" );
    self waittill( "sprint_begin" );
    var_0 delete();
    self notify( "battleSlideShield_end" );
}

battleslideshield_loweronleavearea( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "battleSlide_unset" );
    self endon( "battleSlideShield_end" );
    var_0 endon( "death" );

    for (;;)
    {
        if ( lengthsquared( var_0.origin - self.origin ) > 11664 )
        {
            thread battleslideshield_lower( var_0 );
            return;
        }

        waitframe();
    }
}

battleslideshield_lowerontime( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "battleSlide_unset" );
    self endon( "battleSlideShield_end" );
    var_0 endon( "death" );
    wait 3.5;
    thread battleslideshield_lower( var_0 );
}

battleslideshield_unlink( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    var_0 unlink();
    self notify( "battleSlideShield_unlink" );
    thread battleslideshield_lowerontime( var_0 );
    thread battleslideshield_loweronleavearea( var_0 );
    self notify( "battleSlideShield_unlink" );
}

battleslideshield_killontime( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "battleSlide_unset" );
    self endon( "battleSlideShield_unlink" );
    self endon( "battleSlideShield_end" );
    var_0 endon( "death" );
    self waittill( "sprint_slide_end" );
    wait 0.75;
    var_0 delete();
    self notify( "battleSlideShield_end" );
}

battleslideshield_unlinkonstop( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "battleSlide_unset" );
    self endon( "battleSlideShield_unlink" );
    self endon( "battleSlideShield_end" );
    var_0 endon( "death" );
    self waittill( "sprint_slide_end" );

    for (;;)
    {
        if ( lengthsquared( self getvelocity() ) < 100 )
        {
            thread battleslideshield_unlink( var_0 );
            return;
        }

        waitframe();
    }
}

battleslideshield_break( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    thread battleslideshield_breakfx( var_0 );
    self notify( "battleSlideShield_end" );
}

battleslideshield_raisefx( var_0 )
{
    self endon( "disconnect" );
    self endon( "battleSlide_unset" );
    var_0 endon( "death" );
}

battleslideshield_lowerfx( var_0 )
{
    self endon( "disconnect" );
    self endon( "battleSlide_unset" );
    var_0 endon( "death" );
}

battleslideshield_damagedfx( var_0, var_1, var_2, var_3 )
{
    self endon( "disconnect" );
    self endon( "battleSlide_unset" );
    var_0 endon( "death" );
    playfx( scripts\engine\utility::getfx( "battleSlideShield_damage" ), var_2, -1 * var_3 );
    playsoundatpos( var_2, "ds_shield_impact" );
    var_1 scripts\mp\damagefeedback::updatedamagefeedback( "hitbulletstorm" );
}

battleslideshield_breakfx( var_0 )
{

}

setbattleslideoffense()
{

}

unsetbattleslideoffense()
{

}

getbattleslideoffensedamage()
{
    return 100;
}

setthruster()
{
    level._effect["thrusterRadFr"] = loadfx( "vfx/iw7/core/mp/powers/thrust_blast/vfx_thrust_blast_radius_fr" );
    level._effect["thrusterRadEn"] = loadfx( "vfx/iw7/core/mp/powers/thrust_blast/vfx_thrust_blast_radius_en" );
    thrusterwatchdoublejump();
}

unsetthruster()
{
    if ( isdefined( self.thrustfxent ) )
        self.thrustfxent delete();

    self notify( "thruster_unset" );
}

thrusterwatchdoublejump()
{
    self endon( "death_or_disconnect" );
    self endon( "thruster_unset" );
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( "doubleJumpBoostBegin" );
        thread thrusterloop();
        thread thrusterdamageloop();
    }
}

thrusterloop()
{
    self endon( "death_or_disconnect" );
    self endon( "thruster_unset" );
    level endon( "game_ended" );
    self endon( "doubleJumpBoostEnd" );
    thread thrusterstopfx();

    if ( !isdefined( self.thrustfxent ) )
    {
        self.thrustfxent = spawn( "script_model", self.origin );
        self.thrustfxent setmodel( "tag_origin" );
    }
    else
        self.thrustfxent.origin = self.origin;

    waitframe();

    for (;;)
    {
        self playrumbleonentity( "damage_light" );
        earthquake( 0.1, 0.3, self.origin, 120 );
        var_0 = playerphysicstrace( self.origin + ( 0, 0, 10 ), self.origin - ( 0, 0, 600 ) ) + ( 0, 0, 1 );
        self.thrustfxent.origin = var_0;
        self.thrustfxent.angles = ( 90, 0, 0 );
        waitframe();
        wait 0.33;
    }
}

thrusterdamageloop()
{
    self endon( "death_or_disconnect" );
    self endon( "thruster_unset" );
    level endon( "game_ended" );
    self endon( "doubleJumpBoostEnd" );

    for (;;)
    {
        scripts\mp\utility\damage::radiusplayerdamage( self.origin, 12, 64, 5, 12, self, undefined, "MOD_IMPACT", "thruster_mp", 1 );
        wait 0.05;
    }
}

thrusterstopfx()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    scripts\engine\utility::_id_143A5( "doubleJumpBoostEnd", "thruster_unset" );
    waitframe();
}

runhover()
{
    self endon( "death_or_disconnect" );
    self endon( "removeArchetype" );
    level endon( "game_ended" );

    for (;;)
    {
        if ( self ishighjumping() && self playerads() > 0.3 && self energy_getenergy( 0 ) > 0 )
        {
            executehover();
            thread watchhoverend();
            self waittill( "hover_ended" );
            endhover();
        }

        wait 0.1;
    }
}

watchhoverend()
{
    self endon( "death_or_disconnect" );
    self endon( "removeArchetype" );
    level endon( "game_ended" );
    self endon( "walllock_ended" );

    while ( self playerads() > 0.3 )
        waitframe();

    self notify( "hover_ended" );
}

executehover()
{
    self endon( "death_or_disconnect" );
    self endon( "removeArchetype" );
    level endon( "game_ended" );
    self.ishovering = 1;
    self allowmovement( 0 );
    self allowjump( 0 );
    self playlocalsound( "ghost_wall_attach" );
    var_0 = scripts\engine\utility::spawn_tag_origin();
    self playerlinkto( var_0 );
    thread managetimeout( var_0 );
}

managetimeout( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "removeArchetype" );
    level endon( "game_ended" );
    var_1 = self energy_getrestorerate( 0 );
    self energy_setrestorerate( 0, 1.0 );
    wait 2;
    self notify( "hover_ended" );
    self energy_setrestorerate( 0, var_1 );
    self energy_setenergy( 0, 0 );
}

endhover()
{
    self endon( "death_or_disconnect" );
    self endon( "removeArchetype" );
    level endon( "game_ended" );
    self.ishovering = undefined;
    self allowmovement( 1 );
    self allowjump( 1 );
    self playlocalsound( "ghost_wall_detach" );
    self unlink();
}

setadsmarktarget()
{

}

perk_adsmarktarget_think()
{
    self endon( "death_or_disconnect" );
    self endon( "ADSTargetMarkUnset" );
    level endon( "game_ended" );

    for (;;)
    {
        if ( self playerads() > 0.5 )
        {
            foreach ( var_1 in level.players )
            {
                if ( var_1 scripts\mp\utility\perk::_hasperk( "specialty_noscopeoutline" ) )
                    continue;

                if ( var_1.team == self.team )
                    continue;

                if ( istrue( var_1.isperk_adsmarked ) )
                    continue;

                if ( istrue( var_1.ischeckingadsmarking ) )
                    continue;

                var_1.ischeckingadsmarking = 1;
                thread perk_adstargetmark_disconnectcleanupthink( var_1 );
                var_1 thread perk_adstargetmark_disconnectcleanupthink( var_1 );

                if ( perk_adsmarktarget_check( var_1 ) )
                {
                    thread perk_adsmarktarget_confirmtargetandmark( var_1 );
                    continue;
                }

                var_1.ischeckingadsmarking = 0;
            }
        }

        wait 0.2;
    }
}

perk_adsmarktarget_check( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "ADSTargetMarkUnset" );
    level endon( "game_ended" );
    var_1 = physics_createcontents( [ "physicscontents_solid", "physicscontents_glass", "physicscontents_water", "physicscontents_sky", "physicscontents_item", "physicscontents_vehicle" ] );
    var_2 = distance( var_0.origin, self.origin );
    var_3 = 0;

    if ( var_2 != 0 )
        var_3 = 1000 * ( 10 / var_2 );

    var_4 = var_0 geteye();

    if ( var_0.team != self.team && ( self worldpointinreticle_circle( var_0.origin + ( 0, 0, 24 ), 90, var_3 ) || self worldpointinreticle_circle( var_4, 90, var_3 ) ) )
    {
        var_5 = self geteye();
        var_6 = var_4;
        var_7 = physics_raycast( var_5, var_6, var_1, undefined, 0, "physicsquery_closest", 1 );

        if ( isdefined( var_7 ) && var_7.size == 0 )
            return 1;

        waitframe();
        var_6 = var_0.origin + ( 0, 0, 24 );
        var_8 = physics_raycast( var_5, var_6, var_1, undefined, 0, "physicsquery_closest", 1 );

        if ( isdefined( var_8 ) && var_8.size == 0 )
            return 1;
    }

    return 0;
}

perk_adsmarktarget_confirmtargetandmark( var_0 )
{
    var_0 endon( "death_or_disconnect" );
    level endon( "game_ended" );
    self endon( "ADSTargetMarkUnset" );
    var_1 = undefined;
    var_2 = getdvarfloat( "perk_ads_mark_target_hold_time_req" );

    if ( scripts\mp\utility\perk::_hasperk( "specialty_improved_target_mark" ) )
        var_2 = var_2 * getdvarfloat( "perk_faster_target_mark_rate" );

    wait( var_2 );

    if ( self playerads() > 0.5 && perk_adsmarktarget_check( var_0 ) )
    {
        var_3 = spawn( "script_model", var_0.origin );

        if ( scripts\cp_mp\utility\game_utility::isrealismenabled() )
        {
            var_4 = 0;
            var_5 = 5000;
            var_6 = 100;
        }
        else
        {
            var_4 = 1;
            var_5 = 5000;
            var_6 = 0;
        }

        var_7 = var_3 thread scripts\cp_mp\entityheadicons::setheadicon_singleimage( getlivingplayers_team( self.team ), "icon_navbar_enemy", 35, var_4, var_5, var_6, undefined, 1 );
        var_1 = scripts\mp\utility\outline::outlineenableforplayer( var_0, self, "outlinefill_nodepth_orange", "equipment" );
        var_0 scripts\mp\utility\outline::_hudoutlineviewmodelenable( "outline_nodepth_orange", 0 );
        var_0.isperk_adsmarked = 1;
        thread perk_trackadsmarktargetoutline( var_7, var_3, var_1, var_0 );
    }
    else
        var_0.ischeckingadsmarking = 0;
}

perk_trackadsmarktargetoutline( var_0, var_1, var_2, var_3 )
{
    level endon( "game_ended" );
    wait 0.6;
    scripts\mp\utility\outline::outlinedisable( var_2, var_3 );

    if ( isdefined( var_3 ) )
        var_3 scripts\mp\utility\outline::_hudoutlineviewmodeldisable();

    var_4 = getdvarfloat( "perk_ads_mark_target_highlight_time" );

    if ( scripts\mp\utility\perk::_hasperk( "specialty_improved_target_mark" ) )
        var_4 = var_4 * getdvarfloat( "perk_target_marked_longer_rate" );

    wait( var_4 - 0.6 );
    scripts\cp_mp\entityheadicons::setheadicon_deleteicon( var_0 );
    var_1 delete();

    if ( isdefined( var_3 ) )
    {
        var_3.isperk_adsmarked = 0;
        var_3.ischeckingadsmarking = 0;
    }

    self notify( "adsmark_ended" );
}

getlivingplayers_team( var_0 )
{
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( !isdefined( var_3.team ) )
            continue;

        if ( var_3 scripts\cp_mp\utility\player_utility::_isalive() && var_3.team == var_0 )
            var_1[var_1.size] = var_3;
    }

    return var_1;
}

perk_adstargetmark_disconnectcleanupthink( var_0 )
{
    scripts\engine\utility::_id_143A5( "ADSTargetMarkUnset", "death_or_disconnect" );

    if ( isdefined( var_0 ) )
        var_0.ischeckingadsmarking = 0;
}

unsetadsmarktarget()
{
    self notify( "ADSTargetMarkUnset" );
}

sethelmet()
{

}

unsethelmet()
{

}

setarmorvest()
{
    self.tookvesthit = 0;
}

unsetarmorvest()
{

}

setladder()
{

}

unsetladder()
{

}

setdoorbreach()
{
    scripts\mp\destructible::allowplayertobreach( self );
    scripts\mp\door::updatealldoorslockvisibilityforplayer( self, 1 );
}

unsetdoorbreach()
{
    scripts\mp\destructible::allowplayertobreach( self );
}

setdoorsense()
{
    if ( !isdefined( level.playerswithdoorsense ) )
        level.playerswithdoorsense = 1;
    else
        level.playerswithdoorsense = level.playerswithdoorsense + 1;
}

unsetdoorsense()
{
    level.playerswithdoorsense = level.playerswithdoorsense - 1;
}

setworsenedgunkick()
{
    updateweaponkick();
}

unsetworsenedgunkick()
{
    updateweaponkick( 1 );
}

updateweaponkick( var_0 )
{
    if ( !isdefined( self.weaponkickrecoil ) )
        self.weaponkickrecoil = 0;

    var_1 = -25;

    if ( scripts\mp\utility\perk::_hasperk( "specialty_worsenedgunkick" ) && !istrue( var_0 ) )
    {
        if ( isdefined( self.currentweapon ) )
        {
            switch ( self.currentweapon.classname )
            {
                case "rifle":
                    var_1 = -20;
                    break;
                case "mg":
                    var_1 = -20;
                    break;
            }
        }
    }
    else
        var_1 = 0;

    if ( var_1 != self.weaponkickrecoil )
    {
        scripts\mp\utility\weapon::setrecoilscale( -1 * self.weaponkickrecoil );
        scripts\mp\utility\weapon::setrecoilscale( var_1 );
        self.weaponkickrecoil = var_1;
    }
}

setkillstreaktoscorestreak()
{
    var_0 = undefined;

    if ( isdefined( self.pers["killstreakToScorestreak_lifeId"] ) && self.pers["killstreakToScorestreak_lifeId"] == self.lifeid )
    {
        var_0 = self.pers["killstreakToScorestreak"];
        self.pers["killstreakToScorestreak"] = undefined;
        self.pers["killstreakToScorestreak_lifeId"] = undefined;
    }
    else
        var_0 = vote_player_reset( self.streakpoints );

    scripts\mp\killstreaks\killstreaks::updatestreakcosts();
    scripts\mp\killstreaks\killstreaks::setstreakpoints( var_0 );
    scripts\mp\killstreaks\killstreaks::checkstreakreward( self.streakpoints, 1 );
    scripts\mp\killstreaks\killstreaks::updatestreakmeterui();
}

unsetkillstreaktoscorestreak()
{
    self.pers["killstreakToScorestreak"] = self.streakpoints;
    self.pers["killstreakToScorestreak_lifeId"] = self.lifeid;
    var_0 = vote_player_set( self.streakpoints );
    scripts\mp\killstreaks\killstreaks::updatestreakcosts();
    scripts\mp\killstreaks\killstreaks::setstreakpoints( var_0 );
    scripts\mp\killstreaks\killstreaks::checkstreakreward( self.streakpoints, 1 );
    scripts\mp\killstreaks\killstreaks::updatestreakmeterui();
}

vote_player_reset( var_0 )
{
    return var_0 * 125;
}

vote_player_set( var_0 )
{
    return int( var_0 / 125 );
}

_id_13137()
{
    if ( self.streakpoints <= 0 )
        self.pers["canKillChain"] = 1;
}

_id_13F64()
{
    if ( !istrue( level.gameended ) )
        self.pers["canKillChain"] = undefined;
}

setscrapweapons()
{
    if ( getdvarint( "perk_graverobber_enabled" ) == 1 )
        self setclientomnvar( "ui_graverobber", 1 );
}

unsetscrapweapons()
{
    self setclientomnvar( "ui_graverobber", 0 );
}

setdooralarm()
{
    self.alarmeddoors = [];
    scripts\mp\door::updatealldoorsalarmvisibilityforplayer( self, 1 );
}

unsetdooralarm()
{
    foreach ( var_1 in self.alarmeddoors )
        var_1 scripts\mp\door::removealarmdoor( 0 );

    self.alarmeddoors = undefined;
    scripts\mp\door::updatealldoorsalarmvisibilityforplayer( self, 0 );
}

setreviveuseweapon()
{
    thread proximityrevivethink();
}

proximityrevivethink()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "unset_revive_use_weapon" );

    if ( !isdefined( self.proximityrevivefauxtrigger ) )
    {
        var_0 = spawnstruct();
        var_0.usetime = getdvarfloat( "perk_medicReviveSpeedRatio" ) * scripts\mp\utility\dvars::getwatcheddvar( "lastStandReviveTimer" );
        var_0.curprogress = 0;
        var_0.owner = undefined;
        var_0.id = "laststand_reviver";
        var_0.trigger = spawnstruct();
        var_0.trigger.id = "laststand_reviver";
        self.proximityrevivefauxtrigger = var_0;
    }

    var_0 = self.proximityrevivefauxtrigger;

    if ( !isdefined( self.hiddenreviveents ) )
        self.hiddenreviveents = [];

    self.canrevivewithweapon = 1;

    if ( isdefined( level.revivetriggers ) )
    {
        foreach ( var_3, var_2 in level.revivetriggers )
        {
            if ( !isdefined( self.hiddenreviveents[var_3] ) )
            {
                var_2.trigger disableplayeruse( self );
                self.hiddenreviveents[var_3] = var_2.trigger;
            }
        }
    }

    foreach ( var_3, var_2 in level.laststandreviveents )
    {
        if ( !isdefined( self.hiddenreviveents[var_3] ) )
        {
            var_2 disableplayeruse( self );
            self.hiddenreviveents[var_3] = var_2;
        }
    }

    for (;;)
    {
        var_5 = scripts\mp\utility\player::getplayersinradius( self.origin, 150, self.team, self );

        foreach ( var_7 in var_5 )
        {
            if ( istrue( var_7.inlaststand ) && !istrue( var_7.stuckinlaststand ) && !istrue( var_7.laststandhealisactive ) && !istrue( var_7 scripts\mp\utility\player::registerpuzzleinteractions() ) && !isdefined( var_0.owner ) )
                thread proximityrevive( var_7, var_0 );
        }

        if ( isdefined( level.revivetriggers ) )
        {
            foreach ( var_10 in level.revivetriggers )
            {
                if ( var_10.ownerteam == self.team )
                {
                    if ( !istrue( var_10.trigger.owner scripts\mp\utility\player::registerpuzzleinteractions() ) && !isdefined( var_0.owner ) )
                    {
                        if ( distancesquared( var_10.trigger.origin, self.origin ) <= 22500 )
                            thread proximityrevive( var_10.trigger.owner, var_0, var_10 );
                    }
                }
            }
        }

        wait 0.1;
    }
}

proximityrevive( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "unset_revive_use_weapon" );
    var_0 endon( "death_or_disconnect" );
    var_0 endon( "last_stand_finished" );
    var_0 scripts\mp\utility\player::_id_1312B( 1 );
    var_1.owner = var_0;
    var_1.trigger.owner = var_0;
    thread watchproximityrevivefail( var_0, var_1, var_2 );

    if ( isdefined( var_2 ) )
    {
        var_2.trigger hide();
        var_2.trigger makeunusable();
        var_2 scripts\mp\teamrevive::revivetriggerholdonusebegin( self, 1 );
    }
    else if ( isdefined( var_0.laststandreviveent ) )
    {
        var_0.laststandreviveent hide();
        var_0.laststandreviveent makeunusable();
    }

    var_0 notify( "handle_revive_message" );
    var_0 scripts\mp\utility\player::_freezecontrols( 1, undefined, "proximityRevive" );

    while ( var_1.curprogress < var_1.usetime )
    {
        if ( distancesquared( self.origin, var_0.origin ) > 90000 )
        {
            self notify( "prox_revive_fail" );
            return;
        }

        scripts\mp\gameobjects::updateuiprogress( var_1, 1 );
        var_1.curprogress = var_1.curprogress + level.framedurationseconds;
        waitframe();
    }

    scripts\mp\gameobjects::updateuiprogress( var_1, 0 );
    var_0 scripts\mp\gameobjects::updateuiprogress( var_1, 0 );
    var_0 scripts\mp\utility\player::_freezecontrols( 0, undefined, "proximityRevive" );
    var_1.curprogress = 0;
    var_1.owner = undefined;
    var_1.trigger.owner = undefined;

    if ( istrue( var_0.inlaststand ) )
        var_0 notify( "last_stand_revived" );
    else
    {
        var_2 scripts\mp\teamrevive::revivetriggerholdonuseend( self.team, self, 1, 1 );
        var_2 scripts\mp\teamrevive::revivetriggerholdonuse( self );
    }
}

watchproximityrevivefail( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_0 endon( "last_stand_revived" );
    var_0 endon( "spawned_player" );
    var_3 = var_0.team;
    scripts\engine\utility::waittill_any_ents_return( self, "death_or_disconnect", self, "unset_revive_use_weapon", self, "prox_revive_fail", var_0, "death_or_disconnect", var_0, "last_stand_finished" );

    if ( isdefined( var_2 ) )
    {
        var_2.trigger show();
        var_2.trigger makeusable();
        var_2 scripts\mp\teamrevive::revivetriggerholdonuseend( var_3, self, 0, 1 );
    }

    if ( isdefined( var_0 ) )
    {
        var_0 scripts\mp\utility\player::_id_1312B( 0 );
        var_0 scripts\mp\gameobjects::updateuiprogress( var_1, 0 );
        var_0 scripts\mp\utility\player::_freezecontrols( 0, undefined, "proximityRevive" );

        if ( isdefined( var_0.laststandreviveent ) )
        {
            var_0.laststandreviveent show();
            var_0.laststandreviveent makeusable();
        }

        var_0 notify( "handle_revive_message" );
    }

    if ( isdefined( self ) )
    {
        var_1.owner = undefined;
        var_1.trigger.owner = undefined;
        var_1.curprogress = 0;
        scripts\mp\gameobjects::updateuiprogress( var_1, 0 );
    }
}

unsetreviveuseweapon()
{
    self notify( "unset_revive_use_weapon" );
    self.canrevivewithweapon = undefined;

    foreach ( var_2, var_1 in self.hiddenreviveents )
    {
        if ( isdefined( var_1 ) && var_1.owner != self )
        {
            var_1 showtoplayer( self );
            var_1 enableplayeruse( self );
        }
    }
}

setlocationmarking()
{

}

unsetlocationmarking()
{

}

setremotedefuse()
{

}

unsetremotedefuse()
{

}

setalwaysminimap()
{
    scripts\mp\utility\player::showminimap();
}

unsetalwaysminimap()
{
    scripts\mp\utility\player::hideminimap();
}

supersprintkillrefresh_init()
{
    level._effect["super_sprint_refresh"] = loadfx( "vfx/iw8_mp/perk/vfx_hustle.vfx" );
    level._effect["super_sprint_refresh_night"] = loadfx( "vfx/iw8_mp/perk/vfx_hustle_night.vfx" );
}

supersprintkillrefresh_onkill()
{
    self refreshsprinttime();
}

setgasgrenaderesist()
{
    if ( scripts\cp_mp\utility\player_utility::_isalive() )
        return;

    scripts\mp\equipment\gas_grenade::gas_updateplayereffects();
}

unsetgasgrenaderesist()
{
    if ( scripts\cp_mp\utility\player_utility::_isalive() )
        return;

    scripts\mp\equipment\gas_grenade::gas_updateplayereffects();
}

setfastreloadlaunchers()
{

}

unsetfastreloadlaunchers()
{
    if ( istrue( self.fastreloadlaunchers ) )
    {
        scripts\mp\utility\perk::removeperk( "specialty_fastreload" );
        self.fastreloadlaunchers = undefined;
    }
}

setreduceregendelay()
{
    self.regendelayspeed = 2;
}

unsetreduceregendelay()
{
    self.regendelayspeed = 1;
}

regendelayreduce_onkill()
{
    var_0 = scripts\cp_mp\utility\game_utility::isnightmap();
    var_1 = self isnightvisionon();
    var_2 = var_0 && !var_1;
    var_3 = scripts\engine\utility::ter_op( var_2, scripts\engine\utility::getfx( "super_sprint_refresh_night" ), scripts\engine\utility::getfx( "super_sprint_refresh" ) );
    playfxontagforclients( var_3, self, "tag_eye", self );
    thread _id_12ACF();
}

_id_12ACF()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self notify( "regenDelayReduce_delayedRegen" );
    self endon( "regenDelayReduce_delayedRegen" );
    var_0 = gettime();

    while ( var_0 + 140 > gettime() )
    {
        scripts\mp\healthoverlay::reducehealthregendelay( 10000 );
        waitframe();
    }
}

_id_131B8()
{
    if ( isdefined( self.waittoopenaltbunker ) && self.waittoopenaltbunker == gettime() )
        regendelayreduce_onkill();
}

_id_13F6C()
{

}

_id_12AD0()
{
    var_0 = scripts\cp_mp\utility\game_utility::isnightmap();
    var_1 = self isnightvisionon();
    var_2 = var_0 && !var_1;
    var_3 = scripts\engine\utility::ter_op( var_2, scripts\engine\utility::getfx( "super_sprint_refresh_night" ), scripts\engine\utility::getfx( "super_sprint_refresh" ) );
    playfxontagforclients( var_3, self, "tag_eye", self );
    thread _id_12ACF();
}

_id_131BA()
{
    if ( isdefined( self.tracking_max_health ) && istrue( self.tracking_max_health ) )
        _id_12AD0();
}

setreduceregendelayonobjective()
{
    updatereduceregendelayonobjective();
    thread monitorreduceregendelayonobjective();
}

unsetreduceregendelayonobjective()
{
    self notify( "unsetReduceRegenDelayOnObjective" );
    updatereduceregendelayonobjective( 1 );
}

monitorreduceregendelayonobjective()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "unsetReduceRegenDelayOnObjective" );

    for (;;)
    {
        wait 0.5;
        updatereduceregendelayonobjective();
    }
}

updatereduceregendelayonobjective( var_0 )
{
    var_1 = isdefined( self.carryobject );
    var_2 = isdefined( self.touchinggameobjects ) && self.touchinggameobjects.size > 0;
    var_3 = isdefined( self.usinggameobjects ) && self.usinggameobjects.size > 0;
    var_4 = var_1 || var_2 || var_3;

    if ( var_4 && !istrue( var_0 ) )
    {
        if ( !istrue( self.isonobjective ) )
        {
            self.isonobjective = 1;
            scripts\mp\utility\perk::giveperk( "specialty_regen_delay_reduced" );
        }
    }
    else if ( istrue( self.isonobjective ) )
    {
        self.isonobjective = 0;
        scripts\mp\utility\perk::removeperk( "specialty_regen_delay_reduced" );
    }
}

setrechargeequipment()
{
    if ( !isdefined( level.perkrechargeequipmentplayers ) )
        return;

    self notify( "setRechargeEquipment" );
    level.perkrechargeequipmentplayers = scripts\engine\utility::array_add( level.perkrechargeequipmentplayers, self );
}

unsetrechargeequipment()
{
    if ( !isdefined( level.perkrechargeequipmentplayers ) )
        return;

    level.perkrechargeequipmentplayers = scripts\engine\utility::array_remove( level.perkrechargeequipmentplayers, self );
    thread rechargeequipment_clearplayer( self );
}

rechargeequipmentthink_init()
{
    level.perkrechargeequipmentplayers = [];
    var_0 = int( ceil( 0.5 / level.framedurationseconds ) );

    for (;;)
    {
        var_1 = level.perkrechargeequipmentplayers;
        var_2 = int( ceil( var_1.size / var_0 ) );

        for ( var_3 = 0; var_3 < var_0; var_3++ )
        {
            for ( var_4 = 0; var_4 < var_2; var_4++ )
            {
                var_5 = var_3 * var_2 + var_4;

                if ( var_5 > var_1.size )
                    break;

                var_6 = var_1[var_5];

                if ( !isdefined( var_6 ) )
                    continue;

                if ( !var_6 scripts\cp_mp\utility\player_utility::_isalive() || istrue( var_6.inlaststand ) || istrue( self.stuckinlaststand ) )
                    continue;

                rechargeequipment_updatestate( var_6 );
            }

            waitframe();
        }
    }
}

rechargeequipment_updatestate( var_0 )
{
    if ( !isdefined( var_0.rechargeequipmentstate ) )
    {
        var_0.rechargeequipmentstate = spawnstruct();
        var_0.rechargeequipmentstate.progress = [];
        var_0.rechargeequipmentstate.recharged = [];
    }

    rechargeequipment_updateslot( var_0, "primary" );
    rechargeequipment_updateslot( var_0, "secondary" );
    rechargeequipment_updateui( var_0 );
}

rechargeequipment_updateslot( var_0, var_1 )
{
    var_2 = var_0.rechargeequipmentstate;

    if ( !isdefined( var_2.progress[var_1] ) )
        var_2.progress[var_1] = 0;

    var_2.recharged[var_1] = undefined;
    var_3 = var_0 scripts\mp\equipment::getcurrentequipment( var_1 );

    if ( !isdefined( var_3 ) )
        return;

    var_4 = relic_squadlink_remove_visionset( var_3 );
    var_5 = var_0 scripts\mp\equipment::getequipmentammo( var_3 );
    var_6 = var_0 scripts\mp\equipment::getequipmentmaxammo( var_3 );
    var_7 = var_0 scripts\mp\equipment::getequipmentstartammo( var_3 );

    if ( isdefined( level.playerzombiewaittillinputreturn ) )
        var_8 = level.playerzombiewaittillinputreturn;
    else if ( var_4 == "alt" )
        var_8 = scripts\engine\utility::ter_op( scripts\mp\utility\game::getgametype() == "br", 0.00833333, 0.02 );
    else
        var_8 = scripts\engine\utility::ter_op( scripts\mp\utility\game::getgametype() == "br", 0.0166667, 0.02 );

    if ( var_1 == "secondary" && var_5 < var_6 && var_7 > 1 )
        var_2.progress[var_1] = var_2.progress[var_1] + var_8 * 2;
    else if ( var_5 < var_6 )
        var_2.progress[var_1] = var_2.progress[var_1] + var_8;
    else
        var_2.progress[var_1] = 0;

    if ( var_2.progress[var_1] >= 1 )
    {
        var_0 scripts\mp\equipment::incrementequipmentslotammo( var_1, 1 );
        var_2.progress[var_1] = 0;
        var_2.recharged[var_1] = 1;
    }
}

relic_squadlink_remove_visionset( var_0 )
{
    var_1 = undefined;

    switch ( var_0 )
    {
        case "equip_adrenaline":
            var_1 = "alt";
            break;
        default:
            var_1 = "normal";
            break;
    }

    return var_1;
}

rechargeequipment_clearplayer( var_0 )
{
    var_0 endon( "setRechargeEquipment" );
    var_0 endon( "disconnect" );
    var_0.rechargeequipmentstate = undefined;
    waitframe();
    rechargeequipment_updateui( var_0 );
}

rechargeequipment_updateui( var_0 )
{
    var_1 = 0;
    var_2 = 0;
    var_3 = -1;

    if ( isdefined( var_0 ) && isdefined( var_0.rechargeequipmentstate ) )
    {
        var_0 scripts\mp\utility\stats::initpersstat( "restockCount" );
        var_4 = var_0.rechargeequipmentstate;

        if ( isdefined( var_4.progress["primary"] ) )
            var_1 = var_4.progress["primary"];

        if ( isdefined( var_4.progress["secondary"] ) )
            var_2 = var_4.progress["secondary"];

        foreach ( var_7, var_6 in var_4.recharged )
        {
            if ( var_7 == "primary" )
            {
                var_3 = var_3 + 1;
                var_0 playlocalsound( "ui_restock_lethals" );
                var_0 scripts\mp\utility\stats::incpersstat( "restockCount", 1 );
            }

            if ( var_7 == "secondary" )
            {
                var_3 = var_3 + 2;
                var_0 playlocalsound( "ui_restock_tactical" );
                var_0 scripts\mp\utility\stats::incpersstat( "restockCount", 1 );
            }
        }
    }

    var_0 setclientomnvar( "ui_lethal_recharge_progress", var_1 );
    var_0 setclientomnvar( "ui_tactical_recharge_progress", var_2 );
    var_0 setclientomnvar( "ui_recharge_notify", var_3 );
    var_0 clearladderstate( "primary", var_1 );
    var_0 clearladderstate( "secondary", var_2 );
}

markequipment_monitorlook()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "mark_equip_ended" );
    scripts\mp\flags::gameflagwait( "prematch_done" );

    if ( !isdefined( self.markequipmentstate ) )
    {
        self.markequipmentstate = spawnstruct();
        self.markequipmentstate.markingtime = 0;
        self.markequipmentstate.markingent = undefined;
        self.markequipmentstate.markedents = [];
        self.markequipmentstate.markedentindex = 0;
        self.markequipmentstate.pastmarkedents = [];
        self.markequipmentstate.pastmarkedentindex = 0;
    }

    for (;;)
    {
        self waittill( "marks_target_changed", var_0 );
        var_1 = isdefined( var_0 ) && !isdefined( self.markequipmentstate.markingent );
        self.markequipmentstate.markingent = var_0;
        self.markequipmentstate.markingtime = 0;

        if ( var_1 )
            thread markequipment_updatestate();
    }
}

markequipment_updatestate()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "mark_equip_ended" );
    var_0 = gettime();
    var_1 = 0;

    if ( self entityhasmark( "air_killstreak", self.markequipmentstate.markingent ) )
        var_1 = getdvarint( "perk_see_air_killstreak_distance" );
    else if ( self entityhasmark( "killstreak", self.markequipmentstate.markingent ) )
        var_1 = getdvarint( "perk_see_killstreak_distance" );
    else if ( self entityhasmark( "equipment", self.markequipmentstate.markingent ) )
        var_1 = getdvarint( "perk_see_equipment_distance" );
    else
    {

    }

    var_2 = var_1 * var_1;

    while ( isdefined( self.markequipmentstate.markingent ) && !istrue( self.ishacking ) )
    {
        if ( self entitymarkfilteredin( self.markequipmentstate.markingent ) )
            break;

        if ( isdefined( self.vehicle ) && self.vehicle == self.markequipmentstate.markingent )
            break;

        if ( scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_occupantisvehicledriver( self ) )
            break;

        if ( distancesquared( self.origin, self.markequipmentstate.markingent.origin ) > var_2 )
            break;

        var_3 = gettime();
        var_4 = var_3 - var_0;
        self.markequipmentstate.markingtime = self.markequipmentstate.markingtime + var_4;

        if ( !scripts\engine\utility::array_contains( self.markequipmentstate.markedents, self.markequipmentstate.markingent ) )
        {
            if ( scripts\mp\utility\player::isplayerads() )
            {
                var_5 = self.markequipmentstate.markedentindex;
                var_6 = self.markequipmentstate.markedents[var_5];

                if ( isdefined( var_6 ) )
                {
                    var_6 filterinplayermarks( undefined );
                    outlinehelper_updateentityoutline( var_6 );
                }

                if ( level.teambased )
                    self.markequipmentstate.markingent filterinplayermarks( self.team );
                else
                    self.markequipmentstate.markingent filterinplayermarks( self );

                outlinehelper_updateentityoutline( self.markequipmentstate.markingent );
                self playlocalsound( "iw8_mp_perk_tactical_recon_marked" );

                if ( level.teambased && _calloutmarkerping_predicted_timeout::_id_14126( self.markequipmentstate.markingent ) )
                {
                    self.markequipmentstate.markingent._id_13AB2 = self.team;
                    var_7 = scripts\mp\utility\player::getteamarray( self.markequipmentstate.markingent._id_13AB2 );

                    foreach ( var_9 in var_7 )
                        _calloutmarkerping_predicted_timeout::_id_14132( self.markequipmentstate.markingent, var_9 );
                }

                self.markequipmentstate.markedents[var_5] = self.markequipmentstate.markingent;
                self.markequipmentstate.markedentindex = ( var_5 + 1 ) % 999;

                if ( !scripts\engine\utility::array_contains( self.markequipmentstate.pastmarkedents, self.markequipmentstate.markingent ) )
                {
                    scripts\mp\killstreaks\killstreaks::givescoreformarktarget( 1 );
                    self.markequipmentstate.pastmarkedents[self.markequipmentstate.pastmarkedentindex] = self.markequipmentstate.markingent;
                    self.markequipmentstate.pastmarkedentindex++;
                }
                else
                    scripts\mp\killstreaks\killstreaks::givescoreformarktarget( 0 );

                thread unmarkafterduration( self.markequipmentstate.markingent );
                break;
            }
        }

        var_0 = var_3;
        waitframe();
    }

    if ( !istrue( self.ishacking ) )
    {
        self setclientomnvar( "ui_securing", 0 );
        self setclientomnvar( "ui_securing_progress", 0 );
    }

    self.markequipmentstate.markingent = undefined;
    self.markequipmentstate.markingtime = 0;
}

unmarkafterduration( var_0 )
{
    level endon( "game_ended" );
    self endon( "mark_equip_ended" );
    self endon( "unmarkEnt_" + self getentitynumber() );
    var_0 endon( "death" );
    var_1 = getdvarint( "perk_mark_equipment_duration" );
    scripts\engine\utility::_id_143BF( var_1, "disconnect" );
    unmarkent( var_0 );
}

unmarkent( var_0 )
{
    var_0 filterinplayermarks( undefined );

    if ( isdefined( var_0._id_13AB2 ) )
    {
        if ( level.teambased && _calloutmarkerping_predicted_timeout::_id_14126( var_0 ) )
        {
            var_1 = scripts\mp\utility\player::getteamarray( var_0._id_13AB2 );

            foreach ( var_3 in var_1 )
                _calloutmarkerping_predicted_timeout::_id_14132( var_0, var_3 );
        }

        var_0._id_13AB2 = undefined;
    }

    if ( isdefined( self ) )
    {
        self.markequipmentstate.markedents = scripts\engine\utility::array_remove( self.markequipmentstate.markedents, var_0 );
        var_0 notify( "unmarkEnt_" + self getentitynumber() );
    }
}

setmarkequipment()
{
    if ( !level.teambased )
        return;

    self enabletargetmarks();
    thread markequipment_monitorlook();
}

unsetmarkequipment()
{
    if ( !level.teambased )
        return;

    if ( isdefined( self.markequipmentstate ) )
    {
        foreach ( var_1 in self.markequipmentstate.markedents )
        {
            if ( isdefined( var_1 ) )
                unmarkent( var_1 );
        }
    }

    self.markequipmentstate = undefined;
    self disabletargetmarks();
    self notify( "mark_equip_ended" );
}

getchildoutlineents( var_0 )
{
    if ( !isdefined( var_0 ) )
        return [];

    if ( !isdefined( var_0.childoutlineents ) )
        return [ var_0 ];

    return var_0.childoutlineents;
}

outlinehelper_getallplayers( var_0, var_1 )
{
    return level.players;
}

outlinehelper_validplayer( var_0 )
{
    return 1;
}

outlinehelper_verifydata( var_0 )
{
    if ( !isdefined( var_0.getplayers ) )
        var_0.getplayers = ::outlinehelper_getallplayers;

    if ( !isdefined( var_0.validplayer ) )
        var_0.validplayer = ::outlinehelper_validplayer;

    if ( !isdefined( var_0.hudoutlineassetname ) )
        var_0.hudoutlineassetname = "spotter_notarget";

    if ( !isdefined( var_0.prioritygroup ) )
        var_0.prioritygroup = "perk";

    if ( !isdefined( var_0.waittime ) )
        var_0.waittime = 0.1;
}

outlinehelper_updateentityoutline( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        var_1 = var_0 getentitynumber();
        outlinehelper_disableentityoutline( var_1 );
        outlinehelper_enableentityoutline( var_0 );
    }
}

outlinehelper_enableentityoutline( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    var_1 = var_0 getentitynumber();
    var_2 = self.entityoutlines[var_1];

    if ( isdefined( var_2 ) )
        return;

    var_3 = undefined;

    if ( self entitymarkfilteredin( var_0 ) )
    {
        var_3 = spawnstruct();
        var_3.prioritygroup = "perk_superior";
        var_3.hudoutlineassetname = "spotter_target";
        outlinehelper_verifydata( var_3 );
    }

    var_4 = self entitymarkfilteredin( var_0 );

    if ( self entityhasmark( "air_killstreak", var_0 ) )
    {
        if ( !isdefined( var_0.model ) )
            return;

        var_3 = spawnstruct();

        if ( var_4 )
        {
            var_3.prioritygroup = "perk_superior";
            var_3.hudoutlineassetname = "spotter_target_killstreak_air";
        }
        else
        {
            var_3.prioritygroup = "perk";
            var_3.hudoutlineassetname = "spotter_notarget_killstreak_air";
        }

        outlinehelper_verifydata( var_3 );
    }
    else if ( self entityhasmark( "killstreak", var_0 ) )
    {
        if ( !isdefined( var_0.model ) )
            return;

        var_3 = spawnstruct();

        if ( var_4 )
        {
            var_3.prioritygroup = "perk_superior";
            var_3.hudoutlineassetname = "spotter_target_killstreak";
        }
        else
        {
            var_3.prioritygroup = "perk";
            var_3.hudoutlineassetname = "spotter_notarget_killstreak";
        }

        outlinehelper_verifydata( var_3 );
    }
    else if ( self entityhasmark( "equipment", var_0 ) )
    {
        var_3 = spawnstruct();

        if ( var_4 )
        {
            var_3.prioritygroup = "perk_superior";
            var_3.hudoutlineassetname = "spotter_target_equipment";
        }
        else
        {
            var_3.prioritygroup = "perk";
            var_3.hudoutlineassetname = "spotter_notarget_equipment";
        }

        outlinehelper_verifydata( var_3 );
    }

    if ( isdefined( var_3 ) )
    {
        var_2 = spawnstruct();
        self.entityoutlines[var_1] = var_2;
        var_2.list = [];
        var_2.ent = var_0;
        var_5 = getchildoutlineents( var_0 );

        foreach ( var_7 in var_5 )
        {
            var_8 = scripts\mp\utility\outline::outlineenableforplayer( var_7, self, var_3.hudoutlineassetname, var_3.prioritygroup );
            var_9 = spawnstruct();
            var_9.ent = var_7;
            var_9.id = var_8;
            var_10 = var_7 getentitynumber();
            var_2.list[var_10] = var_9;
        }
    }
}

outlinehelper_disableentityoutline( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        var_1 = self.entityoutlines[var_0];

        if ( isdefined( var_1 ) )
        {
            foreach ( var_3 in var_1.list )
                scripts\mp\utility\outline::outlinedisable( var_3.id, var_3.ent );

            self.entityoutlines[var_0] = undefined;
        }
    }
}

_id_11B0B( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in var_0 )
    {
        if ( !isdefined( var_4 ) )
            continue;

        var_5 = var_4 getentitynumber();

        if ( !scripts\engine\utility::array_contains( var_1, var_5 ) )
            var_2[var_2.size] = var_4;
    }

    return var_2;
}

markedentities_think()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    self.entityoutlines = [];

    for (;;)
    {
        self waittill( "marks_changed", var_0, var_1, var_2 );

        if ( isdefined( var_0 ) )
        {
            foreach ( var_4 in var_0 )
                outlinehelper_disableentityoutline( var_4 );

            if ( isdefined( self.markequipmentstate ) )
            {
                self.markequipmentstate.markedents = _id_11B0B( self.markequipmentstate.markedents, var_0 );

                if ( self.markequipmentstate.markedentindex > self.markequipmentstate.markedents.size )
                    self.markequipmentstate.markedentindex = self.markequipmentstate.markedents.size;
            }
        }

        if ( isdefined( var_1 ) )
        {
            foreach ( var_7 in var_1 )
                outlinehelper_disableentityoutline( var_7 );
        }

        if ( isdefined( var_2 ) )
        {
            foreach ( var_10 in var_2 )
                outlinehelper_enableentityoutline( var_10 );
        }
    }
}

_id_1312C()
{
    self notify( "cancel_better_mission_rewards_unset" );
    self.should_drop_scavenger_bag = 1;
    _id_14022( self.team );
    thread ks_airdroppercircle();
}

_id_13F63()
{

}

ks_airdroppercircle()
{
    var_0 = self.team;
    var_1 = self.squadindex;
    self endon( "cancel_better_mission_rewards_unset" );
    scripts\engine\utility::_id_143A5( "spawned_player", "disconnect" );

    if ( isdefined( self ) )
        self.should_drop_scavenger_bag = undefined;

    _id_14022( var_0, var_1 );
}

_id_14022( var_0, var_1 )
{
    if ( scripts\mp\utility\game::getgametype() != "br" )
        return;

    var_2 = scripts\mp\gametypes\br_quest_util.gsc::rewardangles( var_0 );

    if ( !isdefined( level.clearlethalonunresolvedcollision ) )
        level.clearlethalonunresolvedcollision = [];

    var_3 = 0;

    if ( isdefined( level.clearlethalonunresolvedcollision[var_0] ) )
        var_3 = level.clearlethalonunresolvedcollision[var_0];

    var_4 = var_2 - var_3;

    if ( var_4 != 0 )
        scripts\mp\gametypes\br_quest_util.gsc::battletracksmusicstate( var_0, var_4, var_1 );

    level.clearlethalonunresolvedcollision[var_0] = var_2;
}

_id_131C2()
{
    self clearvehicleturretstickers( 1 );

    if ( scripts\mp\utility\game::getgametype() != "br" )
        self setclientomnvar( "ui_specialist_bonus_active", 1 );
}

_id_13F6E()
{
    self clearvehicleturretstickers( 0 );

    if ( scripts\mp\utility\game::getgametype() != "br" )
        self setclientomnvar( "ui_specialist_bonus_active", 0 );
}

_id_13199()
{
    self._id_12369 = spawnstruct();
    self._id_12369._id_13A72 = [];
    self._id_12369.targetids = [];
    self._id_12369._id_12367 = [];
    self._id_12369.instant_revived = 0;

    for ( var_0 = 0; var_0 < 4; var_0++ )
        self._id_12369._id_12367[var_0] = -1;
}

maxmuncurrencycap( var_0 )
{
    if ( !isdefined( var_0 ) || !scripts\mp\utility\player::isreallyalive( var_0 ) )
        return;

    if ( var_0.team == self.team )
        return;

    if ( isdefined( self._id_12369 ) )
    {
        _id_1236A( var_0 );
        _id_1236B( var_0 );
        var_0._id_13A70 = 1;
    }
}

_id_1236A( var_0 )
{
    var_1 = "hud_icon_head_marked";
    var_2 = 8;
    var_3 = 1;
    var_4 = 0;
    var_5 = 500;

    if ( isdefined( var_0._id_13A70 ) )
        return;

    var_6 = self._id_12369._id_13A72[var_0 getentitynumber()];

    if ( !isdefined( var_6 ) )
    {
        self._id_12369._id_13A72[var_0 getentitynumber()] = var_0;
        var_6 = var_0;
        var_7 = self._id_12369.instant_revived;
        self._id_12369.instant_revived = ( self._id_12369.instant_revived + 1 ) % 4;

        if ( isdefined( self._id_12369._id_13A72[self._id_12369._id_12367[var_7]] ) )
        {
            var_8 = self._id_12369._id_13A72[self._id_12369._id_12367[var_7]];
            self._id_12369._id_12367[var_7] = -1;
            var_8 thread _id_1236D( var_8, var_8.headicon );
            thread _id_12372( var_8 );
        }

        self._id_12369._id_12367[var_7] = var_0 getentitynumber();
        var_9 = scripts\mp\gametypes\br_public.gsc::round_enemy_stuck_logic( self.team, self.squadindex );
        var_6.headicon = var_0 scripts\cp_mp\entityheadicons::setheadicon_singleimage( var_9, var_1, var_2, var_3, var_4, var_5, undefined, 1, 1 );
        self playlocalsound( "br_perk_advanced_scout_marking", self );
        scripts\mp\gametypes\br_public.gsc::_id_1276A( "br_perk_advanced_scout_marking", self.team, var_0 );
        var_0 thread _id_1236F( var_0, var_6.headicon );
        thread _id_12373( var_0 );
    }
}

_id_1236B( var_0 )
{
    var_1 = scripts\mp\utility\outline::outlineenableforplayer( var_0, self, "outlinefill_nodepth_orange", "perk" );
    var_0 scripts\mp\utility\outline::_hudoutlineviewmodelenable( "snapshotgrenade", 0 );

    if ( !isdefined( var_0._id_13A70 ) )
        var_0 playlocalsound( "br_perk_advanced_scout_marked_plr" );

    var_0 thread _id_12371( var_1, var_0 );
}

_id_1236F( var_0, var_1 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_2 = var_0 getentitynumber();
    var_0 endon( "removeHeadIcon_" + var_2 );
    var_0 scripts\engine\utility::waittill_notify_or_timeout( "death", 3.0 );
    scripts\cp_mp\entityheadicons::setheadicon_deleteicon( var_1 );
}

_id_12373( var_0 )
{
    self endon( "disconnect" );
    self endon( "pingOnDamageDeactivate" );
    var_1 = var_0 getentitynumber();
    self endon( "removeEntNum_" + var_1 );
    var_0 scripts\engine\utility::waittill_notify_or_timeout( "death", 3.0 );

    if ( isdefined( self._id_12369 ) && isdefined( self._id_12369._id_13A72 ) )
    {
        var_2 = self._id_12369._id_13A72[var_1];

        if ( isdefined( var_2 ) )
        {
            var_0._id_13A70 = undefined;
            self._id_12369._id_13A72[var_1] = undefined;
        }
    }

    foreach ( var_5, var_4 in self._id_12369._id_12367 )
    {
        if ( var_4 == var_1 )
        {
            self._id_12369._id_12367[var_5] = -1;
            return;
        }
    }
}

_id_1236D( var_0, var_1 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_2 = var_0 getentitynumber();
    var_0 notify( "removeHeadIcon_" + var_2 );
    scripts\cp_mp\entityheadicons::setheadicon_deleteicon( var_1 );
}

_id_12372( var_0 )
{
    self endon( "disconnect" );
    self endon( "pingOnDamageDeactivate" );
    var_1 = var_0 getentitynumber();
    self notify( "removeEntNum_" + var_1 );

    if ( isdefined( self._id_12369 ) && isdefined( self._id_12369._id_13A72 ) )
    {
        var_2 = self._id_12369._id_13A72[var_1];

        if ( isdefined( var_2 ) )
        {
            var_0._id_13A70 = undefined;
            self._id_12369._id_13A72[var_1] = undefined;
        }
    }
}

_id_12371( var_0, var_1 )
{
    level endon( "game_ended" );
    var_1 endon( "disconnect" );
    var_1 scripts\engine\utility::waittill_notify_or_timeout( "death", 0.6 );
    scripts\mp\utility\outline::outlinedisable( var_0, var_1 );
    var_1 scripts\mp\utility\outline::_hudoutlineviewmodeldisable();
}

_id_12374()
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( isdefined( self._id_11B14 ) )
        return;

    self._id_11B14 = 1;
    self iprintlnbold( &"KILLSTREAKS_HINTS/RECON_NO_MARK" );
    self playlocalsound( "br_perk_advanced_scout_marking_resist_plr", self );
    wait 1.0;
    self._id_11B14 = undefined;
}

_id_13F69()
{
    if ( isdefined( self._id_12369._id_13A72 ) && self._id_12369._id_13A72.size > 0 )
    {
        foreach ( var_1 in self._id_12369._id_13A72 )
        {
            if ( isdefined( var_1 ) )
                thread _id_12372( var_1 );
        }
    }

    self._id_12369 = undefined;
    self notify( "pingOnDamageDeactivate" );
}

_id_121B7( var_0 )
{
    var_1 = scripts\mp\gametypes\br_public.gsc::round_at_max( self.team, self.squadindex, "ui_squad_reinforced_perk" );

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    var_2 = scripts\engine\utility::ter_op( isdefined( self.pers["squadMemberIndex"] ), self.pers["squadMemberIndex"] - 1, 0 );
    var_3 = 1 << var_2;
    var_4 = scripts\engine\utility::ter_op( istrue( var_0 ), var_1 | var_3, var_1 ^ var_3 );
    scripts\mp\gametypes\br_public.gsc::_id_131C3( self.team, self.squadindex, "ui_squad_reinforced_perk", var_4 );
    var_5 = scripts\mp\gametypes\br_public.gsc::round_enemy_stuck_logic( self.team, self.squadindex );

    foreach ( var_7 in var_5 )
        var_7 setclientomnvar( "ui_squad_reinforced_perk", var_4 );
}

_id_13928()
{
    self endon( "disconnect" );
    self endon( "death" );
    level endon( "game_ended" );

    if ( !self isonground() )
    {
        self waittill( "victim_was_damaged" );

        if ( istrue( self.instantclassswapallowed ) )
            scripts\mp\class::disableclassswapallowed();
    }
}

_id_131C5()
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "armor" ) )
        return;

    thread _id_13928();
    scripts\mp\gametypes\br_armor.gsc::searchcirclesize( 1 );
    _id_121B7( 1 );
}

_id_13F6F()
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "armor" ) )
        return;

    if ( istrue( self.instantclassswapallowed ) )
        scripts\mp\gametypes\br_armor.gsc::searchcirclesize( 0 );

    _id_121B7( 0 );
}

_id_13716()
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( isdefined( self._id_11B14 ) )
        return;

    self._id_11B14 = 1;
    self playlocalsound( "br_perk_advanced_scout_marking_resist_plr", self );
    wait 1.0;
    self._id_11B14 = undefined;
}
