// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

kitspawn()
{
    if ( istrue( self.tacopsstealthrole ) )
        givestealthperks();
}

kittoicon( var_0 )
{
    switch ( var_0 )
    {
        case 1:
        default:
            return "popup_safeguard_levelup";
        case 2:
            return "icon_ks_heli_attack_hud";
        case 8:
        case 3:
            return "icon_ks_air_super_hud";
        case 4:
            return "icon_ks_jugg_hud";
        case 5:
            return "icon_ks_sat_com_hud";
        case 6:
            return "popup_safeguard_revived";
        case 7:
            return "icon_ks_skylark_uav_hud";
        case 9:
            return "icon_ks_sentry_gun_hud";
        case 10:
            return "icon_ks_maniac_hud";
    }
}

kittohintstring( var_0 )
{
    switch ( var_0 )
    {
        case 1:
        default:
            return &"MP/HOLD_TO_EQUIP_TACOPS_SPAWNER";
        case 2:
            return &"MP/HOLD_TO_EQUIP_TACOPS_COPTER";
        case 8:
        case 3:
            return &"MP/HOLD_TO_EQUIP_TACOPS_ARTILLERY";
        case 4:
            return &"MP/HOLD_TO_EQUIP_TACOPS_JUGG";
        case 5:
            return &"MP/HOLD_TO_EQUIP_TACOPS_SPOTTER";
        case 6:
            return &"MP/HOLD_TO_EQUIP_TACOPS_MEDIC";
        case 7:
            return &"MP/HOLD_TO_EQUIP_TACOPS_STEALTH";
        case 9:
            return &"MP/HOLD_TO_EQUIP_TACOPS_TURRET";
        case 10:
            return &"MP/HOLD_TO_EQUIP_TACOPS_GAS";
    }
}

enabletacopsstations( var_0 )
{
    foreach ( var_2 in var_0 )
        var_2 enabletacopskit();
}

initroles()
{
    level.teamspotindices = [];
    level.teamspotindices["allies"] = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];
    level.teamspotindices["axis"] = [ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 ];
    level thread managespotteromnvars();
}

createtacopskitstation( var_0, var_1, var_2, var_3 )
{
    var_4 = spawn( "script_model", var_1 );
    var_4 setmodel( "prop_suitcase_bomb" );
    var_4.kittype = var_0;
    var_4.forteam = var_2;

    if ( !istrue( var_3 ) )
        var_4 enabletacopskit();

    if ( !isdefined( level.tacopsstations ) )
        level.tacopsstations = [];

    level.tacopsstations[level.tacopsstations.size] = var_4;
}

enabletacopskit()
{
    self makeusable();
    thread tacopskitsuseteamupdater();
    var_0 = kittoicon( self.kittype );
    self.curobjid = createkitobjective( var_0, self.forteam );
    scripts\mp\gameobjects::setusetext( &"MP/PLANTING_EXPLOSIVE" );
    self sethintstring( kittohintstring( self.kittype ) );
    self setusepriority( 0 );
    level thread tacopskitstationonuse( self );
}

tacopskitsuseteamupdater()
{
    level endon( "game_ended" );
    self endon( "death" );

    for (;;)
    {
        setusablebyteam( self.forteam );
        level waittill( "joined_team" );
    }
}

setusablebyteam( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( var_2.team != var_0 || isdefined( var_2.tacopskit ) )
        {
            self disableplayeruse( var_2 );
            continue;
        }

        self enableplayeruse( var_2 );
    }
}

tacopskitstationonuse( var_0 )
{
    level endon( "game_ended" );
    var_0 waittill( "trigger", var_1 );
    var_1.tacopskit = var_0.kittype;
    var_2 = [];

    switch ( var_0.kittype )
    {
        case 1:
        default:
            if ( var_1.team == "allies" )
                scripts\mp\tac_ops\radio_utility::queue_dialogue( "dx_mpb_ovl_rolesa_beacons", var_1 );
            else
                scripts\mp\tac_ops\radio_utility::queue_dialogue( "dx_mpb_aqcm_rolesb_beacons", var_1 );

            var_1 scripts\mp\supers::givesuper( "super_tac_ops_spawn" );
            var_1 scripts\mp\supers::givesuperpoints( 400000 );
            var_1.pers["tac_ops_super"] = "super_tac_ops_spawn";
            var_2[0] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_COMMAND_1";
            var_2[1] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_COMMAND_2";
            break;
        case 5:
            if ( var_1.team == "allies" )
                scripts\mp\tac_ops\radio_utility::queue_dialogue( "dx_mpb_ovl_rolesa_sigint", var_1 );
            else
                scripts\mp\tac_ops\radio_utility::queue_dialogue( "dx_mpb_aqcm_rolesb_intel", var_1 );

            var_1 grantspotterkit();
            var_1 scripts\mp\supers::givesuper( "super_tacops_uav" );
            var_1 scripts\mp\supers::givesuperpoints( 400000 );
            var_1.pers["tac_ops_super"] = "super_tacops_uav";
            var_2[0] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_SIGINT_1";
            var_2[1] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_SIGINT_2";
            var_2[2] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_SIGINT_3";
            break;
        case 2:
            scripts\mp\tac_ops\radio_utility::queue_dialogue( "dx_mpb_ovl_rolesa_jtac", var_1 );
            var_1 scripts\mp\supers::givesuper( "super_tacops_heli" );
            var_1 scripts\mp\supers::givesuperpoints( 400000 );
            var_1.pers["tac_ops_super"] = "super_tacops_heli";
            var_2[0] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_AIR_1";
            var_2[1] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_AIR_2";
            break;
        case 10:
            scripts\mp\tac_ops\radio_utility::queue_dialogue( "dx_mpb_aqcm_rolesb_bio", var_1 );
            var_1 scripts\mp\supers::givesuper( "super_tac_ops_gas" );
            var_1 scripts\mp\supers::givesuperpoints( 400000 );
            var_1.pers["tac_ops_super"] = "super_tac_ops_gas";
            var_1.tacopsgasrole = 1;
            var_2[0] = &"MISC_MESSAGES_MP_TO_ALLY_ROLE_GAS_1";
            var_2[1] = &"MISC_MESSAGES_MP_TO_ALLY_ROLE_GAS_2";
            break;
        case 8:
        case 3:
            scripts\mp\tac_ops\radio_utility::queue_dialogue( "dx_mpb_ovl_rolesa_artillery", var_1 );
            var_1 scripts\mp\supers::givesuper( "super_tacops_artillery" );
            var_1 scripts\mp\supers::givesuperpoints( 400000 );
            var_1.pers["tac_ops_super"] = "super_tacops_artillery";
            var_2[0] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_ARTILLERY_1";
            var_2[1] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_ARTILLERY_2";
            break;
        case 4:
            scripts\mp\tac_ops\radio_utility::queue_dialogue( "dx_mpb_ovl_rolesa_armor", var_1 );
            var_1 scripts\mp\supers::givesuper( "super_tacops_juggernaut" );
            var_1 scripts\mp\supers::givesuperpoints( 400000 );
            var_1.pers["tac_ops_super"] = "super_tacops_juggernaut";
            var_2[0] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_JUGG_1";
            var_2[1] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_JUGG_2";
            break;
        case 7:
            scripts\mp\tac_ops\radio_utility::queue_dialogue( "dx_mpb_aqcm_rolesb_scout", var_1 );
            var_1 givestealthperks();
            var_2[0] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_STEALTH_1";
            var_2[1] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_STEALTH_2";
            break;
        case 6:
            if ( var_1.team == "allies" )
                scripts\mp\tac_ops\radio_utility::queue_dialogue( "dx_mpb_ovl_rolesa_medic8", var_1 );
            else
                scripts\mp\tac_ops\radio_utility::queue_dialogue( "dx_mpb_aqcm_rolesb_medic", var_1 );

            var_1 scripts\mp\supers::givesuper( "super_tac_ops_supply_pack" );
            var_1 scripts\mp\supers::givesuperpoints( 400000 );
            var_1.pers["tac_ops_super"] = "super_tac_ops_supply_pack";
            var_1.tacopsmedicrole = 1;
            var_2[0] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_MEDIC_1";
            var_2[1] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_MEDIC_2";
            break;
        case 9:
            scripts\mp\tac_ops\radio_utility::queue_dialogue( "dx_mpb_aqcm_rolesb_engineer", var_1 );
            var_1 scripts\mp\supers::givesuper( "super_tacops_turret" );
            var_1 scripts\mp\supers::givesuperpoints( 400000 );
            var_1.pers["tac_ops_super"] = "super_tacops_turret";
            var_2[0] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_ENGINEER_1";
            var_2[1] = &"MISC_MESSAGES_MP/TO_ALLY_ROLE_ENGINEER_2";
            break;
    }

    var_1 thread describerole( var_2 );
    var_1 disabletacopskitstationuse();
    var_0 delete();
}

givestealthperks()
{
    self.tacopsstealthrole = 1;
    scripts\mp\utility\perk::giveperk( "specialty_coldblooded" );
    scripts\mp\utility\perk::giveperk( "specialty_tracker_jammer" );
    scripts\mp\utility\perk::giveperk( "specialty_blindeye" );
    scripts\mp\utility\perk::giveperk( "specialty_engineer" );
    scripts\mp\utility\perk::giveperk( "specialty_ghost" );
}

describerole( var_0 )
{
    foreach ( var_2 in var_0 )
    {
        scripts\mp\gametypes\tac_ops.gsc::tutorialprint( var_2, 5 );
        wait 0.5;
    }
}

disabletacopskitstationuse()
{
    for ( var_0 = 0; var_0 < level.tacopsstations.size; var_0++ )
    {
        if ( isdefined( level.tacopsstations[var_0] ) )
            level.tacopsstations[var_0] disableplayeruse( self );
    }

    var_1 = level.tacopskitobjectives[self.team];

    for ( var_0 = 0; var_0 < var_1.size; var_0++ )
    {
        if ( isdefined( var_1[var_0] ) )
            scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_1[var_0], self );
    }
}

createkitobjective( var_0, var_1 )
{
    var_2 = scripts\mp\objidpoolmanager::requestobjectiveid( 10 );

    if ( var_2 == -1 )
        return -1;

    scripts\mp\objidpoolmanager::objective_add_objective( var_2, "invisible", ( 0, 0, 0 ), var_0 );
    scripts\mp\objidpoolmanager::update_objective_onentity( var_2, self );
    scripts\mp\objidpoolmanager::update_objective_state( var_2, "active" );
    scripts\mp\objidpoolmanager::update_objective_icon( var_2, var_0 );

    if ( isdefined( level.objvisall ) )
        [[ level.objvisall ]]( var_2 );

    if ( !isdefined( level.tacopskitobjectives ) )
    {
        level.tacopskitobjectives = [];
        level.tacopskitobjectives["allies"] = [];
        level.tacopskitobjectives["axis"] = [];
    }

    level.tacopskitobjectives[var_1][level.tacopskitobjectives[var_1].size] = var_2;
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_2 );

    foreach ( var_4 in level.players )
    {
        if ( isdefined( var_4.team ) && var_4.team == var_1 )
        {
            scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( var_2, var_4 );
            continue;
        }

        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_2, var_4 );
    }

    return var_2;
}

latejointeamkitobjective()
{
    if ( !isdefined( level.tacopskitobjectives ) )
        return;

    foreach ( var_1 in level.tacopskitobjectives[self.team] )
        scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( var_1, self );

    foreach ( var_1 in level.tacopskitobjectives[scripts\mp\utility\game::getotherteam( self.team )[0]] )
        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_1, self );
}

grantspotterkit()
{
    thread spotterthink();
}

managespotteromnvars()
{
    level endon( "game_ended" );
    level.playertoomvarmap = [];
    level.playertoomnvarmap["allies"] = [];
    level.playertoomnvarmap["axis"] = [];
}

listendisconnectspotted()
{
    level endon( "game_ended" );
    self endon( "listenDisconnectSpotted" );
    self waittill( "disconnect" );
    recyclespotted( self );
}

recyclespotted( var_0 )
{
    var_1 = var_0 getentitynumber();

    if ( isdefined( level.playertoomnvarmap["allies"][var_1] ) )
    {
        var_2 = level.playertoomnvarmap["allies"][var_1];
        level.playertoomnvarmap["allies"][var_1] = undefined;
        level.teamspotindices["allies"][level.teamspotindices["allies"].size] = var_2;
    }

    if ( isdefined( level.playertoomnvarmap["axis"][var_1] ) )
    {
        var_2 = level.playertoomnvarmap["axis"][var_1];
        level.playertoomnvarmap["axis"][var_1] = undefined;
        level.teamspotindices["axis"][level.teamspotindices["axis"].size] = var_2;
    }
}

spotplayer( var_0 )
{
    if ( !isdefined( var_0.tacopsspottedbyteam ) )
    {
        var_0 thread spotexpire();
        var_0.tacopsspottedbyteam = scripts\mp\utility\game::getotherteam( var_0.team )[0];
        var_1 = scripts\mp\utility\teams::getteamdata( scripts\mp\utility\game::getotherteam( var_0.team )[0], "players" );

        foreach ( var_3 in var_1 )
        {

        }
    }
    else
        refreshspottimer( var_0 );
}

spotexpire()
{
    self endon( "disconnect" );
    self endon( "refresh_spot_timer" );
    level endon( "game_ended" );
    scripts\engine\utility::waittill_notify_or_timeout( "death", 3 );
    unspotplayer( self );
}

refreshspottimer( var_0 )
{
    var_0 notify( "refresh_spot_timer" );
    var_0 thread spotexpire();
}

unspotplayer( var_0 )
{
    if ( !isdefined( var_0.tacopsspottedbyteam ) )
        return;

    var_1 = level.playertoomnvarmap[scripts\mp\utility\game::getotherteam( var_0.tacopsspottedbyteam )[0]];
    var_2 = scripts\mp\utility\teams::getteamdata( var_0.tacopsspottedbyteam, "players" );
    var_0.tacopsspottedbyteam = undefined;

    foreach ( var_4 in var_2 )
    {

    }
}

hackspottest( var_0 )
{
    wait 5;

    if ( isbot( var_0 ) == 0 )
        var_0 thread spotterthink();
}

spotterthink()
{
    for (;;)
    {
        var_0 = scripts\mp\utility\teams::getteamdata( scripts\mp\utility\game::getotherteam( self.team )[0], "players" );

        foreach ( var_2 in var_0 )
        {
            if ( !isdefined( var_2 ) || var_2 == self || !scripts\mp\utility\player::isreallyalive( var_2 ) || istrue( var_2.tacopsstealthrole ) )
                continue;

            if ( distancesquared( self geteye(), var_2 geteye() ) < 7290000 )
            {
                if ( sighttracepassed( self geteye(), var_2 geteye(), 0, self ) )
                    spotplayer( var_2 );
            }
        }

        wait 0.333;
    }
}

throwsupplypack( var_0 )
{
    if ( !isdefined( level.tacopssupplypacks ) )
        level.tacopssupplypacks = [];

    if ( !isdefined( level.tacopssupplypacks[var_0.owner.team] ) )
        level.tacopssupplypacks[var_0.owner.team] = [];

    var_1 = level.tacopssupplypacks[var_0.owner.team].size;

    if ( var_1 >= 4 )
    {
        var_2 = level.tacopssupplypacks[var_0.owner.team][0];
        level.tacopssupplypacks[var_0.owner.team] = scripts\engine\utility::array_remove_index( level.tacopssupplypacks[var_0.owner.team], 0 );
        var_2 dovisualdeath();
    }

    var_0.team = var_0.owner.team;
    var_0.throwangles2d = ( var_0.angles[0], var_0.angles[1], 0 );
    var_0 waittill( "missile_stuck" );
    var_3 = createsupplypack( self, var_0.origin );
    var_1 = level.tacopssupplypacks[var_3.owner.team].size;
    level.tacopssupplypacks[var_0.owner.team][var_1] = var_3;
    var_0 delete();
}

dovisualdeath()
{
    self delete();
}

supplypackmonitor()
{
    level endon( "game_ended" );
    self waittill( "death" );
    dovisualdeath();
}

beginusegas()
{
    return 1;
}

beginusesupplypack()
{
    self giveandfireoffhand( "tac_ops_supply_pack_grenade_mp" );
    return 1;
}

createsupplypack( var_0, var_1 )
{
    var_2 = "equipment";
    var_3 = 20;
    var_4 = 20;
    var_5 = spawn( "script_model", var_1 + ( 0, 0, 10 ) );
    var_6 = "equipment_resupply_bag";
    var_5 scriptmoverthermal();
    var_5 setmodel( var_6 );
    var_5.owner = var_0;
    var_5.team = var_0.team;
    var_5.type = var_2;
    var_7 = spawn( "trigger_radius", var_1, 0, var_3, var_4 );
    var_7 thread watchsupplypackuse( var_5 );
    var_7 thread watchsupplypackdeath( var_5 );
    return var_5;
}

watchsupplypackdeath( var_0 )
{
    self endon( "death" );
    var_0 waittill( "death" );

    if ( isdefined( self ) )
        self delete();
}

watchsupplypackuse( var_0 )
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "trigger", var_1 );

        if ( !isplayer( var_1 ) || !isalive( var_1 ) )
            continue;

        level.tacopssupplypacks[var_0.team] = scripts\engine\utility::array_remove( level.tacopssupplypacks[var_0.team], var_0 );
        var_1.health = var_1.maxhealth;
        scripts\mp\weapons::scavengergiveammo( var_1 );
        var_1 playlocalsound( "scavenger_pack_pickup" );
        var_0 delete();
    }
}

granthelicopterpilot()
{
    scripts\mp\supers::givesuper( "super_tacops_heli", 1 );
}

usehelicopterpilot()
{
    return 1;
}

useartilleryrole()
{
    return 1;
}

useturretrole()
{
    return 1;
}

watchturretdeployfailed( var_0 )
{
    self endon( "disconnect" );
    self endon( "microTurret_spawned" );
    self endon( "microTurret_end" );
    self waittill( "equip_deploy_end", var_1, var_2, var_3, var_4 );
    scripts\mp\supers::givesuperpoints( 400000 );
}

useuavrole()
{
    return 1;
}

usejuggernautrole()
{
    thread scripts\mp\gametypes\cmd.gsc::givejuggernaut();
    return 1;
}
