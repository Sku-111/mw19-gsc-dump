// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

game_utility_mp_init()
{
    scripts\cp_mp\utility\script_utility::registersharedfunc( "game_utility", "getTimeSinceGameStart", ::game_utility_mp_gettimesincegamestart );
}

game_utility_mp_gettimesincegamestart()
{
    return scripts\mp\matchdata::gettimefrommatchstart( gettime() );
}

_id_11C7F()
{
    switch ( scripts\mp\utility\game::getgametype() )
    {
        case "infect":
            return 0;
        case "dm":
            if ( istrue( level.aonrules ) )
                return 0;
            else
                return 1;
        default:
            return 1;
    }
}

_id_11C80()
{
    switch ( scripts\mp\utility\game::getgametype() )
    {
        case "oic":
        case "infect":
            return 0;
        case "dm":
            if ( istrue( level.aonrules ) )
                return 0;
            else
                return 1;
        case "arena":
            if ( istrue( level.allowsupers ) )
                return 0;
            else
                return 1;
        default:
            return 1;
    }
}

_id_11C8A( var_0 )
{
    if ( isdefined( var_0.script_team ) )
    {
        if ( scripts\mp\utility\game::getgametype() == "arm" )
            return 1;
        else
            return 0;
    }

    return 1;
}

track_get_reward_time( var_0, var_1 )
{
    if ( !isdefined( level.br_level ) )
        return 1;

    var_2 = removeselfrevivetoken( var_1 );
    var_3 = min( var_2[0][0], var_2[1][0] );
    var_4 = min( var_2[0][1], var_2[1][1] );
    var_5 = max( var_2[0][0], var_2[1][0] );
    var_6 = max( var_2[0][1], var_2[1][1] );

    if ( var_0[0] <= var_3 )
        return 0;
    else if ( var_0[0] >= var_5 )
        return 0;

    if ( var_0[1] <= var_4 )
        return 0;
    else if ( var_0[1] >= var_6 )
        return 0;

    return 1;
}

removeselfrevivetoken( var_0 )
{
    var_1 = level.br_level.br_mapbounds;
    var_2 = isdefined( level.br_level.delay_set_bomber_traversals );
    var_3 = istrue( var_0 );

    if ( var_2 && var_3 )
        var_1 = level.br_level.delay_set_bomber_traversals;

    return var_1;
}

removespawns( var_0 )
{
    var_1 = removeselfrevivetoken( var_0 );
    var_2 = var_1[1][0];
    var_3 = var_1[0][0];
    return abs( var_2 - var_3 );
}

removespawnprotectiononads( var_0 )
{
    var_1 = removeselfrevivetoken( var_0 );
    var_2 = ( var_1[0] + var_1[1] ) * 0.5;
    return var_2;
}
