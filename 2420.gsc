// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

getattachmenttype( var_0 )
{
    var_1 = tablelookup( "mp/attachmenttable.csv", 4, var_0, 2 );
    return var_1;
}

getcompleteweaponnamenoalt( var_0 )
{
    var_1 = createheadicon( var_0 );

    if ( istrue( var_0.isalternate ) )
        var_1 = getsubstr( var_1, 4 );

    return var_1;
}

getweapontype( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( iscacprimaryweapon( var_0 ) )
        return "primary";

    if ( iscacsecondaryweapon( var_0 ) )
        return "secondary";

    if ( iskillstreakweapon( var_0 ) )
        return "killstreak";

    if ( issuperweapon( var_0 ) )
        return "super";

    if ( isgamemodeweapon( var_0 ) )
        return "gamemode";

    if ( var_0 == "iw8_turret_50cal_mp" || var_0 == "manual_turret_payload_mp" || var_0 == "manual_turret_flak_mp" || var_0 == "manual_turret_flak_vehicle" )
        return "turret";

    if ( var_0 == "armored_train_mg_turret_mp" || var_0 == "armored_train_tank_turret_mp" || var_0 == "armored_train_mortar_turret_mp" || var_0 == "armored_train_locomotive_turret_mp" || var_0 == "armored_train_mg_turret_buffed_mp" || var_0 == "armored_train_tank_turret_buffed_mp" || var_0 == "armored_train_locomotive_turret_buffed_mp" )
        return "turret";

    if ( islevelweapon( var_0 ) )
        return "level";

    if ( scripts\mp\utility\script::isstrstart( var_0, "destructible_" ) )
        return "destructible";

    if ( isvehicleweapon( var_0 ) )
        return "vehicle";

    if ( isspecialmeleeweapon( var_0 ) || var_0 == "iw8_defibrillator_mp" )
        return "special_melee";

    if ( isenvironmentweapon( var_0 ) )
        return "environment";

    var_1 = getequipmenttype( var_0 );

    if ( isdefined( var_1 ) )
        return var_1;

    if ( var_0 == "none" )
        return "worldspawn";

    if ( var_0 == "bomb_site_mp" )
        return var_0;

    if ( var_0 == "iw8_gunless" )
        return "gunless";

    if ( var_0 == "zombie_ranged_attack_mp" || var_0 == "zombie_melee_attack_mp" )
        return "zombie";
}

getequipmenttype( var_0 )
{
    var_1 = undefined;

    switch ( var_0 )
    {
        case "snowball_mp":
        case "coal_mp":
        case "rock_mp":
        case "claymore_radial_mp":
        case "throwingknife_drill_mp":
        case "throwingknife_electric_mp":
        case "throwingknife_fire_mp":
        case "throwingknife_mp":
        case "claymore_mp":
        case "at_mine_mp":
        case "at_mine_ap_mp":
        case "c4_mp_p":
        case "semtex_mp":
        case "frag_grenade_mp":
        case "thermite_av_mp":
        case "thermite_ap_mp":
        case "thermite_mp":
        case "molotov_mp":
            var_1 = "lethal";
            break;
        case "numbers_grenade_mp":
        case "geiger_counter_mp":
        case "offhand_spotter_scope_mp":
        case "pball_mp":
        case "hb_sensor_mp":
        case "adrenaline_mp":
        case "gas_grenade_mp":
        case "gas_mp":
        case "decoy_grenade_mp":
        case "emp_gadget_mp":
        case "snapshot_grenade_mp":
        case "smoke_grenade_mp":
        case "concussion_grenade_mp":
        case "flash_grenade_mp":
            var_1 = "tactical";
            break;
        case "gesture_vest_plate_br":
        case "adrenaline_br_fake":
        case "bandage_br_fake":
        case "ks_remote_drone_mp":
            if ( scripts\mp\utility\game::getgametype() == "br" )
                var_1 = "equipment_other";

            break;
        default:
            break;
    }

    return var_1;
}

isenvironmentweapon( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    switch ( var_1 )
    {
        case "lava_bomb_mp":
        case "gasoline_can_mp":
        case "electric_rail_mp":
        case "gas_can_toxic_mp":
        case "gas_can_mp":
        case "minefield_mp":
        case "danger_circle_br":
            return 1;
        default:
            break;
    }

    return 0;
}

issuperweapon( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    return isdefined( scripts\mp\supers::getsuperrefforsuperweapon( var_0 ) );
}

turnexfiltoside( var_0 )
{
    if ( isdefined( var_0.others ) )
    {
        foreach ( var_2 in var_0.others )
        {
            if ( issubstr( var_2, "akimbo" ) )
                return 1;
        }
    }

    if ( isdefined( var_0.attachments ) )
    {
        foreach ( var_2 in var_0.attachments )
        {
            if ( issubstr( var_2, "akimbo" ) )
                return 1;
        }
    }

    return 0;
}

issuperdamagesource( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    if ( issuperweapon( var_0 ) )
        return 1;

    if ( var_1 == "chargemode_mp" )
        return 1;

    if ( var_1 == "micro_turret_gun_mp" )
        return 1;

    if ( var_1 == "super_trophy_mp" )
        return 1;

    return 0;
}

isgamemodeweapon( var_0 )
{
    if ( isbombsiteweapon( var_0 ) )
        return 1;

    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    switch ( var_1 )
    {
        case "iw8_lm_dblmg":
        case "iw8_lm_kilo121jugg_mp":
        case "danger_circle_br":
        case "iw7_tdefball_mp":
        case "iw8_cyberemp_mp":
            return 1;
        default:
            return 0;
    }

    return 0;
}

islevelweapon( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    switch ( var_1 )
    {
        case "iw8_la_gromeoks_mp":
            return 1;
        default:
            return 0;
    }

    return 0;
}

getweapongroup( var_0 )
{
    if ( issameweapon( var_0 ) && nullweapon( var_0 ) )
        return "other";

    if ( isstring( var_0 ) && ( var_0 == "none" || var_0 == "alt_none" ) )
        return "other";

    var_1 = getweaponrootname( var_0 );
    var_2 = weapongroupmap( var_1 );

    if ( !isdefined( var_2 ) )
    {
        if ( issuperweapon( var_0 ) )
            var_2 = "super";
        else if ( iskillstreakweapon( var_0 ) )
            var_2 = "killstreak";
        else if ( isgamemodeweapon( var_0 ) )
            var_2 = "gamemode";
        else if ( tut_loadout( var_0 ) )
            var_2 = "weapon_ballisticSpecial";
        else if ( unlockableindex( var_0 ) )
            var_2 = "weapon_dragonsBreath";
        else
            var_2 = "other";
    }

    return var_2;
}

runpubliceventoftype( var_0 )
{
    if ( issameweapon( var_0 ) && nullweapon( var_0 ) )
        return "other";

    if ( isstring( var_0 ) && ( var_0 == "none" || var_0 == "alt_none" ) )
        return "other";

    var_1 = getweaponrootname( var_0 );
    var_2 = _id_14594( var_1 );

    if ( !isdefined( var_2 ) )
    {
        if ( issuperweapon( var_0 ) )
            var_2 = "super";
        else if ( iskillstreakweapon( var_0 ) )
            var_2 = "killstreak";
        else if ( isgamemodeweapon( var_0 ) )
            var_2 = "gamemode";
        else if ( tut_loadout( var_0 ) )
            var_2 = "weapon_ballisticSpecial";
        else if ( unlockableindex( var_0 ) )
            var_2 = "weapon_dragonsBreath";
        else
            var_2 = "other";
    }

    return var_2;
}

unlockableindex( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    return var_1 == "dragonsbreath_mp";
}

tut_loadout( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    switch ( var_1 )
    {
        case "semtex_aalpha12_splash_mp":
        case "semtex_xmike109_splash_mp":
        case "thermite_xmike109_radius_mp":
        case "semtex_bolt_splash_mp":
        case "thermite_bolt_radius_mp":
        case "semtex_aalpha12_mp":
        case "semtex_xmike109_mp":
        case "thermite_xmike109_mp":
        case "semtex_bolt_mp":
        case "thermite_bolt_mp":
            return 1;
        default:
            return 0;
    }
}

register_wave_spawner( var_0 )
{
    var_1 = getweaponrootname( var_0 );
    var_2 = level.weaponattachments[var_1];

    if ( !isdefined( var_2 ) )
        var_2 = [];

    return var_2;
}

attachmentscompatible( var_0, var_1, var_2 )
{
    if ( attachmentiscosmetic( var_1 ) && attachmentiscosmetic( var_2 ) )
        return 0;

    var_1 = attachmentmap_tobase( var_1 );
    var_2 = attachmentmap_tobase( var_2 );
    var_3 = 1;

    if ( var_1 == var_2 )
        var_3 = 0;
    else if ( isdefined( level.carryitem2omnvar ) )
    {
        if ( !isdefined( level.carryitem2omnvar[var_0] ) )
            var_0 = "default";

        var_3 = !( isdefined( level.carryitem2omnvar[var_0][var_1] ) && isdefined( level.carryitem2omnvar[var_0][var_1][var_2] ) );
    }
    else if ( var_1 != "none" && var_2 != "none" )
    {
        if ( !isdefined( level.cash_hud_bink[var_0] ) )
            var_0 = "default";

        var_4 = level.cash_hud_bink[var_0];
        var_5 = tablelookuprownum( var_4, 0, var_2 );

        if ( tablelookup( var_4, 0, var_1, var_5 ) == "no" )
            var_3 = 0;
    }

    return var_3;
}

attachmentsconflict( var_0, var_1, var_2, var_3, var_4 )
{
    if ( attachmentiscosmetic( var_0 ) && attachmentiscosmetic( var_1 ) )
        return var_0;

    var_5 = undefined;

    if ( issameweapon( var_2 ) )
        var_5 = createheadicon( var_2 );
    else
        var_5 = var_2;

    if ( !isdefined( var_3 ) )
        var_3 = attachmentmap_tounique( var_0, var_5 );

    if ( !isdefined( var_4 ) )
        var_4 = attachmentmap_tounique( var_1, var_5 );

    if ( add_head_icon_on_allies( var_3, var_4 ) )
        return var_0;

    if ( add_head_icon_on_allies( var_4, var_3 ) )
        return var_0;

    var_0 = attachmentmap_tobase( var_0 );
    var_1 = attachmentmap_tobase( var_1 );
    var_6 = scripts\mp\weapons::safechecknum( var_5 );

    if ( isdefined( level.carryitem2omnvar ) && !isdefined( level.carryitem2omnvar[var_6] ) )
        var_6 = "default";

    var_7 = "";

    if ( var_0 == var_1 )
        var_7 = var_0;
    else if ( isdefined( level.carryitem2omnvar ) && isdefined( level.carryitem2omnvar[var_6] ) && isdefined( level.carryitem2omnvar[var_6][var_0] ) )
    {
        var_8 = level.carryitem2omnvar[var_6][var_0][var_1];

        if ( isdefined( var_8 ) )
        {
            if ( var_8 == "no" )
                var_7 = var_0;
            else
                var_7 = var_8;
        }
    }

    return var_7;
}

add_head_icon_on_allies( var_0, var_1 )
{
    var_2 = carryitemomnvar( var_0 );
    var_3 = carryiteminfo( var_1 );
    return isdefined( var_2 ) && isdefined( var_3 ) && var_3 == var_2;
}

getweaponrootname( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    var_2 = level.weaponrootcache[var_1];

    if ( isdefined( var_2 ) )
        return var_2;

    var_3 = var_1;
    var_4 = strtok( var_1, "_" );

    if ( !isdefined( var_4 ) || var_4.size == 0 )
        return "";

    var_5 = 0;

    if ( var_4[0] == "alt" )
        var_5++;

    if ( var_4[var_5] == "iw8" || var_4[var_5] == "s4" )
    {
        var_6 = [ "ar", "sm", "lm", "sh", "sn", "dm", "pi", "la", "me", "mg", "mr" ];

        if ( scripts\engine\utility::array_contains( var_6, var_4[var_5 + 1] ) )
            var_1 = var_4[var_5] + "_" + var_4[var_5 + 1] + "_" + var_4[var_5 + 2];
        else
            var_1 = var_4[var_5] + "_" + var_4[var_5 + 1];
    }

    if ( level.weaponrootcache.size < 100 )
        level.weaponrootcache[var_3] = var_1;

    return var_1;
}

relic_nuketimer_globalthread( var_0 )
{
    var_1 = getweaponrootname( var_0 );

    if ( isdefined( level.weaponmapdata[var_1] ) && isdefined( level.weaponmapdata[var_1].assetname ) )
        var_0 = level.weaponmapdata[var_1].assetname;

    return var_0;
}

getweaponvarianttablename( var_0 )
{
    if ( scripts\mp\utility\script::isstrstart( var_0, "iw8_" ) )
        var_0 = getsubstr( var_0, 4 );

    if ( scripts\mp\utility\script::isstrstart( var_0, "s4_" ) )
    {

    }

    return "mp/gunsmith/" + var_0 + "_variants.csv";
}

getweaponbasenamescript( var_0 )
{
    if ( issameweapon( var_0 ) )
        return var_0.basename;

    if ( isstring( var_0 ) && var_0 == "none" )
        return "none";

    return getweaponbasename( var_0 );
}

getweapongunsmithattachmenttable( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    var_2 = getweaponrootname( var_1 );
    return "mp/gunsmith/" + getsubstr( var_2, 4 ) + "_attachments.csv";
}

getaltmodeweapon( var_0 )
{
    foreach ( var_2 in var_0.attachments )
    {
        var_3 = attachmentmap_tobase( var_2 );

        if ( var_3 == "gl" || var_3 == "glsmoke" || var_3 == "glgas" || var_3 == "glconc" || var_3 == "glflash" || var_3 == "glincendiary" || var_3 == "glsemtex" || var_3 == "glsnap" )
            return var_3;
    }

    return undefined;
}

isaltmodeweapon( var_0 )
{
    if ( var_0 == "none" )
        return 0;

    return weaponinventorytype( var_0 ) == "altmode";
}

removealtmodefromweaponname( var_0 )
{
    if ( isaltmodeweapon( var_0 ) )
        var_0 = getsubstr( var_0, 4 );

    return var_0;
}

getvalidextraammoweapons()
{
    var_0 = [];
    var_1 = self getweaponslistprimaries();

    foreach ( var_3 in var_1 )
    {
        var_4 = weaponclass( var_3 );

        if ( !iskillstreakweapon( var_3 ) && var_4 != "grenade" && var_4 != "rocketlauncher" && self getweaponammostock( var_3 ) != 0 )
            var_0[var_0.size] = var_3;
    }

    return var_0;
}

ispickedupweapon( var_0 )
{
    if ( iscacprimaryorsecondary( var_0 ) )
    {
        var_1 = undefined;

        if ( issameweapon( var_0 ) )
            var_1 = createheadicon( var_0 getnoaltweapon() );
        else if ( isstring( var_0 ) )
        {
            var_1 = var_0;

            if ( issubstr( var_1, "alt_" ) )
                var_1 = getsubstr( var_1, 4, var_0.size );
        }

        var_2 = isdefined( self.pers["primaryWeapon"] ) && self.pers["primaryWeapon"] == var_1;
        var_3 = isdefined( self.pers["secondaryWeapon"] ) && self.pers["secondaryWeapon"] == var_1;

        if ( !var_2 && !var_3 )
            return 1;
    }

    return 0;
}

iscacprimaryweapon( var_0 )
{
    return tv_station_fastrope_one_infil_start_targetname_array( getweapongroup( var_0 ), var_0 );
}

tv_station_fastrope_one_infil_start_targetname_array( var_0, var_1 )
{
    switch ( var_0 )
    {
        case "weapon_melee":
        case "weapon_shotgun":
        case "weapon_lmg":
        case "weapon_dmr":
        case "weapon_sniper":
        case "weapon_assault":
        case "weapon_smg":
        case "weapon_dragonsBreath":
        case "weapon_ballisticSpecial":
        case "weapon_tactical":
            return 1;
        default:
            return 0;
    }
}

iscacsecondaryweapon( var_0 )
{
    return tv_station_fastrope_one_infil_start_targetname_array_index( getweapongroup( var_0 ), var_0 );
}

tv_station_fastrope_one_infil_start_targetname_array_index( var_0, var_1 )
{
    switch ( var_0 )
    {
        case "weapon_projectile":
        case "weapon_pistol":
            return 1;
        case "weapon_melee2":
            return !isspecialmeleeweapon( var_1 );
        default:
            return 0;
    }
}

iscacprimaryorsecondary( var_0 )
{
    var_1 = getweapongroup( var_0 );
    return tv_station_fastrope_one_infil_start_targetname_array( var_1, var_0 ) || tv_station_fastrope_one_infil_start_targetname_array_index( var_1, var_0 );
}

iscacmeleeweapon( var_0 )
{
    var_1 = getweapongroup( var_0 );
    return var_1 == "weapon_melee" || var_1 == "weapon_melee2";
}

enableweaponlaser()
{
    if ( !isdefined( self.weaponlasercalls ) )
        self.weaponlasercalls = 0;

    self.weaponlasercalls++;
    self laseron();
}

disableweaponlaser()
{
    self.weaponlasercalls--;

    if ( self.weaponlasercalls == 0 )
    {
        self laseroff();
        self.weaponlasercalls = undefined;
    }
}

attachmentmap_tounique( var_0, var_1 )
{
    var_2 = undefined;

    if ( issameweapon( var_1 ) )
        var_2 = createheadicon( var_1 );
    else
        var_2 = var_1;

    var_3 = getweaponrootname( var_1 );

    if ( var_3 != var_2 )
    {
        var_4 = getweaponbasename( var_1 );

        if ( isdefined( var_4 ) )
        {
            if ( isdefined( level.attachmentmap_basetounique[var_4] ) && isdefined( level.attachmentmap_uniquetobase[var_0] ) && isdefined( level.attachmentmap_basetounique[var_4][level.attachmentmap_uniquetobase[var_0]] ) )
            {
                var_5 = level.attachmentmap_uniquetobase[var_0];
                return level.attachmentmap_basetounique[var_4][var_5];
            }
            else if ( isdefined( level.attachmentmap_basetounique[var_4] ) && isdefined( level.attachmentmap_basetounique[var_4][var_0] ) )
                return level.attachmentmap_basetounique[var_4][var_0];
            else
            {
                var_6 = strtok( var_4, "_" );

                if ( var_6.size > 3 )
                {
                    var_7 = var_6[0] + "_" + var_6[1] + "_" + var_6[2];

                    if ( isdefined( level.attachmentmap_basetounique[var_7] ) && isdefined( level.attachmentmap_basetounique[var_7][var_0] ) )
                        return level.attachmentmap_basetounique[var_7][var_0];
                }
            }
        }
    }

    if ( isdefined( level.attachmentmap_basetounique[var_3] ) && isdefined( level.attachmentmap_basetounique[var_3][var_0] ) )
        return level.attachmentmap_basetounique[var_3][var_0];
    else
    {
        var_8 = weapongroupmap( var_3 );

        if ( isdefined( level.attachmentmap_basetounique[var_8] ) && isdefined( level.attachmentmap_basetounique[var_8][var_0] ) )
            return level.attachmentmap_basetounique[var_8][var_0];
    }

    return var_0;
}

attachmentmap_extratovariantid( var_0, var_1, var_2 )
{
    var_3 = var_1 + "|" + var_2;

    if ( isdefined( level.weaponlootmapdata[var_3] ) && isdefined( level.weaponlootmapdata[var_3].attachextratoidmap ) && isdefined( level.weaponlootmapdata[var_3].attachextratoidmap[var_0] ) )
        return level.weaponlootmapdata[var_3].attachextratoidmap[var_0];

    return 0;
}

attachmentperkmap( var_0 )
{
    if ( isdefined( level.attachmentmap_attachtoperk[var_0] ) )
        return level.attachmentmap_attachtoperk[var_0];

    return undefined;
}

carryiteminfo( var_0 )
{
    if ( isdefined( level.carrier_remove_carriable_weapon[var_0] ) )
        return level.carrier_remove_carriable_weapon[var_0];

    return undefined;
}

carryitemomnvar( var_0 )
{
    if ( isdefined( level.carryobjects_onjuggernaut[var_0] ) )
        return level.carryobjects_onjuggernaut[var_0];

    var_1 = attachmentmap_tobase( var_0 );

    if ( isdefined( level.carry_ref[var_1] ) )
        return level.carry_ref[var_1];

    return undefined;
}

weaponassetnamemap( var_0, var_1 )
{
    if ( iskillstreakweapon( var_0 ) )
        return var_0;

    if ( isdefined( var_1 ) )
    {
        var_2 = var_0 + "|" + var_1;

        if ( isdefined( level.weaponlootmapdata[var_2] ) && isdefined( level.weaponlootmapdata[var_2].assetoverridename ) )
            return level.weaponlootmapdata[var_2].assetoverridename;
    }

    if ( isdefined( level.weaponmapdata[var_0] ) && isdefined( level.weaponmapdata[var_0].assetname ) )
        return level.weaponmapdata[var_0].assetname;

    return var_0;
}

weaponperkmap( var_0 )
{
    if ( isdefined( level.weaponmapdata[var_0] ) && isdefined( level.weaponmapdata[var_0].perk ) )
        return level.weaponmapdata[var_0].perk;

    return undefined;
}

risktokens( var_0 )
{
    var_1 = randomintrange( 0, level._id_14589[var_0].size );
    return level._id_14589[var_0][var_1];
}

weapongroupmap( var_0 )
{
    if ( isdefined( level.weaponmapdata[var_0] ) && isdefined( level.weaponmapdata[var_0].group ) )
        return level.weaponmapdata[var_0].group;

    return undefined;
}

_id_14594( var_0 )
{
    if ( isdefined( level.weaponmapdata[var_0] ) && isdefined( level.weaponmapdata[var_0]._id_11BD1 ) )
        return level.weaponmapdata[var_0]._id_11BD1;

    return undefined;
}

weaponnumbermap( var_0 )
{
    if ( isdefined( level.weaponmapdata[var_0] ) && isdefined( level.weaponmapdata[var_0].number ) )
        return level.weaponmapdata[var_0].number;

    return undefined;
}

weaponattachdefaulttoidmap( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
    {
        var_2 = var_0 + "|" + var_1;

        if ( isdefined( level.weaponlootmapdata[var_2] ) && isdefined( level.weaponlootmapdata[var_2].attachdefaulttoidmap ) )
            return level.weaponlootmapdata[var_2].attachdefaulttoidmap;
    }

    if ( isdefined( level.weaponmapdata[var_0] ) && isdefined( level.weaponmapdata[var_0].attachdefaulttoidmap ) )
        return level.weaponmapdata[var_0].attachdefaulttoidmap;

    return undefined;
}

weaponattachcustomtoidmap( var_0, var_1 )
{
    if ( isdefined( var_1 ) && var_1 >= 0 )
    {
        var_2 = var_0 + "|" + var_1;

        if ( isdefined( level.weaponlootmapdata[var_2] ) && isdefined( level.weaponlootmapdata[var_2].attachcustomtoidmap ) )
            return level.weaponlootmapdata[var_2].attachcustomtoidmap;
    }

    return undefined;
}

safedestroy( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = [];

    var_2 = 1;
    var_3 = [];

    for (;;)
    {
        var_4 = var_0 + "|" + var_2;

        if ( !isdefined( level.weaponlootmapdata[var_4] ) )
            break;

        if ( !level.weaponlootmapdata[var_4].update_focus_fire_objective && !scripts\engine\utility::array_contains( var_1, var_2 ) )
            var_3[var_3.size] = var_2;

        var_2++;
    }

    return var_3;
}

runspawnmodule_isolated( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = [];

    var_2 = 0;
    var_3 = safedestroy( var_0, var_1 );

    if ( var_3.size > 0 )
        var_2 = var_3[randomint( var_3.size )];

    return var_2;
}

weaponexistsinstatstable( var_0 )
{
    return isdefined( level.weaponmapdata[var_0] );
}

_id_1458C( var_0, var_1 )
{
    var_2 = weaponexistsinstatstable( var_0 );
    var_3 = 1;

    if ( var_2 )
    {
        if ( isdefined( isdefined( var_1 ) ) && var_1 > 0 )
        {
            var_4 = var_0 + "|" + var_1;
            var_3 = isdefined( level.weaponlootmapdata[var_4] ) && !level.weaponlootmapdata[var_4].update_focus_fire_objective;
        }
    }

    return var_2 && var_3;
}

weaponattachremoveextraattachments( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in var_0 )
    {
        var_5 = attachmentmap_tounique( var_4, var_1 );
        var_6 = attachmentmap_toextra( var_5 );

        if ( isdefined( var_6 ) )
            var_2[var_2.size] = var_6;
    }

    var_8 = [];

    foreach ( var_4 in var_0 )
    {
        var_10 = 0;

        foreach ( var_6 in var_2 )
        {
            if ( var_4 == var_6 )
            {
                var_10 = 1;
                break;
            }
        }

        if ( !var_10 )
            var_8[var_8.size] = var_4;
    }

    return var_8;
}

isattachmentsniperscopedefault( var_0, var_1 )
{
    var_2 = strtok( var_0, "_" );
    return isattachmentsniperscopedefaulttokenized( var_2, var_1 );
}

isattachmentsniperscopedefaulttokenized( var_0, var_1 )
{
    var_2 = 0;

    if ( var_0.size && isdefined( var_1 ) )
    {
        var_3 = 0;

        if ( var_0[0] == "alt" )
            var_3 = 1;

        if ( var_0.size >= 3 + var_3 && ( var_0[var_3] == "iw6" || var_0[var_3] == "iw7" ) )
        {
            if ( weaponclass( var_0[var_3] + "_" + var_0[var_3 + 1] + "_" + var_0[var_3 + 2] ) == "sniper" )
                var_2 = var_0[var_3 + 1] + "scope" == var_1;
        }
    }

    return var_2;
}

getweaponattachmentsbasenames( var_0 )
{
    if ( isstring( var_0 ) )
    {
        if ( var_0 == "none" )
            return [];
    }
    else if ( var_0.basename == "none" )
        return [];

    var_1 = getweaponattachments( var_0 );

    if ( !isdefined( var_1 ) )
        return [];

    foreach ( var_4, var_3 in var_1 )
        var_1[var_4] = attachmentmap_tobase( var_3 );

    return var_1;
}

getattachmentbasenames( var_0 )
{
    foreach ( var_3, var_2 in var_0 )
        var_0[var_3] = attachmentmap_tobase( var_2 );

    return var_0;
}

getattachmentlist( var_0, var_1, var_2, var_3 )
{
    var_4 = [];
    var_5 = tablelookupgetnumrows( "mp/attachmenttable.csv" );

    for ( var_6 = 0; var_6 < var_5; var_6++ )
    {
        var_7 = tablelookupbyrow( "mp/attachmenttable.csv", var_6, 5 );

        if ( var_7 == "" )
            continue;

        var_8 = tablelookupbyrow( "mp/attachmenttable.csv", var_6, 2 );

        if ( isdefined( var_2 ) && ( var_8 == "none" || var_8 == var_2 ) )
            continue;

        if ( isdefined( var_3 ) && var_8 != var_3 )
            continue;

        if ( var_1 )
        {
            var_9 = tablelookupbyrow( "mp/attachmenttable.csv", var_6, 4 );
            var_4[var_4.size] = var_9;
            continue;
        }

        if ( scripts\engine\utility::array_contains( var_4, var_7 ) )
            continue;

        var_4[var_4.size] = var_7;
    }

    return var_4;
}

getnonopticattachmentlistbasenames()
{
    return getattachmentlist( 5, 0, "rail", undefined );
}

getopticattachmentlistbasenames()
{
    if ( isdefined( level.opticattachmentbasenames ) )
        return level.opticattachmentbasenames;

    level.opticattachmentbasenames = getattachmentlist( 5, 0, undefined, "rail" );
    return level.opticattachmentbasenames;
}

attachmentmap_tobase( var_0 )
{
    if ( isdefined( level.attachmentmap_uniquetobase[var_0] ) )
        var_0 = level.attachmentmap_uniquetobase[var_0];

    return var_0;
}

attachmentmap_toextra( var_0 )
{
    var_1 = undefined;

    if ( isdefined( level.attachmentmap_uniquetoextra[var_0] ) )
        var_1 = level.attachmentmap_uniquetoextra[var_0];

    return var_1;
}

mapweapon( var_0, var_1, var_2 )
{
    var_3 = var_0;

    if ( !isdefined( var_0 ) )
        var_3 = isundefinedweapon();

    var_4 = 0;

    if ( var_3.basename != "none" )
    {
        if ( isdefined( var_1 ) && !isplayer( var_1 ) )
        {
            var_5 = getaltmodeweapon( var_0 );

            if ( isdefined( var_5 ) )
            {
                switch ( var_5 )
                {
                    case "glconc":
                        var_3 = getcompleteweaponname( "concussion_grenade_mp" );
                        break;
                    case "glflash":
                        var_3 = getcompleteweaponname( "flash_grenade_mp" );
                        break;
                    case "glsnap":
                        var_3 = getcompleteweaponname( "snapshot_grenade_mp" );
                        break;
                    case "glincendiary":
                        var_3 = getcompleteweaponname( "thermite_mp" );
                        break;
                }
            }
        }

        switch ( var_3.basename )
        {
            case "pop_rocket_proj_mp":
                var_3 = getcompleteweaponname( "pop_rocket_mp" );
                break;
            case "tur_gun_mp":
            case "tur_gun_faridah_mp":
                var_3 = getcompleteweaponname( "iw8_turret_50cal_mp" );
                break;
            case "tur_bradley_mp":
            case "tur_gun_lighttank_mp":
                var_3 = getcompleteweaponname( "lighttank_tur_mp" );
                break;
            case "tur_bradley_ks_mp":
            case "tur_gun_lighttank_ks_mp":
                var_3 = getcompleteweaponname( "lighttank_tur_ks_mp" );
                break;
            case "ks_remote_drone_mp":
                var_3 = isundefinedweapon();
                break;
        }
    }
    else if ( isdefined( var_1 ) )
    {
        if ( isdefined( var_1.objweapon ) )
        {
            var_3 = getcompleteweaponname( var_1.objweapon.basename );
            var_4 = 1;
        }
        else if ( isdefined( var_1.weapon_name ) )
        {
            var_3 = getcompleteweaponname( var_1.weapon_name );
            var_4 = 1;
        }
    }

    if ( var_4 && !istrue( var_2 ) )
        var_3 = mapweapon( var_3, var_1, 1 );

    return var_3;
}

attachmentsfilterforstats( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in var_0 )
    {
        if ( attachmentlogsstats( var_4, var_1 ) )
            var_2[var_2.size] = var_4;
    }

    return var_2;
}

attachmentlogsstats( var_0, var_1 )
{
    if ( attachmentiscosmetic( var_0 ) )
        return 0;

    if ( !carriedpunchcard( var_1, var_0 ) )
        return 0;

    if ( scripts\engine\utility::string_starts_with( var_0, "laststand_" ) )
        return 0;

    return 1;
}

weaponhasattachment( var_0, var_1 )
{
    var_2 = getweaponattachmentsbasenames( var_0 );

    foreach ( var_4 in var_2 )
    {
        if ( var_4 == var_1 )
            return 1;
    }

    return 0;
}

setrecoilscale( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 0;

    if ( !isdefined( self.recoilscale ) )
        self.recoilscale = var_0;
    else
        self.recoilscale = self.recoilscale + var_0;

    if ( isdefined( var_1 ) )
    {
        if ( isdefined( self.recoilscale ) && var_1 < self.recoilscale )
            var_1 = self.recoilscale;

        var_2 = 100 - var_1;
    }
    else
        var_2 = 100 - self.recoilscale;

    var_2 = int( clamp( var_2, 0, 255 ) );

    if ( var_2 == 100 )
    {
        self player_recoilscaleoff();
        return;
    }

    self player_recoilscaleon( var_2 );
}

_launchgrenade( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = self launchgrenade( var_0, var_1, var_2, var_3, var_5 );

    if ( !isdefined( var_4 ) )
        var_6.notthrown = 1;
    else
        var_6.notthrown = var_4;

    var_6 setotherent( self );
    return var_6;
}

grenadethrown( var_0 )
{
    return !isdefined( var_0.notthrown ) || !var_0.notthrown;
}

grenadeinpullback()
{
    return !nullweapon( self getheldoffhand() );
}

getgrenadeinpullback()
{
    var_0 = self getheldoffhand();

    if ( isdefined( self.gestureweapon ) && var_0 == asmdevgetallstates( self.gestureweapon ) )
        var_0 = isundefinedweapon();

    return var_0;
}

weaponignoresblastshield( var_0, var_1 )
{
    var_2 = var_0.basename;

    if ( issuperweapon( var_2 ) )
        return 1;

    if ( iskillstreakweapon( var_2 ) )
        return 1;

    switch ( var_2 )
    {
        case "gas_mp":
        case "snapshot_grenade_mp":
        case "concussion_grenade_mp":
        case "flash_grenade_mp":
        case "bomb_site_mp":
        case "iw8_sm_t9flechette_mp":
            return 1;
        default:
            return 0;
    }
}

weaponsupportslaserir( var_0 )
{
    switch ( var_0 )
    {
        case "iw8_knife_mp":
        case "iw8_me_riotshield_mpv8":
        case "iw8_me_riotshield_mpv7":
        case "iw8_me_riotshield_mpv6":
        case "iw8_me_riotshield_mpv5":
        case "iw8_me_riotshield_mpv4":
        case "iw8_me_riotshield_mpv3":
        case "iw8_me_riotshield_mpv2":
        case "iw8_me_riotshield_mp":
        case "iw8_lm_dblmg_mp":
        case "iw8_minigunksjugg_reload_mp":
        case "iw8_la_juliet_mp":
        case "iw8_fists_mp":
        case "iw8_minigunksjugg_mp":
            return 0;
    }

    if ( iskillstreakweapon( var_0 ) )
        return 0;

    var_1 = weaponclass( var_0 );
    return var_1 == "rifle" || var_1 == "mg" || var_1 == "sniper" || var_1 == "smg" || var_1 == "spread";
}

getweaponnvgattachment( var_0 )
{
    return "laserir";
}

issinglehitweapon( var_0 )
{
    var_0 = getweaponbasenamescript( var_0 );

    switch ( var_0 )
    {
        case "s4_la_palpha_mp":
        case "s4_la_mkilo1_mp":
        case "s4_la_palpha42_mp":
        case "s4_la_m1bravo_mp":
        case "iw8_la_gromeoks_mp":
        case "iw8_la_juliet_mp":
        case "iw8_la_rpapa7_mp":
        case "iw8_la_kgolf_mp":
        case "iw8_la_gromeo_mp":
        case "iw8_la_mike32_mp":
        case "iw8_la_t9launcher_mp":
        case "iw8_la_t9freefire_mp":
        case "iw8_la_t9standard_mp":
            return 1;
        default:
            return 0;
    }
}

attachmentiscosmetic( var_0 )
{
    return isdefined( var_0 ) && scripts\engine\utility::string_starts_with( var_0, "cos_" );
}

carriedpunchcard( var_0, var_1 )
{
    var_2 = getweaponrootname( var_0 );
    return carrier_cleanup( var_2, var_1 );
}

carrier_cleanup( var_0, var_1 )
{
    var_2 = level.weaponattachments[var_0];
    return isdefined( var_2 ) && isdefined( var_2[var_1] );
}

_id_12BBB( var_0 )
{
    switch ( var_0 )
    {
        case "laserads":
        case "laserbalanced":
        case "laserrange":
            var_0 = "laser";
            break;
        case "barsil2":
        case "barsil":
        case "silencer4":
        case "silencer3":
        case "silencer2":
            var_0 = "silencer";
            break;
        case "barcustnoguard":
        case "barcust2":
        case "barcust":
        case "barlong":
        case "barmid":
        case "barshortnoguard":
        case "barshort":
            var_0 = "barlong";
            break;
    }

    return var_0;
}

_id_14584( var_0 )
{
    var_1 = "none";
    var_2 = -1;
    var_3 = getweaponrootname( var_0 );

    if ( isdefined( var_0 ) && !nullweapon( var_0 ) )
    {
        var_1 = weaponclass( var_0 );

        switch ( var_1 )
        {
            case "pistol":
                var_2 = 1;
                break;
            case "sniper":
                if ( getweapongroup( var_0 ) == "weapon_dmr" )
                {
                    if ( var_3 == "iw8_sn_kilo98" || var_3 == "iw8_sn_romeo700" || var_3 == "iw8_sn_t9crossbow" || var_3 == "iw8_sn_crossbow" )
                        var_2 = 2;
                    else
                        var_2 = 4;
                }
                else if ( var_3 == "iw8_sn_t9accurate" || var_3 == "s4_mr_kalpha98" || var_3 == "iw8_sn_delta" || var_3 == "iw8_sn_t9quickscope" || var_3 == "iw8_sn_t9standard" || var_3 == "s4_mr_aromeo99" )
                    var_2 = 6;
                else if ( var_3 == "iw8_sn_xmike109" || var_3 == "iw8_sn_t9powersemi" || var_3 == "s4_mr_ptango41" )
                    var_2 = 3;
                else
                    var_2 = 5;

                break;
            default:
                var_2 = 0;
        }
    }

    return var_2;
}

isbombsiteweapon( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    switch ( var_1 )
    {
        case "bomb_site_mp":
        case "briefcase_bomb_mp":
            return 1;
    }

    return 0;
}

iskillstreakweapon( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    if ( isdefined( level.killstreakweaponmap ) && isdefined( level.killstreakweaponmap[var_1] ) )
        return 1;

    return 0;
}

unsetreduceregendelayonkills( var_0 )
{
    return isdefined( var_0 ) && isdefined( var_0.vehiclename ) && isdefined( var_0.streakinfo );
}

weaponbypassspawnprotection( var_0 )
{
    var_1 = 1;
    var_2 = undefined;

    if ( issameweapon( var_0 ) )
        var_2 = var_0.basename;
    else
        var_2 = var_0;

    if ( iskillstreakweapon( var_0 ) && var_2 != "manual_turret_mp" && var_2 != "pac_sentry_turret_mp" && !update_health_on_spawn( var_2 ) )
        var_1 = 0;

    return var_1;
}

isvehicleweapon( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    switch ( var_1 )
    {
        case "carpoc_rocket_proj_mp":
        case "tur_gun_carpoc_mp_rocket":
        case "tur_gun_carpoc_mp":
        case "big_bird_mp":
        case "tur_gun_carpoc_mp_pass":
        case "open_jeep_carpoc_mp":
        case "open_jeep_mp":
        case "motorcycle_mp":
        case "little_bird_mg_mp":
        case "van_mp":
        case "med_transport_mp":
        case "jeep_mp":
        case "pickup_truck_mp":
        case "large_transport_mp":
        case "tac_rover_mp":
        case "cargo_truck_mg_mp":
        case "technical_mp":
        case "hoopty_truck_mp":
        case "hoopty_mp":
        case "cop_car_mp":
        case "apc_rus_mp":
        case "cargo_truck_mp":
        case "atv_mp":
        case "lighttank_mp":
        case "tur_gun_fd_mp_seeking":
        case "tur_gun_bt_mp_bomb":
        case "tur_gun_bt_mp":
        case "tur_apc_rus_mp":
        case "little_bird_mp":
        case "tur_gun_little_bird_left_mp":
        case "tur_gun_little_bird_right_mp":
        case "tur_gun_payload_truck_mp":
        case "tur_gun_cargo_truck_mp":
        case "bradley_tow_proj_mp":
        case "lighttank_tur_mp":
            return 1;
        default:
            return 0;
    }
}

isgesture( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    if ( issubstr( var_1, "ges_plyr" ) )
        return 1;
    else if ( issubstr( var_1, "devilhorns_mp" ) )
        return 1;
    else
        return 0;
}

getweaponfullname( var_0 )
{
    if ( isstring( var_0 ) )
        return var_0;
    else
        return createheadicon( var_0 );
}

playdeatomizefx( var_0, var_1 )
{
    var_2[0][0]["org"] = self gettagorigin( "j_spineupper" );
    var_2[0][0]["angles"] = self gettagangles( "j_spineupper" );
    var_2[0][1]["org"] = self gettagorigin( "j_spinelower" );
    var_2[0][1]["angles"] = self gettagangles( "j_spinelower" );
    var_2[0][2]["org"] = self gettagorigin( "j_head" );
    var_2[0][2]["angles"] = self gettagangles( "j_head" );
    var_2[1][0]["org"] = self gettagorigin( "j_knee_ri" );
    var_2[1][0]["angles"] = self gettagangles( "j_knee_ri" );
    var_2[1][1]["org"] = self gettagorigin( "j_knee_le" );
    var_2[1][1]["angles"] = self gettagangles( "j_knee_le" );
    var_2[1][2]["org"] = self gettagorigin( "j_elbow_ri" );
    var_2[1][2]["angles"] = self gettagangles( "j_elbow_ri" );
    var_2[1][3]["org"] = self gettagorigin( "j_elbow_le" );
    var_2[1][3]["angles"] = self gettagangles( "j_elbow_le" );
    var_2[2][0]["org"] = self gettagorigin( "j_ankle_le" );
    var_2[2][0]["angles"] = self gettagangles( "j_ankle_le" );
    var_2[2][1]["org"] = self gettagorigin( "j_ankle_ri" );
    var_2[2][1]["angles"] = self gettagangles( "j_ankle_ri" );
    var_2[2][2]["org"] = self gettagorigin( "j_wrist_le" );
    var_2[2][2]["angles"] = self gettagangles( "j_wrist_le" );
    var_2[2][3]["org"] = self gettagorigin( "j_wrist_ri" );
    var_2[2][3]["angles"] = self gettagangles( "j_wrist_ri" );
    var_3 = "bullet_atomizer_impact_npc";
    var_4 = ( 0, 0, 0 );

    if ( isdefined( var_1 ) )
        var_4 = var_1;

    if ( isdefined( var_0 ) )
        var_3 = var_0;

    self playsound( var_3 );

    foreach ( var_6 in var_2 )
    {
        foreach ( var_8 in var_6 )
            playfx( level._effect["atomize_body"], var_8["org"] + var_4, anglestoforward( var_8["angles"] ) );

        wait 0.01;
    }
}

isprimaryweapon( var_0 )
{
    if ( nullweapon( var_0 ) )
        return 0;

    if ( var_0.inventorytype != "primary" && var_0.inventorytype != "altmode" )
        return 0;

    switch ( var_0.classname )
    {
        case "smg":
        case "pistol":
        case "sniper":
        case "spread":
        case "mg":
        case "rifle":
        case "rocketlauncher":
            return 1;
        default:
            return 0;
    }
}

update_health_bar_to_player( var_0 )
{
    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    return var_1 == "iw8_knifestab_mp" || var_1 == "iw8_knifestab_mp" || var_1 == "iw8_throwingknife_fire_melee_mp" || var_1 == "iw8_throwingknife_electric_melee_mp" || var_1 == "iw8_throwingknife_drill_melee_mp";
}

isknifeonly( var_0 )
{
    return getweaponrootname( var_0 ) == "iw8_knife";
}

ismeleeonly( var_0 )
{
    if ( isstring( var_0 ) )
    {

    }

    return var_0.ismelee;
}

isfistsonly( var_0 )
{
    return getweaponrootname( var_0 ) == "iw8_fists";
}

isballweapon( var_0 )
{
    return var_0.basename == "iw8_cyberemp_mp" || var_0.basename == "iw7_tdefball_mp";
}

isaxeweapon( var_0 )
{
    var_1 = getweaponrootname( var_0 );
    return var_1 == "iw7_axe" || var_1 == "s4_me_icepick" || var_1 == "s4_me_axe";
}

validatefuelstability( var_0, var_1 )
{
    return isaxeweapon( var_0 ) && isdefined( var_1.classname ) && var_1.classname == "grenade";
}

turret_aimed_at_last_known( var_0 )
{
    return getweaponrootname( var_0 ) == "iw8_me_akimboblunt" || getweaponrootname( var_0 ) == "iw8_me_akimboblades";
}

isthrowingknife( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
    {
        if ( nullweapon( var_0 ) )
            return 0;

        var_1 = var_0.basename;
    }
    else
    {
        if ( var_0 == "none" )
            return 0;

        var_1 = var_0;
    }

    return issubstr( var_1, "throwingknife" );
}

isspecialmeleeweapon( var_0 )
{
    if ( update_health_bar_to_player( var_0 ) )
        return 1;

    var_1 = undefined;

    if ( issameweapon( var_0 ) )
    {
        if ( nullweapon( var_0 ) )
            return 0;

        var_1 = var_0.basename;
    }
    else
    {
        if ( var_0 == "none" )
            return 0;

        var_1 = var_0;
    }

    return var_1 == "iw8_fists_mp_ls";
}

unset_relic_mythic( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
    {
        if ( nullweapon( var_0 ) )
            return 0;

        var_1 = var_0.basename;
    }
    else
    {
        if ( var_0 == "none" )
            return 0;

        var_1 = var_0;
    }

    return var_1 == "iw8_gunless" || var_1 == "iw8_gunless_infil" || var_1 == "iw8_gunless_last_stand_enter";
}

update_health_on_spawn( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
    {
        if ( nullweapon( var_0 ) )
            return 0;

        var_1 = var_0.basename;
    }
    else
    {
        if ( var_0 == "none" )
            return 0;

        var_1 = var_0;
    }

    return var_1 == "iw8_minigunksjugg_mp" || var_1 == "iw8_minigunksjugg_reload_mp" || var_1 == "iw8_lm_dblmg_mp";
}

unset_jugg_ignoreall_after_notify( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = undefined;

    if ( issameweapon( var_0 ) )
    {
        if ( nullweapon( var_0 ) )
            return 0;

        var_1 = var_0.basename;
    }
    else
    {
        if ( var_0 == "none" )
            return 0;

        var_1 = var_0;
    }

    return var_1 == "iw8_sn_t9explosivebow_mp";
}

infiniteammothread( var_0, var_1 )
{
    self endon( "death_or_disconnect" );
    self endon( "stop_infinite_ammo_thread" );

    if ( !isdefined( var_0 ) )
        var_0 = level.framedurationseconds;

    for (;;)
    {
        if ( !isdefined( var_1 ) )
            var_1 = self.equippedweapons;

        foreach ( var_3 in var_1 )
        {
            self givemaxammo( var_3 );
            self setweaponammoclip( var_3, weaponclipsize( var_3 ) );
        }

        wait( var_0 );
    }
}

stopinfiniteammothread()
{
    self notify( "stop_infinite_ammo_thread" );
}

russianletter( var_0 )
{
    if ( isdefined( level.br_pickups ) && isdefined( level.br_pickups.br_weapontoscriptable ) && isdefined( level.br_pickups.delay_hide_player_clip ) )
    {
        var_1 = createheadicon( var_0 );
        var_2 = level.br_pickups.br_weapontoscriptable[var_1];

        if ( isdefined( var_2 ) )
            return level.br_pickups.delay_hide_player_clip[var_2];
    }

    var_3 = scripts\mp\loot::getlootinfoforweapon( var_0.basename, var_0.variantid );

    if ( isdefined( var_3 ) )
        return var_3.quality;

    return undefined;
}

safe_to_authenticate( var_0 )
{
    if ( isdefined( level.br_pickups ) && isdefined( level.br_pickups.br_weapontoscriptable ) && isdefined( level.br_pickups.delay_hide_player_clip ) )
    {
        var_1 = createheadicon( var_0 );
        var_2 = level.br_pickups.br_weapontoscriptable[var_1];

        if ( isdefined( var_2 ) )
            return level.br_pickups.delay_hide_player_clip[var_2];
    }

    return undefined;
}

unset_relic_damage_from_above( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = getweaponbasename( var_0 );
    else
        var_1 = var_0;

    switch ( var_1 )
    {
        case "manual_turret_flak_vehicle":
        case "manual_turret_flak_mp":
        case "manual_turret_flak_mp_highrof":
            return 1;
        default:
            return 0;
    }
}
