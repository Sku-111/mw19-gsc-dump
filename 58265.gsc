// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    scripts\mp\killstreaks\killstreaks::registerkillstreak( "greenbay_strike", ::_id_13E2A, ::ongreenbaystrikekillstreakavailable );
    scripts\common\ui::lui_registercallback( "ui_mv_on_new_killstreak_selected", ::_id_1266A );
    super_enemy_spawning();
    super_has_targets();
    scripts\common\utility::allow_register_set( "greenbay_strike_restrictions", [ "usability", "weapon_switch", "weapon_pickup", "sprint", "mantle", "fire", "ads", "melee", "execution_attack", "execution_victim", "vehicle_use", "crate_use", "ascender_use" ] );
}

super_enemy_spawning()
{
    level.sentry_shouldshoot = spawnstruct();
    level.sentry_shouldshoot.inuse = 0;
    level.sentry_shouldshoot.stab_blink_black_fade = 0;
    level.sentry_shouldshoot.triggers = [];
    level.sentry_shouldshoot._id_13DC5 = 0;
    level.sentry_shouldshoot.playersintrigger = [];
    level.sentry_shouldshoot.strikeradius = getdvarint( "scr_br_mxp_g_width", 2000 );
    level.sentry_shouldshoot.limitzdelta = getdvarint( "scr_br_mxp_g_limit_z_delta", 1 );
    level.sentry_shouldshoot.maxzdelta = getdvarfloat( "scr_br_mxp_g_max_z_delta", 100 );
    level.sentry_shouldshoot.mindistray = getdvarfloat( "scr_br_mxp_g_min_dist_attack", 2500 );
    level.sentry_shouldshoot.mindistattack = level.sentry_shouldshoot.mindistray + getdvarint( "scr_br_mxp_g_length", 8000 ) / 2;
    level.vehicle_shoulddocollisiondamagetoplayer = spawnstruct();
    level.vehicle_shoulddocollisiondamagetoplayer.inuse = 0;
    level.vehicle_shoulddocollisiondamagetoplayer.strikeradius = getdvarint( "scr_br_mxp_k_radius", 4000 );
    level.vehicle_shoulddocollisiondamagetoplayer.midrange = getdvarint( "scr_br_mxp_k_mid_range", 10000 );
    level.vehicle_shoulddocollisiondamagetoplayer.longrange = getdvarint( "scr_br_mxp_k_long_range", 30000 );
    level.vehicle_shoulddocollisiondamagetoplayer.longerrange = getdvarint( "scr_br_mxp_k_longer_range", 50000 );
    level.vehicle_shoulddocollisiondamagetoplayer.rock_gravity_mid_range = getdvarint( "scr_br_mxp_k_rock_gravity_mid_range", 12000 );
    level.vehicle_shoulddocollisiondamagetoplayer.rock_gravity_long_range = getdvarint( "scr_br_mxp_k_rock_gravity_long_range", 9000 );
    level.vehicle_shoulddocollisiondamagetoplayer.rock_gravity_longer_range = getdvarint( "scr_br_mxp_k_rock_gravity_longer_range", 5000 );
    level.vehicle_shoulddocollisiondamagetoplayer.rock_gravity_longest_range = getdvarint( "scr_br_mxp_k_rock_gravity_longest_range", 2500 );
    level.vehicle_shoulddocollisiondamagetoplayer.rock_speed_mid_range = getdvarint( "scr_br_mxp_k_rock_speed_mid_range", 6000 );
    level.vehicle_shoulddocollisiondamagetoplayer.rock_speed_long_range = getdvarint( "scr_br_mxp_k_rock_speed_long_range", 6000 );
    level.vehicle_shoulddocollisiondamagetoplayer.rock_speed_longer_range = getdvarint( "scr_br_mxp_k_rock_speed_longer_range", 7000 );
    level.vehicle_shoulddocollisiondamagetoplayer.rock_speed_longest_range = getdvarint( "scr_br_mxp_k_rock_speed_longest_range", 9000 );
}

super_has_targets()
{
    level._effect["greenbay_impact"] = loadfx( "vfx/iw8_br/island/gameplay/mendota/vfx_br3_gbay_heatray_impact" );
    level._effect["greenbay_impact_linger"] = loadfx( "vfx/iw8_br/island/gameplay/mendota/vfx_br3_gbay_heatray_impact_linger" );
    level._effect["greenbay_impact_player"] = loadfx( "vfx/iw8_br/island/gameplay/mendota/vfx_br3_gbay_heatray_impact_player" );
}

_id_13E2A( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( isdefined( level.killstreaktriggeredfunc ) )
    {
        if ( !level [[ level.killstreaktriggeredfunc ]]( var_0 ) )
            return 0;
    }

    var_1 = getcompleteweaponname( "ks_remote_oshkosh_mp" );
    var_2 = scripts\cp_mp\killstreaks\killstreakdeploy::streakdeploy_doweaponswitchdeploy( var_0, var_1, 1, ::_id_14587, undefined, ::playerswitchweaponback );

    if ( !istrue( var_2 ) )
        return 0;

    var_3 = undefined;

    if ( !isdefined( var_0._id_13A81 ) )
    {
        if ( getdvarint( "scr_br_mxp_greenbaystrike_movement_disable", 1 ) )
            scripts\common\utility::allow_movement( 0 );

        var_3 = _id_14582( var_0, var_1, undefined );

        if ( getdvarint( "scr_br_mxp_greenbaystrike_movement_disable", 1 ) )
            scripts\common\utility::allow_movement( 1 );

        if ( !isdefined( var_3 ) || !istrue( var_3.success ) )
        {
            var_0 notify( "killstreak_finished_with_deploy_weapon" );
            return 0;
        }
    }

    if ( isdefined( level.killstreakbeginusefunc ) )
    {
        if ( !level [[ level.killstreakbeginusefunc ]]( var_0 ) )
            return 0;
    }

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "logKillstreakEvent" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "logKillstreakEvent" ) ]]( var_0.streakname, self.origin );

    thread _id_1384D( var_3, var_0 );

    if ( isdefined( level.killstreakfinishusefunc ) )
        level thread [[ level.killstreakfinishusefunc ]]( var_0 );

    return 1;
}

ongreenbaystrikekillstreakavailable( var_0 )
{
    if ( scripts\engine\utility::cointoss() )
        level thread scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "scream_device_acquired", self );
    else
        level thread scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "scream_device_acquired_desc", self );
}

playerswitchweaponback( var_0, var_1, var_2 )
{
    self endon( "disconnect" );
    self endon( "death" );

    if ( istrue( var_0.failed ) || !isdefined( var_0._id_13923 ) )
        scripts\cp_mp\utility\inventory_utility::getridofweapon( var_2 );
    else
    {
        var_3 = "ks_remote_oshkosh_greenbay_mp";

        if ( var_0._id_13923 == 1 )
            var_3 = "ks_remote_oshkosh_kenosha_mp";

        var_4 = getcompleteweaponname( var_3 );
        self giveweapon( var_4, 0, 0, -1, 1 );
        self switchtoweaponimmediate( var_4 );
        scripts\common\utility::allow_set( "greenbay_strike_restrictions", 0, "greenbay_toggle_anim" );
        var_5 = 4.3;
        wait( var_5 );
        scripts\cp_mp\utility\inventory_utility::getridofweapon( var_2 );
        scripts\common\utility::allow_set( "greenbay_strike_restrictions", 1, "greenbay_toggle_anim" );
        scripts\cp_mp\utility\inventory_utility::getridofweapon( var_4, 1 );
    }

    var_6 = self getcurrentweapon();

    if ( var_6.basename == "none" )
        scripts\cp_mp\utility\inventory_utility::forcevalidweapon();
}

serverroomdogtagrevive( var_0, var_1, var_2 )
{
    strikeatlocation( var_0, var_1, var_2, 2 );
}

greenbaystrikeatpoint( var_0, var_1, var_2 )
{
    strikeatlocation( var_0, var_1, var_2, 3 );
}

vehicle_spawn_cp_gamemodesupportsabandonedtimeout( var_0, var_1, var_2 )
{
    strikeatlocation( var_0, var_1, var_2, 1 );
}

strikeatlocation( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_4.origin = var_0;
    var_4.angles = var_1;
    var_4.pers = [];
    var_4.team = "neutral";
    var_4.defaultoperatorteam = "neutral";
    var_4.classname = "worldspawn";
    var_5 = var_4 scripts\cp_mp\utility\killstreak_utility::createstreakinfo( "greenbay_strike", var_4 );
    var_5.owner = var_4;
    var_5._id_13923 = var_3;
    var_5.radius = var_2;
    var_6 = spawnstruct();
    var_6.location = var_0;
    var_6.angles = var_1;
    var_6.string = "confirm_location";
    var_4 thread _id_1384D( var_6, var_5 );
}

_id_14587( var_0 )
{
    if ( scripts\mp\gametypes\br_publicevent_fresno.gsc::isfresnoactive() )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "BR_MENDOTA/FRENZY_UNAVAILABLE" );

        var_0 notify( "killstreak_finished_with_deploy_weapon" );
        return 0;
    }

    if ( sequence_interaction_activate() && vehicle_showvalidlittlebirds() )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "BR_MENDOTA/TOMAH_UNAVAILABLE" );

        var_0 notify( "killstreak_finished_with_deploy_weapon" );
        return 0;
    }

    server_triggered( var_0 );
    return 1;
}

_id_14582( var_0, var_1, var_2 )
{
    var_3 = 2.1;
    var_4 = scripts\engine\utility::waittill_any_ents_or_timeout_return( var_3, level, "fresno_start" );

    if ( !isdefined( var_4 ) )
    {
        var_0.failed = 1;
        return undefined;
    }
    else if ( var_4 == "fresno_start" )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "BR_MENDOTA/FRENZY_UNAVAILABLE" );

        var_0.failed = 1;
        return undefined;
    }

    var_5 = seq3_warning_room_c( var_0 );
    var_6 = 1;

    if ( isdefined( var_0._id_13923 ) )
        var_6 = var_0._id_13923;
    else if ( isdefined( self._id_1300B ) && self._id_1300B != 0 )
        var_6 = self._id_1300B;

    var_0._id_13923 = var_6;

    if ( var_0._id_13923 == 2 && sequence_interaction_activate() )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "BR_MENDOTA/GREENBAY_UNAVAILABLE" );

        var_0 notify( "killstreak_finished_with_deploy_weapon" );
        var_0.failed = 1;
        return undefined;
    }
    else if ( var_0._id_13923 == 1 && vehicle_showvalidlittlebirds() )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "BR_MENDOTA/KENOSHA_UNAVAILABLE" );

        var_0 notify( "killstreak_finished_with_deploy_weapon" );
        var_0.failed = 1;
        return undefined;
    }

    if ( !isdefined( var_5 ) || !istrue( var_5.success ) )
    {
        if ( isdefined( var_5 ) && !istrue( var_5.success ) && scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
        {
            if ( var_5.string == "oob" )
                [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "KILLSTREAKS/INVALID_POINT" );
            else if ( var_5.string == "fresno_start" )
                [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "BR_MENDOTA/FRENZY_UNAVAILABLE" );
        }

        var_0.failed = 1;
        return undefined;
    }

    if ( scripts\cp_mp\emp_debuff::is_empd() )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
            self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "KILLSTREAKS/CANNOT_BE_USED" );

        var_0.failed = 1;
        return undefined;
    }

    var_7 = undefined;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "sound", "playKillstreakDeployDialog" ) )
    {
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "sound", "playKillstreakDeployDialog" ) ]]( self, var_0.streakname );
        var_7 = 2.0;
    }

    return var_5;
}

seq3_warning_room_c( var_0, var_1, var_2 )
{
    scripts\common\utility::allow_weapon_switch( 0 );
    self setsoundsubmix( "mp_killstreak_overlay" );
    var_3 = _id_125C2();

    if ( !isdefined( var_3 ) || !istrue( var_3.success ) )
    {
        scripts\common\utility::allow_weapon_switch( 1 );
        self clearsoundsubmix( "mp_killstreak_overlay" );
        return var_3;
    }

    scripts\common\utility::allow_weapon_switch( 1 );
    self clearsoundsubmix( "mp_killstreak_overlay" );
    return var_3;
}

playerwaittillmapselectcomplete()
{
    level endon( "fresno_start" );
    var_0 = scripts\mp\killstreaks\mapselect::waittill_confirm_or_cancel( "confirm_location", "cancel_location", "last_stand_start" );
    return var_0;
}

_id_125C2()
{
    self setclientomnvar( "ui_br_show_tac_map", 1 );
    self beginlocationselection( 0, 0, 0, 0, 4 );
    thread playerlocselectendgamecleanup();
    var_0 = playerwaittillmapselectcomplete();
    self notify( "greenbay_strike_selection_done" );

    if ( !isdefined( var_0 ) )
    {
        var_0 = spawnstruct();
        var_0.string = "fresno_start";
    }

    var_0.success = 0;
    self endlocationselection();

    if ( isdefined( var_0 ) && var_0.string == "confirm_location" )
    {
        if ( scripts\mp\gametypes\br_circle.gsc::vandalize_minigun_speed( var_0.location, 1 ) )
        {
            var_1 = scripts\mp\gametypes\br.gsc::_id_13C34( var_0.location );
            var_2 = var_1["position"];

            if ( scripts\mp\gametypes\br_circle.gsc::vandalize_minigun_speed( var_2, 1 ) )
                var_0.success = 1;
            else
                var_0.string = "oob";
        }
        else
            var_0.string = "oob";
    }

    self setclientomnvar( "ui_br_show_tac_map", 0 );
    return var_0;
}

playerlocselectendgamecleanup()
{
    var_0 = self;
    var_0 endon( "death" );
    var_0 endon( "disconnect" );
    var_0 endon( "greenbay_strike_selection_done" );
    level waittill( "game_ended" );
    var_0 endlocationselection();
    var_0 setclientomnvar( "ui_br_show_tac_map", 0 );
}

server_triggered( var_0 )
{
    scripts\mp\killstreaks\mapselect::startmapselectsequence( 0, 0, 0 );
}

_id_1384D( var_0, var_1 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    var_2 = 1;

    if ( isdefined( var_1._id_13923 ) )
        var_2 = var_1._id_13923;

    var_1.player = self;
    var_1.starttime = gettime();

    if ( var_2 == 2 )
        thread seq3_tvnums_str( var_0, var_1 );
    else if ( var_2 == 3 )
        thread greenbaystrike_attackray( var_0, var_1 );
    else
        thread vehicle_showteamtanks( var_0, var_1 );

    if ( isplayer( self ) )
        self.laststriketype = var_2;

    var_1 notify( "killstreak_finished_with_deploy_weapon" );
    scripts\cp\vehicles\vehicle_compass_cp::_id_12004( "mv_event_intel_2" );
    thread server_unlocked( var_1 );
}

seq3_tvnums_str( var_0, var_1 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    self notify( "drone_target_placed" );
    greenbaystrike_cleanupinterruptedstreak();

    if ( isplayer( self ) )
        sequence_progression( 1 );

    var_1._id_134E3 = scripts\mp\gametypes\br_alt_mode_mxp.gsc::sandbox_combat_area();
    greenbaystrike_setuptarget( var_0, var_1 );
    var_2 = var_0.location;
    greenbaystrike_createmarker( var_2 );
    greenbaystrike_preparestreakinfo( var_1, var_0 );
    greenbaystrike_debugprint( var_1 );
    var_3 = var_2 - var_1._id_134E3;
    var_3 = vectornormalize( ( var_3[0], var_3[1], 0 ) );
    var_4 = -1 * var_3;
    var_5 = getdvarint( "scr_br_mxp_g_length", 8000 );
    var_1.startorigin = var_2 + var_4 * var_5 / 2;
    var_1.endorigin = var_2 + var_3 * var_5 / 2;
    var_1.dir = vectornormalize( var_1.endorigin - var_1.startorigin );
    var_6 = scripts\mp\gametypes\br_public.gsc::semtex_used();
    var_1.startgroundorigin = skytracetoworld( var_1.startorigin, var_6 );
    var_1.previewcircle = makepreviewimpactcircle( var_1.startorigin, var_1.origin, var_1.endorigin, var_3, var_1.change_keypad_display_digit, var_5 );
    var_1.start_area_fx_end = seq3_warning_room_a( var_1.startorigin );

    if ( isplayer( self ) )
    {
        var_1.start_area_fx_end setscriptabledamageowner( self );
        thread scripts\mp\hud_message::showsplash( "br_gametype_mendota_greenbay_streak" );
    }

    scripts\mp\gametypes\br_alt_mode_mxp.gsc::set_number_of_subway_cars_on_track( var_1 );
}

greenbaystrike_attackray( var_0, var_1 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    self notify( "drone_target_placed" );
    greenbaystrike_cleanupinterruptedstreak();
    var_1._id_134E3 = scripts\mp\gametypes\br_alt_mode_mxp.gsc::sandbox_combat_area();
    greenbaystrike_attackray_getend( var_0, var_1 );
    var_2 = greenbaystrike_setuptarget( var_0, var_1 );

    if ( var_2 )
        greenbaystrike_attackray_getend( var_0, var_1 );

    var_3 = var_0.location;
    greenbaystrike_createmarker( var_3 );
    greenbaystrike_preparestreakinfo( var_1, var_0 );
    greenbaystrike_debugprint( var_1 );
    var_1.start_area_fx_end = seq3_warning_room_a( var_1.startorigin );
    scripts\mp\gametypes\br_alt_mode_mxp.gsc::set_number_of_subway_cars_on_track( var_1 );
}

greenbaystrike_attackray_getend( var_0, var_1 )
{
    var_2 = vectornormalize( var_0.location - var_1._id_134E3 );
    var_3 = getdvarint( "scr_br_mxp_g_length_ray", 200000 );
    var_4 = var_1._id_134E3;
    var_5 = var_1._id_134E3 + var_2 * var_3;
    var_6 = scripts\engine\trace::ray_trace( var_4, var_5, undefined, scripts\engine\trace::create_world_contents() );
    greenbaystrike_updateinforay( var_0, var_1, var_6, var_2 );
}

greenbaystrike_updateinforay( var_0, var_1, var_2, var_3 )
{
    var_4 = var_2["position"];
    var_0.location = var_4;
    var_1.startorigin = var_4;
    var_1.endorigin = var_4;
    var_1.dir = var_3;

    if ( var_2["hittype"] != "hittype_none" )
    {
        var_1.startgroundorigin = var_4;
        var_1.startgroundnormal = var_2["normal"];
    }
    else
    {
        var_1.startgroundorigin = undefined;
        var_1.startgroundnormal = undefined;
    }
}

greenbaystrike_cleanupinterruptedstreak()
{
    if ( !isdefined( level._id_11E18.setincomingremovedcallback.vo_one_remain ) )
        return;

    var_0 = level._id_11E18.setincomingremovedcallback.vo_one_remain;
    level._id_11E18.setincomingremovedcallback.vo_one_remain = undefined;
    greenbaystrike_cleanuppreviewentities( var_0 );
}

greenbaystrike_setuptarget( var_0, var_1 )
{
    var_2 = var_0.location;
    var_3 = level._id_11E18.setincomingremovedcallback.origin;

    if ( scripts\mp\gametypes\br_alt_mode_mxp.gsc::ginwalkingstate() )
        [var_5, var_3] = scripts\mp\gametypes\br_alt_mode_mxp.gsc::ggetnextindexorigin();

    var_6 = distance2d( var_2, var_3 );
    var_7 = level.sentry_shouldshoot.mindistattack;

    if ( var_1._id_13923 == 3 )
        var_7 = level.sentry_shouldshoot.mindistray;

    if ( var_6 <= var_7 )
    {
        var_8 = scripts\mp\gametypes\br_alt_mode_mxp.gsc::sandbox_combat_area( var_3 );
        var_9 = var_2 - var_8;
        var_9 = vectornormalize( ( var_9[0], var_9[1], 0 ) );
        var_10 = var_8 + var_9 * var_7;
        var_1._id_134E3 = var_8;
        var_0.location = ( var_10[0], var_10[1], var_2[2] );

        if ( var_1._id_13923 == 3 && isdefined( var_1.startgroundnormal ) )
        {
            var_11 = scripts\mp\gametypes\br_public.gsc::semtex_used();
            var_0.location = skytracetoworld( var_0.location, var_11 );
        }

        return 1;
    }

    return 0;
}

greenbaystrike_createmarker( var_0 )
{
    if ( getdvarint( "scr_br_mxp_ks_marker", 0 ) != 1 )
        return;

    var_1 = undefined;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "requestObjectiveID" ) )
        var_1 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "requestObjectiveID" ) ]]( 99 );

    if ( !isdefined( var_1 ) )
        return;

    server_activate( var_1, "ui_mp_br_hud_icon_greenbay", self, var_0 + ( 0, 0, 50 ) );
    level thread greenbaystrike_handlemarker( var_1 );
}

greenbaystrike_preparestreakinfo( var_0, var_1 )
{
    var_0.shots_fired++;
    var_0.origin = var_1.location;

    if ( isdefined( var_0.radius ) )
        var_0.change_keypad_display_digit = var_0.radius;
    else
        var_0.change_keypad_display_digit = level.sentry_shouldshoot.strikeradius;
}

greenbaystrike_debugprint( var_0 )
{
    var_1 = "greenbay attack: " + var_0._id_134E3[0] + " " + var_0._id_134E3[1] + " " + var_0._id_134E3[2] + " " + var_0.origin[0] + " " + var_0.origin[1] + " " + var_0.origin[2];
    logprint( var_1 );
}

seq3_warning_room_a( var_0 )
{
    var_1 = spawn( "script_model", var_0 );
    var_1 setmodel( "ks_greenbay_impact" );
    var_1 unmarkkeyframedmover( 1 );
    return var_1;
}

server_structs( var_0 )
{
    level endon( "game_ended" );
    sequence_progression( 0 );
    scripts\mp\gametypes\br_alt_mode_mxp.gsc::gendkillstreak();
    var_0.circleent = _id_11A9F( var_0.startorigin, var_0.change_keypad_display_digit, 0, 2 );
    var_1 = greenbaystrike_getattacktime( var_0 );
    var_0.start_area_fx_end setscriptablepartstate( "root", "enabled" );
    var_0.start_area_fx_end setscriptablepartstate( "rumble", "on" );
    var_0.circleent moveto( ( var_0.endorigin[0], var_0.endorigin[1], var_0.change_keypad_display_digit ), var_1, 0.1, 0.1 );
    var_2 = var_0.owner;

    if ( !isplayer( var_2 ) )
        var_2 = level._id_11E18.setincomingremovedcallback;
    else
        level thread scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "g_attack_used", var_2 );

    var_3 = greenbaystrike_continueattack( var_0, var_1, var_2 );
    var_0.start_area_fx_end setscriptablepartstate( "damage", "stop" );
    var_0.start_area_fx_end setscriptablepartstate( "root", "disabled" );
    greenbaystrike_cleanuppreviewentities( var_0, 1 );
    thread kiosk_spent_total( var_0.circleent, 1 );

    if ( isdefined( var_2 ) && isplayer( var_2 ) )
    {
        var_2 notify( "greenbay_strike_finished" );
        var_2 scripts\cp_mp\utility\killstreak_utility::_id_12AA7( var_0 );
    }

    return var_3;
}

greenbaystrike_getdamagestate( var_0 )
{
    if ( var_0.change_keypad_display_digit == level.sentry_shouldshoot.strikeradius )
        return "start_large";
    else
        return "start_small";
}

greenbaystrike_continueattack( var_0, var_1, var_2 )
{
    level._id_11E18.setincomingremovedcallback endon( "gk_driven_off" );
    var_3 = greenbaystrike_getdamagestate( var_0 );
    var_4 = 256;
    var_5 = 128;
    var_6 = 30;

    if ( isdefined( var_0._id_13923 ) && var_0._id_13923 == 3 )
        var_0 thread greenbayburn_spawnrayburn( var_4, var_0.startgroundorigin, var_0.startgroundnormal, var_5, var_2, var_6 );

    var_7 = gettime() + var_1 * 1000;

    while ( gettime() < var_7 )
    {
        [var_9, var_10] = getnextgreenbayaimdamagepos( var_0 );
        scripts\mp\gametypes\br_alt_mode_mxp.gsc::set_maze_ai_state( var_10 );
        var_0.start_area_fx_end.origin = var_10;
        var_11 = getgroundnormal( var_10 );

        if ( isdefined( var_11 ) )
        {
            var_12 = vectorcross( var_11, ( 1, 0, 0 ) );
            var_13 = vectortoangles( var_12 );
            var_0.start_area_fx_end.angles = var_13;
        }

        var_0.start_area_fx_end setscriptablepartstate( "damage", var_3 );
        var_0 seq3_sequence( var_4, var_10, var_0.start_area_fx_end.angles, var_5, 0, var_2, var_6 );
        var_0 greenbaystrike_trylaserdamage( var_10, var_2 );
        waitframe();

        if ( isdefined( var_0.startgroundorigin ) )
            var_0.previousgroundorigin = var_9;
    }

    return 1;
}

greenbaystrike_trylaserdamage( var_0, var_1 )
{
    if ( !isdefined( self.nextlaserdamage ) )
        self.nextlaserdamage = gettime();

    if ( self.nextlaserdamage <= gettime() )
    {
        greenbaystrike_laserdamage( var_0, var_1 );
        self.nextlaserdamage = gettime() + getdvarfloat( "scr_br_mxp_g_laserDamageFreq", 0.125 ) * 1000;
    }
}

greenbaystrike_laserdamage( var_0, var_1 )
{
    var_2 = self.change_keypad_display_digit;
    var_3 = 1000;
    isaltbunkerscriptable( var_0, var_2, var_3, var_1, "MOD_EXPLOSIVE", getcompleteweaponname( "greenbay_strike" ), level._id_11E18.setincomingremovedcallback.clear_look_at_ent.origin, 1 );
}

greenbaystrike_getattacktime( var_0 )
{
    if ( var_0._id_13923 == 3 )
        return getdvarfloat( "scr_br_mxp_g_time_ray", 6 );

    return getdvarfloat( "scr_br_mxp_g_time", 6 );
}

greenbaystrike_cleanuppreviewentities( var_0, var_1 )
{
    if ( isdefined( var_0.previewcircle ) )
        var_0.previewcircle delete();

    thread kiosk_spent_total( var_0.start_area_fx_end, var_1 );
}

getnextgreenbayaimdamagepos( var_0 )
{
    var_1 = distance2d( var_0.startorigin, var_0.circleent.origin );
    var_2 = var_0.startorigin + var_0.dir * var_1;

    if ( var_0._id_13923 == 2 )
    {
        if ( isdefined( var_0.previousgroundorigin ) )
            var_2 = var_2 + ( 0, 0, var_0.previousgroundorigin[2] );
        else if ( isdefined( var_0.startgroundorigin ) )
            var_2 = var_2 + ( 0, 0, var_0.startgroundorigin[2] );
    }

    var_3 = var_2;
    var_4 = var_2;

    if ( var_0._id_13923 == 2 )
    {
        var_3 = skytracetoworld( var_2, getdvarint( "scr_br_mxp_g_beam_z_trace", 2500 ) );
        var_4 = snapaimpostonavmesh( var_3 );

        if ( istrue( level.sentry_shouldshoot.limitzdelta ) )
            var_4 = limitzdelta( var_4, var_0.previousgroundorigin, level.sentry_shouldshoot.maxzdelta );

        var_4 = smoothaimposz( var_0, var_4 );
    }

    if ( !isdefined( var_0.aimpath ) )
    {
        var_0.aimpath = [];
        var_0.damagepath = [];
    }

    var_0.aimpath[var_0.aimpath.size] = var_4;
    var_0.damagepath[var_0.damagepath.size] = var_3;
    return [ var_3, var_4 ];
}

getgroundnormal( var_0 )
{
    var_1 = scripts\engine\trace::create_contents( 0, 1 );
    var_2 = scripts\mp\gametypes\br_public.gsc::modifytriggerlocation( var_0, 100, -200, var_1 );
    return var_2["normal"];
}

skytracetoworld( var_0, var_1 )
{
    var_2 = scripts\engine\trace::create_contents( 0, 1 );
    var_3 = scripts\mp\gametypes\br_public.gsc::modifyplayer_damage( var_0, var_1, undefined, var_2 );
    return var_3;
}

snapaimpostonavmesh( var_0 )
{
    if ( isscriptabledefined() )
    {
        var_1 = getclosestpointonnavmesh( var_0 );
        var_2 = distance2d( var_0, var_1 );

        if ( var_2 < getdvarint( "scr_br_mxp_g_beam_xy_nav_offset", 500 ) )
        {
            var_3 = var_1[2] - var_0[2];

            if ( var_3 < getdvarint( "scr_br_mxp_g_beam_z_nav_offset", 1000 ) )
                var_0 = ( var_0[0], var_0[1], var_1[2] );
        }
    }

    return var_0;
}

limitzdelta( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1 ) )
        return var_0;

    if ( !isdefined( var_2 ) )
        var_2 = 0;

    var_3 = var_0[2] - var_1[2];

    if ( abs( var_3 ) > var_2 )
    {
        if ( !isdefined( level._id_11E18.largestzdelta ) || level._id_11E18.largestzdelta < abs( var_3 ) )
            level._id_11E18.largestzdelta = var_3;

        var_4 = scripts\engine\utility::sign( var_3 );
        return var_1 + ( 0, 0, var_4 * var_2 );
    }

    return var_0;
}

smoothaimposz( var_0, var_1 )
{
    var_2 = 0.5;

    if ( isdefined( var_0.aimpath ) )
    {
        var_3 = var_0.aimpath[var_0.aimpath.size - 1];
        var_4 = var_1[2] - var_3[2];
        var_5 = var_4 * getdvarfloat( "scr_br_mxp_g_beam_z_smooth", var_2 );
        var_1 = ( var_1[0], var_1[1], var_3[2] + var_5 );
    }

    return var_1;
}

kiosk_spent_total( var_0, var_1 )
{
    if ( isdefined( var_1 ) && var_1 > 0 )
        wait( var_1 );

    var_0 delete();
}

isaltbunkerscriptable( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    if ( !istrue( var_7 ) )
        radiusdamage( var_0, var_1, var_2, var_2, var_3, var_4, var_5, 0, 1, 1 );

    if ( getdvarint( "scr_br_mxp_damage_vehicles", 1 ) )
    {
        var_8 = tablesort( var_0 + ( 0, 0, -100 ), var_1, 400 );

        foreach ( var_10 in var_8 )
        {
            if ( isalive( var_10 ) && var_10.health > 1 )
                var_10 dodamage( var_10.health, var_6, var_3, var_3, var_4, var_5 );
        }
    }

    var_12 = float( var_1 * var_1 );

    if ( isdefined( level.cratedata ) && isdefined( level.cratedata.crates ) )
    {
        foreach ( var_14 in level.cratedata.crates )
        {
            if ( isdefined( var_14 ) )
            {
                var_15 = distance2dsquared( var_14.origin, var_0 );

                if ( var_15 < var_12 )
                {
                    if ( isdefined( var_14.trial_flares ) )
                        var_14 thread scripts\mp\gametypes\br_gametype_mendota.gsc::train_get_anim_ents_index();
                    else
                        var_14 thread destroycrate();
                }
            }
        }
    }

    if ( istrue( var_7 ) )
    {
        var_17 = scripts\engine\trace::create_contents( 1, 1, 0, 1, 0, 1, 0 );
        var_18 = scripts\engine\trace::ray_trace( var_6, var_0, [ var_3 ], var_17 );

        if ( isdefined( var_18["entity"] ) )
        {
            var_19 = var_18["entity"];

            if ( isalive( var_19 ) && ( isplayer( var_19 ) || var_19 nuke_vault_suicidebombers() ) )
                var_19 dodamage( var_2, var_6, var_3, var_3, var_4, var_5 );
        }
    }
}

destroycrate()
{
    if ( isdefined( self.molotov_delete_oldest_trigger ) )
        self.molotov_delete_oldest_trigger delete();

    playfx( level.conf_fx["vanish"], self.origin );
    scripts\cp_mp\killstreaks\airdrop::lastactivateinstruct();
}

seq3_gate( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    seq3_cypher_tagorigin( var_1, var_2, var_6 );
    seq3_puzzle_attempts( var_0, var_1, var_2, var_3, var_4, var_5, var_6 );
}

seq3_cypher_tagorigin( var_0, var_1, var_2 )
{
    var_3 = spawnfx( scripts\engine\utility::getfx( "greenbay_impact_linger" ), var_0, anglestoforward( var_1 ), anglestoup( var_1 ) );
    thread seq3_crate_usable( var_3, var_2 );
    return var_3;
}

seq3_crate_usable( var_0, var_1 )
{
    triggerfx( var_0 );
    wait( var_1 );
    var_0 delete();
}

seq3_puzzle_attempts( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = seq3_keypad_init( var_0, var_1, var_2, var_3, var_4, var_5 );
    var_7 thread seq3_reset_switch();
    var_7 thread seq3_russian_cypher_str();
    var_7 thread seq3_puzzle_complete( var_6 );
    return var_7;
}

seq3_keypad_init( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_4 ) )
        var_4 = 0;

    if ( !isdefined( var_2 ) )
        var_2 = ( 0, 0, 0 );

    if ( !isdefined( var_3 ) )
        var_3 = 0;

    if ( !isdefined( var_5 ) )
        var_5 = level._id_11E18.setincomingremovedcallback;

    var_6 = var_1 - anglestoup( var_2 ) * var_4;
    var_7 = spawn( "trigger_radius", var_6, 0, var_0, var_3 );
    var_7.angles = var_2;
    var_7.count = 0;
    var_7.attacker = var_5;
    var_7.inflictor = var_5;
    var_7 hide();
    var_7 seq3_numbers_array();
    return var_7;
}

seq3_reset_switch()
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "trigger", var_0 );

        if ( !isplayer( var_0 ) || !isalive( var_0 ) )
            continue;

        server_interact_used_think( var_0 );
        var_0 seq3_has_seen_tiers( self.attacker, self.inflictor, self.killcament, self );
    }
}

seq3_russian_cypher_str()
{
    self endon( "death" );

    for (;;)
    {
        if ( self.count > 0 )
        {
            foreach ( var_1 in level.sentry_shouldshoot.playersintrigger )
            {
                if ( !isdefined( var_1 ) )
                    continue;

                if ( !isplayer( var_1 ) || !isalive( var_1 ) )
                    continue;

                if ( var_1 istouching( self ) )
                    continue;

                server_rack_clip( var_1 );
                var_1 seq3_keyboards( self );
            }
        }

        waitframe();
    }
}

seq3_puzzle_complete( var_0 )
{
    seq3_cleanup_leftovers( var_0 );

    foreach ( var_2 in level.sentry_shouldshoot.playersintrigger )
    {
        if ( isdefined( var_2 ) )
            server_rack_clip( var_2 );
    }

    thread seq3_monitor_2_spawned();
}

seq3_has_seen_tiers( var_0, var_1, var_2, var_3 )
{
    seq3_computersused( var_0, var_1, var_2 );
    sentry_trap_structs( var_3 );
    thread seq3_sequences();
}

seq3_keyboards( var_0 )
{
    seq3_emergency_lights( var_0.id );
}

seq3_computersused( var_0, var_1, var_2 )
{
    if ( !isdefined( self.seq3_thermitetank_settings ) )
    {
        var_3 = spawnstruct();
        var_3.timeon = 0;
        var_3.timeoff = 0;
        var_3.timetodamage = 0;
        var_3.updatetimestamp = 0;
        var_3.firstdamagedone = 0;
        var_3.victim = self;
        var_3.sources = [];
        self.seq3_thermitetank_settings = var_3;
    }

    self.seq3_thermitetank_settings.attacker = var_0;
    self.seq3_thermitetank_settings.inflictor = var_1;
    self.seq3_thermitetank_settings.killcament = var_2;
}

seq3_sequences()
{
    self endon( "death_or_disconnect" );
    self endon( "clear_burning" );
    level endon( "game_ended" );
    self notify( "update_burning" );
    self endon( "update_burning" );
    thread sentryturret_allowpickupofturret();

    if ( gettime() <= self.seq3_thermitetank_settings.updatetimestamp )
        waitframe();

    var_0 = undefined;

    for (;;)
    {
        foreach ( var_3, var_2 in self.seq3_thermitetank_settings.sources )
        {
            if ( isdefined( var_2 ) && var_2 seq3_elevator_init( self ) )
            {
                if ( !isdefined( var_0 ) || var_2.id > var_0.id )
                    var_0 = var_2;

                continue;
            }

            seq3_emergency_lights( var_3 );
        }

        var_4 = seq3_spawners_intro( self );

        switch ( var_4 )
        {
            case "damage":
                seq3_sequences_correct( self, var_0 );
                break;
            case "clear":
                thread seq3_computer_interaction();
                break;
            case "nothing":
            default:
                break;
        }

        wait 0.05;
    }
}

seq3_spawners_intro( var_0 )
{
    var_1 = "nothing";

    if ( !isdefined( var_0.seq3_thermitetank_settings ) )
        return var_1;

    if ( var_0.seq3_thermitetank_settings.timetodamage <= 0 )
    {
        var_1 = "damage";
        var_0.seq3_thermitetank_settings.timetodamage = 0.25;
    }
    else
        var_0.seq3_thermitetank_settings.timetodamage = var_0.seq3_thermitetank_settings.timetodamage - 0.05;

    if ( sequence_interaction_hint( var_0 ) )
    {
        var_0.seq3_thermitetank_settings.timeoff = 0;
        var_0.seq3_thermitetank_settings.timeon = var_0.seq3_thermitetank_settings.timeon + 0.05;
    }
    else
    {
        var_0.seq3_thermitetank_settings.timeoff = var_0.seq3_thermitetank_settings.timeoff + 0.05;

        if ( var_0.seq3_thermitetank_settings.timeoff >= 0.25 )
            var_1 = "clear";
    }

    var_0.seq3_thermitetank_settings.updatetimestamp = gettime();
    return var_1;
}

seq3_sequences_correct( var_0, var_1 )
{
    if ( !isdefined( var_0.seq3_thermitetank_settings ) || !isdefined( var_1 ) )
        return;

    var_2 = 25;
    var_3 = var_1.attacker.origin;
    var_4 = var_1.attacker;
    var_5 = var_1.attacker;
    var_0 dodamage( var_2, var_3, var_4, var_5, "MOD_EXPLOSIVE", getcompleteweaponname( "greenbay_strike" ) );

    if ( !istrue( var_0.seq3_thermitetank_settings.firstdamagedone ) )
        playfxontagforclients( scripts\engine\utility::getfx( "greenbay_impact_player" ), var_0, "tag_eye", var_0 );

    var_0.seq3_thermitetank_settings.firstdamagedone = 1;
}

seq3_elevator_init( var_0 )
{
    if ( !sequence_interaction_hint( var_0 ) )
        return 0;

    if ( !isdefined( var_0.seq3_thermitetank_settings.sources[self.id] ) )
        return 0;

    return 1;
}

sentryturret_allowpickupofturret()
{
    self notify( "cleanup_burning" );
    self endon( "cleanup_burning" );
    childthread sentryturret_canpickup();
    childthread sentryturret_watchgameend();
}

sentryturret_canpickup()
{
    self endon( "disconnect" );
    self endon( "clear_burning" );
    level endon( "game_ended" );
    self waittill( "death" );
    thread seq3_computer_interaction();
}

sentryturret_watchgameend()
{
    self endon( "death_or_disconnect" );
    self endon( "clear_burning" );
    level waittill( "game_ended" );
    thread seq3_computer_interaction();
}

seq3_cleanup_leftovers( var_0 )
{
    self endon( "death" );
    wait( var_0 );
}

seq3_computer_interaction()
{
    self notify( "clear_burning" );

    if ( isdefined( self.seq3_thermitetank_settings ) && isdefined( self.seq3_thermitetank_settings.sources ) )
    {
        foreach ( var_1 in self.seq3_thermitetank_settings.sources )
            seq3_emergency_lights( var_1.id );
    }

    stopfxontagforclients( scripts\engine\utility::getfx( "greenbay_impact_player" ), self, "tag_eye", self );
    self.seq3_thermitetank_settings = undefined;
}

sentry_trap_structs( var_0 )
{
    if ( !isdefined( self.seq3_thermitetank_settings ) )
        return;

    self.seq3_thermitetank_settings.sources[var_0.id] = var_0;
}

seq3_emergency_lights( var_0 )
{
    if ( !isdefined( self.seq3_thermitetank_settings ) )
        return;

    self.seq3_thermitetank_settings.sources[var_0] = undefined;
}

seq3_digits_display_array()
{
    if ( !isdefined( self.seq3_thermitetank_settings ) )
        return 0;

    return self.seq3_thermitetank_settings.sources.size;
}

seq3_displaymodels( var_0 )
{
    return seq3_digits_display_array() == 1 && isdefined( self.seq3_thermitetank_settings.sources[var_0.id] );
}

seq3_numbers_array()
{
    self.id = seq3_warning_tier();
    self.stab_blink_black_fade = seq3_warning_room_b();
    seq3_tier( self );
}

seq3_monitor_2_spawned()
{
    sequence_interaction_init( self );
    self delete();
}

seq3_sequence( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( self._id_13923 != 2 )
        return;

    if ( !isdefined( self.nextspawneffect ) )
        self.nextspawneffect = gettime();

    if ( !isdefined( self.nextspawntrigger ) )
        self.nextspawntrigger = gettime();

    if ( self.nextspawneffect <= gettime() )
    {
        seq3_cypher_tagorigin( var_1, var_2, var_6 );
        self.nextspawneffect = gettime() + getdvarfloat( "scr_br_mxp_g_burnSpotFreq_effect", 0.25 ) * 1000;
    }

    if ( self.nextspawntrigger <= gettime() )
    {
        seq3_puzzle_attempts( var_0, var_1, var_2, var_3, var_4, var_5, var_6 );
        self.nextspawntrigger = gettime() + getdvarfloat( "scr_br_mxp_g_burnSpotFreq_trigger", 0.25 ) * 1000;
    }
}

greenbayburn_spawnrayburn( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_1 ) || !isdefined( var_2 ) || !isdefined( self.startgroundnormal ) )
        return;

    wait 3.0;
    var_6 = 256;
    var_7 = 60;
    var_8 = 448.0;
    var_9 = anglestoforward( var_2 ) * var_8;
    seq3_gate( var_0, var_1, var_2, var_3, 0, var_4, var_5 );

    for ( var_10 = 0; var_10 < 6; var_10++ )
    {
        var_11 = rotatepointaroundvector( self.startgroundnormal, var_9, var_7 * var_10 );
        var_12 = skytracetoworld( var_1 + var_11, 250 );

        if ( !isdefined( var_12 ) )
            continue;

        var_13 = limitzdelta( var_12, var_1, var_6 );

        if ( var_13[2] != var_12[2] )
            continue;

        seq3_gate( var_0, var_12, var_2, var_3, 0, var_4, var_5 );
    }
}

sequence_progression( var_0 )
{
    level.sentry_shouldshoot.inuse = var_0;
    _id_13186( "g", var_0 );
}

sequence_interaction_activate()
{
    return level.sentry_shouldshoot.inuse;
}

seq3_warning_room_b()
{
    if ( !isdefined( level.sentry_shouldshoot.stab_blink_black_fade ) )
        level.sentry_shouldshoot.stab_blink_black_fade = 0;

    return level.sentry_shouldshoot.stab_blink_black_fade;
}

seq3_wheelson_starts()
{
    if ( !isdefined( level.sentry_shouldshoot.stab_blink_black_fade ) )
        level.sentry_shouldshoot.stab_blink_black_fade = 0;
}

seq3_warning_tier()
{
    var_0 = level.sentry_shouldshoot._id_13DC5;
    level.sentry_shouldshoot._id_13DC5++;
    return var_0;
}

seq3_tier( var_0 )
{
    level.sentry_shouldshoot.triggers = scripts\engine\utility::array_add( level.sentry_shouldshoot.triggers, var_0 );
}

sequence_interaction_init( var_0 )
{
    level.sentry_shouldshoot.triggers = scripts\engine\utility::array_remove( level.sentry_shouldshoot.triggers, var_0 );
}

server_interact_used_think( var_0 )
{
    if ( seq3_elevator_init( var_0 ) )
        return;

    self.count++;
    var_1 = var_0 getentitynumber();
    level.sentry_shouldshoot.playersintrigger[var_1] = var_0;
}

server_rack_clip( var_0 )
{
    if ( !seq3_elevator_init( var_0 ) )
        return;

    self.count--;

    if ( var_0 seq3_digits_display_array() <= 0 )
    {
        var_1 = var_0 getentitynumber();
        level.sentry_shouldshoot.playersintrigger[var_1] = undefined;
    }
}

sequence_interaction_hint( var_0 )
{
    if ( !isdefined( var_0.seq3_thermitetank_settings ) )
        return 0;

    return var_0.seq3_thermitetank_settings.sources.size > 0;
}

nuke_vault_suicidebombers()
{
    return isalive( self ) && ( scripts\common\vehicle::isvehicle() || isdefined( self.classname ) && self.classname == "script_vehicle" );
}

makepreviewimpactcircle( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = var_4 * 2.0;
    var_7 = 2 + int( ceil( ( var_5 - var_6 ) / var_6 ) );
    var_8 = var_4 + getdvarint( "scr_br_mxp_g_extend", 500 );
    var_9 = var_5 + var_4 + var_4;
    var_10 = vectortoangles( var_3 );
    var_11 = float( var_9 ) / var_4;

    for ( var_12 = 0; var_12 < var_7 - 1; var_12++ )
    {
        var_13 = var_0 + var_3 * var_12 * var_6;

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "dangerNotifyPlayersInRange" ) )
            self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "dangerNotifyPlayersInRange" ) ]]( var_13, var_8, "greenbay_strike", 0 );

        thread gplaykillstreakincomingdialog( var_13, var_8 );
    }

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "dangerNotifyPlayersInRange" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "dangerNotifyPlayersInRange" ) ]]( var_2, var_8, "greenbay_strike", 0 );

    thread gplaykillstreakincomingdialog( var_2, var_8 );
    var_14 = _id_11A9F( var_1, var_4, 1, 6 );
    var_14.angles = ( var_11, var_10[1], 0 );
    return var_14;
}

_id_11A9F( var_0, var_1, var_2, var_3 )
{
    var_4 = getmaxobjectivecount( var_0[0], var_0[1], var_1 );
    var_4 setmapcirclecolorindex( var_2 );
    var_4 setmapcircleiconindex( 0 );
    var_4 setmapcirclestyleindex( var_3 );
    return var_4;
}

vehicle_showteamtanks( var_0, var_1 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    kenoshastrike_cleanupinterruptedstreak();

    if ( isplayer( self ) )
    {
        vehicle_spawn_abandonedtimeoutcallback( 1 );
        level thread scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "k_attack_used", self );
    }

    var_1.shots_fired++;
    var_2 = var_0.location;
    kenoshastrike_setuptarget( var_0, var_1 );

    if ( getdvarint( "scr_br_mxp_ks_marker", 0 ) == 1 )
    {
        var_3 = undefined;

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "requestObjectiveID" ) )
            var_3 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "requestObjectiveID" ) ]]( 99 );

        if ( isdefined( var_3 ) )
        {
            server_activate( var_3, "ui_mp_br_hud_icon_kenosha", self, var_1.origin + ( 0, 0, 50 ) );
            level thread greenbaystrike_handlemarker( var_3 );
        }
    }

    var_1._id_134E3 = scripts\mp\gametypes\br_alt_mode_mxp.gsc::vehiclespawn_littlebirdmg();
    var_4 = var_2 - var_1._id_134E3;
    var_4 = vectornormalize( ( var_4[0], var_4[1], 0 ) );
    var_5 = -1 * var_4;
    var_6 = getdvarint( "scr_br_mxp_g_extend", 500 );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "dangerNotifyPlayersInRange" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "dangerNotifyPlayersInRange" ) ]]( var_1.origin, var_1.change_fronttruck_label + var_6, "kenosha_strike", 0 );

    thread kplaykillstreaksentdialog( var_1.origin, var_1.change_fronttruck_label + var_6 );
    var_1.startorigin = var_1._id_134E3;
    var_1.endorigin = var_1.origin;
    var_1.start_area_fx_end = _id_11A9F( var_1.endorigin, var_1.change_fronttruck_label, 1, 5 );

    if ( isplayer( self ) )
        thread scripts\mp\hud_message::showsplash( "br_gametype_mendota_kenosha_streak" );

    scripts\mp\gametypes\br_alt_mode_mxp.gsc::waitfor_firstgroup_killedoffenough( var_1 );
}

kenoshastrike_setuptarget( var_0, var_1 )
{
    var_2 = var_0.location;
    var_1.origin = var_2;
    var_1.change_goal_radius_weapons_free_internal = "long";
    var_1.change_fronttruck_label = level.vehicle_shoulddocollisiondamagetoplayer.strikeradius;

    if ( isdefined( var_1.radius ) )
        var_1.change_fronttruck_label = var_1.radius;

    var_3 = level._id_11E18.wait_for_next_hack_complete.origin;

    if ( scripts\mp\gametypes\br_alt_mode_mxp.gsc::kinjumpstate() )
        [var_5, var_3] = scripts\mp\gametypes\br_alt_mode_mxp.gsc::kgetnextindexorigin();
    else
    {
        [var_7, var_8] = scripts\mp\gametypes\br_alt_mode_mxp.gsc::khastomoveforkillstreak();

        if ( var_7 )
            var_3 = scripts\mp\gametypes\br_alt_mode_mxp.gsc::kgetindexorigin( var_8 );
    }

    var_9 = distance2d( var_2, var_3 );

    if ( var_9 <= level.vehicle_shoulddocollisiondamagetoplayer.strikeradius )
    {
        var_1.origin = var_3;
        var_1.change_fronttruck_label = level.vehicle_shoulddocollisiondamagetoplayer.strikeradius;
        var_1.change_goal_radius_weapons_free_internal = 2;
    }
    else if ( var_9 <= level.vehicle_shoulddocollisiondamagetoplayer.midrange )
        var_1.change_goal_radius_weapons_free_internal = 1;
    else
        var_1.change_goal_radius_weapons_free_internal = 0;
}

kenoshastrike_cleanupinterruptedstreak()
{
    if ( !isdefined( level._id_11E18.wait_for_next_hack_complete.vo_one_remain ) )
        return;

    var_0 = level._id_11E18.wait_for_next_hack_complete.vo_one_remain;
    level._id_11E18.wait_for_next_hack_complete.vo_one_remain = undefined;
    kenoshastrike_cleanuppreviewentities( var_0 );
}

vehicle_spawn_cancelpendingrespawns( var_0 )
{
    level endon( "game_ended" );
    vehicle_spawn_abandonedtimeoutcallback( 0 );
    scripts\mp\gametypes\br_alt_mode_mxp.gsc::kendkillstreak();
    var_1 = level._id_11E18.wait_for_next_hack_complete;

    if ( var_0.change_goal_radius_weapons_free_internal == 0 || var_0.change_goal_radius_weapons_free_internal == 1 )
    {
        var_1 setscriptablepartstate( "rumble", "light", 0 );
        var_2 = var_1 gettagorigin( "tag_sync" );
        var_3 = spawn( "script_model", var_2 );
        var_3 setmodel( "lm_rock_boulder_02_kenosha_s3" );
        var_0.rock = var_3;
        var_3 linkto( var_1, "tag_sync", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_3 dontinterpolate();
        var_3 unmarkkeyframedmover( 1 );
        level._id_11E18.wait_for_next_hack_complete scripts\engine\utility::waittill_notify_or_timeout( "kenosha_throw_rock", 2.25 );
        var_0.circleent = _id_11A9F( var_0.startorigin, var_0.change_fronttruck_label, 0, 2 );
        var_4 = distance2d( var_0.startorigin, var_0.endorigin );
        [var_6, var_7] = kcalculaterockthrowvalues( var_4 );
        var_8 = var_4 / var_6;
        var_3 unlink();
        var_9 = -1 * var_7;
        var_10 = trajectorycalculateinitialvelocity( var_3.origin, var_0.origin, ( 0, 0, var_9 ), var_8 );
        var_3 movegravity( var_10, var_8, var_7 );
        var_3 setscriptablepartstate( "trail", "active", 0 );
        var_0.circleent moveto( ( var_0.endorigin[0], var_0.endorigin[1], var_0.change_fronttruck_label ), var_8, 0.1, 0.1 );
        wait( var_8 );
        var_3 setscriptablepartstate( "explode", "active", 0 );
        var_3 thread vehicle_spawn_abandonedtimeout();
    }

    var_11 = var_0.owner;

    if ( !isplayer( var_11 ) )
        var_11 = var_1;

    isaltbunkerscriptable( var_0.origin + ( 0, 0, 100 ), var_0.change_fronttruck_label, 1000, var_11, "MOD_EXPLOSIVE", getcompleteweaponname( "kenosha_strike" ), var_0._id_134E3 );
    isaltbunkerscriptable( var_0.origin + ( 0, 0, 500 ), var_0.change_fronttruck_label, 1000, var_11, "MOD_EXPLOSIVE", getcompleteweaponname( "kenosha_strike" ), var_0._id_134E3 );
    isaltbunkerscriptable( var_0.origin + ( 0, 0, 1000 ), var_0.change_fronttruck_label, 1000, var_11, "MOD_EXPLOSIVE", getcompleteweaponname( "kenosha_strike" ), var_0._id_134E3 );

    if ( isdefined( var_11 ) && isplayer( var_11 ) )
    {
        var_11 notify( "greenbay_strike_finished" );
        var_11 scripts\cp_mp\utility\killstreak_utility::_id_12AA7( var_0 );
    }

    kenoshastrike_cleanuppreviewentities( var_0 );

    if ( var_0.change_goal_radius_weapons_free_internal == 0 || var_0.change_goal_radius_weapons_free_internal == 1 )
    {
        wait 1;

        if ( isdefined( var_0.circleent ) )
            var_0.circleent delete();

        wait 1.5;

        if ( isdefined( var_0.rock ) )
            var_0.rock delete();
    }
}

kcalculaterockthrowvalues( var_0 )
{
    var_1 = level.vehicle_shoulddocollisiondamagetoplayer.rock_speed_mid_range;
    var_2 = level.vehicle_shoulddocollisiondamagetoplayer.rock_gravity_mid_range;

    if ( var_0 > level.vehicle_shoulddocollisiondamagetoplayer.longerrange )
    {
        var_1 = level.vehicle_shoulddocollisiondamagetoplayer.rock_speed_longest_range;
        var_2 = level.vehicle_shoulddocollisiondamagetoplayer.rock_gravity_longest_range;
    }
    else if ( var_0 > level.vehicle_shoulddocollisiondamagetoplayer.longrange )
    {
        var_1 = level.vehicle_shoulddocollisiondamagetoplayer.rock_speed_longer_range;
        var_2 = level.vehicle_shoulddocollisiondamagetoplayer.rock_gravity_longer_range;
    }
    else if ( var_0 > level.vehicle_shoulddocollisiondamagetoplayer.midrange )
    {
        var_1 = level.vehicle_shoulddocollisiondamagetoplayer.rock_speed_long_range;
        var_2 = level.vehicle_shoulddocollisiondamagetoplayer.rock_gravity_long_range;
    }

    return [ var_1, var_2 ];
}

kenoshastrike_cleanuppreviewentities( var_0 )
{
    var_0.start_area_fx_end delete();
}

vehicle_spawn_abandonedtimeoutcallback( var_0 )
{
    level.vehicle_shoulddocollisiondamagetoplayer.inuse = var_0;
    _id_13186( "k", var_0 );
}

vehicle_showvalidlittlebirds()
{
    return level.vehicle_shoulddocollisiondamagetoplayer.inuse;
}

vehicle_spawn_abandonedtimeout()
{
    self endon( "death" );
    wait 0.05;
    self setscriptablepartstate( "trail", "neutral", 0 );
    self hide( 1 );
}

server_activate( var_0, var_1, var_2, var_3 )
{
    objective_icon( var_0, var_1 );
    objective_showtoplayersinmask( var_0 );

    if ( isplayer( var_2 ) )
        objective_addclienttomask( var_0, var_2 );

    objective_position( var_0, var_3 );
    objective_setplayintro( var_0, 0 );
    objective_setplayoutro( var_0, 0 );
    objective_setbackground( var_0, 1 );

    if ( level.teambased || !isplayer( var_2 ) )
        objective_setownerteam( var_0, var_2.team );
    else
        objective_setownerclient( var_0, var_2 );

    objective_state( var_0, "current" );
}

greenbaystrike_handlemarker( var_0 )
{
    scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( 10 );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "returnObjectiveID" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "returnObjectiveID" ) ]]( var_0 );
}

server_unlocked( var_0 )
{
    self endon( "greenbay_strike_finished" );
    self endon( "disconnect" );
    level waittill( "game_ended" );
    scripts\cp_mp\utility\killstreak_utility::_id_12AA7( var_0 );
}

_id_1266A( var_0 )
{
    self._id_1300B = var_0;
}

gplaykillstreakincomingdialog( var_0, var_1 )
{
    var_2 = self.team != "neutral";
    var_3 = scripts\common\utility::playersincylinder( var_0, var_1 );

    foreach ( var_5 in var_3 )
    {
        if ( var_2 && var_5.team != self.team )
        {
            level thread scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "g_incoming_attack_player", var_5 );
            continue;
        }

        level thread scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "g_incoming_attack", var_5 );
    }
}

kplaykillstreaksentdialog( var_0, var_1 )
{
    var_2 = self.team != "neutral";
    var_3 = scripts\common\utility::playersincylinder( var_0, var_1 );

    foreach ( var_5 in var_3 )
    {
        if ( var_2 && var_5.team != self.team )
        {
            level thread scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "k_incoming_attack_player", var_5 );
            continue;
        }

        level thread scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "k_incoming_attack", var_5 );
    }
}

_id_13186( var_0, var_1 )
{
    var_2 = 0;

    if ( var_0 == "k" )
        var_2 = 1;

    var_3 = 0;

    if ( istrue( var_1 ) )
        var_3 = 1;

    var_4 = 1;
    var_5 = var_2;
    var_6 = var_3 << var_5;
    var_7 = ~( 1 << var_5 );
    var_8 = getomnvar( "ui_mendota_killstreaks" );
    var_9 = var_8 & var_7;
    var_10 = var_9 + var_6;
    setomnvar( "ui_mendota_killstreaks", var_10 );
}
