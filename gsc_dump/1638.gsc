// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

setup_individual_exploder( var_0 )
{
    var_1 = var_0.targetname;

    if ( !isdefined( var_1 ) )
        var_1 = "";

    if ( exploder_starts_hidden( var_0 ) )
    {
        var_0 hide();
        return;
    }

    if ( exploder_is_damaged_model( var_0 ) )
    {
        var_0 hide();
        var_0 notsolid();

        if ( isdefined( var_0.spawnflags ) && var_0.spawnflags & 1 )
        {
            if ( isdefined( var_0.script_disconnectpaths ) )
                var_0 connectpaths();
        }

        return;
    }

    if ( exploder_is_chunk( var_0 ) )
    {
        var_0 hide();
        var_0 notsolid();

        if ( isdefined( var_0.spawnflags ) && var_0.spawnflags & 1 )
            var_0 connectpaths();

        return;
    }
}

addinitexploders( var_0 )
{
    foreach ( var_2 in var_0 )
    {
        if ( !isdefined( var_2 ) )
            continue;

        if ( isdefined( var_2.script_prefab_exploder ) )
        {
            var_2.script_exploder = var_2.script_prefab_exploder;
            level.init_exploders[level.init_exploders.size] = var_2;
            continue;
        }

        if ( isdefined( var_2.script_exploder ) )
        {
            var_3 = 1;

            if ( !isdefined( var_2.angles ) )
                var_2.angles = ( 0, 0, 0 );

            level.init_exploders[level.init_exploders.size] = var_2;
        }
    }
}

removedeletableexploders( var_0 )
{
    foreach ( var_3, var_2 in var_0 )
    {
        if ( isdefined( var_2.script_delete ) && var_2.script_delete )
            level.struct[var_3] = undefined;
    }
}

setupexploders()
{
    level.init_exploders = [];
    level.exploders = [];
    var_0 = getentarray( "script_brushmodel", "classname" );
    var_1 = getentarray( "script_model", "classname" );

    foreach ( var_3 in var_1 )
        var_0[var_0.size] = var_3;

    foreach ( var_6 in var_0 )
    {
        if ( isdefined( var_6.script_prefab_exploder ) )
            var_6.script_exploder = var_6.script_prefab_exploder;

        if ( isdefined( var_6.masked_exploder ) )
            continue;

        if ( isdefined( var_6.script_exploder ) )
            setup_individual_exploder( var_6 );
    }

    addinitexploders( getentarray( "script_brushmodel", "classname" ) );
    addinitexploders( getentarray( "script_model", "classname" ) );
    addinitexploders( level.struct );

    if ( !isdefined( level.createfxent ) )
        level.createfxent = [];

    var_8 = [];
    var_8["exploderchunk visible"] = 1;
    var_8["exploderchunk"] = 1;
    var_8["exploder"] = 1;

    foreach ( var_10 in level.init_exploders )
    {
        var_6 = scripts\engine\utility::createexploder( var_10.script_fxid, 1 );
        var_6.v = [];
        var_6.v["origin"] = var_10.origin;
        var_6.v["angles"] = var_10.angles;
        var_6.v["delay"] = var_10.script_delay;
        var_6.v["delay_post"] = var_10.script_delay_post;
        var_6.v["firefx"] = var_10.script_firefx;
        var_6.v["firefxdelay"] = var_10.script_firefxdelay;
        var_6.v["firefxsound"] = var_10.script_firefxsound;
        var_6.v["earthquake"] = var_10.script_earthquake;
        var_6.v["rumble"] = var_10.script_rumble;
        var_6.v["damage"] = var_10.script_damage;
        var_6.v["damage_radius"] = var_10.script_radius;
        var_6.v["soundalias"] = var_10.script_soundalias;
        var_6.v["repeat"] = var_10.script_repeat;
        var_6.v["delay_min"] = var_10.script_delay_min;
        var_6.v["delay_max"] = var_10.script_delay_max;
        var_6.v["target"] = var_10.target;
        var_6.v["ender"] = var_10.script_ender;
        var_6.v["physics"] = var_10.script_physics;
        var_6.v["type"] = "exploder";
        var_6.v["dotraces"] = var_10.script_trace;
        var_6.v["envonly"] = var_10.script_envonly;

        if ( !isdefined( var_6.v["angles"] ) )
            var_6.v["angles"] = ( 0, 0, 0 );

        var_6 scripts\common\createfx::set_forward_and_up_vectors();

        if ( !isdefined( var_10.script_fxid ) )
            var_6.v["fxid"] = "No FX";
        else
            var_6.v["fxid"] = var_10.script_fxid;

        var_6.v["exploder"] = var_10.script_exploder;

        if ( !isdefined( var_6.v["delay"] ) )
            var_6.v["delay"] = 0;

        if ( isdefined( var_10.target ) )
        {
            var_11 = getentarray( var_6.v["target"], "targetname" )[0];

            if ( isdefined( var_11 ) )
            {
                var_12 = var_11.origin;
                var_6.v["angles"] = vectortoangles( var_12 - var_6.v["origin"] );
            }
            else
            {
                var_11 = scripts\engine\utility::get_target_ent( var_6.v["target"] );

                if ( isdefined( var_11 ) )
                {
                    var_12 = var_11.origin;
                    var_6.v["angles"] = vectortoangles( var_12 - var_6.v["origin"] );
                }
            }
        }

        if ( isstruct( var_10 ) )
        {
            var_6.model = var_10;

            if ( isdefined( var_6.model.script_modelname ) )
                precachemodel( var_6.model.script_modelname );
        }
        else if ( var_10.code_classname == "script_brushmodel" || isdefined( var_10.model ) )
        {
            var_6.model = var_10;
            var_6.model.disconnect_paths = var_10.script_disconnectpaths;
        }

        if ( isdefined( var_10.targetname ) && isdefined( var_8[var_10.targetname] ) )
            var_6.v["exploder_type"] = var_10.targetname;
        else
            var_6.v["exploder_type"] = "normal";

        if ( isdefined( var_10.masked_exploder ) )
        {
            var_6.v["masked_exploder"] = var_10.model;
            var_6.v["masked_exploder_spawnflags"] = var_10.spawnflags;
            var_6.v["masked_exploder_script_disconnectpaths"] = var_10.script_disconnectpaths;
            var_10 delete();
        }

        var_6 scripts\common\createfx::post_entity_creation_function();
        var_13 = var_6.v["exploder"];

        if ( !isdefined( level.exploders[var_13] ) )
            level.exploders[var_13] = [];

        level.exploders[var_13][level.exploders[var_13].size] = var_6;
    }

    level.init_exploders = undefined;
    removedeletableexploders( level.struct );
}

exploder_flag_wait( var_0, var_1 )
{
    if ( !scripts\engine\utility::flag_exist( var_0 ) )
        scripts\engine\utility::flag_init( var_0 );

    scripts\engine\utility::flag_wait( var_0 );

    foreach ( var_3 in var_1 )
    {
        foreach ( var_5 in level.createfxexploders[var_3] )
            var_5 scripts\engine\utility::activate_individual_exploder();
    }
}

exploder_is_damaged_model( var_0 )
{
    return isdefined( var_0.targetname ) && var_0.targetname == "exploder";
}

exploder_starts_hidden( var_0 )
{
    return var_0.model == "fx" && ( !isdefined( var_0.targetname ) || var_0.targetname != "exploderchunk" );
}

exploder_is_chunk( var_0 )
{
    return isdefined( var_0.targetname ) && var_0.targetname == "exploderchunk";
}

show_exploder_models_proc( var_0 )
{
    var_0 = var_0 + "";
    var_1 = get_exploders();

    if ( isdefined( var_1 ) )
    {
        foreach ( var_3 in var_1 )
        {
            if ( isstruct( var_3.model ) )
                continue;

            if ( !exploder_starts_hidden( var_3.model ) && !exploder_is_damaged_model( var_3.model ) && !exploder_is_chunk( var_3.model ) )
                var_3.model show();

            if ( isdefined( var_3.brush_shown ) )
                var_3.model show();
        }
    }
}

get_exploders( var_0 )
{
    var_1 = [];

    if ( level.createfx_enabled )
        var_1 = get_createfx_exploders( var_0 );
    else if ( isdefined( level.createfxexploders[var_0] ) )
        var_1 = level.createfxexploders[var_0];

    if ( isdefined( level.exploders[var_0] ) )
    {
        foreach ( var_3 in level.exploders[var_0] )
            var_1[var_1.size] = var_3;
    }

    return var_1;
}

get_createfx_exploders( var_0 )
{

}

stop_exploder_proc( var_0, var_1, var_2 )
{
    var_0 = var_0 + "";
    var_3 = 0;
    var_4 = get_exploders( var_0 );

    if ( isdefined( var_4 ) )
    {
        foreach ( var_6 in var_4 )
        {
            if ( !isdefined( var_6.looper ) )
                continue;

            if ( isdefined( var_6.loopsound_ent ) )
            {
                var_6.loopsound_ent stoploopsound();
                var_6.loopsound_ent delete();
            }

            var_6.looper delete();
            var_3 = 1;
        }
    }

    if ( !shouldrunserversideeffects() && ( isplatformconsole() || !var_3 ) )
        stop_clientside_exploder( var_0, var_1, var_2 );
}

stop_clientside_exploder( var_0, var_1, var_2 )
{
    if ( isplatformconsole() )
    {
        loadinfiltransient( var_0, var_1, var_2 );
        return;
    }

    if ( !is_valid_clientside_exploder_name( var_0 ) )
        return;

    var_3 = int( var_0 );
    loadinfiltransient( var_3, var_1, var_2 );
}

get_exploder_array_proc( var_0 )
{
    var_0 = var_0 + "";
    var_1 = [];
    var_2 = get_exploders( var_0 );

    if ( isdefined( var_2 ) )
        var_1 = var_2;

    return var_1;
}

hide_exploder_models_proc( var_0 )
{
    var_0 = var_0 + "";
    var_1 = get_exploders( var_0 );

    if ( isdefined( var_1 ) )
    {
        foreach ( var_3 in var_1 )
        {
            if ( isstruct( var_3.model ) )
                continue;

            if ( isdefined( var_3.model ) )
                var_3.model hide();
        }
    }
}

delete_exploder_proc( var_0 )
{
    var_0 = var_0 + "";
    var_1 = get_exploders( var_0 );

    if ( isdefined( var_1 ) )
    {
        foreach ( var_3 in var_1 )
        {
            if ( isstruct( var_3.model ) )
                continue;

            if ( isdefined( var_3.model ) )
                var_3.model delete();
        }
    }

    level notify( "killexplodertridgers" + var_0 );
}

exploder_damage()
{
    if ( isdefined( self.v["delay"] ) )
        var_0 = self.v["delay"];
    else
        var_0 = 0;

    if ( isdefined( self.v["damage_radius"] ) )
        var_1 = self.v["damage_radius"];
    else
        var_1 = 128;

    var_2 = self.v["damage"];
    var_3 = self.v["origin"];

    if ( isdefined( self.v["envonly"] ) )
        var_4 = self.v["envonly"];
    else
        var_4 = 0;

    if ( isdefined( self.v["dotraces"] ) )
        var_5 = self.v["dotraces"];
    else
        var_5 = 1;

    wait( var_0 );
    radiusdamage( var_3, var_1, var_2, var_2, undefined, "MOD_EXPLOSIVE", undefined, var_4, var_5 );
}

activate_individual_exploder_proc()
{
    if ( isdefined( self.v["firefx"] ) )
        thread fire_effect();

    if ( isdefined( self.v["fxid"] ) && self.v["fxid"] != "No FX" )
        thread cannon_effect();
    else if ( isdefined( self.v["soundalias"] ) && self.v["soundalias"] != "nil" )
        thread sound_effect();

    if ( isdefined( self.v["loopsound"] ) && self.v["loopsound"] != "nil" )
        thread effect_loopsound();

    if ( isdefined( self.v["damage"] ) )
        thread exploder_damage();

    if ( isdefined( self.v["earthquake"] ) )
        thread exploder_earthquake();

    if ( isdefined( self.v["rumble"] ) )
        thread exploder_rumble();

    if ( self.v["exploder_type"] == "exploder" )
        thread brush_show();
    else if ( self.v["exploder_type"] == "exploderchunk" || self.v["exploder_type"] == "exploderchunk visible" )
        thread brush_throw();
    else
        thread brush_delete();
}

brush_delete()
{
    var_0 = self.v["exploder"];

    if ( isdefined( self.v["delay"] ) )
        wait( self.v["delay"] );
    else
        waitframe();

    if ( !isdefined( self.model ) )
        return;

    if ( isstruct( self.model ) )
        return;

    if ( scripts\common\utility::issp() && isdefined( self.model.classname ) )
    {
        if ( self.model.spawnflags & 1 )
            self.model call [[ level.func["connectPaths"] ]]();
    }

    if ( level.createfx_enabled )
    {
        if ( isdefined( self.exploded ) )
            return;

        self.exploded = 1;
        self.model hide();
        self.model notsolid();
        wait 3;
        self.exploded = undefined;
        self.model show();
        self.model solid();
        return;
    }

    if ( !isdefined( self.v["fxid"] ) || self.v["fxid"] == "No FX" )
        self.v["exploder"] = undefined;

    waittillframeend;
    self.model delete();
}

brush_throw()
{
    if ( isdefined( self.v["delay"] ) )
        wait( self.v["delay"] );

    var_0 = undefined;

    if ( isdefined( self.v["target"] ) )
        var_0 = scripts\engine\utility::get_target_ent( self.v["target"] );

    if ( !isdefined( var_0 ) )
    {
        self.model delete();
        return;
    }

    self.model show();

    if ( isdefined( self.v["delay_post"] ) )
        wait( self.v["delay_post"] );

    var_1 = self.v["origin"];
    var_2 = self.v["angles"];
    var_3 = var_0.origin;
    var_4 = isdefined( self.v["physics"] );

    if ( var_4 )
    {
        var_5 = undefined;

        if ( isdefined( var_0.target ) )
            var_5 = var_0 scripts\engine\utility::get_target_ent();

        if ( isdefined( var_5 ) )
        {
            var_6 = var_0.origin;
            var_7 = vectornormalize( var_5.origin - var_0.origin );
        }
        else
        {
            var_6 = self.model.origin;
            var_7 = vectornormalize( var_3 - self.model.origin );
        }

        var_7 = var_7 * self.v["physics"];
        self.model physicslaunchserver( var_6, var_7 );
        return;
    }
    else
    {
        var_7 = var_3 - self.model.origin;
        self.model rotatevelocity( var_7, 12 );
        self.model movegravity( var_7, 12 );
    }

    if ( level.createfx_enabled )
    {
        if ( isdefined( self.exploded ) )
            return;

        self.exploded = 1;
        wait 3;
        self.exploded = undefined;
        self.v["origin"] = var_1;
        self.v["angles"] = var_2;
        self.model hide();
        return;
    }

    self.v["exploder"] = undefined;
    wait 6;
    self.model delete();
}

brush_show()
{
    if ( isdefined( self.v["delay"] ) )
        wait( self.v["delay"] );

    var_0 = 0;
    var_1 = undefined;

    if ( !isdefined( self.model.script_modelname ) )
    {
        self.model show();
        self.model solid();
    }
    else
    {
        var_0 = 1;
        var_1 = spawn( "script_model", self.model.origin );
        var_1.angles = self.model.angles;
        var_1 setmodel( self.model.script_modelname );

        if ( isdefined( self.model.script_linkname ) )
            var_1.script_linkname = self.model.script_linkname;
    }

    self.brush_shown = 1;

    if ( !var_0 && scripts\common\utility::issp() && self.model.spawnflags & 1 )
    {
        if ( !isdefined( self.model.disconnect_paths ) )
            self.model call [[ level.func["connectPaths"] ]]();
        else
            self.model call [[ level.func["disconnectPaths"] ]]();
    }

    if ( level.createfx_enabled )
    {
        if ( isdefined( self.exploded ) )
            return;

        self.exploded = 1;
        wait 3;
        self.exploded = undefined;

        if ( !var_0 )
        {
            self.model hide();
            self.model notsolid();
        }
        else
            var_1 delete();
    }
}

exploder_rumble()
{
    if ( !scripts\common\utility::issp() )
        return;

    exploder_delay();
    level.player playrumbleonentity( self.v["rumble"] );
}

exploder_delay()
{
    if ( !isdefined( self.v["delay"] ) )
        self.v["delay"] = 0;

    var_0 = self.v["delay"];
    var_1 = self.v["delay"] + 0.001;

    if ( isdefined( self.v["delay_min"] ) )
        var_0 = self.v["delay_min"];

    if ( isdefined( self.v["delay_max"] ) )
        var_1 = self.v["delay_max"];

    if ( var_0 > 0 )
        wait( randomfloatrange( var_0, var_1 ) );
}

effect_loopsound()
{
    if ( isdefined( self.loopsound_ent ) )
    {
        self.loopsound_ent stoploopsound();
        self.loopsound_ent delete();
    }

    var_0 = self.v["origin"];
    var_1 = self.v["loopsound"];
    exploder_delay();
    self.loopsound_ent = scripts\engine\utility::play_loopsound_in_space( var_1, var_0 );
}

sound_effect()
{
    effect_soundalias();
}

effect_soundalias()
{
    var_0 = self.v["origin"];
    var_1 = self.v["soundalias"];
    exploder_delay();
    scripts\engine\utility::play_sound_in_space( var_1, var_0 );
}

exploder_earthquake()
{
    exploder_delay();
    scripts\engine\utility::do_earthquake( self.v["earthquake"], self.v["origin"] );
}

exploder_playsound()
{
    if ( !isdefined( self.v["soundalias"] ) || self.v["soundalias"] == "nil" )
        return;

    scripts\engine\utility::play_sound_in_space( self.v["soundalias"], self.v["origin"] );
}

fire_effect()
{
    var_0 = self.v["forward"];
    var_1 = self.v["up"];
    var_2 = undefined;
    var_3 = self.v["firefxsound"];
    var_4 = self.v["origin"];
    var_5 = self.v["firefx"];
    var_6 = self.v["ender"];

    if ( !isdefined( var_6 ) )
        var_6 = "createfx_effectStopper";

    var_7 = 0.5;

    if ( isdefined( self.v["firefxdelay"] ) )
        var_7 = self.v["firefxdelay"];

    exploder_delay();

    if ( isdefined( var_3 ) )
        scripts\engine\utility::loop_fx_sound( var_3, var_4, 1, var_6 );

    playfx( level._effect[var_5], self.v["origin"], var_0, var_1 );
}

cannon_effect()
{
    if ( isdefined( self.v["repeat"] ) )
    {
        thread exploder_playsound();

        for ( var_0 = 0; var_0 < self.v["repeat"]; var_0++ )
        {
            playfx( level._effect[self.v["fxid"]], self.v["origin"], self.v["forward"], self.v["up"] );
            exploder_delay();
        }

        return;
    }

    exploder_delay();

    if ( isdefined( self.looper ) )
        self.looper delete();

    self.looper = spawnfx( scripts\engine\utility::getfx( self.v["fxid"] ), self.v["origin"], self.v["forward"], self.v["up"] );
    triggerfx( self.looper );
    exploder_playsound();
}

activate_exploder( var_0, var_1, var_2 )
{
    var_0 = var_0 + "";
    level notify( "exploding_" + var_0 );
    var_3 = 0;
    var_4 = get_exploders( var_0 );

    if ( isdefined( var_4 ) )
    {
        foreach ( var_6 in var_4 )
        {
            var_6 scripts\engine\utility::activate_individual_exploder();
            var_3 = 1;
        }
    }

    if ( !shouldrunserversideeffects() && ( isplatformconsole() || !var_3 ) )
        activate_clientside_exploder( var_0, var_1, var_2 );
}

activate_clientside_exploder( var_0, var_1, var_2 )
{
    if ( isplatformconsole() )
    {
        activateclientexploder( var_0, var_1, var_2 );
        return;
    }

    if ( !is_valid_clientside_exploder_name( var_0 ) )
        return;

    var_3 = int( var_0 );
    activateclientexploder( var_3, var_1, var_2 );
}

is_valid_clientside_exploder_name( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = var_0;

    if ( isstring( var_0 ) )
    {
        var_1 = int( var_0 );

        if ( var_1 == 0 && var_0 != "0" )
            return 0;
    }

    return var_1 >= 0;
}

shouldrunserversideeffects()
{
    if ( scripts\common\utility::issp() && !isplatformconsole() )
        return 1;

    if ( !isdefined( level.createfx_enabled ) )
        scripts\engine\utility::set_createfx_enabled();

    if ( level.createfx_enabled )
        return 1;
    else
        return getdvar( "OKOLRTLORL" ) != "1";
}

exploder_before_load( var_0, var_1, var_2 )
{
    waittillframeend;
    waittillframeend;
    activate_exploder( var_0, var_1, var_2 );
}

exploder_after_load( var_0, var_1, var_2 )
{
    activate_exploder( var_0, var_1, var_2 );
}
