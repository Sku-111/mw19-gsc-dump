// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    foreach ( var_1 in level.teamnamelist )
        level.spectateoverride[var_1] = spawnstruct();

    scripts\mp\utility\lui_game_event_aggregator::registeronluieventcallback( ::freecamcallback );
    scripts\mp\utility\join_team_aggregator::registeronplayerjointeamcallback( ::onjoinedteam );

    if ( getdvarint( "OLNMMRPTTS", 0 ) != 0 )
        level thread getlevelmlgcams();
}

createmlgcamobject( var_0, var_1 )
{
    precacheshader( var_0 );
    var_2 = spawn( "script_model", ( 0, 0, 0 ) );
    var_2 setmodel( "tag_origin" );
    var_2.angles = ( 0, 0, 0 );
    return var_2;
}

setlevelmlgcam( var_0, var_1 )
{
    var_2 = var_0;

    if ( var_2 >= 4 )
        var_2 = var_2 - 4;

    var_3 = tolower( getdvar( "mapname" ) );
    var_4 = tablelookup( var_1, 0, var_3, var_2 * 2 + 1 );

    if ( var_4 != "" )
    {
        var_5 = var_0 + 1;

        if ( var_0 >= 5 )
            var_5 = var_5 - 4;

        level.cameramapobjs[var_0] = createmlgcamobject( "compass_icon_codcaster_cam", 1 );
        level.numbermapobjs[var_0] = createmlgcamobject( "compass_icon_codcaster_num" + var_5, 0 );
        var_6 = tablelookup( var_1, 0, var_3, var_2 * 2 + 2 );
        level.camerapos[var_0] = getcameravecorang( var_4 );
        level.cameraang[var_0] = getcameravecorang( var_6 );
        level.camerahighestindex = var_0;
    }
}

getlevelmlgcams()
{
    while ( !isdefined( level.objectiveidpool ) )
        waitframe();

    var_0 = "mp/CameraPositions";
    var_1 = var_0 + "_" + scripts\mp\utility\game::getgametype() + ".csv";
    var_0 = var_0 + ".csv";
    level.cameramapobjs = [];
    level.numbermapobjs = [];

    for ( var_2 = 0; var_2 < 4; var_2++ )
        setlevelmlgcam( var_2, var_0 );

    for ( var_2 = 4; var_2 < 8; var_2++ )
        setlevelmlgcam( var_2, var_1 );
}

getcameravecorang( var_0 )
{
    var_1 = strtok( var_0, " " );
    var_2 = ( 0, 0, 0 );

    if ( isdefined( var_1[0] ) && isdefined( var_1[1] ) && isdefined( var_1[2] ) )
        var_2 = ( int( var_1[0] ), int( var_1[1] ), int( var_1[2] ) );

    return var_2;
}

onjoinedteam( var_0 )
{
    var_0 setspectatepermissions();
}

onjoinedspectators( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    var_0 thread onspectatingclient();
    var_0 thread onspectatingmlgcamera();
    var_0 setspectatepermissions();
    var_0 setclientomnvar( "ui_callout_area_id", -1 );

    if ( var_0 ismlgspectator() || isdefined( var_0.pers["mlgSpectator"] ) && var_0.pers["mlgSpectator"] )
    {
        var_0 setmlgspectator( 1 );
        var_0 setmlgfollowdroneactive( 0 );
        var_0 thread updatemlgspectator();
        var_0 thread autoattachtoplayer();
        var_0 thread _id_12EB1();
    }
}

onspectatingclient()
{
    self endon( "disconnect" );
    self endon( "joined_team" );

    for (;;)
    {
        self waittill( "spectating_cycle" );
        var_0 = self getspectatingplayer();

        if ( isdefined( var_0 ) )
        {
            if ( isdefined( var_0.calloutarea ) )
            {
                var_1 = level.calloutglobals.areaidmap[var_0.calloutarea];
                self setclientomnvar( "ui_callout_area_id", var_1 );
            }
        }
    }
}

onspectatingmlgcamera()
{
    self endon( "disconnect" );
    self endon( "joined_team" );

    for (;;)
    {
        self waittill( "spectating_mlg_camera" );
        var_0 = self getmlgselectedcamera();

        if ( self ismlgspectator() || isdefined( self.pers["mlgSpectator"] ) && self.pers["mlgSpectator"] )
        {
            if ( isdefined( var_0 ) )
            {
                self setclientomnvar( "ui_callout_area_id", -1 );
                continue;
            }
        }
    }
}

freecamcallback( var_0, var_1 )
{
    if ( var_0 == "mlg_view_change" )
        scripts\mp\playerlogic::resetuidvarsonspectate();
}

updatespectatesettings()
{
    level endon( "game_ended" );

    for ( var_0 = 0; var_0 < level.players.size; var_0++ )
        level.players[var_0] setspectatepermissions();
}

linkcameratoball( var_0 )
{
    self endon( "disconnect" );
    self endon( "joined_team" );
    self endon( "joined_spectators" );

    for (;;)
    {
        if ( !isdefined( self.codcasterballcamfollow ) )
            break;

        if ( self isspectatingplayer() )
        {
            waitframe();
            continue;
        }

        self cameralinkto( self.codcasterballcamfollow, "tag_origin", 1 );
        var_1 = level.codcasterball.origin;
        var_2 = ( 0, 0, 30 );
        var_2 = var_2 + -80 * var_0;
        var_3 = var_1 + var_2;
        self.codcasterballcamfollow moveto( var_3, 10.5, 5.2, 5.2 );
        self.codcasterballcamfollow.angles = vectortoangles( var_0 );
        break;
    }
}

autoattachtoplayer()
{
    self endon( "disconnect" );
    self endon( "game_ended" );
    self endon( "spectating_mlg_camera" );
    level scripts\engine\utility::_id_143A6( "prematch_done", "start_mode_setup", "infil_started" );
    level.wasflagspawned = game["lastSpectatedPlayer"];

    for (;;)
    {
        var_0 = undefined;

        if ( !self ismlgspectator() || self isspectatingplayer() || self enablereloading() || self useinvisibleplayerduringspawnselection() )
            break;

        if ( level.players.size > 1 )
        {
            if ( level.currentround > 1 && isdefined( level.wasflagspawned ) && self.team != "follower" )
                var_0 = level.wasflagspawned;
            else if ( self.team == "follower" )
            {
                var_1 = self updatecurrentweapon();
                var_2 = 0;

                foreach ( var_4 in level.players )
                {
                    if ( var_4 scripts\cp_mp\utility\player_utility::_isalive() )
                    {
                        if ( var_4 getentitynumber() == var_1 )
                        {
                            if ( var_4.team == "spectator" || var_4.team == "follower" )
                                var_2 = 1;
                            else
                                var_0 = var_1;

                            break;
                        }
                    }
                }

                if ( var_2 )
                    break;
            }
            else
            {
                foreach ( var_7 in level.teamnamelist )
                {
                    var_8 = scripts\mp\utility\teams::getfriendlyplayers( var_7, 1 );

                    if ( var_8.size > 0 )
                        var_0 = scripts\mp\utility\player::getlowestclientnum( var_8, 1 );
                }
            }

            if ( isdefined( var_0 ) )
            {
                self spectateclientnum( var_0 );
                break;
            }
        }

        wait 1.0;
    }
}

updatemlgspectator()
{
    self endon( "joined_team" );
    self endon( "disconnect" );
    self.iswatchingcodcasterball = 0;
    self.codcasterballcamfollow = undefined;
    self.spectatingplayerbeforeballcam = undefined;

    for (;;)
    {
        if ( self ismlgspectator() && self isspectatingplayer() )
        {
            var_0 = self getspectatingplayer();

            if ( isdefined( var_0 ) )
                level.wasflagspawned = var_0.clientid;
        }

        var_1 = isdefined( level.codcasterball );

        if ( !var_1 || !self ismlgfollowdroneactive() )
        {
            if ( self.iswatchingcodcasterball )
            {
                self.iswatchingcodcasterball = 0;
                self.codcasterballcamfollow unlink();
                self.codcasterballcamfollow delete();
                self.codcasterballcamfollow = undefined;

                if ( !self isspectatingplayer() && isdefined( self.spectatingplayerbeforeballcam ) )
                    self spectateclientnum( self.spectatingplayerbeforeballcam getentitynumber() );
                else
                    self cameraunlink();

                self.spectatingplayerbeforeballcam = undefined;
            }
        }
        else if ( !self.iswatchingcodcasterball )
        {
            if ( self ismlgfollowdroneactive() )
            {
                var_0 = self getspectatingplayer();

                if ( isdefined( var_0 ) && isdefined( level.codcasterballowner ) && var_0 == level.codcasterballowner )
                {
                    self.iswatchingcodcasterball = 1;
                    self.spectatingplayerbeforeballcam = var_0;
                    var_2 = vectornormalize( level.codcasterballinitialforcevector );
                    var_3 = var_0 getvieworigin();
                    self.codcasterballcamfollow = spawn( "script_model", var_3 );
                    self.codcasterballcamfollow.angles = vectortoangles( var_2 );
                    self.codcasterballcamfollow setmodel( "tag_origin" );
                    stopspectateplayer( self getentitynumber() );
                    self cameraunlink();
                    thread linkcameratoball( var_2 );
                }
            }
        }
        else if ( isdefined( self.codcasterballcamfollow ) )
        {
            var_4 = level.codcasterball.origin;
            var_5 = self.codcasterballcamfollow.origin;
            var_6 = distance2d( var_4, var_5 );
            var_7 = var_4 - var_5;
            var_8 = ( var_7[0], var_7[1], 0 );
            var_8 = vectornormalize( var_8 );
            var_9 = var_4;
            var_10 = ( 0, 0, 30 );
            var_10 = var_10 + -80 * var_8;
            var_11 = var_9 + var_10;

            if ( var_6 > 600 )
                self.codcasterballcamfollow.origin = var_11;
            else
                self.codcasterballcamfollow moveto( var_11, 0.5, 0, 0.2 );

            self.codcasterballcamfollow rotateto( vectortoangles( var_7 ), 0.15, 0.05, 0.05 );
        }

        wait 0.05;
    }
}

_id_12EB1()
{
    level waittill( "game_ended" );
    game["lastSpectatedPlayer"] = level.wasflagspawned;
}

setspectatepermissions( var_0 )
{
    if ( level.gameended && gettime() - level.gameendtime >= 2000 && !istrue( level.postgameexfil ) )
    {
        if ( level.teambased )
        {
            foreach ( var_2 in level.teamnamelist )
                self allowspectateteam( var_2, 0 );
        }

        self allowspectateteam( "freelook", 0 );
        self allowspectateteam( "none", 1 );
        return;
    }

    var_4 = scripts\mp\tweakables::gettweakablevalue( "game", "spectatetype" );

    if ( getdvarint( "debug_GLSpectate", 0 ) == 1 )
        var_4 = 2;

    if ( self ismlgspectator() )
        var_4 = 2;

    if ( istrue( self.inspawncamera ) )
        var_4 = 0;

    if ( istrue( var_0 ) )
        var_4 = 2;

    var_5 = self.sessionteam;

    switch ( var_4 )
    {
        case 0:
            setdisabled();
            break;
        case 1:
            self notify( "waitForGameStartSpectate" );

            if ( var_5 != "spectator" && var_5 != "follower" )
                setteamorplayeronly( var_5 );
            else if ( isdefined( self.pers["last_team"] ) )
            {
                var_5 = self.pers["last_team"];
                setteamorplayeronly( var_5 );
            }
            else if ( scripts\mp\flags::gameflag( "prematch_done" ) )
            {
                var_6 = randomint( level.teamnamelist.size );
                setteamorplayeronly( level.teamnamelist[var_6] );
            }
            else
            {
                setteamorplayeronly( "allies" );
                thread waitforgamestartspectate();
                return;
            }

            break;
        case 2:
            setfreelook( var_0 );
            break;
        case 3:
            if ( var_5 == "spectator" || var_5 == "follower" )
                setfreelook();
            else
                setteamorplayeronly( var_5 );

            break;
    }

    if ( isdefined( var_5 ) && scripts\mp\utility\teams::isgameplayteam( var_5 ) )
    {
        if ( istrue( level.spectateoverride[var_5].allowfreespectate ) )
            self allowspectateteam( "freelook", 1 );

        if ( istrue( level.spectateoverride[var_5].allowenemyspectate ) )
        {
            var_7 = scripts\mp\utility\teams::getenemyteams( var_5 );

            foreach ( var_2 in var_7 )
                self allowspectateteam( var_2, 1 );
        }
    }
}

waitforgamestartspectate()
{
    self endon( "waitForGameStartSpectate" );
    self endon( "disconnect" );
    level waittill( "prematch_over" );
    thread setspectatepermissions();
}

setdisabled()
{
    self allowspectateteam( "freelook", 0 );
    self allowspectateteam( "none", 0 );

    foreach ( var_1 in level.teamnamelist )
        self allowspectateteam( var_1, 0 );
}

setteamorplayeronly( var_0 )
{
    self allowspectateteam( "freelook", 0 );

    if ( level.teambased )
    {
        self allowspectateteam( "none", 0 );

        foreach ( var_2 in level.teamnamelist )
        {
            if ( var_0 == var_2 )
            {
                self allowspectateteam( var_2, 1 );
                continue;
            }

            self allowspectateteam( var_2, 0 );
        }
    }
    else
    {
        self allowspectateteam( "none", 1 );

        foreach ( var_2 in level.teamnamelist )
            self allowspectateteam( var_2, 1 );
    }
}

setfreelook( var_0 )
{
    self allowspectateteam( "freelook", 1 );
    self allowspectateteam( "none", 1 );

    if ( scripts\mp\flags::gameflag( "prematch_done" ) )
    {
        foreach ( var_2 in level.teamnamelist )
            self allowspectateteam( var_2, 1 );

        if ( istrue( var_0 ) )
        {
            thread scripts\mp\playerlogic::spawnspectator( undefined, undefined, 1 );
            return;
        }
    }
    else if ( self ismlgspectator() )
    {
        self allowspectateteam( "allies", 1 );
        self allowspectateteam( "axis", 1 );
        thread waitforgamestartspectate();
    }
    else
    {
        var_4 = self.sessionteam;

        if ( self == level.players[0] || var_4 == "spectator" || var_4 == "follower" )
        {
            self allowspectateteam( "allies", 1 );
            self allowspectateteam( "axis", 0 );
            thread waitforgamestartspectate();
        }
    }
}
