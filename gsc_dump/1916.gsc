// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    var_0 = spawnstruct();
    level.superglobals = var_0;
    var_0.staticsuperdata = [];
    var_0.superweapons = [];
    var_0.superearnratemultiplier = 1.0;
    var_0.supersbyid = [];
    var_0.supersbyoffhand = [];
    var_0._id_13987 = [];
    var_0.pointeventdata = [];
    loadsupertable();
    loadpointstable();
    registersupers();
    initsuperdvars();
    scripts\mp\utility\spawn_event_aggregator::registeronplayerspawncallback( ::clearsuperreminderondeath );
    thread watchforgameend();

    if ( getdvarint( "scr_superLotteryEnabled", 0 ) > 0 )
        thread watchsuperlottery();

    if ( level.allowsupers )
        level thread handlesuperearnovertime();

    scripts\mp\equipment\tactical_cover::tac_cover_init();
    scripts\mp\equipment\support_box::supportbox_init();
    scripts\mp\equipment\ammo_box::ammobox_init();
    scripts\mp\supers\super_stoppingpower::_id_138E7();
    _luidecision::_id_11ED7();
    scripts\mp\utility\spawn_event_aggregator::registeronplayerspawncallback( ::_id_13978 );
    _debug_rooftop_heli_start::subscribetoquestlocale();
    level.setsuperweapondisabled = ::setsuperweapondisabled;
    scripts\cp_mp\utility\script_utility::registersharedfunc( "super", "watchSuperLastStandEnd", ::_id_144FA );
}

loadsupertable()
{
    var_0 = scripts\mp\utility\game::getgametype() == "br";
    var_1 = 1;

    for (;;)
    {
        var_2 = tablelookupbyrow( "mp/supertable.csv", var_1, 0 );

        if ( !isdefined( var_2 ) || var_2 == "" )
            break;

        var_3 = readsupertablecell( var_1, 3, 1 );

        if ( istrue( var_3 ) && !var_0 )
        {
            var_1++;
            continue;
        }

        var_4 = spawnstruct();
        level.superglobals.staticsuperdata[var_2] = var_4;
        var_4.id = var_1;
        var_4.ref = var_2;
        var_4.weapon = readsupertablecell( var_1, 1 );
        var_5 = undefined;

        if ( scripts\mp\utility\game::isanymlgmatch() )
            var_5 = readsupertablecell( var_1, 28, 1 );

        if ( !isdefined( var_5 ) )
            var_5 = readsupertablecell( var_1, 2, 1 );

        var_4.pointsneeded = var_5;
        var_6 = undefined;

        if ( scripts\mp\utility\game::isanymlgmatch() )
            var_6 = readsupertablecell( var_1, 26, 1 );

        if ( !isdefined( var_6 ) )
            var_6 = readsupertablecell( var_1, 4, 1 );

        var_4.usetime = var_6;
        var_4.maxactivations = readsupertablecell( var_1, 5, 1 );
        var_4._id_12ACD = readsupertablecell( var_1, 6, 1 );
        var_4.useweapon = readsupertablecell( var_1, 11 );
        var_4.useweaponclipammo = readsupertablecell( var_1, 12, 1 );
        var_4.useweaponstockammo = readsupertablecell( var_1, 13, 1 );
        var_4.useweapontrackstats = readsupertablecell( var_1, 31, 1 ) > 0;
        var_4.movespeed = readsupertablecell( var_1, 14, 1 );
        var_7 = undefined;

        if ( scripts\mp\utility\game::isanymlgmatch() )
            var_7 = readsupertablecell( var_1, 27, 1 );

        if ( !isdefined( var_7 ) )
            var_7 = readsupertablecell( var_1, 15, 1 );

        var_4.graceperiod = var_7;
        var_4.maxactivationsalt = readsupertablecell( var_1, 16, 1 );
        var_4.usedelay = readsupertablecell( var_1, 18, 1 );
        var_4.ending_mortars = readsupertablecell( var_1, 19, 1 );
        var_4.archetype = readsupertablecell( var_1, 17 );
        var_4.isweapon = readsupertablecell( var_1, 20, 1 );
        var_4.canuseinlaststand = readsupertablecell( var_1, 32, 1 ) > 0;
        var_4.packextrascore0 = [];

        if ( isdefined( var_4.useweapon ) )
            var_4.useweapon = asmdevgetallstates( var_4.useweapon );

        level.superglobals.supersbyid[var_1] = var_2;

        if ( !isdefined( var_4.weapon ) )
            level.superglobals.staticsuperdata[var_2] = undefined;
        else
            level.superglobals.supersbyoffhand[var_4.weapon] = var_4;

        if ( !isdefined( var_4.pointsneeded ) )
            level.superglobals.staticsuperdata[var_2] = undefined;

        if ( isdefined( var_4.maxactivations ) )
        {
            if ( var_4.maxactivations > 0 )
                var_4.activatepenalty = 1.0 / var_4.maxactivations;
            else
                var_4.activatepenalty = 1.0;
        }

        if ( isdefined( var_4.maxactivationsalt ) )
        {
            if ( var_4.maxactivationsalt > 0 )
                var_4.activatepenaltyalt = 1.0 / var_4.maxactivationsalt;
        }

        if ( isdefined( var_4.useweapon ) )
            level.superglobals.superweapons[var_4.useweapon.basename] = var_4;

        if ( var_4.weapon == "<default>" )
            var_4.weapon = "super_default_mp";

        if ( isdefined( var_4.graceperiod ) )
            var_4.graceperiod = var_4.graceperiod * 1000.0;
        else
            var_4.graceperiod = 0.0;

        var_1++;
    }

    var_8 = tablelookup( "mp/superratetable.csv", 0, scripts\mp\utility\game::getgametype(), 1 );

    if ( isdefined( var_8 ) && var_8 != "" )
        level.superglobals.superearnratemultiplier = float( var_8 );
}

readsupertablecell( var_0, var_1, var_2 )
{
    var_3 = tablelookupbyrow( "mp/supertable.csv", var_0, var_1 );

    if ( var_3 == "" )
        return undefined;

    if ( istrue( var_2 ) )
    {
        if ( issubstr( var_3, "." ) )
            var_3 = float( var_3 );
        else
            var_3 = int( var_3 );
    }

    return var_3;
}

loadpointstable()
{
    var_0 = 2;
    var_1 = scripts\mp\utility\game::getgametype();

    for (;;)
    {
        var_2 = tablelookupbyrow( "mp/superpointstable.csv", 0, var_0 );

        if ( !isdefined( var_2 ) || var_2 == "" )
        {
            var_0 = undefined;
            break;
        }

        if ( var_2 == var_1 )
            break;

        var_0++;
    }

    var_3 = 0;

    for (;;)
    {
        var_3++;
        var_4 = tablelookupbyrow( "mp/superpointstable.csv", var_3, 0 );

        if ( !isdefined( var_4 ) || var_4 == "" )
            break;

        var_5 = undefined;

        if ( isdefined( var_0 ) )
        {
            var_5 = tablelookupbyrow( "mp/superpointstable.csv", var_3, var_0 );

            if ( isdefined( var_5 ) && var_5 == "" )
                var_5 = undefined;
        }

        if ( !isdefined( var_5 ) )
            var_5 = tablelookupbyrow( "mp/superpointstable.csv", var_3, 1 );

        var_5 = float( var_5 );

        if ( var_5 <= 0 )
            continue;

        level.superglobals.pointeventdata[var_4] = var_5;
    }
}

registersupers()
{
    registersuper( "super_test", undefined, undefined, ::testsuperbeginuse, undefined );
    registersuper( "super_bradley", undefined, undefined, ::bradleybeginuse, undefined );
    registersuper( "super_chopper_gunner", undefined, undefined, ::choppergunnerbeginuse, undefined );
    registersuper( "super_cruise_predator", undefined, undefined, ::cruisepredatorbeginuse, undefined );
    registersuper( "super_precision_airstrike", undefined, undefined, ::precisionairstrikebeginuse, undefined );
    registersuper( "super_toma_strike", undefined, undefined, ::tomastrikebeginuse, undefined );
    registersuper( "super_pac_sentry", undefined, undefined, ::pacsentrybeginuse, undefined );
    registersuper( "super_br_extract", undefined, undefined, ::brcircleextract, undefined );
    registersuper( "super_uav", undefined, undefined, ::uavbeginuse, undefined );
    registersuper( "super_tac_cover", undefined, ::taccoverunset, ::taccoverbeginuse, undefined );
    registersuper( "super_recon_drone", undefined, ::recondroneunset, ::recondronebeginuse, ::recondroneenduse );
    registersuper( "super_emp_drone", undefined, undefined, ::empdronebeginuse, undefined );
    registersuper( "super_support_box", undefined, ::supportboxunset, ::stoppingpowerbeginuse, undefined );
    registersuper( "super_laststand_heal", ::laststandhealonset, ::laststandhealunset, ::laststandhealbeginuse, undefined );
    registersuper( "super_remote_detonate", ::remotedetonateonset, undefined, ::remotedetonatebeginuse, undefined );
    registersuper( "super_trophy", ::trophyonset, undefined, undefined, undefined );
    registersuper( "super_scramble", undefined, undefined, ::scramblebeginuse, ::scrambleusefinished );
    registersuper( "super_deadsilence", undefined, undefined, ::deadsilencebeginuse, ::deadsilenceenduse );
    registersuper( "super_tac_insert", ::tacinsertonset, ::tacinsertonunset, undefined, undefined );
    registersuper( "super_ammo_drop", undefined, undefined, undefined, undefined );
    registersuper( "super_armor_drop", undefined, undefined, undefined, undefined );
    registersuper( "super_weapon_drop", undefined, undefined, ::superweapondropbeginuse, undefined );
    registersuper( "super_select", ::_id_13988, ::_id_13989, ::superselectbeginuse, undefined );
    registersuper( "super_fulton", undefined, undefined, ::_id_1397F, undefined );
    registersuper( "super_supply_drop", undefined, undefined, ::_id_1398B, undefined );
    registersuper( "super_vehicle_drop", undefined, undefined, ::_id_1398D, undefined );
    registersuper( "super_loot_drop", undefined, undefined, ::_id_1398B, undefined );

    if ( scripts\mp\utility\game::getgametype() == "br" )
    {
        registersuper( "super_decon_station", ::jugg_removefromactivejugglist, ::jugg_setherodropscriptable, undefined, undefined );
        registersuper( "super_nova_box", undefined, undefined, ::_id_11ED6, undefined );
        registersuper( "super_kiosk_drop", undefined, undefined, ::_id_13983, undefined );
        registersuper( "super_jammer_br", undefined, ::_id_13981, ::_id_13980, ::vehicle_createspawnselectionlittlebirdmarker );
        registersuper( "super_serum_gadget", undefined, undefined, ::serumgadgetbeginuse, ::serumgadgetenduse );
        registersuper( "super_slinger_br", undefined, undefined, ::superslingerbeginuse, undefined );
    }

    _id_12B3C( "super_emp_drone", "emp_drone_player_mp" );
    _id_12B3C( "super_emp_drone", "emp_drone_non_player_mp" );
    _id_12B3C( "super_emp_drone", "emp_drone_non_player_direct_mp" );
    _id_12B3C( "super_weapon_drop", "deploy_weapondrop_mp" );
}

registersuper( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = level.superglobals.staticsuperdata[var_0];

    if ( !isdefined( var_5 ) )
        return;

    var_5.setfunc = var_1;
    var_5.unsetfunc = var_2;
    var_5.beginusefunc = var_3;
    var_5.endusefunc = var_4;
    var_5.isregistered = 1;
}

_id_12B3C( var_0, var_1 )
{
    if ( !isstring( var_1 ) )
        var_1 = var_1.basename;

    var_2 = level.superglobals.staticsuperdata[var_0];
    var_2.packextrascore0[var_2.packextrascore0.size] = var_1;
    level.superglobals._id_13987[var_1] = var_2;
}

_id_13978()
{
    _id_14021();
    updatesuperuistate();
}

givesuper( var_0, var_1, var_2 )
{
    if ( getdvarint( "scr_supers_killswitch" ) != 0 )
        return;

    clearsuper( var_1 );

    if ( var_0 == "" )
        return;

    var_3 = level.superglobals.staticsuperdata[var_0];

    if ( !isdefined( var_3 ) )
        return;

    var_4 = spawnstruct();
    self.super = var_4;
    var_4.staticdata = var_3;
    var_4.allowrefund = 1;
    var_4.numkills = 0;
    var_4.wasrefunded = 0;
    var_4.canstow = 0;
    var_4.basepoints = 0;
    var_4.extrapoints = 0;
    var_4.usestarttime = undefined;
    var_4.usepercent = 0.0;
    var_4._id_12187 = undefined;
    _id_131C7( 0 );
    _id_13985( var_0 );
    self setclientomnvar( "ui_super_ref", var_0 );
    var_5 = self.pers["superBasePoints"];

    if ( !isdefined( var_5 ) )
        var_5 = 0;

    self.pers["superBasePoints"] = undefined;
    setsuperbasepoints( var_5 );
    var_6 = self.pers["superExtraPoints"];

    if ( !isdefined( var_6 ) )
        var_6 = 0;

    self.pers["superExtraPoints"] = undefined;
    setsuperextrapoints( var_6 );

    if ( !isdefined( self.pers["superExpended"] ) )
        _id_131C6( 0 );

    if ( istrue( var_2 ) )
    {
        givesuperpoints( getsuperpointsneeded() );
        var_4.madeavailabletime = gettime();
        scripts\mp\analyticslog::logevent_superearned( var_4.madeavailabletime );
    }

    if ( !issuperweapondisabled() )
    {
        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_3.weapon );
        var_7 = scripts\engine\utility::ter_op( issuperready(), 1, 0 );
        self setweaponammoclip( var_3.weapon, var_7 );
        self assignweaponoffhandspecial( var_3.weapon );
    }

    thread watchforsuperusebegin();
    thread handlespectating();

    if ( scripts\mp\utility\game::getgametype() != "br" || level.allowsupers )
    {
        thread watchforrespawn();
        thread storesupercooldownforroundchange();
        thread handleteamchange();
    }
}

handlesuperearnovertime()
{
    level endon( "game_ended" );

    if ( scripts\mp\utility\game::getgametype() != "br" )
        scripts\mp\flags::gameflagwait( "prematch_done" );

    var_0 = gettime();
    waitframe();

    for (;;)
    {
        var_1 = level.players.size;
        var_2 = ( gettime() - var_0 ) / 50;

        if ( var_2 < 11 )
        {
            wait( ( 11 - var_2 ) * 0.05 );
            var_2 = 11;
        }

        var_0 = gettime();

        for ( var_3 = 0; var_3 < var_1; var_3 = var_3 + 15 )
        {
            for ( var_4 = 0; var_4 < 15; var_4++ )
            {
                var_5 = var_3 + var_4;
                var_6 = level.players[var_5];

                if ( !isdefined( var_6 ) )
                    continue;

                if ( istrue( var_6.pausesuperpointsovertime ) )
                    continue;

                if ( !scripts\mp\utility\player::isreallyalive( var_6 ) )
                    continue;

                if ( isdefined( var_6 getcurrentsuper() ) && !var_6 getcurrentsuper().isinuse )
                    var_6 givesuperpoints( 0, "time", 0, var_2 );
            }

            waitframe();
        }

        waitframe();
    }
}

clearsuper( var_0 )
{
    var_1 = getcurrentsuper();

    if ( isdefined( var_1 ) && isdefined( var_1.staticdata ) )
        _id_13986( var_1.staticdata.ref );

    if ( istrue( var_0 ) && isdefined( var_1 ) )
        storesuperpoints();

    self clearoffhandspecial();

    if ( isdefined( var_1 ) )
        scripts\cp_mp\utility\inventory_utility::_takeweapon( var_1.staticdata.weapon );

    if ( level.codcasterenabled && !isagent( self ) )
        self setspecialactive( 0 );

    self notify( "remove_super" );
    self.super = undefined;
    thread _calloutmarkerping_handleluinotify_added::_id_1313D( "ui_super_state", 0 );
    self setclientomnvar( "ui_super_ref", "none" );
}

_id_13985( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( var_0 == "none" || var_0 == "" )
        return;

    var_1 = level.superglobals.staticsuperdata[var_0];

    if ( !isdefined( var_1 ) )
        return;

    var_2 = var_1.setfunc;

    if ( !isdefined( var_2 ) )
        return;

    self thread [[ var_2 ]]();
}

_id_13986( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( var_0 == "none" || var_0 == "" )
        return;

    var_1 = level.superglobals.staticsuperdata[var_0];

    if ( !isdefined( var_1 ) )
        return;

    var_2 = var_1.unsetfunc;

    if ( !isdefined( var_2 ) )
        return;

    self thread [[ var_2 ]]();
}

setsuperbasepoints( var_0, var_1 )
{
    var_2 = getcurrentsuper();
    var_2.basepoints = clamp( var_0, 0, getsuperpointsneeded() );

    if ( istrue( var_1 ) )
        return;

    superpointschanged();
}

setsuperextrapoints( var_0, var_1 )
{
    var_2 = getcurrentsuper();
    var_2.extrapoints = clamp( var_0, 0, getsuperpointsneeded() );

    if ( istrue( var_1 ) )
        return;

    superpointschanged();
}

superpointschanged()
{
    var_0 = getcurrentsuper();

    if ( getcurrentsuperpoints() >= getsuperpointsneeded() )
        superearned();
    else
        self setweaponammoclip( var_0.staticdata.weapon, 0 );

    _id_14021();
    updatesuperuistate();
}

givesuperpoints( var_0, var_1, var_2, var_3 )
{
    if ( istrue( game["isLaunchChunk"] ) || !level.allowsupers )
        return;

    if ( isdefined( var_1 ) )
        var_0 = getsuperpointsforevent( var_1 );

    if ( isdefined( var_3 ) )
        var_0 = var_0 * var_3;

    if ( scripts\mp\utility\perk::_hasperk( "specialty_faster_field_upgrade" ) )
        var_0 = var_0 * getdvarfloat( "perk_faster_field_upgrade_rate" );

    if ( getdvarint( "scr_disableSuperPoints", 0 ) && !istrue( var_2 ) )
        return;

    if ( isdefined( var_1 ) && var_1 == "time" )
        var_4 = var_0 * level.superfastchargerate;
    else
        var_4 = var_0 * level.superpointsmod;

    if ( var_4 <= 0 )
        return;

    var_5 = getcurrentsuper();

    if ( !isdefined( var_5 ) || issuperready() || var_5.isinuse || issuperexpended() )
    {
        updatesppm( var_0, 0, var_1 );
        return;
    }

    var_6 = min( var_4 + var_5.basepoints, getsuperpointsneeded() );
    setsuperbasepoints( var_6 );
    scripts\mp\analyticslog::logevent_reportsuperscore( var_4, gettime() );
    updatesppm( var_0, 1, var_1 );
}

_id_14021()
{
    var_0 = getcurrentsuper();

    if ( !isdefined( var_0 ) )
        return;

    if ( scripts\mp\utility\player::isinkillcam() || !isalive( self ) )
    {
        var_0._id_11FCD = undefined;
        return;
    }

    var_1 = 0.0;

    if ( var_0.isinuse )
        var_1 = getsuperuseuiprogress();
    else if ( !issuperexpended() )
    {
        var_2 = getsuperpointsneeded();
        var_1 = clamp( getcurrentsuperbasepoints() / var_2, 0.0, 1.0 );
    }

    if ( !isdefined( var_0._id_11FCD ) || var_1 != var_0._id_11FCD )
        self setclientomnvar( "ui_super_progress", var_1 );

    self setplayersupermeterprogress( var_1 );
    var_0._id_11FCD = var_1;
}

updatesuperuistate()
{
    var_0 = getcurrentsuper();

    if ( !isdefined( var_0 ) )
        return;

    if ( scripts\mp\utility\player::isinkillcam() || !isalive( self ) )
    {
        var_0.state = undefined;
        return;
    }

    var_1 = var_0.state;
    var_2 = 1;

    if ( issuperexpended() )
        var_2 = 4;
    else if ( issuperready() )
        var_2 = 2;
    else if ( issuperinuse() )
        var_2 = 3;

    if ( !isdefined( var_1 ) || var_2 != var_1 )
        thread _calloutmarkerping_handleluinotify_added::_id_1313D( "ui_super_state", var_2 );

    var_0.state = var_2;
}

watchforrespawn()
{
    var_0 = getcurrentsuper();
    self endon( "disconnect" );
    self endon( "remove_super" );

    for (;;)
    {
        self waittill( "spawned_player" );
        givesuperweapon( var_0 );
    }
}

storesupercooldownforroundchange()
{
    self endon( "disconnect" );
    self endon( "remove_super" );
    scripts\mp\flags::levelflagwait( "game_over" );

    if ( istrue( game["practiceRound"] ) )
        return;

    storesuperpoints();
}

handlespectating()
{
    self endon( "disconnect" );
    self endon( "remove_super" );
    self waittill( "joined_spectators" );
    thread clearsuper( 1 );
}

handleteamchange()
{
    self endon( "disconnect" );
    self endon( "remove_super" );
    var_0 = self.team;
    self waittill( "joined_team" );

    if ( self.team != var_0 )
    {
        self.currentfirstupgrade = undefined;
        thread clearsuper( 0 );
    }
}

handlepointdecay()
{
    self endon( "disconnect" );
    self endon( "remove_super" );
    level endon( "game_ended" );
    var_0 = getcurrentsuper();
    var_1 = getdvarfloat( "scr_super_decay_rate", 6.0 ) * level.framedurationseconds;

    for (;;)
    {
        if ( !issupercharging() )
        {
            waitframe();
            continue;
        }

        var_2 = max( var_0.extrapoints - var_1, 0 );
        setsuperextrapoints( var_2 );
        waitframe();
    }
}

superearned()
{
    var_0 = getcurrentsuper();
    self setweaponammoclip( var_0.staticdata.weapon, 1 );
    var_1 = !var_0.wasrefunded;
    self notify( "super_ready", var_1 );

    if ( var_1 )
    {
        self.pers["supersEarned"]++;
        self notify( "super_earned" );
        recordsuperearnedanalytics( var_0 );
    }

    var_0.madeavailabletime = gettime();
    var_0.numkills = 0;
    scripts\mp\analyticslog::logevent_superearned( var_0.madeavailabletime );
    setsuperextrapoints( 0, 1 );
    setsuperbasepoints( getsuperpointsneeded(), 1 );

    if ( isdefined( self.matchdatalifeindex ) )
        scripts\mp\analyticslog::logevent_fieldupgradeearned( self, var_0.staticdata.id );
}

watchforsuperusebegin()
{
    self endon( "disconnect" );
    self endon( "remove_super" );

    for (;;)
    {
        self waittill( "special_weapon_fired", var_0 );
        var_1 = trysuperusebegin( var_0 );

        if ( !istrue( var_1 ) )
            continue;

        self waittill( "super_use_finished" );
    }
}

trysuperusebegin( var_0 )
{
    if ( !scripts\mp\utility\player::isreallyalive( self ) )
        return 0;

    if ( var_0.basename != getcurrentsuper().staticdata.weapon )
        return 0;

    if ( !scripts\common\utility::is_supers_allowed() )
        return 0;

    return beginsuperuse();
}

beginsuperuse()
{
    self endon( "death_or_disconnect" );
    var_0 = getcurrentsuper();
    self notify( "super_started" );
    scripts\mp\gamelogic::sethasdonecombat( self, 1 );

    if ( var_0.staticdata.weapon == "support_box_mp" )
        self playlocalsound( "iw8_support_box_deploy" );
    else
    {

    }

    if ( isdefined( var_0 ) && !var_0.isinuse )
    {
        var_1 = !istrue( self.inlaststand ) || var_0.staticdata.canuseinlaststand;
        var_2 = 1;

        if ( isdefined( var_0.staticdata.useweapon ) )
        {
            if ( scripts\mp\arbitrary_up::isinarbitraryup() && superdisabledinarbitraryup( var_0.staticdata.ref ) )
            {
                superdisabledinarbitraryupmessage();
                var_2 = 0;
            }
            else if ( !var_1 )
                var_2 = 0;
            else
                var_2 = trygiveuseweapon( var_0.staticdata.useweapon, var_0.staticdata.useweaponclipammo, var_0.staticdata.useweaponstockammo );
        }

        if ( var_2 && var_1 && ( !isdefined( var_0.staticdata.beginusefunc ) || istrue( self [[ var_0.staticdata.beginusefunc ]]() ) ) )
        {
            var_3 = [];
            var_3[0] = "super_use_finished_lb";
            var_3[1] = "super_switched";
            setsuperbasepoints( 0 );
            setsuperextrapoints( 0 );
            _id_131C7( 1 );
            var_0.allowrefund = scripts\engine\utility::ter_op( var_0.staticdata.graceperiod > 0, 1, 0 );
            var_0.usestarttime = gettime();
            var_0.usepercent = 1.0;
            self notify( "super_use_started" );
            thread updateusetimedecay();

            if ( isdefined( self.matchdatalifeindex ) )
                scripts\mp\analyticslog::logevent_fieldupgradeactivated( self, var_0.staticdata.id );

            combatrecordsuperuse( var_0.staticdata.ref );

            if ( level.codcasterenabled )
                self setspecialactive( 1 );

            scripts\mp\utility\print::printgameaction( "super use started - " + var_0.staticdata.ref, self );
            return 1;
        }
        else
        {
            if ( isdefined( var_0.staticdata.useweapon ) && var_2 )
                thread switchandtakesuperuseweapon();

            if ( istrue( self.inlaststand ) )
                thread _id_144FA( var_0.staticdata.weapon );
            else
                self setweaponammoclip( var_0.staticdata.weapon, 1 );
        }
    }

    return 0;
}

activatesuper( var_0, var_1 )
{
    var_2 = getcurrentsuper();

    if ( !isdefined( var_0 ) )
        var_0 = 0;

    if ( var_0 && isdefined( var_2.staticdata.activatepenaltyalt ) )
        reducesuperusepercent( var_2.staticdata.activatepenaltyalt, var_1 );
    else if ( isdefined( var_2.staticdata.activatepenalty ) )
        reducesuperusepercent( var_2.staticdata.activatepenalty, var_1 );

    return 1;
}

updateusetimedecay()
{
    self endon( "death_or_disconnect" );
    self endon( "game_ended" );
    self endon( "super_use_finished" );
    var_0 = getcurrentsuper();

    if ( !isdefined( var_0.staticdata.usetime ) )
    {
        waitframe();

        if ( issuperinuse() )
            superusefinished();

        return;
    }

    if ( var_0.staticdata.usetime < 0 )
        return;

    for (;;)
    {
        waitframe();

        if ( isdefined( var_0.staticdata.usedelay ) )
        {
            var_1 = gettime() - var_0.usestarttime;

            if ( var_1 < var_0.staticdata.usedelay )
                continue;
        }

        var_2 = level.framedurationseconds / var_0.staticdata.usetime;
        reducesuperusepercent( var_2 );
        _id_14021();
        updatesuperuistate();
    }
}

reducesuperusepercent( var_0, var_1, var_2 )
{
    var_3 = getcurrentsuper();
    var_3.usepercent = max( var_3.usepercent - var_0, 0.0 );

    if ( istrue( var_1 ) )
        var_3.allowrefund = 0;

    if ( !isdefined( var_2 ) || var_2 == 0 )
        superusedurationupdated();
}

resetsuperusepercent()
{
    var_0 = getcurrentsuper();
    var_0.usepercent = 1.0;
    superusedurationupdated();
}

superusedurationupdated()
{
    var_0 = getcurrentsuper();

    if ( isbot( self ) )
    {
        if ( isdefined( var_0.staticdata.useweapon ) && var_0.staticdata.isweapon == 1 )
        {
            var_1 = self getammocount( var_0.staticdata.useweapon );

            if ( isdefined( var_1 ) && var_1 > 0 )
            {
                superusefinished();
                return;
            }
        }
    }

    if ( var_0.usepercent <= 0.0 )
        superusefinished();
}

superusefinished( var_0, var_1, var_2, var_3 )
{
    var_4 = getcurrentsuper();
    self notify( "super_use_finished_lb" );
    var_5 = 0;

    if ( !isdefined( var_3 ) || var_3 == 0 )
        var_5 = shouldrefundsuper();

    _id_131C7( 0 );
    var_4.canstow = 0;
    var_6 = undefined;

    if ( isdefined( var_4.staticdata.endusefunc ) )
    {
        if ( !isdefined( var_1 ) )
            var_1 = 0;

        var_6 = self [[ var_4.staticdata.endusefunc ]]( var_1 );
    }

    if ( var_5 || istrue( var_0 ) || istrue( var_6 ) )
    {
        _id_131C6( 0 );
        var_4.wasrefunded = 1;
        setsuperbasepoints( getsuperpointsneeded() );
    }
    else if ( istrue( var_2 ) )
    {
        _id_131C6( 0 );
        var_7 = getsuperpointsneeded() * var_4.usepercent;
        var_4.wasrefunded = 1;
        setsuperbasepoints( var_7 );
    }
    else
    {
        _id_131C6( 1 );
        var_4.lastfinishtime = gettime();
        var_4.wasrefunded = 0;
    }

    thread switchandtakesuperuseweapon();
    var_8 = var_4.usestarttime - var_4.madeavailabletime;
    scripts\mp\analyticslog::logevent_superended( var_4.staticdata.ref, var_8, 0, var_4.numkills );

    if ( level.codcasterenabled )
        self setspecialactive( 0 );

    scripts\mp\utility\print::printgameaction( "super use ended - " + var_4.staticdata.ref, self );

    if ( scripts\mp\utility\game::getgametype() == "br" )
    {
        if ( !level.allowsupers )
        {
            if ( !istrue( var_0 ) )
            {
                self setclientomnvar( "ui_perk_package_state", 0 );
                self setclientomnvar( "ui_super_progress", 0 );
            }
        }
        else if ( var_4.staticdata.ending_mortars )
        {
            clearsuper();
            self setclientomnvar( "ui_perk_package_state", 0 );
            self setclientomnvar( "ui_super_progress", 0 );
            thread _calloutmarkerping_handleluinotify_added::_id_1313D( "ui_super_state", 0 );
        }
    }

    self notify( "super_use_finished" );
    scripts\cp\vehicles\vehicle_compass_cp::_id_12097( var_4, var_5 );
}

refundsuper()
{
    var_0 = getcurrentsuper();

    if ( isdefined( var_0 ) )
    {
        if ( var_0.isinuse )
            superusefinished( 1 );
        else
            givesuperpoints( getsuperpointsneeded() );
    }
}

handledeath()
{
    self endon( "disconnect" );

    if ( !issuperinuse() )
        return;

    var_0 = getcurrentsuper();
    var_1 = var_0.staticdata._id_12ACD;
    superusefinished( var_1, 1 );
}

monitoruseweaponfiring( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "super_use_finished" );
    self endon( "remove_super" );

    for (;;)
    {
        self waittill( "weapon_fired", var_1 );

        if ( isnullweapon( var_1, var_0, 1 ) )
            activatesuper( var_1.isalternate, 1 );
    }
}

trygiveuseweapon( var_0, var_1, var_2 )
{
    self endon( "death_or_disconnect" );
    scripts\cp_mp\utility\inventory_utility::_giveweapon( var_0 );
    self setweaponammoclip( var_0, var_1 );
    self setweaponammostock( var_0, var_2 );
    var_3 = scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( var_0, isbot( self ) );

    if ( var_3 )
    {
        thread manageuseweapon( var_0 );
        thread monitoruseweaponfiring( var_0 );
        return 1;
    }

    scripts\cp_mp\utility\inventory_utility::abortmonitoredweaponswitch( var_0 );
    return 0;
}

manageuseweapon( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "super_use_finished" );
    var_1 = getcurrentsuper();
    var_1.useweaponswapped = undefined;
    var_2 = 0;

    for (;;)
    {
        var_3 = self getcurrentweapon();

        if ( !var_1.canstow && !isnullweapon( var_0, var_3, 1 ) )
        {
            if ( var_3.basename == "iw7_uplinkball_mp" || var_3.basename == "iw7_tdefball_mp" )
                var_2 = 1;

            break;
        }

        waitframe();
    }

    if ( issuperinuse() )
    {
        var_1.useweaponswapped = 1;
        superusefinished( undefined, undefined, var_2 );
    }
}

switchandtakesuperuseweapon()
{
    self endon( "death" );
    var_0 = getcurrentsuper();
    var_1 = var_0.staticdata.useweapon;

    if ( !isdefined( var_1 ) )
        return;

    if ( scripts\cp_mp\utility\inventory_utility::isswitchingtoweaponwithmonitoring( var_1 ) )
    {
        scripts\cp_mp\utility\inventory_utility::abortmonitoredweaponswitch( var_1 );
        return;
    }

    self notify( "super_switched" );
    scripts\cp_mp\utility\inventory_utility::getridofweapon( var_1 );
}

storesuperpoints()
{
    var_0 = getcurrentsuper();

    if ( !isdefined( var_0 ) )
        return;

    if ( issupercharging() || issuperready() )
    {
        self.pers["superBasePoints"] = var_0.basepoints;
        self.pers["superExtraPoints"] = var_0.extrapoints;
    }
    else if ( issuperinuse() && shouldrefundsuper() )
    {
        var_1 = getsuperpointsneeded();
        self.pers["superPoints"] = var_0.usepercent * var_1;
        self.pers["superExtraPoints"] = 0;
    }
    else
    {
        self.pers["superBasePoints"] = 0;
        self.pers["superExtraPoints"] = 0;
    }
}

getsuperuseuiprogress()
{
    var_0 = getcurrentsuper();
    return var_0.usepercent;
}

getcurrentsuperbasepoints()
{
    return getcurrentsuper().basepoints;
}

getcurrentsuperextrapoints()
{
    return getcurrentsuper().basepoints;
}

getcurrentsuperpoints()
{
    var_0 = getcurrentsuper();
    return var_0.basepoints + var_0.extrapoints;
}

getsuperpointsneeded()
{
    var_0 = getcurrentsuper();
    var_1 = var_0.staticdata.pointsneeded;

    if ( isdefined( var_0._id_12187 ) )
        var_1 = var_0._id_12187;

    return var_1;
}

issuperready()
{
    var_0 = getcurrentsuper();

    if ( !isdefined( var_0 ) || var_0.isinuse )
        return 0;

    return getcurrentsuperpoints() >= getsuperpointsneeded();
}

issuperinuse()
{
    return isdefined( getcurrentsuper() ) && getcurrentsuper().isinuse;
}

_id_131C7( var_0 )
{
    var_1 = getcurrentsuper();
    var_1.isinuse = var_0;
    updatesuperuistate();
}

issupercharging()
{
    return !issuperready() && !issuperinuse();
}

issuperexpended()
{
    if ( getdvarint( "scr_super_expendable", 1 ) == 0 )
        return 0;

    return istrue( self.pers["superExpended"] );
}

_id_131C6( var_0 )
{
    self.pers["superExpended"] = var_0;
    updatesuperuistate();
}

getcurrentsuper()
{
    return self.super;
}

getcurrentsuperref()
{
    var_0 = getcurrentsuper();

    if ( !isdefined( var_0 ) )
        return undefined;

    return var_0.staticdata.ref;
}

shouldrefundsuper()
{
    var_0 = getcurrentsuper();
    var_1 = var_0.staticdata.graceperiod;
    var_2 = undefined;

    if ( isdefined( var_0 ) && isdefined( var_0.usestarttime ) )
        var_2 = gettime() - var_0.usestarttime;

    if ( !isdefined( var_2 ) || var_2 >= var_1 )
        return 0;

    if ( var_0.numkills > 0 )
        return 0;

    return var_0.allowrefund;
}

getsuperrefforsuperuseweapon( var_0 )
{
    if ( !isstring( var_0 ) )
        var_0 = var_0.basename;

    if ( !isdefined( level.superglobals ) || !isdefined( level.superglobals.superweapons ) || !isdefined( level.superglobals.superweapons[var_0] ) )
        return undefined;

    return level.superglobals.superweapons[var_0].ref;
}

getsuperrefforsuperoffhand( var_0 )
{
    if ( !isstring( var_0 ) )
        var_0 = var_0.basename;

    if ( !isdefined( level.superglobals.supersbyoffhand[var_0] ) )
        return undefined;

    return level.superglobals.supersbyoffhand[var_0].ref;
}

roundkillexecute( var_0 )
{
    if ( !isstring( var_0 ) )
        var_0 = var_0.basename;

    if ( !isdefined( level.superglobals._id_13987[var_0] ) )
        return undefined;

    return level.superglobals._id_13987[var_0].ref;
}

getsuperrefforsuperweapon( var_0 )
{
    if ( !isdefined( level.superglobals ) )
        return undefined;

    if ( !isstring( var_0 ) )
        var_0 = var_0.basename;

    var_1 = getsuperrefforsuperuseweapon( var_0 );

    if ( isdefined( var_1 ) )
        return var_1;

    var_2 = getsuperrefforsuperoffhand( var_0 );

    if ( isdefined( var_2 ) )
        return var_2;

    var_2 = roundkillexecute( var_0 );

    if ( isdefined( var_2 ) )
        return var_2;

    return undefined;
}

shouldtracksuperweaponstats( var_0 )
{
    var_1 = getsuperrefforsuperweapon( var_0 );

    if ( isdefined( var_1 ) )
    {
        var_2 = level.superglobals.staticsuperdata[var_1];
        return var_2.useweapontrackstats;
    }

    return undefined;
}

getsuperid( var_0 )
{
    if ( !isdefined( var_0 ) || !isdefined( level.superglobals ) || !isdefined( level.superglobals.staticsuperdata ) || !isdefined( level.superglobals.staticsuperdata[var_0] ) || var_0 == "none" )
        return 0;

    return level.superglobals.staticsuperdata[var_0].id;
}

getmovespeedforsuperweapon( var_0 )
{
    var_1 = getsuperrefforsuperweapon( var_0 );

    if ( !isdefined( var_1 ) )
        return undefined;

    return level.superglobals.staticsuperdata[var_1].movespeed;
}

getrootsuperref( var_0 )
{
    return getsubstr( var_0, 6 );
}

allowsuperweaponstow()
{
    var_0 = getcurrentsuper();

    if ( !isdefined( var_0 ) || !var_0.isinuse )
        return;

    var_0.canstow = 1;
}

unstowsuperweapon()
{
    var_0 = getcurrentsuper();

    if ( !isdefined( var_0 ) || !var_0.canstow )
        return;

    if ( !var_0.isinuse || !isdefined( var_0.staticdata.useweapon ) )
    {
        var_0.canstow = 0;
        return;
    }

    scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( var_0.staticdata.useweapon );
    var_0.canstow = 0;
}

getsuperpointsforevent( var_0 )
{
    var_1 = level.superglobals.pointeventdata[var_0];

    if ( !isdefined( var_1 ) )
        return 0;

    return var_1;
}

watchforgameend()
{
    level waittill( "game_ended" );

    if ( scripts\mp\utility\game::waslastround() )
    {
        foreach ( var_1 in level.players )
            var_1 writesppmstats();
    }
}

getsppmdata()
{
    if ( getdvarint( "scr_sppm_data", 0 ) == 0 )
        return;

    if ( isai( self ) )
        return;

    if ( !isdefined( self.sppmdata ) )
    {
        self.sppmdata = self.pers["sppmData"];

        if ( !isdefined( self.sppmdata ) )
        {
            self.sppmdata = spawnstruct();
            self.sppmdata.totalpoints = 0;
            self.sppmdata.totalappliedpoints = 0;
            self.sppmdata.eventtotals = [];
            self.pers["sppmData"] = self.sppmdata;
        }
    }

    return self.sppmdata;
}

updatesppm( var_0, var_1, var_2 )
{
    if ( getdvarint( "scr_sppm_data", 0 ) == 0 )
        return;

    if ( isai( self ) )
        return;

    var_3 = getsppmdata();
    var_3.totalpoints = var_3.totalpoints + var_0;

    if ( istrue( var_1 ) )
        var_3.totalappliedpoints = var_3.totalappliedpoints + var_0;

    if ( !isdefined( var_2 ) )
        var_2 = "undefined";

    if ( !isdefined( var_3.eventtotals[var_2] ) )
        var_3.eventtotals[var_2] = var_0;
    else
        var_3.eventtotals[var_2] = var_3.eventtotals[var_2] + var_0;
}

writesppmstats()
{
    if ( getdvarint( "scr_sppm_data", 0 ) == 0 )
        return;

    if ( isai( self ) )
        return;

    var_0 = getsppmdata();
    var_1 = scripts\mp\persistence::statgetchildbuffered( "round", "timePlayed", 1 ) / 60.0;
    var_2 = 0.0;
    var_3 = 0.0;

    if ( var_1 > 0.0 )
    {
        var_2 = var_0.totalpoints / var_1;
        var_3 = var_0.totalappliedpoints / var_1;
    }

    var_4 = "";
    var_5 = -1;

    foreach ( var_8, var_7 in var_0.eventtotals )
    {
        if ( var_7 > var_5 )
        {
            var_5 = var_7;
            var_4 = var_8;
        }
    }

    getentitylessscriptablearray( "mpscript_sppm", [ "sppm", var_2, "sppm_applied", var_3, "gamemode", scripts\mp\utility\game::getgametype(), "kills", self.kills, "time_played", var_1, "best_event", var_4, "script_version", getscriptdataversion() ] );
}

modifysuperequipmentdamage( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = var_3;

    if ( isdefined( self.owner ) && isdefined( var_0 ) && var_0 == self.owner )
        var_5 = int( ceil( var_3 * 0.5 ) );

    return var_5;
}

updateactivesupers( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = isdefined( var_0 ) && isplayer( var_0 );
    var_9 = var_5.basename == "throwingknife_mp" || var_5.basename == "throwingknife_fire_mp" || var_5.basename == "throwingknife_electric_mp" || var_5.basename == "throwingknife_drill_mp";
    var_10 = var_9 && isdefined( var_0 ) && isdefined( var_0.classname ) && var_0.classname == "grenade";
    var_11 = isdefined( var_1 ) && isplayer( var_1 ) && var_1 != var_2;

    if ( var_11 )
    {
        var_12 = var_1 getcurrentsuper();

        if ( var_8 || var_10 )
        {
            if ( isdefined( var_12 ) && var_12.staticdata.ref == "super_deadsilence" && var_1 issuperinuse() )
                var_1 thread scripts\mp\supers\super_deadsilence::superdeadsilence_onkill();
        }

        if ( var_8 && var_0 scripts\mp\utility\perk::_hasperk( "specialty_bulletdamage" ) )
            var_1 thread scripts\mp\supers\super_stoppingpower::_id_138EC( var_5 );
    }
}

watchsuperdelay()
{
    level endon( "super_delay_end" );
    level endon( "round_end" );
    level endon( "game_ended" );

    if ( scripts\mp\utility\game::isanymlgmatch() )
        level.superdelay = 0;
    else
        level.superdelay = getdvarfloat( "scr_superDelay", 0 );

    if ( scripts\mp\utility\game::getgametype() != "br" )
        scripts\mp\flags::gameflagwait( "prematch_done" );

    if ( level.superdelay == 0 )
    {
        level.superdelaystarttime = gettime();
        level.superdelayendtime = level.superdelaystarttime;
        level notify( "super_delay_end" );
    }

    level.superdelaystarttime = gettime();
    level.superdelayendtime = level.superdelaystarttime + level.superdelay * 1000;
    level notify( "super_delay_start" );

    while ( gettime() < level.superdelayendtime )
        waitframe();

    level notify( "super_delay_end" );
}

watchplayersuperdelayweapon()
{
    level endon( "round_end" );
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "clearedAllows" );
    self notify( "watchPlayerSuperDelayWeapon" );

    if ( superdelaypassed() )
        return;

    scripts\common\utility::allow_supers( 0, "super_delay" );
    scripts\engine\utility::waittill_any_ents( level, "super_delay_end", self, "watchPlayerSuperDelayWeapon" );
    scripts\common\utility::allow_supers( 1, "super_delay" );
}

superdelaypassed()
{
    return isdefined( level.superdelayendtime ) && gettime() >= level.superdelayendtime;
}

cancelsuperdelay()
{
    level.superdelay = 0;
    level.superdelaystarttime = gettime();
    level.superdelayendtime = level.superdelaystarttime;
    level notify( "super_delay_end" );
}

setsuperweapondisabled( var_0 )
{
    self.issuperdisabled = var_0;

    if ( !var_0 )
        endsuperdisableweapon();
    else
    {
        self notify( "super_disable_start" );
        thread watchsuperdisableplayer();
    }
}

issuperweapondisabled()
{
    return istrue( self.issuperdisabled );
}

watchsuperdisableplayer()
{
    self endon( "remove_super" );
    self endon( "disconnect" );
    level endon( "round_end" );
    level endon( "game_ended" );
    self notify( "super_disable_end" );
    self endon( "super_disable_end" );
    var_0 = getcurrentsuper();

    if ( isdefined( var_0 ) )
    {
        var_1 = var_0.staticdata.weapon;
        scripts\cp_mp\utility\inventory_utility::_takeweapon( var_1 );
        givesuperdisableweapon();
    }

    thread cleanupsuperdisableweapon();

    if ( !istrue( scripts\mp\flags::gameflag( "prematch_done" ) ) )
        level waittill( "super_delay_start" );

    for (;;)
    {
        self waittill( "special_weapon_fired", var_2 );

        if ( var_2.basename != "super_delay_mp" )
            continue;

        self setweaponammoclip( var_2, 99 );

        if ( issuperready() )
        {
            var_3 = ( level.superdelayendtime - gettime() ) / 1000;
            var_3 = int( max( 0, ceil( var_3 ) ) );

            if ( var_3 > 0 )
                scripts\mp\hud_message::showerrormessage( "MP/SUPERS_UNAVAILABLE_FOR_N", var_3 );
            else
                scripts\mp\hud_message::showerrormessage( "MP/SUPERS_UNAVAILABLE" );
        }
    }
}

cleanupsuperdisableweapon()
{
    self endon( "disconnect" );
    level endon( "round_end" );
    level endon( "game_ended" );
    level endon( "super_disable_end" );
    self notify( "watchSuperDelayWeaponCleanup" );
    self endon( "watchSuperDelayWeaponCleanup" );

    for (;;)
    {
        self waittill( "remove_super" );
        scripts\cp_mp\utility\inventory_utility::_takeweapon( "super_delay_mp" );
    }
}

endsuperdisableweapon()
{
    var_0 = getcurrentsuper();

    if ( isdefined( var_0 ) )
    {
        var_1 = var_0.staticdata.weapon;
        var_2 = scripts\engine\utility::ter_op( issuperready(), 1, 0 );
        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_1 );
        self setweaponammoclip( var_1, var_2 );
        self assignweaponoffhandspecial( var_1 );
        scripts\cp_mp\utility\inventory_utility::_takeweapon( "super_delay_mp" );
    }

    self notify( "super_disable_end" );
}

givesuperdisableweapon()
{
    scripts\cp_mp\utility\inventory_utility::_giveweapon( "super_delay_mp" );
    self setweaponammoclip( "super_delay_mp", 99 );
    self assignweaponoffhandspecial( "super_delay_mp" );
}

givesuperweapon( var_0 )
{
    if ( superdelaypassed() )
    {
        if ( !self hasweapon( var_0.staticdata.weapon ) )
        {
            var_1 = scripts\engine\utility::ter_op( issuperready(), 1, 0 );
            scripts\cp_mp\utility\inventory_utility::_giveweapon( var_0.staticdata.weapon );
            self setweaponammoclip( var_0.staticdata.weapon, var_1 );
            self assignweaponoffhandspecial( var_0.staticdata.weapon );
        }
    }
    else
        givesuperdisableweapon();
}

watchobjuse( var_0, var_1 )
{
    self endon( "death_or_disconnect" );
    self endon( "obj_drain_end" );
    self endon( "ball_dropped" );

    if ( scripts\mp\utility\game::getgametype() == "sd" || scripts\mp\utility\game::getgametype() == "sr" || scripts\mp\utility\game::getgametype() == "dd" )
    {
        if ( istrue( var_1 ) )
            self waittill( "super_obj_drain" );
    }
    else if ( !isdefined( self.carryobject ) )
        self waittill( "obj_picked_up" );
    else
        wait 0.05;

    while ( issuperinuse() )
    {
        reducesuperusepercent( var_0 );
        wait 0.05;
    }
}

combatrecordsuperuse( var_0 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() )
        return;

    if ( var_0 == "super_kiosk_drop" )
        return;

    var_1 = self getplayerdata( "mp", "playerStats", "superStats", var_0, "uses" );
    self setplayerdata( "mp", "playerStats", "superStats", var_0, "uses", var_1 + 1 );
}

combatrecordsuperkill( var_0 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() )
        return;

    var_1 = self getplayerdata( "mp", "playerStats", "superStats", var_0, "kills" );
    self setplayerdata( "mp", "playerStats", "superStats", var_0, "kills", var_1 + 1 );
}

hide_plunderboxes( var_0, var_1 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() )
        return;

    if ( !isdefined( var_1 ) )
        var_1 = 1;

    var_2 = relic_fastbleedout_returnfunc( var_0 );
    self setplayerdata( "mp", "playerStats", "superStats", var_0, "misc1", var_2 + var_1 );
}

relic_fastbleedout_returnfunc( var_0 )
{
    return self getplayerdata( "mp", "playerStats", "superStats", var_0, "misc1" );
}

superdisabledinarbitraryup( var_0 )
{
    if ( var_0 == "super_microturret" || var_0 == "super_supertrophy" )
        return 1;

    return 0;
}

superdisabledinarbitraryupmessage()
{
    scripts\mp\hud_message::showerrormessage( "MP/SUPERS_UNAVAILABLE_ARB_UP" );
}

bradleybeginuse()
{
    return scripts\cp_mp\vehicles\light_tank::light_tank_tryuse();
}

choppergunnerbeginuse()
{
    return scripts\mp\killstreaks\killstreaks::trytriggerkillstreakfromsuper( "chopper_gunner" );
}

cruisepredatorbeginuse()
{
    return scripts\mp\killstreaks\killstreaks::trytriggerkillstreakfromsuper( "cruise_predator" );
}

scramblebeginuse()
{
    var_0 = spawn( "script_model", self.origin + ( 0, 0, 400 ) );
    self.scrambleent = var_0;
    self.scrambleent setmodel( "super_scramble_mp" );
    self.scrambleent linkto( self );
    self.scrambleent.owner = self;
    self.scrambleent.team = self.team;
    self.scrambleent setotherent( self );
    self.scrambleent setscriptablepartstate( "scramble_sfx", "on", 0 );
    thread scripts\cp_mp\killstreaks\helper_drone::spawn_ai_single( self );
    return 1;
}

scrambleusefinished( var_0 )
{
    self.scrambleent unlink();
    self.scrambleent delete();
    scripts\cp_mp\killstreaks\helper_drone::helperdrone_endscramblereffect();
}

trophyonset()
{
    return scripts\mp\equipment\trophy_system::trophy_onsuperset();
}

jugg_removefromactivejugglist()
{
    return _debug_rooftop_heli_start::jugg_getminigunweapon();
}

jugg_setherodropscriptable()
{
    return _debug_rooftop_heli_start::jugg_go_to_node_callback();
}

tacinsertonset()
{
    scripts\mp\equipment\tac_insert::tacinsert_set();
}

tacinsertonunset()
{
    scripts\mp\equipment\tac_insert::tacinsert_unset();
}

remotedetonateonset()
{

}

remotedetonatebeginuse()
{

}

precisionairstrikebeginuse()
{
    return scripts\mp\killstreaks\killstreaks::trytriggerkillstreakfromsuper( "precision_airstrike" );
}

tomastrikebeginuse()
{
    return scripts\mp\killstreaks\killstreaks::trytriggerkillstreakfromsuper( "toma_strike" );
}

pacsentrybeginuse()
{
    return scripts\mp\killstreaks\killstreaks::trytriggerkillstreakfromsuper( "pac_sentry" );
}

brcircleextract()
{

}

uavbeginuse()
{
    return scripts\mp\killstreaks\killstreaks::trytriggerkillstreakfromsuper( "uav" );
}

taccoverbeginuse()
{
    return scripts\mp\equipment\tactical_cover::tac_cover_on_fired_super();
}

taccoverunset()
{
    return scripts\mp\equipment\tactical_cover::tac_cover_on_take_super();
}

recondronebeginuse()
{
    return scripts\cp_mp\killstreaks\helper_drone::recondrone_beginsuper();
}

recondroneenduse( var_0 )
{
    return scripts\cp_mp\killstreaks\helper_drone::recondrone_endsuper( var_0 );
}

recondroneunset()
{
    scripts\cp_mp\killstreaks\helper_drone::recondrone_unsetsuper();
}

empdronebeginuse()
{
    return scripts\cp_mp\killstreaks\emp_drone_targeted::empdrone_beginsuper();
}

deadsilencebeginuse()
{
    return scripts\mp\supers\super_deadsilence::superdeadsilence_beginsuper();
}

deadsilenceenduse( var_0 )
{
    return scripts\mp\supers\super_deadsilence::superdeadsilence_endsuper( var_0 );
}

supportboxunset()
{
    scripts\mp\equipment\support_box::supportbox_unset();
}

laststandhealonset()
{
    return scripts\mp\supers\laststand_heal::laststandheal_onset();
}

laststandhealunset()
{
    return scripts\mp\supers\laststand_heal::laststandheal_unset();
}

laststandhealbeginuse()
{
    return scripts\mp\supers\laststand_heal::laststandheal_beginuse();
}

stoppingpowerbeginuse()
{
    return scripts\mp\supers\super_stoppingpower::stoppingpower_beginuse();
}

_id_11ED6()
{
    return _luidecision::_id_11ED6();
}

superweapondropbeginuse()
{
    return scripts\mp\equipment\weapon_drop::weapondrop_beginsuper();
}

_id_13988()
{
    var_0 = scripts\mp\perks\perkpackage::perkpackage_getfirstfieldupgrade();
    _id_13985( var_0 );
    self.super.firstupgrade = var_0;
    var_1 = scripts\mp\perks\perkpackage::perkpackage_getsecondfieldupgrade();
    _id_13985( var_1 );
    self.super.secondupgrade = var_1;
    var_2 = level.superglobals.staticsuperdata[var_0];
    var_3 = 0;

    if ( isdefined( var_2 ) )
        var_3 = var_2.pointsneeded;

    var_2 = level.superglobals.staticsuperdata[var_1];
    var_4 = 0;

    if ( isdefined( var_2 ) )
        var_4 = var_2.pointsneeded;

    var_5 = max( var_3, var_4 );
    self.super._id_12187 = var_5;
}

_id_13989()
{
    var_0 = self.super.firstupgrade;
    _id_13986( var_0 );
    var_1 = self.super.secondupgrade;
    _id_13986( var_1 );
}

superselectbeginuse()
{
    return scripts\mp\perks\perkpackage::perkpackage_openselect();
}

testsuperbeginuse()
{
    thread testsuperrefundwatcher();
    return 1;
}

_id_1397F()
{
    return 1;
}

_id_1398B()
{
    return 1;
}

_id_1398D()
{
    return 1;
}

_id_13984()
{
    return 1;
}

_id_13981()
{
    _donewithcorpse::vehicle_cp_create();
}

_id_13980()
{
    return 1;
}

vehicle_createspawnselectionlittlebirdmarker( var_0 )
{
    _donewithcorpse::vehicle_compass_playerspawnedcallback();
}

superslingerbeginuse()
{
    return scripts\mp\equipment\slinger.gsc::slinger_allow_use();
}

_id_13983()
{
    return 1;
}

serumgadgetbeginuse()
{
    var_0 = getcurrentsuper();
    var_1 = var_0.staticdata.usetime;
    thread _findnewlocaleplacement::start_serum_gadget( var_1 );
    return 1;
}

serumgadgetenduse( var_0 )
{
    _findnewlocaleplacement::stop_serum_gadget();
}

testsuperrefundwatcher()
{
    self endon( "super_use_finished" );

    for (;;)
    {
        if ( self buttonpressed( "BUTTON_X" ) )
            superusefinished( 0, 0, 1 );
        else if ( self buttonpressed( "BUTTON_Y" ) )
            superusefinished( 1 );

        waitframe();
    }
}

showsuperremindersplash()
{
    self endon( "disconnect" );

    if ( !istrue( self.superreminderset ) )
    {
        self notify( "showSuperReminderSplash" );
        self endon( "showSuperReminderSplash" );
        self.superreminderset = 1;
        self setclientomnvar( "ui_super_reminder", 1 );
        wait 0.5;
        thread clearsuperremindersplash();
    }
    else
    {
        thread clearsuperremindersplash();
        self endon( "showSuperReminderSplash" );
        waitframe();
        thread showsuperremindersplash();
        return;
    }
}

clearsuperremindersplash()
{
    self notify( "showSuperReminderSplash" );
    self.superreminderset = undefined;
    self setclientomnvar( "ui_super_reminder", 0 );
}

clearsuperreminderondeath( var_0 )
{
    if ( !isplayer( var_0 ) )
        return;

    thread clearsuperreminderondeathinternal( var_0 );
}

clearsuperreminderondeathinternal( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 waittill( "death" );
    var_0 clearsuperremindersplash();
}

initsuperdvars()
{
    setdvarifuninitialized( "scr_super_decay_rate", 6.0 );
}

watchsuperlottery()
{
    level endon( "game_ended" );
    var_0 = getdvarint( "scr_superLotteryDelay", 60 );
    var_1 = getdvarint( "scr_superLotteryIntervalMin", 45 );
    var_2 = getdvarint( "scr_superLotteryIntervalMax", 90 );
    var_3 = var_2 - var_1;
    waitframe();

    if ( !istrue( scripts\mp\flags::gameflag( "prematch_done" ) ) )
        level waittill( "prematch_over" );

    wait( var_0 );
    var_4 = undefined;
    var_5 = undefined;
    var_6 = [];
    var_7 = [];

    foreach ( var_9 in level.teamnamelist )
    {
        var_6[var_9] = undefined;
        var_7[var_9] = [];
    }

    for (;;)
    {
        var_4 = var_5;
        var_5 = getdvarint( "scr_superLotteryEnabled", 0 ) > 0;

        if ( !isdefined( var_4 ) || var_4 != var_5 )
        {
            if ( var_5 )
                level notify( "superLotteryEnabled" );
            else
                level notify( "superLotteryDisabled" );
        }

        foreach ( var_9 in level.teamnamelist )
        {
            if ( !isdefined( var_6[var_9] ) )
            {
                var_6[var_9] = gettime() + ( var_1 + randomint( var_3 ) ) * 1000;
                continue;
            }

            if ( var_6[var_9] <= gettime() )
            {
                var_12 = scripts\mp\utility\teams::getteamdata( var_9, "players" );

                if ( var_12.size > 0 )
                {
                    var_12 = scripts\engine\utility::array_randomize( var_12 );
                    var_13 = [];
                    var_14 = undefined;

                    foreach ( var_16 in var_12 )
                    {
                        if ( !scripts\engine\utility::array_contains( var_7[var_9], var_16 ) )
                        {
                            if ( isdefined( var_16 getcurrentsuper() ) )
                            {
                                var_14 = var_16;
                                break;
                            }
                        }
                        else if ( isdefined( var_16 getcurrentsuper() ) )
                            var_13[var_13.size] = var_16;
                    }

                    if ( !isdefined( var_14 ) )
                    {
                        if ( isdefined( var_13[0] ) )
                            var_14 = var_13[0];
                        else
                            var_14 = var_12[0];
                    }

                    if ( var_5 )
                        childthread awardsuperlottery( var_14 );

                    var_7[var_7.size] = var_14;
                }

                var_6[var_9] = undefined;
            }
        }

        waitframe();
    }
}

_id_144FA( var_0 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self waittill( "last_stand_finished" );
    self setweaponammoclip( var_0, 1 );
}

awardsuperlottery( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "joined_team" );
    level endon( "superLotteryDisabled" );
    var_0 notify( "awardSuperLottery" );
    var_0 endon( "awardSuperLottery" );

    for (;;)
    {
        var_1 = var_0 getcurrentsuper();

        if ( !isdefined( var_1 ) )
            return;

        if ( !var_0 issuperinuse() )
            break;

        waitframe();
    }

    var_0 givesuperpoints( getsuperpointsneeded(), undefined, 1 );
}

getscriptdataversion()
{
    if ( getdvarint( "scr_playtest_qa", 0 ) != 0 )
        return 254;

    if ( getdvarint( "scr_playtest", 0 ) != 0 )
        return 7;

    return 254;
}

recordsuperearnedanalytics( var_0 )
{
    if ( getdvarint( "scr_super_earn_data", 0 ) == 0 )
        return;

    var_1 = scripts\mp\persistence::statgetchildbuffered( "round", "timePlayed", 1 ) / 60.0;
    getentitylessscriptablearray( "mpscript_super_earning", [ "super_ref", var_0.staticdata.ref, "earn_time", var_1, "gamemode", scripts\mp\utility\game::getgametype(), "script_version", getscriptdataversion(), "earned_count", self.pers["supersEarned"] ] );
}
