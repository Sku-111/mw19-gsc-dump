// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

validationerror( var_0, var_1, var_2 )
{
    var_3 = var_0;

    if ( isdefined( var_1 ) )
        var_3 = var_3 + "_" + var_1;

    if ( isdefined( var_2 ) )
        var_3 = var_3 + " - " + var_2;

    if ( getdvarint( "scr_validate_print", 0 ) == 1 )
    {

    }

    if ( getdvarint( "scr_validate_assert", 0 ) == 1 )
    {

    }

    if ( getdvarint( "scr_validate_record", 0 ) == 1 )
        scripts\mp\class::recordvalidationinfraction();
}

vandalize( var_0, var_1 )
{
    var_2 = getdvarint( "scr_checkValidAttachmentUnlock", 0 ) == 1;

    if ( var_2 )
        return scripts\mp\utility\weapon::carrier_cleanup( var_0, var_1 );

    return 1;
}

isweaponvariantconditionallylocked( var_0, var_1 )
{
    if ( !isdefined( var_1 ) || var_1 <= 0 )
        return 0;

    if ( !isdefined( level.restrict_s4_shield_variants ) )
        level.restrict_s4_shield_variants = getdvarint( "scr_br_restrict_s4_shield_variants", 0 );

    if ( level.restrict_s4_shield_variants )
    {
        if ( !isdefined( level.s4_shield_variants ) )
        {
            level.s4_shield_variants = [];
            level.s4_shield_variants["s4_me_rindigo|1"] = 1;
            level.s4_shield_variants["s4_me_rindigo|2"] = 1;
            level.s4_shield_variants["s4_me_rindigo|3"] = 1;
        }

        var_2 = var_0 + "|" + var_1;

        if ( isdefined( level.s4_shield_variants[var_2] ) )
            return 1;
    }

    return 0;
}

validateloadout( var_0 )
{
    var_1 = scripts\mp\utility\weapon::weaponnumbermap( var_0.loadoutprimary );
    var_2 = 0;

    if ( !isdefined( var_1 ) )
        var_2 = 1;
    else if ( vehicle_checktrailvfx( var_0.loadoutprimary ) )
        var_2 = 1;

    if ( !scripts\mp\utility\weapon::iscacprimaryweapon( var_0.loadoutprimary ) )
        var_2 = 1;

    var_3 = 0;
    var_4 = 0;

    if ( attachmentisrestricted( var_0.loadoutprimary ) )
    {
        var_2 = 1;
        var_3 = 1;
    }

    if ( !scripts\mp\weapons::vehicle_ai_avoidance_cleanup( var_0.loadoutprimary ) )
    {
        var_2 = 1;
        var_3 = 1;
    }

    if ( var_2 )
    {
        var_5 = getdvar( "scr_weapon_restricted_primary" );

        if ( var_5 == "" )
            var_5 = "iw8_ar_mike4";

        var_0.loadoutprimary = var_5;
        var_0.loadoutprimaryattachments = [];
        var_0.loadoutprimarycamo = "none";
        var_0.loadoutprimaryreticle = "none";
        var_0.loadoutprimaryvariantid = -1;
        var_0.loadoutprimaryattachmentids = [];
        var_0.loadoutprimarycosmeticattachment = "none";
        var_0.loadoutprimarystickers[0] = "none";
        var_0.loadoutprimarystickers[1] = "none";
        var_0.loadoutprimarystickers[2] = "none";
        var_0.loadoutprimarystickers[3] = "none";
    }
    else
    {
        if ( vehicle_collision( var_0.loadoutprimary, var_0.loadoutprimaryvariantid ) || isweaponvariantconditionallylocked( var_0.loadoutprimary, var_0.loadoutprimaryvariantid ) )
            var_0.loadoutprimaryvariantid = -1;

        for ( var_6 = 0; var_6 < var_0.loadoutprimaryattachments.size; var_6++ )
        {
            var_7 = var_0.loadoutprimaryattachments[var_6];
            var_8 = var_0.loadoutprimaryattachmentids[var_6];

            if ( turretparent( var_0.loadoutprimary, var_0.loadoutprimaryvariantid, var_7, var_8 ) )
                var_0.loadoutprimaryattachmentids[var_6] = 0;

            if ( var_7 != "none" && ( perkisrestricted( var_7, var_0.loadoutprimary ) || !vandalize( var_0.loadoutprimary, var_7 ) ) )
            {
                var_0.loadoutprimaryattachments[var_6] = "none";
                var_4 = 1;
            }
        }
    }

    var_1 = scripts\mp\utility\weapon::weaponnumbermap( var_0.loadoutsecondary );
    var_2 = 0;

    if ( !isdefined( var_1 ) )
        var_2 = 1;
    else if ( vehicle_checktrailvfx( var_0.loadoutsecondary ) )
        var_2 = 1;

    var_9 = "specialty_munitions_2";
    var_10 = !equipmentisrestricted( var_9 ) && scripts\engine\utility::array_contains( var_0.loadoutperks, var_9 );

    if ( scripts\mp\utility\weapon::iscacprimaryweapon( var_0.loadoutsecondary ) && !var_10 )
        var_2 = 1;

    if ( attachmentisrestricted( var_0.loadoutsecondary ) )
    {
        var_2 = 1;
        var_3 = 1;
    }

    if ( !scripts\mp\weapons::vehicle_ai_avoidance_cleanup( var_0.loadoutprimary ) )
    {
        var_2 = 1;
        var_3 = 1;
    }

    if ( var_2 )
    {
        var_11 = getdvar( "scr_weapon_restricted_secondary" );

        if ( var_11 == "" )
            var_11 = "iw8_pi_mike1911";

        var_0.loadoutsecondary = var_11;
        var_0.loadoutsecondaryattachments = [];
        var_0.loadoutsecondarycamo = "none";
        var_0.loadoutsecondaryreticle = "none";
        var_0.loadoutsecondaryvariantid = -1;
        var_0.loadoutsecondaryattachmentids = [];
        var_0.loadoutsecondarycosmeticattachment = "none";
        var_0.loadoutsecondarystickers[0] = "none";
        var_0.loadoutsecondarystickers[1] = "none";
        var_0.loadoutsecondarystickers[2] = "none";
        var_0.loadoutsecondarystickers[3] = "none";
    }
    else
    {
        if ( vehicle_collision( var_0.loadoutsecondary, var_0.loadoutsecondaryvariantid ) || isweaponvariantconditionallylocked( var_0.loadoutsecondary, var_0.loadoutsecondaryvariantid ) )
            var_0.loadoutsecondaryvariantid = -1;

        for ( var_6 = 0; var_6 < var_0.loadoutsecondaryattachments.size; var_6++ )
        {
            var_7 = var_0.loadoutsecondaryattachments[var_6];
            var_8 = var_0.loadoutsecondaryattachmentids[var_6];

            if ( turretparent( var_0.loadoutsecondary, var_0.loadoutsecondaryvariantid, var_7, var_8 ) )
                var_0.loadoutsecondaryattachmentids[var_6] = 0;

            if ( var_7 != "none" && ( perkisrestricted( var_7, var_0.loadoutsecondary ) || !vandalize( var_0.loadoutsecondary, var_7 ) ) )
            {
                var_0.loadoutsecondaryattachments[var_6] = "none";
                var_4 = 1;
            }
        }
    }

    var_12 = [];
    var_12[1] = 0;
    var_12[2] = 0;
    var_12[3] = 0;
    var_13 = [];
    var_13[0] = "specialty_hustle";
    var_13[1] = "specialty_guerrilla";
    var_13[2] = "specialty_warhead";
    var_14 = [];

    foreach ( var_16 in var_0.loadoutperks )
    {
        if ( !isdefined( level.perktable[var_16] ) )
            continue;

        var_17 = scripts\mp\perks\perks::getperkslot( var_16 );

        if ( isdefined( var_17 ) )
            var_12[var_17]++;

        if ( equipmentisrestricted( var_16 ) )
        {
            var_14[var_14.size] = var_16;
            var_3 = 1;
        }
    }

    foreach ( var_16 in var_14 )
    {
        var_17 = scripts\mp\perks\perks::getperkslot( var_16 );

        if ( isdefined( var_17 ) )
            var_0.loadoutperks[var_17 - 1] = var_13[var_17 - 1];
    }

    if ( var_12[1] != 1 || var_12[2] != 1 || var_12[3] != 1 )
    {
        var_0.loadoutperks = [];
        var_0.loadoutperks[0] = var_13[0];
        var_0.loadoutperks[1] = var_13[1];
        var_0.loadoutperks[2] = var_13[2];
    }

    var_13 = [];
    var_13[0] = "specialty_hustle";
    var_13[1] = "specialty_guerrilla";
    var_13[2] = "specialty_warhead";
    var_13[3] = "specialty_covert_ops";
    var_13[4] = "specialty_eod";
    var_13[5] = "specialty_scavenger_plus";
    var_21 = 0;
    var_22 = [];

    if ( var_0.loadoutextraperks.size != 0 )
    {
        foreach ( var_25, var_16 in var_0.loadoutextraperks )
        {
            if ( !isdefined( level.perktable[var_16] ) )
                continue;

            var_17 = scripts\mp\perks\perks::getperkslot( var_16 );

            if ( !isdefined( var_17 ) )
                continue;

            var_24 = var_16;

            while ( equipmentisrestricted( var_24 ) || scripts\engine\utility::array_contains( var_0.loadoutperks, var_24 ) || scripts\engine\utility::array_contains( var_22, var_24 ) )
            {
                var_24 = var_13[var_21];
                var_21++;

                if ( !isdefined( var_24 ) )
                    break;
            }

            if ( !isdefined( var_24 ) )
                continue;

            var_22[var_25] = var_24;

            if ( equipmentisrestricted( var_16 ) )
                var_3 = 1;
        }

        var_0.loadoutextraperks = var_22;

        if ( var_0.loadoutextraperks.size != 3 )
        {
            var_0.loadoutperks = [];
            var_0.loadoutperks[0] = var_13[0];
            var_0.loadoutperks[1] = var_13[1];
            var_0.loadoutperks[2] = var_13[2];
            var_0.loadoutextraperks = [];
            var_0.loadoutextraperks[0] = var_13[3];
            var_0.loadoutextraperks[1] = var_13[4];
            var_0.loadoutextraperks[2] = var_13[5];
        }
    }

    if ( superisrestricted( "specialist_perk_1" ) || superisrestricted( "specialist_perk_2" ) || superisrestricted( "specialist_perk_3" ) )
        var_0.loadoutusingspecialist = 0;

    var_26 = 0;

    if ( !scripts\mp\equipment::isequipmentprimary( var_0.loadoutequipmentprimary ) || !scripts\mp\equipment::unset_force_aitype_suicidebomber( var_0.loadoutequipmentprimary ) )
        var_26 = 1;
    else if ( killstreakisrestricted( var_0.loadoutequipmentprimary ) )
    {
        var_26 = 1;
        var_3 = 1;
    }

    if ( var_26 )
    {
        var_27 = getdvar( "scr_weapon_restricted_lethal" );

        if ( var_27 == "" )
            var_27 = "equip_frag";

        var_0.loadoutequipmentprimary = var_27;
    }

    var_28 = 0;

    if ( !scripts\mp\equipment::isequipmentsecondary( var_0.loadoutequipmentsecondary ) || !scripts\mp\equipment::unset_force_aitype_suicidebomber( var_0.loadoutequipmentsecondary ) )
        var_28 = 1;
    else if ( killstreakisrestricted( var_0.loadoutequipmentsecondary ) )
    {
        var_28 = 1;
        var_3 = 1;
    }

    if ( var_28 )
    {
        var_29 = getdvar( "scr_weapon_restricted_tactical" );

        if ( var_29 == "" )
            var_29 = "equip_flash";

        var_0.loadoutequipmentsecondary = var_29;
    }

    var_30 = 0;
    var_31 = [];
    var_31[0] = "toma_strike";
    var_31[1] = "hover_jet";
    var_31[2] = "chopper_gunner";

    for ( var_6 = 0; var_6 < 3; var_6++ )
    {
        if ( superisrestricted( var_31[var_6] ) )
            var_31[var_6] = "none";
    }

    if ( var_0.loadoutkillstreak1 == "none" || var_0.loadoutkillstreak2 == "none" || var_0.loadoutkillstreak3 == "none" )
        var_30 = 1;

    if ( !var_30 )
    {
        if ( !isdefined( level.killstreakglobals.streaktable.tabledatabyref[var_0.loadoutkillstreak1] ) || level.killstreakglobals.streaktable.tabledatabyref[var_0.loadoutkillstreak1]["shownInMenu"] != "1" )
            var_30 = 1;

        if ( !isdefined( level.killstreakglobals.streaktable.tabledatabyref[var_0.loadoutkillstreak2] ) || level.killstreakglobals.streaktable.tabledatabyref[var_0.loadoutkillstreak2]["shownInMenu"] != "1" )
            var_30 = 1;

        if ( !isdefined( level.killstreakglobals.streaktable.tabledatabyref[var_0.loadoutkillstreak3] ) || level.killstreakglobals.streaktable.tabledatabyref[var_0.loadoutkillstreak3]["shownInMenu"] != "1" )
            var_30 = 1;
    }

    if ( !var_30 )
    {
        if ( superisrestricted( var_0.loadoutkillstreak1 ) )
        {
            var_0.loadoutkillstreak1 = var_31[0];
            var_3 = 1;
        }

        if ( superisrestricted( var_0.loadoutkillstreak2 ) )
        {
            var_0.loadoutkillstreak2 = var_31[1];
            var_3 = 1;
        }

        if ( superisrestricted( var_0.loadoutkillstreak3 ) )
        {
            var_0.loadoutkillstreak3 = var_31[2];
            var_3 = 1;
        }
    }

    if ( !var_30 )
    {
        if ( var_0.loadoutkillstreak1 == var_0.loadoutkillstreak2 )
            var_30 = 1;
        else if ( var_0.loadoutkillstreak1 == var_0.loadoutkillstreak3 )
            var_30 = 1;
        else if ( var_0.loadoutkillstreak2 == var_0.loadoutkillstreak3 )
            var_30 = 1;
    }

    if ( !var_30 )
    {
        if ( isdefined( level.killstreakglobals.streaktable.tabledatabyref[var_0.loadoutkillstreak1] ) )
            var_32 = level.killstreakglobals.streaktable.tabledatabyref[var_0.loadoutkillstreak1]["kills"];
        else
            var_32 = 0;

        if ( isdefined( level.killstreakglobals.streaktable.tabledatabyref[var_0.loadoutkillstreak2] ) )
            var_33 = level.killstreakglobals.streaktable.tabledatabyref[var_0.loadoutkillstreak2]["kills"];
        else
            var_33 = 0;

        if ( isdefined( level.killstreakglobals.streaktable.tabledatabyref[var_0.loadoutkillstreak3] ) )
            var_34 = level.killstreakglobals.streaktable.tabledatabyref[var_0.loadoutkillstreak3]["kills"];
        else
            var_34 = 0;

        if ( var_32 != 0 && var_32 == var_33 )
            var_30 = 1;
        else if ( var_32 != 0 && var_32 == var_34 )
            var_30 = 1;
        else if ( var_33 != 0 && var_33 == var_34 )
            var_30 = 1;
    }

    if ( var_30 )
    {
        var_0.loadoutkillstreak1 = var_31[0];
        var_0.loadoutkillstreak2 = var_31[1];
        var_0.loadoutkillstreak3 = var_31[2];
    }

    return var_0;
}

validateweapon( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = scripts\mp\utility\weapon::getweaponrootname( var_1 );
    var_9 = scripts\mp\utility\weapon::iscacsecondaryweapon( var_1 );
    var_10 = scripts\engine\utility::ter_op( var_7, "secondary", "primary" );
    var_11 = scripts\engine\utility::ter_op( var_7, 4, 1 );

    if ( isdefined( var_1 ) && var_1 != "none" && var_1 != "iw8_fists" )
    {
        var_0.pointcost++;

        if ( var_7 )
        {
            if ( !var_9 )
            {
                var_0.pointcost++;
                var_0.wildcards["overkill"] = 1;
            }
        }
        else if ( var_9 )
        {
            validationerror( "secondaryAsPrimary", undefined, var_1 );
            var_0.invaliditems[var_11] = 1;
        }

        var_12 = scripts\mp\utility\weapon::weaponnumbermap( var_8 );

        if ( !isdefined( var_12 ) )
        {
            validationerror( "unknownWeapon", var_10, var_1 );
            var_0.invaliditems[var_11] = 1;
        }
        else
        {
            var_13 = tablelookup( "mp/statstable.csv", 0, var_12, 41 );

            if ( int( var_13 ) < 0 )
            {
                validationerror( "unreleasedWeapon", var_10, var_1 );
                var_0.invaliditems[var_11] = 1;
            }
        }

        if ( !self isitemunlocked( var_8, "weapon" ) && !weaponunlocksvialoot( var_8 ) )
        {
            validationerror( "lockedWeapon", var_10, var_1 );
            var_0.invaliditems[var_11] = 1;
        }

        if ( var_5 == 0 )
        {
            if ( var_6 != -1 )
            {
                validationerror( "emptyItemIDMismatch", var_10, var_1 );
                var_0.invaliditems[var_11] = 1;
            }
        }
        else if ( var_6 == -1 )
        {
            validationerror( "emptyVariantIDMismatch", var_10, var_1 );
            var_0.invaliditems[var_11] = 1;
        }
        else
        {
            if ( !scripts\mp\loot::isweaponitem( var_5 ) )
            {
                validationerror( "nonWeaponLootItemID", var_10, var_1 );
                var_0.invaliditems[var_11] = 1;
            }

            var_14 = scripts\mp\loot::getlootweaponref( var_5 );

            if ( !isdefined( var_14 ) )
            {
                validationerror( "badLootItemID", var_10, var_1 );
                var_0.invaliditems[var_11] = 1;
            }
            else
            {
                var_15 = scripts\mp\loot::lookupvariantref( var_1, var_6 );

                if ( !isdefined( var_15 ) )
                {
                    validationerror( "badVariantRef", var_10, var_1 );
                    var_0.invaliditems[var_11] = 1;
                }
                else if ( var_15 != var_14 )
                {
                    validationerror( "lootDataMismatch", var_10, var_1 );
                    var_0.invaliditems[var_11] = 1;
                }
            }
        }

        validateattachments( var_0, var_2, var_1, var_8, var_10 );
    }
}

validateattachments( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = scripts\mp\utility\weapon::weapongroupmap( var_2 );
    var_6 = getsubstr( var_5, 7 ) + "Attach";
    var_7 = scripts\engine\utility::ter_op( var_4 == "primary", 2, 5 );
    var_8 = 0;
    var_9 = 0;
    var_10 = scripts\engine\utility::ter_op( var_4 == "primary", 2, 2 );

    foreach ( var_17, var_12 in var_1 )
    {
        var_13 = 0;

        if ( isdefined( var_12 ) && var_12 != "none" )
        {
            var_14 = scripts\mp\utility\weapon::getattachmenttype( var_12 );

            if ( isdefined( var_14 ) && var_14 != "" )
            {
                var_15 = scripts\mp\utility\weapon::attachmentmap_tounique( var_12, var_2 );

                if ( isdefined( var_15 ) )
                {
                    if ( var_14 == "rail" )
                        var_13 = 1;
                }
            }

            var_16 = var_3 + "+" + var_12;

            if ( !self isitemunlocked( var_16, var_6 ) )
            {
                validationerror( "lockedAttachment", var_4, var_12 );
                var_0.invaliditems[var_7][var_0.invaliditems[var_7].size] = var_17;
            }

            if ( !scripts\mp\utility\weapon::carriedpunchcard( var_3, var_12 ) )
            {
                validationerror( "nonSelectableAttachment", var_4, var_12 );
                var_0.invaliditems[var_7][var_0.invaliditems[var_7].size] = var_17;
            }

            if ( var_13 )
            {
                var_8++;
                var_0.pointcost++;
            }
            else
            {
                var_9++;

                if ( var_9 <= var_10 )
                    var_0.pointcost++;
                else
                {
                    var_0.wildcards[var_4 + "_attachment_" + ( var_9 + 1 )] = 1;
                    var_0.pointcost = var_0.pointcost + 2;
                }
            }
        }
    }

    if ( var_9 > 5 )
    {
        validationerror( "tooManyAttachments", var_4, var_9 );
        var_0.invaliditems[scripts\engine\utility::ter_op( var_4 == "primary", 3, 6 )] = 1;
    }

    if ( var_8 > 1 )
    {
        validationerror( "tooManyOpticAttachments", var_4, var_8 );
        var_0.invaliditems[scripts\engine\utility::ter_op( var_4 == "primary", 3, 6 )] = 1;
    }
}

validatepower( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\engine\utility::ter_op( var_2 == "primary", 7, 8 );

    if ( isdefined( var_1 ) && var_1 != "none" )
    {
        if ( !isdefined( level.powers[var_1] ) )
        {
            validationerror( "unknownPower", var_2, var_1 );
            var_0.invaliditems[var_4] = 1;
        }

        if ( !self isitemunlocked( var_1, "power" ) )
        {
            validationerror( "lockedPower", var_2, var_1 );
            var_0.invaliditems[var_4] = 1;
        }

        var_5 = lookuppowerslot( var_1 );

        if ( !isdefined( var_5 ) )
        {
            validationerror( "unknownMenuPower", var_2, var_1 );
            var_0.invaliditems[var_4] = 1;
        }
        else if ( var_5 != var_2 )
        {
            validationerror( "powerInWrongSlot", var_2, var_1 );
            var_0.invaliditems[var_4] = 1;
        }

        var_0.pointcost++;
    }

    if ( istrue( var_3 ) )
    {
        var_0.pointcost = var_0.pointcost + 2;
        var_6 = scripts\engine\utility::ter_op( var_2 == "primary", "extra_lethal", "extra_tactical" );
        var_0.wildcards[var_6] = 1;
    }
}

validateperks( var_0, var_1, var_2 )
{
    var_3 = [];
    var_3[1] = 0;
    var_3[2] = 0;
    var_3[3] = 0;

    foreach ( var_5 in var_1 )
    {
        if ( isdefined( var_5 ) && var_5 != "none" )
        {
            if ( !isdefined( level.perktable[var_5] ) )
            {
                validationerror( "invalidPerk", undefined, var_5 );
                var_0.invaliditems[9][var_0.invaliditems[9].size] = var_5;
            }

            var_6 = scripts\mp\perks\perks::getperkslot( var_5 );

            if ( isdefined( var_6 ) )
            {
                var_3[var_6]++;

                if ( var_3[var_6] > 2 )
                {
                    validationerror( "tooManyPerks", var_6, var_5 );
                    var_0.invaliditems[9][var_0.invaliditems[9].size] = var_5;
                }

                if ( !self isitemunlocked( var_5, "perk" ) )
                {
                    validationerror( "lockedPerk", var_6, var_5 );
                    var_0.invaliditems[9][var_0.invaliditems[9].size] = var_5;
                }

                if ( var_3[var_6] == 1 )
                    var_0.pointcost++;
                else
                {
                    var_0.wildcards["extra_perk_" + var_6] = 1;
                    var_0.pointcost = var_0.pointcost + 2;
                }
            }
            else if ( isdefined( level.menurigperks[var_5] ) )
            {
                if ( level.menurigperks[var_5].archetype != var_2 )
                {
                    validationerror( "rigPerkOnWrongRig", undefined, var_5 );
                    var_0.invaliditems[9][var_0.invaliditems[9].size] = var_5;
                }

                if ( !self isitemunlocked( var_5, "trait" ) )
                {
                    validationerror( "lockedRigPerk", var_6, var_5 );
                    var_0.invaliditems[9][var_0.invaliditems[9].size] = var_5;
                }
            }
            else
            {
                validationerror( "unknownPerkType", undefined, var_5 );
                var_0.invaliditems[9][var_0.invaliditems[9].size] = var_5;
            }
        }
    }
}

validatestreaks( var_0, var_1, var_2, var_3 )
{
    var_4 = [ var_1, var_2, var_3 ];

    foreach ( var_6 in var_4 )
    {
        if ( var_6 == "none" )
            continue;

        var_7 = scripts\mp\killstreaks\killstreaks::getkillstreaksetupinfo( var_6 );

        if ( !isdefined( var_7 ) )
        {
            validationerror( "unknownStreak", undefined, var_6 );
            var_0.invaliditems[12] = 1;
        }

        if ( !self isitemunlocked( var_6, "killstreak" ) )
        {
            validationerror( "lockedStreak", undefined, var_6 );
            var_0.invaliditems[12] = 1;
        }
    }

    if ( var_1 == var_2 && var_1 != "none" )
    {
        validationerror( "duplicateStreak", undefined, var_1 );
        var_0.invaliditems[12] = 1;
    }
    else if ( var_1 == var_3 && var_1 != "none" )
    {
        validationerror( "duplicateStreak", undefined, var_1 );
        var_0.invaliditems[12] = 1;
    }
    else if ( var_2 == var_3 && var_2 != "none" )
    {
        validationerror( "duplicateStreak", undefined, var_2 );
        var_0.invaliditems[12] = 1;
    }
}

validatearchetype( var_0, var_1 )
{
    if ( !isdefined( level.archetypeids[var_1] ) )
    {
        validationerror( "unknownArchetype", undefined, var_1 );
        var_0.invaliditems[10] = 1;
    }

    if ( !self isitemunlocked( var_1, "rig" ) )
    {
        validationerror( "lockedArchetype", undefined, var_1 );
        var_0.invaliditems[10] = 1;
    }
}

validatesuper( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1 ) || var_1 == "none" )
        return;

    var_3 = level.superglobals.staticsuperdata[var_1];

    if ( !isdefined( var_3 ) )
    {
        validationerror( "unknownSuper", undefined, var_1 );
        var_0.invaliditems[11] = 1;
    }
    else if ( var_3.archetype != var_2 )
    {
        validationerror( "superOnWrongRig", undefined, var_1 );
        var_0.invaliditems[11] = 1;
    }

    if ( !self isitemunlocked( var_1, "super" ) )
    {
        validationerror( "lockedSuper", undefined, var_1 );
        var_0.invaliditems[11] = 1;
    }
}

validatewildcards( var_0 )
{

}

fixloadout( var_0 )
{
    var_1 = scripts\mp\class::loadout_getclassstruct();
    var_1.loadoutarchetype = "archetype_assault";
    var_1.loadoutprimary = "iw8_ar_mike4";
    return var_1;
}

fixweapon( var_0, var_1 )
{
    if ( var_1 == "primary" )
    {
        var_0.loadoutprimary = "iw8_ar_mike4";
        var_0.loadoutprimarycamo = "none";
        var_0.loadoutprimaryreticle = "none";
        var_0.loadoutprimarylootitemid = 0;
        var_0.loadoutprimaryvariantid = -1;

        for ( var_2 = 0; var_2 < scripts\mp\class::getmaxprimaryattachments(); var_2++ )
            var_0.loadoutprimaryattachments[var_2] = "none";
    }
    else
    {
        var_0.loadoutsecondary = "none";
        var_0.loadoutsecondarycamo = "none";
        var_0.loadoutsecondaryreticle = "none";
        var_0.loadoutsecondarylootitemid = 0;
        var_0.loadoutsecondaryvariantid = -1;

        for ( var_2 = 0; var_2 < scripts\mp\class::getmaxsecondaryattachments(); var_2++ )
            var_0.loadoutsecondaryattachments[var_2] = "none";
    }
}

fixattachment( var_0, var_1, var_2 )
{
    if ( var_1 == "primary" )
        var_0.loadoutprimaryattachments[var_2] = "none";
    else
        var_0.loadoutsecondaryattachments[var_2] = "none";
}

fixpower( var_0, var_1 )
{
    if ( var_1 == "primary" )
    {
        var_0.loadoutpowerprimary = "none";
        var_0.loadoutextrapowerprimary = 0;
    }
    else
    {
        var_0.loadoutpowersecondary = "none";
        var_0.loadoutextrapowersecondary = 0;
    }
}

fixperk( var_0, var_1 )
{
    var_0.loadoutperks = scripts\engine\utility::array_remove( var_0.loadoutperks, var_1 );
}

fixkillstreaks( var_0 )
{
    var_0.loadoutkillstreak1 = "none";
    var_0.loadoutkillstreak2 = "none";
    var_0.loadoutkillstreak3 = "none";
}

fixarchetype( var_0 )
{
    var_0.loadoutarchetype = "archetype_assault";
    fixsuper( var_0 );

    foreach ( var_2 in var_0.loadoutperks )
    {
        if ( isdefined( level.menurigperks[var_2] ) )
        {
            fixperk( var_0, var_2 );
            break;
        }
    }
}

fixsuper( var_0 )
{
    var_0.loadoutsuper = "none";
}

fixinvaliditems( var_0, var_1 )
{
    if ( isdefined( var_1[0] ) )
    {
        var_0 = fixloadout( var_0 );
        return var_0;
    }

    if ( isdefined( var_1[1] ) )
        fixweapon( var_0, "primary" );
    else if ( isdefined( var_1[3] ) )
    {
        for ( var_2 = 0; var_2 < scripts\mp\class::getmaxprimaryattachments(); var_2++ )
            fixattachment( var_0, "primary", var_2 );
    }
    else
    {
        foreach ( var_2 in var_1[2] )
            fixattachment( var_0, "primary", var_2 );
    }

    if ( isdefined( var_1[4] ) )
        fixweapon( var_0, "secondary" );
    else if ( isdefined( var_1[6] ) )
    {
        for ( var_2 = 0; var_2 < scripts\mp\class::getmaxsecondaryattachments(); var_2++ )
            fixattachment( var_0, "secondary", var_2 );
    }
    else
    {
        foreach ( var_2 in var_1[5] )
            fixattachment( var_0, "secondary", var_2 );
    }

    if ( isdefined( var_1[7] ) )
        fixpower( var_0, "primary" );

    if ( isdefined( var_1[8] ) )
        fixpower( var_0, "secondary" );

    foreach ( var_8 in var_1[9] )
        fixperk( var_0, var_8 );

    if ( isdefined( var_1[10] ) )
        fixarchetype( var_0 );
    else if ( isdefined( var_1[11] ) )
        fixarchetype( var_0 );

    if ( isdefined( var_1[12] ) )
        fixkillstreaks( var_0 );

    return var_0;
}

lookuppowerslot( var_0 )
{
    var_1 = tablelookup( "mp/menuPowers.csv", 3, var_0, 2 );

    if ( !isdefined( var_1 ) || var_1 != "1" && var_1 != "2" )
        return undefined;

    return scripts\engine\utility::ter_op( var_1 == "1", "primary", "secondary" );
}

weaponunlocksvialoot( var_0 )
{
    return 0;
}

vehicle_checktrailvfx( var_0 )
{
    return isdefined( level.weaponmapdata[var_0] ) && istrue( level.weaponmapdata[var_0]._id_13EFC );
}

vehicle_collision( var_0, var_1 )
{
    if ( scripts\mp\utility\game::isanymlgmatch() )
        return 1;

    if ( !isdefined( var_1 ) || var_1 <= 0 )
        return 0;

    var_2 = var_0 + "|" + var_1;
    return isdefined( level.weaponlootmapdata[var_2] ) && istrue( level.weaponlootmapdata[var_2].update_focus_fire_objective );
}

turretparent( var_0, var_1, var_2, var_3 )
{
    if ( scripts\mp\utility\game::isanymlgmatch() )
        return 1;

    var_4 = isdefined( var_3 ) && var_3 > 0 && var_2 != "none";

    if ( !var_4 )
        return 0;

    var_5 = getdvarint( "scr_attach_variants_enabled", 1 );
    var_6 = isdefined( var_1 ) && var_1 > 0;

    if ( !var_5 && !var_6 )
        return 1;

    var_7 = var_0 + "|" + var_1;
    var_8 = 0;
    var_9 = 1;

    for (;;)
    {
        var_10 = var_0 + "|" + var_9;

        if ( !isdefined( level.weaponlootmapdata[var_10] ) )
            break;

        if ( var_5 || var_10 == var_7 )
        {
            if ( !level.weaponlootmapdata[var_10].update_focus_fire_objective )
            {
                if ( isdefined( level.weaponlootmapdata[var_10].attachcustomtoidmap ) )
                {
                    foreach ( var_13, var_12 in level.weaponlootmapdata[var_10].attachcustomtoidmap )
                    {
                        if ( var_3 == var_12 && var_2 == var_13 )
                        {
                            var_8 = 1;
                            break;
                        }
                    }
                }

                if ( var_8 )
                    break;
            }
        }

        var_9++;
    }

    return !var_8;
}
