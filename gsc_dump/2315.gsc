// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

tacinsert_init()
{
    level._id_13A10 = [];
    scripts\mp\utility\join_team_aggregator::registeronplayerjointeamcallback( ::_id_13A0A );

    if ( scripts\mp\utility\game::getgametype() == "br" )
        level thread _id_13A02();
}

_id_13A0A( var_0 )
{
    foreach ( var_2 in level._id_13A10 )
    {
        var_2 _id_13A0F( var_0 );
        var_2 _id_13A0E( var_0 );
    }
}

_id_13A02()
{
    level endon( "game_ended" );

    for (;;)
    {
        var_0 = level._id_13A10;
        var_1 = 0;

        foreach ( var_3 in var_0 )
        {
            if ( !isdefined( var_3 ) )
                continue;

            if ( istrue( var_3.isdestroyed ) )
                continue;

            if ( !isdefined( var_3.owner ) )
                continue;

            var_4 = distance2dsquared( var_3.origin, var_3.owner.origin );

            if ( var_4 >= 144000000 )
            {
                var_3.owner thread scripts\mp\hud_message::showsplash( "tac_insert_fail_br_too_far" );
                var_3 tacinsert_destroy( undefined, 0 );
            }

            var_1++;

            if ( var_1 >= 5 )
            {
                var_1 = 0;
                waitframe();
            }
        }

        waitframe();
    }
}

tacinsert_set( var_0, var_1 )
{
    thread _id_13A09();
}

tacinsert_unset( var_0, var_1 )
{
    self notify( "end_monitorTIUse" );
}

_id_13A09()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    self endon( "end_monitorTIUse" );
    self.tispawnposition = [];

    for (;;)
    {
        tacinsert_updatespawnposition();
        var_0 = self getheldoffhand();
        var_1 = var_0.basename == "flare_mp";
        var_2 = scripts\engine\utility::ter_op( var_1, 0.05, 1.0 );
        scripts\engine\utility::_id_143B9( var_2, "offhand_pullback" );
    }
}

_id_13A08( var_0 )
{
    var_0 endon( "disconnect" );
    level endon( "game_ended" );
    var_0 endon( "end_monitorTIUse" );
    var_0 endon( "end_movingUpdate" );

    for (;;)
    {
        wait 1.0;
        var_0 _id_13683( self, 1 );
    }
}

tacinsert_updatespawnposition()
{
    var_0 = self.origin;
    var_1 = tacinsert_isvalidspawnposition( var_0 );

    if ( istrue( var_1 ) )
        _id_13A01( var_0 );
}

tacinsert_isvalidspawnposition( var_0 )
{
    var_1 = var_0 + ( 0, 0, 3 );

    if ( !canspawn( var_1 ) )
        return 0;

    if ( scripts\mp\outofbounds::istouchingoobtrigger() )
        return 0;

    if ( !self isonground() )
        return 0;

    waitframe();

    if ( !self isonground() )
        return 0;

    return 1;
}

_id_13A01( var_0 )
{
    if ( isdefined( self.tispawnposition[0] ) && self.tispawnposition[0] == var_0 )
        return;

    self.tispawnposition[1] = self.tispawnposition[0];
    self.tispawnposition[0] = var_0;
}

_id_13A07()
{
    if ( isdefined( self.tispawnposition ) )
    {
        if ( isdefined( self.tispawnposition[1] ) )
            return self.tispawnposition[1];
        else if ( isdefined( self.tispawnposition[0] ) )
            return self.tispawnposition[0];
    }

    return undefined;
}

deletetacinsert()
{
    tacinsert_destroy();
}

tacinsert_used( var_0 )
{
    var_0 delete();
    var_1 = _id_13A07();

    if ( !isdefined( var_1 ) )
    {
        scripts\mp\hud_message::showerrormessage( "MP/TAC_INSERT_CANNOT_PLACE" );
        thread _id_13A0C();
        return 0;
    }

    var_2 = distancesquared( self.origin, var_1 );

    if ( var_2 >= 14400 )
    {
        scripts\mp\hud_message::showerrormessage( "MP/TAC_INSERT_CANNOT_PLACE" );
        thread _id_13A0C();
        return 0;
    }

    if ( scripts\mp\utility\entity::touchingbadtrigger() )
    {
        scripts\mp\hud_message::showerrormessage( "MP/TAC_INSERT_CANNOT_PLACE" );
        thread _id_13A0C();
        return 0;
    }

    var_3 = var_1 + ( 0, 0, 16 );
    var_4 = var_1 + ( 0, 0, -16 );

    if ( !_id_13A03( var_0, var_3, var_4 ) )
    {
        scripts\mp\hud_message::showerrormessage( "MP/TAC_INSERT_CANNOT_PLACE" );
        thread _id_13A0C();
        return 0;
    }

    _id_13681( 0, 0, 1 );
    var_5 = [];
    var_5[0] = self;
    var_6 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 0, 1 );
    var_7 = scripts\engine\trace::ray_trace_detail( var_3, var_4, var_5, var_6, 0 );

    if ( var_7["hittype"] == "hittype_none" )
    {
        waitframe();
        var_8 = 14;
        var_7 = scripts\engine\trace::sphere_trace( var_3, var_4, var_8, var_5, var_6, 0 );
    }

    if ( var_7["hittype"] == "hittype_none" )
    {
        scripts\mp\hud_message::showerrormessage( "MP/TAC_INSERT_CANNOT_PLACE" );
        thread _id_13A0C();
        return 0;
    }

    var_9 = var_7["normal"];
    var_10 = var_7["position"] + var_9 * ( 0, 0, 0.5 );
    var_11 = anglestoforward( self.angles );
    var_12 = -1 * var_9;
    var_13 = scripts\engine\utility::flatten_vector( var_11, var_9 );
    var_14 = vectorcross( var_13, var_12 );
    var_15 = axistoangles( var_12, var_14, var_13 );
    var_16 = self.angles;
    var_17 = spawn( "script_model", var_10 );
    var_17.angles = var_15;
    var_17.team = self.team;
    var_17.owner = self;
    var_17 scripts\cp_mp\ent_manager::registerspawn( 3, ::deletetacinsert );
    var_17 setmodel( "misc_wm_flarestick" );
    var_17 setscriptablepartstate( "smoke", "active", 0 );
    var_17.issuper = isdefined( self.super ) && self.super.staticdata.weapon == "flare_mp";
    var_17.superid = level.superglobals.staticsuperdata["super_tac_insert"].id;
    var_17 thread tacinsert_setupandwaitfordeath( self );
    var_17 thread _id_13A04();
    var_17 setotherent( self );
    var_17.weapon_name = "tac_insert_trigger";
    var_18 = var_7["entity"];

    if ( isdefined( var_18 ) && ( _calloutmarkerping_handleluinotify_enemyrepinged::tugofwar_tank( var_18 ) || scripts\mp\gametypes\br_gondola.gsc::triggereliminatedoverlay( var_18 ) ) )
    {
        var_17 linkto( var_18 );
        var_19 = getdvarint( "scr_br_tac_insert_moving_platform_valid", 1 );

        if ( var_19 )
            var_17 thread _id_13A08( self );
    }

    var_17 scripts\mp\sentientpoolmanager::registersentient( "Tactical_Static", self );
    level thread scripts\mp\battlechatter_mp::trysaylocalsound( self, "use_tac_insert" );
    scripts\mp\weapons::onequipmentplanted( var_17, "equip_tac_insert", ::tacinsert_destroy );
    var_20 = scripts\mp\utility\game::getgametype() == "siege";
    thread scripts\mp\weapons::monitordisownedequipment( self, var_17, var_20 );
    var_17 scripts\cp_mp\emp_debuff::set_apply_emp_callback( ::tacinsert_empapplied );
    _id_13684( var_1, var_16, var_17, 1 );
    var_21 = var_17 getentitynumber();
    level._id_13A10[var_21] = var_17;

    if ( var_17.issuper && isdefined( level._id_13A06 ) )
        self [[ level._id_13A06 ]]();

    return 1;
}

tacinsert_setupandwaitfordeath( var_0 )
{
    self.headicon = thread scripts\cp_mp\entityheadicons::setheadicon_factionimage( 0, 0 );
    thread tacinsert_damagelistener( var_0 );
    thread _id_13A05( var_0 );

    if ( !self.issuper )
        thread _id_13A0B( var_0 );
}

tacinsert_damagelistener( var_0 )
{
    scripts\mp\damage::monitordamage( 10, "hitequip", ::tacinsert_modifydamage, ::tacinsert_handledeathdamage, 1 );
}

tacinsert_modifydamage( var_0 )
{
    var_1 = var_0.objweapon;
    var_2 = var_0.meansofdeath;
    return scripts\mp\damage::handlemeleedamage( var_1, var_2 );
}

tacinsert_handledeathdamage( var_0 )
{
    var_1 = var_0.attacker;

    if ( isdefined( self.owner ) && var_1 != self.owner )
        self.owner thread scripts\mp\utility\dialog::leaderdialogonplayer( "ti_destroyed", undefined, undefined, self.origin );

    thread tacinsert_destroy( var_1, 1 );
}

_id_13A0B( var_0 )
{
    self endon( "death" );
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    self._id_12357 = spawn( "script_origin", self.origin );
    self._id_12357 makeusable();
    self._id_12357 setcursorhint( "HINT_NOICON" );
    self._id_12357 sethintstring( &"MP_PATCH/PICKUP_TI" );
    self._id_12357 linkto( self );

    foreach ( var_2 in level.players )
        _id_13A0F( var_2 );

    for (;;)
    {
        self._id_12357 waittill( "trigger", var_2 );
        var_2 playsound( "iw8_tactical_insert_flare_pu" );
        var_2 scripts\mp\equipment::giveequipment( "equip_tac_insert", "secondary" );
        thread tacinsert_destroy( var_0, 0, 0, 1 );
    }
}

_id_13A0F( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( !isdefined( self ) || !isdefined( self._id_12357 ) )
        return;

    if ( istrue( self.isdestroyed ) )
        return;

    var_1 = isdefined( self.owner ) && var_0 == self.owner;

    if ( var_1 )
        self._id_12357 enableplayeruse( var_0 );
    else
        self._id_12357 disableplayeruse( var_0 );
}

tacinsert_destroy( var_0, var_1, var_2, var_3 )
{
    if ( istrue( self.isdestroyed ) )
        return;

    self.isdestroyed = 1;
    scripts\cp_mp\entityheadicons::setheadicon_deleteicon( self.headicon );
    self.headicon = undefined;

    if ( isdefined( self.owner ) )
    {
        if ( istrue( var_2 ) )
        {
            thread _id_13A00();
            self.owner scripts\mp\utility\stats::incpersstat( "tacticalInsertionSpawns", 1 );
            self.owner scripts\mp\supers::hide_plunderboxes( "super_tac_insert" );
            self.owner scripts\cp\vehicles\vehicle_compass_cp::_id_12032( "super_tac_insert", 1, var_0, var_1 );
            scripts\mp\analyticslog::logevent_fieldupgradeexpired( self.owner, self.superid, 1, istrue( var_1 ) );
        }
        else
        {
            self.owner scripts\cp\vehicles\vehicle_compass_cp::_id_12032( "super_tac_insert", 0, var_0, var_1 );
            scripts\mp\analyticslog::logevent_fieldupgradeexpired( self.owner, self.superid, 0, istrue( var_1 ) );
        }

        if ( !istrue( var_2 ) && !istrue( var_3 ) )
            self.owner thread _id_13A0D();

        self.owner.setspawnpoint = undefined;
    }

    self makeunusable();

    if ( isdefined( self._id_12357 ) )
        self._id_12357 delete();

    self notify( "death" );

    if ( !istrue( self._id_133E3 ) )
        self setscriptablepartstate( "smoke", "neutral", 0 );

    if ( istrue( var_1 ) )
    {
        self setscriptablepartstate( "destroy", "active", 0 );
        self setscriptablepartstate( "visibility", "hide", 0 );
    }

    thread tacinsert_delayeddelete();
}

_id_13A0D()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    var_0 = 0;

    while ( !scripts\mp\utility\player::isreallyalive( self ) || scripts\mp\utility\player::isinkillcam() )
    {
        var_0 = 1;
        waitframe();
    }

    if ( var_0 )
        wait 0.3;

    scripts\mp\damagefeedback::hudicontype( "tacinsert_destroyed" );
}

_id_13A00()
{
    if ( scripts\mp\utility\game::getgametype() != "br" )
        return;

    var_0 = self.owner;
    level endon( "game_ended" );
    var_0 endon( "death_or_disconnect" );
    wait 1.5;
    var_0 thread scripts\mp\hud_message::showsplash( "tac_insert_success_br" );
}

_id_13A04()
{
    self endon( "death" );
    level waittill( "game_ended" );
    thread tacinsert_destroy( undefined, 0, 0, 1 );
}

tacinsert_delayeddelete()
{
    wait 1;
    var_0 = self getentitynumber();
    var_1 = self.killcament;
    var_2 = self.trigger;
    scripts\mp\weapons::cleanupequipment( var_0, var_1, var_2 );
    scripts\cp_mp\ent_manager::deregisterspawn();
    self delete();
}

_id_13A05( var_0 )
{
    self endon( "death" );
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    self makeusable();
    self setcursorhint( "HINT_NOICON" );
    self sethintstring( &"MP_PATCH/DESTROY_TI" );

    foreach ( var_2 in level.players )
        _id_13A0E( var_2 );

    for (;;)
    {
        self waittill( "trigger", var_2 );
        var_2 notify( "destroyed_insertion", var_0 );
        var_2 notify( "destroyed_equipment" );
        tacinsert_givepointsfordeath( var_2 );
        thread tacinsert_destroy( var_2, 1 );
    }
}

_id_13A0E( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( !isdefined( self ) )
        return;

    if ( istrue( self.isdestroyed ) )
        return;

    var_1 = scripts\cp_mp\utility\player_utility::playersareenemies( self.owner, var_0 );

    if ( var_1 )
        self enableplayeruse( var_0 );
    else
        self disableplayeruse( var_0 );
}

tacinsert_empapplied( var_0 )
{
    var_1 = var_0.attacker;
    tacinsert_givepointsfordeath( var_1 );

    if ( isdefined( self.owner ) && var_0.attacker != self.owner )
        self.owner thread scripts\mp\utility\dialog::leaderdialogonplayer( "ti_destroyed", undefined, undefined, self.origin );

    thread tacinsert_destroy( var_1, 1 );
}

tacinsert_givepointsfordeath( var_0 )
{
    if ( istrue( scripts\cp_mp\utility\player_utility::playersareenemies( self.owner, var_0 ) ) )
    {
        var_0 notify( "destroyed_equipment" );
        var_0 thread scripts\mp\killstreaks\killstreaks::givescorefordestroyedtacinsert();
        var_0 thread scripts\mp\utility\dialog::leaderdialogonplayer( "ti_destroyed", undefined, undefined, self.origin );
    }
}

_id_13A03( var_0, var_1, var_2 )
{
    var_3 = 1;
    var_4 = self;
    var_5 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 1, 1, 1, 1, 1 );
    var_6 = scripts\engine\trace::sphere_trace( var_1, var_2, 20, var_4, var_5, 1 );

    if ( isdefined( var_6 ) )
    {
        if ( isdefined( var_6["hittype"] ) && var_6["hittype"] != "hittype_none" )
        {
            var_7 = var_6["surfacetype"];

            if ( isdefined( var_7 ) && var_7 != "surftype_none" )
            {
                var_7 = var_6["surfacetype"];

                if ( var_7 == "surftype_glass_pane" )
                    var_3 = 0;
            }

            var_8 = var_6["entity"];

            if ( isdefined( var_8 ) )
            {
                if ( var_8 scripts\cp_mp\vehicles\vehicle::isvehicle() && !_calloutmarkerping_handleluinotify_enemyrepinged::tugofwar_tank( var_8 ) )
                    var_3 = 0;

                var_9 = getdvarint( "scr_br_tac_insert_moving_platform_valid", 1 );

                if ( !var_9 && ( _calloutmarkerping_handleluinotify_enemyrepinged::tugofwar_tank( var_8 ) || scripts\mp\gametypes\br_gondola.gsc::triggereliminatedoverlay( var_8 ) ) )
                    var_3 = 0;

                if ( isdefined( var_8.classname ) )
                {
                    switch ( var_8.classname )
                    {
                        case "grenade":
                        case "misc_turret":
                            var_3 = 0;
                            break;
                        case "script_model":
                            if ( isdefined( var_8.crate ) )
                                var_3 = 0;

                            break;
                    }
                }
            }
        }
    }

    return istrue( var_3 );
}

_id_13A0C()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    var_0 = getdvarint( "scr_tac_insert_refund", 1 );

    if ( var_0 == 0 )
        return;

    if ( istrue( level.unset_relic_laststandmelee ) )
    {
        if ( level.infectedtactical == "equip_tac_insert" )
            scripts\mp\equipment::giveequipment( level.infectedtactical, "secondary" );

        var_1 = scripts\engine\utility::_id_143B9( 5, "super_use_finished_lb" );

        if ( isdefined( var_1 ) && var_1 == "super_use_finished_lb" )
        {
            thread scripts\mp\supers::givesuperpoints( scripts\mp\supers::getsuperpointsneeded() );
            return;
        }
    }
    else
    {
        self waittill( "super_use_finished_lb" );
        thread scripts\mp\supers::givesuperpoints( scripts\mp\supers::getsuperpointsneeded() );
    }
}

_id_13684( var_0, var_1, var_2, var_3 )
{
    _id_13681();
    var_4 = undefined;

    if ( isdefined( var_2 ) )
        var_4 = var_2;
    else
        var_4 = spawn( "script_model", var_0 );

    var_4.playerspawnpos = var_0;
    var_4.playerspawnangles = var_1;
    var_4.notti = !istrue( var_3 );
    var_4.issuper = isdefined( var_2 ) && istrue( var_2.issuper );
    self.setspawnpoint = var_4;
}

_id_13681( var_0, var_1, var_2 )
{
    if ( isdefined( self.setspawnpoint ) )
    {
        if ( istrue( self.setspawnpoint.notti ) )
            self.setspawnpoint delete();
        else
            self.setspawnpoint tacinsert_destroy( undefined, var_0, var_1, var_2 );
    }
}

_id_13683( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
    {
        self notify( "end_movingUpdate" );
        return;
    }

    var_2 = var_0;
    var_2.playerspawnpos = var_0.origin;
    var_2.playerspawnangles = var_0.angles;
    var_2.notti = !istrue( var_1 );
    var_2.issuper = isdefined( var_0 ) && istrue( var_0.issuper );
    self.setspawnpoint = var_2;
}
