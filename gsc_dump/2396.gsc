// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

getaverageorigin( var_0 )
{
    var_1 = ( 0, 0, 0 );

    if ( !var_0.size )
        return undefined;

    foreach ( var_3 in var_0 )
        var_1 = var_1 + var_3.origin;

    var_5 = int( var_1[0] / var_0.size );
    var_6 = int( var_1[1] / var_0.size );
    var_7 = int( var_1[2] / var_0.size );
    var_1 = ( var_5, var_6, var_7 );
    return var_1;
}

touchingbadtrigger()
{
    var_0 = getentarray( "trigger_hurt", "classname" );

    foreach ( var_2 in var_0 )
    {
        if ( self istouching( var_2 ) )
            return 1;
    }

    var_4 = getentarray( "radiation", "targetname" );

    foreach ( var_2 in var_4 )
    {
        if ( self istouching( var_2 ) )
            return 1;
    }

    return 0;
}

touchingoobtrigger()
{
    if ( istrue( self.allowedintrigger ) )
        return 0;

    if ( !isdefined( level.outofboundstriggers ) )
        return 0;

    foreach ( var_1 in level.outofboundstriggers )
    {
        if ( self istouching( var_1 ) )
            return 1;
    }

    return 0;
}

touchingballallowedtrigger()
{
    if ( !istrue( level.ballallowedtriggers.size ) )
        return 0;

    self.allowedintrigger = 0;

    foreach ( var_1 in level.ballallowedtriggers )
    {
        if ( self istouching( var_1 ) )
        {
            self.allowedintrigger = 1;
            return 1;
        }
    }

    return 0;
}

touchingplayerallowedtrigger()
{
    if ( !istrue( level.playerallowedtriggers.size ) )
        return 0;

    self.allowedintrigger = 0;

    foreach ( var_1 in level.playerallowedtriggers )
    {
        if ( self istouching( var_1 ) )
        {
            self.allowedintrigger = 1;
            return 1;
        }
    }

    return 0;
}

findisfacing( var_0, var_1, var_2 )
{
    var_3 = cos( var_2 );
    var_4 = anglestoforward( var_0.angles );
    var_5 = var_1.origin - var_0.origin;
    var_4 = var_4 * ( 1, 1, 0 );
    var_5 = var_5 * ( 1, 1, 0 );
    var_5 = vectornormalize( var_5 );
    var_4 = vectornormalize( var_4 );
    var_6 = vectordot( var_5, var_4 );

    if ( var_6 >= var_3 )
        return 1;
    else
        return 0;
}

isaiteamparticipant( var_0 )
{
    if ( isagent( var_0 ) && var_0.agent_teamparticipant == 1 )
        return 1;

    if ( isbot( var_0 ) )
        return 1;

    return 0;
}

isteamparticipant( var_0 )
{
    if ( isaiteamparticipant( var_0 ) )
        return 1;

    if ( isplayer( var_0 ) )
        return 1;

    return 0;
}

isaigameparticipant( var_0 )
{
    if ( isagent( var_0 ) && isdefined( var_0.agent_gameparticipant ) && var_0.agent_gameparticipant == 1 )
        return 1;

    if ( isbot( var_0 ) )
        return 1;

    return 0;
}

isgameparticipant( var_0 )
{
    if ( isaigameparticipant( var_0 ) )
        return 1;

    if ( isplayer( var_0 ) )
        return 1;

    return 0;
}

getteamindex( var_0 )
{
    var_1 = 0;

    if ( level.teambased )
    {
        switch ( var_0 )
        {
            case "axis":
                var_1 = 1;
                break;
            case "allies":
                var_1 = 2;
                break;
        }
    }

    return var_1;
}

isvalidteamtarget( var_0, var_1, var_2 )
{
    return isdefined( var_2.team ) && var_2.team == var_1;
}

isvalidffatarget( var_0, var_1, var_2 )
{
    return 1;
}

getlinknamenodes()
{
    var_0 = [];

    if ( isdefined( self.script_linkto ) )
    {
        var_1 = strtok( self.script_linkto, " " );

        for ( var_2 = 0; var_2 < var_1.size; var_2++ )
        {
            var_3 = getnode( var_1[var_2], "script_linkname" );

            if ( isdefined( var_3 ) )
                var_0[var_0.size] = var_3;
        }
    }

    return var_0;
}

getparticipantsinradius( var_0, var_1, var_2, var_3 )
{
    return getentitiesinradius( var_0, var_1, var_2, var_3, scripts\engine\trace::create_character_contents() );
}

getentitiesinradius( var_0, var_1, var_2, var_3, var_4 )
{
    if ( var_1 <= 0 )
        return [];

    var_5 = undefined;

    if ( isdefined( var_3 ) )
    {
        if ( isarray( var_3 ) )
            var_5 = var_3;
        else
            var_5 = [ var_3 ];
    }

    var_6 = physics_querypoint( var_0, var_1, var_4, var_5, "physicsquery_all" );
    var_7 = [];

    if ( !isdefined( var_2 ) )
    {
        foreach ( var_9 in var_6 )
        {
            var_10 = var_9["entity"];

            if ( isdefined( var_10 ) )
                var_7[var_7.size] = var_10;
        }
    }
    else
    {
        foreach ( var_9 in var_6 )
        {
            var_10 = var_9["entity"];

            if ( isdefined( var_10 ) && isdefined( var_10.team ) && var_10.team == var_2 )
                var_7[var_7.size] = var_10;
        }
    }

    return var_7;
}

watchentitiesinradius( var_0, var_1, var_2, var_3, var_4 )
{
    self endon( "disconnect" );
    self endon( "end_entities_in_radius" );
    level endon( "game_ended" );

    for (;;)
    {
        if ( !isdefined( self ) )
            return;

        var_5 = undefined;

        if ( var_4 )
            var_5 = scripts\mp\utility\player::getplayersinradius( self.origin, var_0 );
        else
            var_5 = getentitiesinradius( self.origin, var_0 );

        if ( var_5.size > 0 )
        {
            if ( !var_3 )
                self notify( var_1, var_5 );
            else
            {
                var_6 = [];

                foreach ( var_8 in var_5 )
                {
                    var_9 = self getorigin();
                    var_10 = scripts\engine\utility::ter_op( var_4, var_8 geteye(), var_8.origin );
                    var_11 = physics_createcontents( [ "physicscontents_solid", "physicscontents_structural", "physicscontents_vehicleclip", "physicscontents_item", "physicscontents_ainoshoot" ] );
                    var_12 = physics_raycast( var_9, var_10, var_11, undefined, 0, "physicsquery_closest" );

                    if ( var_12.size <= 0 )
                        var_6[var_6.size] = var_8;
                }

                self notify( var_1, var_6 );
            }
        }

        wait( var_2 );
    }
}

cancelentitiesinradius()
{
    self notify( "end_entities_in_radius" );
}

placeequipmentfailed( var_0, var_1, var_2, var_3 )
{
    self playlocalsound( "scavenger_pack_pickup" );

    if ( istrue( var_1 ) )
    {
        var_4 = undefined;

        if ( isdefined( var_3 ) )
            var_4 = spawnfxforclient( scripts\engine\utility::getfx( "placeEquipmentFailed" ), var_2, self, anglestoforward( var_3 ), anglestoup( var_3 ) );
        else
            var_4 = spawnfxforclient( scripts\engine\utility::getfx( "placeEquipmentFailed" ), var_2, self );

        triggerfx( var_4 );
        thread placeequipmentfailedcleanup( var_4 );
    }

    switch ( var_0 )
    {
        case "deployable_cover_mp":
        case "trip_mine_mp":
        case "cryo_mine_mp":
        case "micro_turret_mp":
        case "trophy_mp":
            if ( isplayer( self ) && scripts\cp_mp\utility\player_utility::_isalive() )
            {
                self iprintlnbold( "Placement Failed" );
                return;
            }
    }
}

placeequipmentfailedinit()
{
    level._effect["placeEquipmentFailed"] = loadfx( "vfx/iw7/_requests/mp/vfx_generic_equipment_exp.vfx" );
}

placeequipmentfailedcleanup( var_0 )
{
    wait 2;
    var_0 delete();
}

isspidergrenade( var_0 )
{
    return istrue( var_0.isspidergrenade );
}

issupertrophy( var_0 )
{
    var_1 = var_0 getentitynumber();

    if ( !isdefined( level.supertrophy ) )
        return 0;

    if ( !isdefined( level.supertrophy.trophies ) )
        return 0;

    if ( !isdefined( level.supertrophy.trophies[var_1] ) )
        return 0;

    return level.supertrophy.trophies[var_1] == var_0;
}

ismicroturret( var_0 )
{
    var_1 = var_0 getentitynumber();

    if ( !isdefined( level.microturrets ) )
        return 0;

    if ( !isdefined( level.microturrets[var_1] ) )
        return 0;

    return level.microturrets[var_1] == var_0;
}

ischoppergunner( var_0 )
{
    if ( !isdefined( var_0.streakinfo ) )
        return 0;

    if ( !isdefined( var_0.streakinfo.streakname ) )
        return 0;

    var_1 = var_0.streakinfo.streakname == "chopper_gunner";
    return var_1;
}

issupporthelo( var_0 )
{
    if ( !isdefined( var_0.streakinfo ) )
        return 0;

    if ( !isdefined( var_0.streakinfo.streakname ) )
        return 0;

    var_1 = var_0.streakinfo.streakname == "chopper_support";
    return var_1;
}

isclusterstrike( var_0 )
{
    if ( !isdefined( var_0.streakinfo ) )
        return 0;

    if ( !isdefined( var_0.streakinfo.streakname ) )
        return 0;

    var_1 = var_0.streakinfo.streakname == "toma_strike";
    return var_1;
}

isuav( var_0 )
{
    if ( !isdefined( var_0.streakinfo ) )
        return 0;

    if ( !isdefined( var_0.streakinfo.streakname ) )
        return 0;

    if ( var_0.streakinfo.streakname == "uav" || var_0.streakinfo.streakname == "counter_uav" || var_0.streakinfo.streakname == "directional_uav" || var_0.streakinfo.streakname == "harp" )
        return 1;

    return 0;
}

isgunship( var_0 )
{
    if ( !isdefined( var_0.streakinfo ) )
        return 0;

    if ( !isdefined( var_0.streakinfo.streakname ) )
        return 0;

    var_1 = var_0.streakinfo.streakname == "gunship";
    return var_1;
}

isradardrone( var_0 )
{
    if ( !isdefined( var_0.streakinfo ) )
        return 0;

    if ( !isdefined( var_0.streakinfo.streakname ) )
        return 0;

    var_1 = var_0.streakinfo.streakname == "radar_drone_escort" || var_0.streakinfo.streakname == "radar_drone_recon";
    return var_1;
}

isscramblerdrone( var_0 )
{
    if ( !isdefined( var_0.streakinfo ) )
        return 0;

    if ( !isdefined( var_0.streakinfo.streakname ) )
        return 0;

    var_1 = var_0.streakinfo.streakname == "scrambler_drone_guard";
    return var_1;
}

isradarhelicopter( var_0 )
{
    if ( !isdefined( var_0.streakinfo ) )
        return 0;

    if ( !isdefined( var_0.streakinfo.streakname ) )
        return 0;

    var_1 = var_0.streakinfo.streakname == "radar_drone_overwatch";
    return var_1;
}

turret_op( var_0 )
{
    if ( !isdefined( var_0.streakinfo ) )
        return 0;

    if ( !isdefined( var_0.streakinfo.streakname ) )
        return 0;

    var_1 = var_0.streakinfo.streakname == "assault_drone";
    return var_1;
}

isturret( var_0 )
{
    return isdefined( var_0.classname ) && var_0.classname == "misc_turret";
}

isdronepackage( var_0 )
{
    return isdefined( var_0.cratetype );
}

_enableequipdeployvfx()
{
    if ( !isdefined( self.enabledequipdeployvfx ) )
        self.enabledequipdeployvfx = 0;

    if ( self.enabledequipdeployvfx == 0 )
        self enableequipdeployvfx( 1 );

    self.enabledequipdeployvfx++;
}

_disableequipdeployvfx()
{
    if ( self.enabledequipdeployvfx == 1 )
        self enableequipdeployvfx( 0 );

    self.enabledequipdeployvfx--;
}

register_physics_collisions()
{
    self endon( "death" );
    self endon( "stop_phys_sounds" );

    for (;;)
    {
        self waittill( "collision", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 );
        level notify( "physSnd", self, var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 );
    }
}

global_physics_sound_monitor()
{
    level notify( "physics_monitor" );
    level endon( "physics_monitor" );

    for (;;)
    {
        level waittill( "physSnd", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );

        if ( isdefined( var_0 ) && isdefined( var_0.phys_sound_func ) )
            level thread [[ var_0.phys_sound_func ]]( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );
    }
}

register_physics_collision_func( var_0, var_1 )
{
    var_0.phys_sound_func = var_1;
}

istouchingboundstrigger( var_0 )
{
    return istrue( var_0.alreadytouchingtrigger );
}

istouchingboundsnullify( var_0 )
{
    var_1 = 0;

    if ( isdefined( level.outofboundstriggerpatches ) && level.outofboundstriggerpatches.size > 0 )
    {
        foreach ( var_3 in level.outofboundstriggerpatches )
        {
            if ( var_0 istouching( var_3 ) )
            {
                var_1 = 1;
                break;
            }
        }
    }

    return var_1;
}

deleteonplayerdeathdisconnect( var_0 )
{
    self endon( "death" );
    var_0 waittill( "death_or_disconnect" );
    self delete();
}

deleteatframeend()
{
    self endon( "death" );
    waittillframeend;
    self delete();
}
