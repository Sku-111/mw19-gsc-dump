// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

getotherteam( var_0 )
{
    return scripts\mp\utility\teams::getenemyteams( var_0 );
}

gettimepassed()
{
    if ( !isdefined( level.starttime ) || !isdefined( level.discardtime ) )
        return 0;

    if ( level.timerstopped )
        return level.timerpausetime - level.starttime - level.discardtime - level.overtimetotal;
    else
        return gettime() - level.starttime - level.discardtime - level.overtimetotal;
}

gettimepassedpercentage()
{
    var_0 = gettimelimit();

    if ( var_0 == 0 )
        return 0;

    return gettimepassed() / ( gettimelimit() * 1000 ) * 100;
}

getsecondspassed()
{
    return gettimepassed() / 1000;
}

getminutespassed()
{
    return getsecondspassed() / 60;
}

setuipostgamefade( var_0, var_1 )
{
    self endon( "disconnect" );

    if ( istrue( level.nukedetonated ) )
        return;

    if ( !isdefined( self.fadecurrent ) )
        self.fadecurrent = 0.0;

    if ( self.fadecurrent == var_0 )
        return;

    if ( isdefined( var_1 ) )
        wait( var_1 );

    self notify( "setUIPostGameFade" );
    self endon( "setUIPostGameFade" );

    if ( self.fadecurrent < var_0 )
        self.fadecurrent = clamp( self.fadecurrent + 0.5 * abs( self.fadecurrent - var_0 ), 0.0, 1.0 );
    else
        self.fadecurrent = clamp( self.fadecurrent - 0.5 * abs( self.fadecurrent - var_0 ), 0.0, 1.0 );

    self setclientomnvar( "ui_total_fade", self.fadecurrent );
    wait 0.1;
    self.fadecurrent = var_0;
    self setclientomnvar( "ui_total_fade", self.fadecurrent );
}

registerroundswitchdvar( var_0, var_1, var_2, var_3 )
{
    scripts\mp\utility\dvars::registerwatchdvarint( "roundswitch", var_1 );
    var_0 = "scr_" + var_0 + "_roundswitch";
    level.roundswitchdvar = var_0;
    level.roundswitchmin = var_2;
    level.roundswitchmax = var_3;
    level.roundswitch = getdvarint( var_0, var_1 );

    if ( level.roundswitch < var_2 )
        level.roundswitch = var_2;
    else if ( level.roundswitch > var_3 )
        level.roundswitch = var_3;
}

registerroundlimitdvar( var_0, var_1 )
{
    scripts\mp\utility\dvars::registerwatchdvarint( "roundlimit", var_1 );
}

registernumteamsdvar( var_0, var_1 )
{
    scripts\mp\utility\dvars::registerwatchdvarint( "numTeams", var_1 );
}

registerwinlimitdvar( var_0, var_1 )
{
    scripts\mp\utility\dvars::registerwatchdvarint( "winlimit", var_1 );
}

registerwinbytwoenableddvar( var_0, var_1 )
{
    scripts\mp\utility\dvars::registerwatchdvarint( "winbytwoenabled", var_1 );
}

registerwinbytwomaxroundsdvar( var_0, var_1 )
{
    scripts\mp\utility\dvars::registerwatchdvarint( "winbytwomaxrounds", var_1 );
}

registerdogtagsenableddvar( var_0, var_1 )
{
    scripts\mp\utility\dvars::registerwatchdvarint( "dogtags", var_1 );
}

registerscorelimitdvar( var_0, var_1 )
{
    scripts\mp\utility\dvars::registerwatchdvarint( "scorelimit", var_1 );
}

registertimelimitdvar( var_0, var_1 )
{
    scripts\mp\utility\dvars::registerwatchdvarfloat( "timelimit", var_1 );
    setdvar( "ui_timelimit", gettimelimit() );
}

registerhalftimedvar( var_0, var_1 )
{
    scripts\mp\utility\dvars::registerwatchdvarint( "halftime", var_1 );
    setdvar( "ui_halftime", gethalftime() );
}

registernumlivesdvar( var_0, var_1 )
{
    scripts\mp\utility\dvars::registerwatchdvarint( "numlives", var_1 );
}

registernumrevivesdvar( var_0, var_1 )
{
    scripts\mp\utility\dvars::registerwatchdvarint( "numrevives", var_1 );
}

setovertimelimitdvar( var_0 )
{
    setdvar( "overtimeTimeLimit", var_0 );
}

registerlaststandhealthdvar( var_0 )
{
    scripts\mp\utility\dvars::registerwatchdvarint( "lastStandHealth", var_0 );
}

registerlaststandrevivehealthdvar( var_0 )
{
    scripts\mp\utility\dvars::registerwatchdvarint( "lastStandReviveHealth", var_0 );
}

registerlaststandtimerdvar( var_0 )
{
    scripts\mp\utility\dvars::registerwatchdvarfloat( "lastStandTimer", var_0 );
}

registerlaststandrevivetimerdvar( var_0 )
{
    scripts\mp\utility\dvars::registerwatchdvarfloat( "lastStandReviveTimer", var_0 );
}

registerlaststandweapondvar( var_0 )
{
    scripts\mp\utility\dvars::registerwatchdvar( "lastStandWeapon", var_0 );
}

registerlaststandweapondelaydvar( var_0 )
{
    scripts\mp\utility\dvars::registerwatchdvarfloat( "lastStandWeaponDelay", var_0 );
}

registerlaststandsuicidetimerdvar( var_0 )
{
    scripts\mp\utility\dvars::registerwatchdvarfloat( "lastStandSuicideTimer", var_0 );
}

registerlaststandinvulntimerdvar( var_0 )
{
    scripts\mp\utility\dvars::registerwatchdvarfloat( "lastStandInvulnTimer", var_0 );
}

registerlaststandrevivedecayscaledvar( var_0 )
{
    scripts\mp\utility\dvars::registerwatchdvarfloat( "lastStandReviveDecayScale", var_0 );
}

isroundbased()
{
    if ( !level.teambased )
        return 0;

    if ( level.winlimit != 1 && level.roundlimit != 1 )
        return 1;

    if ( getgametype() == "sr" || getgametype() == "sd" || getgametype() == "siege" || getgametype() == "cyber" || getgametype() == "mtmc" )
        return 1;

    return 0;
}

safehouse_vo_return_start( var_0 )
{
    return "team_two_hundred";
}

vehicle_collision_ignorefuturemultievent( var_0 )
{
    if ( var_0 == safehouse_vo_return_start() && ( isdefined( level._id_14687 ) || deposit_from_compromised_convoy_delayed_failsafe() ) )
        return 1;

    return 0;
}

deposit_from_compromised_convoy_delayed_failsafe()
{
    return getdvarint( "scr_br_use_agents", 0 ) > 0 || istrue( level.disable_oob_immunity_on_riders );
}

isfirstround()
{
    if ( !level.teambased )
        return 1;

    if ( game["roundsPlayed"] == 0 )
        return 1;

    return 0;
}

nextroundisfinalround()
{
    if ( level.forcedend )
        return 1;

    if ( !level.teambased )
        return 1;

    if ( level.roundlimit > 1 && game["roundsPlayed"] >= level.roundlimit - 1 && !istimetobeatrulegametype() && !isscoretobeatrulegametype() )
        return 1;

    if ( isovertimesupportedgametype() && ( hitroundlimit() || hitwinlimit() ) )
    {
        if ( shouldplaywinbytwo() && islastwinbytwo() )
            return 1;
        else if ( istimetobeatrulegametype() || isscoretobeatrulegametype() )
        {
            if ( game["overtimeRoundsPlayed"] == 1 )
                return 1;
        }
        else if ( !level.playovertime )
            return 1;
    }

    var_0 = 0;

    foreach ( var_2 in level.teamnamelist )
    {
        if ( level vehicle_collision_ignorefuturemultievent( var_2 ) )
            continue;

        var_3 = getroundswon( var_2 );

        if ( var_3 == level.winlimit - 1 )
        {
            var_0 = 1;
            break;
        }
    }

    var_5 = level.winlimit > 0 && var_0;

    if ( var_5 && allteamstied() )
    {
        if ( isovertimesupportedgametype() )
            return 0;
        else
            return 1;
    }

    return 0;
}

nextroundismatchpoint()
{
    if ( level.forcedend )
        return 1;

    if ( !level.teambased )
        return 1;

    if ( level.roundlimit > 1 && game["roundsPlayed"] >= level.roundlimit - 1 && !istimetobeatrulegametype() && !isscoretobeatrulegametype() )
        return 1;

    if ( isovertimesupportedgametype() && ( hitroundlimit() || hitwinlimit() ) )
    {
        if ( shouldplaywinbytwo() && islastwinbytwo() )
            return 1;
        else if ( istimetobeatrulegametype() || isscoretobeatrulegametype() )
        {
            if ( game["overtimeRoundsPlayed"] == 1 )
                return 1;
        }
        else if ( !level.playovertime )
            return 1;
    }

    var_0 = 0;

    foreach ( var_2 in level.teamnamelist )
    {
        if ( level vehicle_collision_ignorefuturemultievent( var_2 ) )
            continue;

        var_3 = getroundswon( var_2 );

        if ( var_3 == level.winlimit - 1 )
        {
            if ( shouldplaywinbytwo() && istrue( game["displayedMatchPoint"] ) )
                game["displayedMatchPoint"] = 0;

            return 1;
        }
    }

    return 0;
}

wasonlyround()
{
    if ( level.playovertime )
        return 0;

    if ( !level.teambased )
        return 1;

    if ( isdefined( level.onlyroundoverride ) )
        return 0;

    if ( level.winlimit == 1 && hitwinlimit() )
        return 1;

    if ( level.roundlimit == 1 )
        return 1;

    return 0;
}

waslastround()
{
    if ( level.forcedend )
        return 1;

    if ( istrue( level.initcircuitbreakers ) )
        return 1;

    if ( wasonlyround() )
        return 1;

    if ( !level.teambased )
        return 1;

    if ( hitroundlimit() || hitwinlimit() )
        return !level.playovertime;

    return 0;
}

iswinbytworulegametype()
{
    switch ( getgametype() )
    {
        case "siege":
        case "sr":
        case "sd":
        case "arena":
            return getdvarint( "scr_" + getgametype() + "_winByTwoEnabled", 0 ) == 1;
    }

    return 0;
}

getmaxwinbytworounds()
{
    return getdvarint( "scr_" + getgametype() + "_winByTwoMaxRounds", level.winlimit );
}

shouldplaywinbytwo()
{
    var_0 = game["roundsWon"]["allies"];
    var_1 = game["roundsWon"]["axis"];
    return iswinbytworulegametype() && abs( var_0 - var_1 ) < 2 && game["overtimeRoundsPlayed"] < getmaxwinbytworounds();
}

islastwinbytwo()
{
    return shouldplaywinbytwo() && game["overtimeRoundsPlayed"] == getmaxwinbytworounds() - 1;
}

_id_1332B()
{
    var_0 = game["roundsWon"]["allies"];
    var_1 = game["roundsWon"]["axis"];
    return abs( var_0 - var_1 ) < 2;
}

istimetobeatrulegametype()
{
    switch ( getgametype() )
    {
        case "payload":
        case "ball":
        case "ctf":
            return 1;
    }

    return 0;
}

intimetobeat()
{
    return isdefined( game["status"] ) && game["status"] == "recordTTB";
}

settimetobeat( var_0 )
{
    if ( !istimetobeatrulegametype() )
        return 0;

    var_1 = getsecondspassed();
    var_2 = scripts\mp\gamescore::_getteamscore( var_0 );

    if ( !istimetobeatvalid() || var_1 < game["timeToBeat"] && var_2 >= game["timeToBeatScore"] )
    {
        if ( game["timeToBeatTeam"] != "none" && game["timeToBeatTeam"] != var_0 )
            game["timeToBeatOld"] = game["timeToBeat"];

        game["timeToBeat"] = var_1;
        game["timeToBeatTeam"] = var_0;
        game["timeToBeatScore"] = var_2;
        return 1;
    }

    return 0;
}

istimetobeatvalid()
{
    return game["timeToBeat"] != 0;
}

shouldplaytimetobeatot()
{
    return istimetobeatvalid() && game["overtimeRoundsPlayed"] == 1;
}

isscoretobeatrulegametype()
{
    switch ( getgametype() )
    {
        case "rush":
            return 1;
    }

    return 0;
}

setscoretobeat( var_0, var_1 )
{
    if ( !isscoretobeatrulegametype() )
        return 0;

    var_2 = game["timeToBeatTeam"] != "none" && var_1 == game["timeToBeatScore"];

    if ( var_1 >= game["timeToBeatScore"] )
    {
        if ( game["timeToBeatTeam"] != "none" && game["timeToBeatTeam"] != var_0 )
            game["timeToBeatScoreOld"] = game["timeToBeatScore"];

        game["timeToBeatTeam"] = var_0;
        game["timeToBeatScore"] = var_1;
    }

    foreach ( var_4 in level.players )
    {
        var_4 setclientomnvar( "ui_friendly_time_to_beat", scripts\engine\utility::ter_op( var_4.team == game["timeToBeatTeam"], game["timeToBeatScore"], game["timeToBeatScoreOld"] ) );
        var_4 setclientomnvar( "ui_enemy_time_to_beat", scripts\engine\utility::ter_op( var_4.team != game["timeToBeatTeam"], game["timeToBeatScore"], game["timeToBeatScoreOld"] ) );
    }

    if ( var_2 )
        return "tie";
    else
        return game["timeToBeatTeam"];
}

shouldplayscoretobeatot()
{
    return isscoretobeatrulegametype() && game["overtimeRoundsPlayed"] == 1;
}

isovertimesupportedgametype()
{
    if ( isgamebattlematch() )
        return 1;

    switch ( getgametype() )
    {
        case "payload":
        case "cmd":
        case "blitz":
        case "rush":
        case "ball":
        case "ctf":
            return 1;
        case "dd":
        case "siege":
        case "sr":
        case "sd":
        case "arena":
            return iswinbytworulegametype();
    }

    return 0;
}

getmaxovertimeroundsbygametype()
{
    if ( isgamebattlematch() )
        return -1;

    var_0 = 0;

    switch ( getgametype() )
    {
        case "payload":
        case "blitz":
        case "ball":
        case "ctf":
        case "siege":
        case "sr":
        case "sd":
            var_0 = 2;
            break;
        case "cmd":
        case "dd":
            var_0 = 1;
            break;
    }

    if ( isanymlgmatch() && !istimetobeatrulegametype() )
        return -1;

    return var_0;
}

getwingamebytype()
{
    if ( !isdefined( level.wingamebytype ) )
    {
        if ( !isroundbased() || !isobjectivebased() || ismoddedroundgame() )
            level.wingamebytype = "teamScores";
        else
            level.wingamebytype = "roundsWon";
    }

    return level.wingamebytype;
}

issimultaneouskillenabled()
{
    if ( !isdefined( level.simultaneouskillenabled ) )
        level.simultaneouskillenabled = getdvarint( "MRSNQSMSPL", 0 ) == 0;

    return level.simultaneouskillenabled;
}

cantiebysimultaneouskill()
{
    if ( !issimultaneouskillenabled() )
        return 0;

    var_0 = 0;

    switch ( getgametype() )
    {
        case "dm":
        case "war":
        case "brtdm":
        case "gun":
        case "front":
        case "arm":
            var_0 = 1;
    }

    return var_0;
}

shouldplayovertime()
{
    if ( !hitroundlimit() && !hitwinlimit() )
        return 0;

    if ( !isovertimesupportedgametype() )
        return 0;

    var_0 = allteamstied();

    if ( var_0 && inovertime() )
    {
        var_1 = getmaxovertimeroundsbygametype();
        var_0 = scripts\engine\utility::ter_op( var_1 == -1, 1, game["overtimeRoundsPlayed"] < var_1 );
    }

    var_2 = shouldplaywinbytwo();
    var_3 = shouldplaytimetobeatot();
    var_4 = shouldplayscoretobeatot();
    return !level.forcedend && ( var_0 || var_2 || var_3 || var_4 );
}

resetscoreonroundstart()
{
    if ( istrue( level.resetscoreonroundstart ) )
        return 1;

    return ( getgametype() == "ctf" || getgametype() == "blitz" ) && !inovertime() && getwingamebytype() == "roundsWon";
}

canplayhalfwayvo()
{
    if ( !isdefined( level.didhalfscorevoboost ) )
        level.didhalfscorevoboost = 0;

    if ( level.didhalfscorevoboost )
        return 0;

    switch ( getgametype() )
    {
        case "grnd":
        case "grind":
        case "dm":
        case "war":
        case "koth":
        case "hq":
        case "pill":
        case "brtdm":
        case "conf":
        case "tdef":
        case "dd":
        case "ball":
        case "dom":
        case "infect":
        case "front":
        case "arm":
            return 1;
        case "mp_zomb":
        case "gun":
        case "ctf":
        case "siege":
        case "sr":
        case "sd":
            return 0;
        default:
            return 0;
    }
}

hittimelimit()
{
    if ( scripts\mp\utility\dvars::getwatcheddvar( "timelimit" ) <= 0 )
        return 0;

    var_0 = scripts\mp\gamelogic::gettimeremaining();

    if ( var_0 > 0 )
        return 0;

    return 1;
}

hitroundlimit()
{
    if ( level.roundlimit <= 0 )
        return 0;

    return game["roundsPlayed"] >= level.roundlimit;
}

hitscorelimit()
{
    if ( isobjectivebased() )
        return 0;

    if ( level.roundscorelimit <= 0 )
        return 0;

    if ( level.teambased )
    {
        foreach ( var_1 in level.teamnamelist )
        {
            if ( game["teamScores"][var_1] >= level.roundscorelimit )
                return 1;
        }
    }
    else
    {
        for ( var_3 = 0; var_3 < level.players.size; var_3++ )
        {
            var_4 = level.players[var_3];

            if ( isdefined( var_4.score ) && var_4.score >= level.roundscorelimit )
                return 1;
        }
    }

    return 0;
}

hitwinlimit()
{
    if ( level.winlimit <= 0 )
        return 0;

    if ( !level.teambased )
        return 1;

    foreach ( var_1 in level.teamnamelist )
    {
        if ( getroundswon( var_1 ) >= level.winlimit )
            return 1;
    }

    return 0;
}

getscorelimit()
{
    if ( isroundbased() )
    {
        if ( level.roundlimit )
            return level.roundlimit;
        else
            return level.winlimit;
    }
    else
        return level.roundscorelimit;
}

getroundswon( var_0 )
{
    return game["roundsWon"][var_0];
}

allteamstied()
{
    var_0 = getwingamebytype();
    var_1 = undefined;

    foreach ( var_3 in level.teamnamelist )
    {
        if ( !isdefined( var_1 ) )
        {
            var_1 = game[var_0][var_3];
            continue;
        }

        if ( var_1 != game[var_0][var_3] )
            return 0;
    }

    return 1;
}

isobjectivebased()
{
    return level.objectivebased;
}

gettimelimit()
{
    if ( inovertime() && ( !isdefined( game["inNukeOvertime"] ) || !game["inNukeOvertime"] ) )
    {
        if ( istrue( game["timeToBeat"] ) )
            return game["timeToBeat"];
        else
        {
            var_0 = getdvarfloat( "overtimeTimeLimit" );

            if ( var_0 > 0 )
                return var_0;
            else
                return scripts\mp\utility\dvars::getwatcheddvar( "timelimit" );
        }
    }
    else if ( isdefined( level.extratime ) && level.extratime > 0 )
        return scripts\mp\utility\dvars::getwatcheddvar( "timelimit" ) + level.extratime;
    else
        return scripts\mp\utility\dvars::getwatcheddvar( "timelimit" );
}

gethalftime()
{
    if ( inovertime() )
        return 0;
    else if ( isdefined( game["inNukeOvertime"] ) && game["inNukeOvertime"] )
        return 0;
    else
        return scripts\mp\utility\dvars::getwatcheddvar( "halftime" );
}

inovertime()
{
    return isdefined( game["status"] ) && game["status"] == "overtime";
}

gamehasstarted()
{
    if ( isdefined( level.gamehasstarted ) )
        return level.gamehasstarted;

    if ( level.teambased )
    {
        foreach ( var_1 in level.teamnamelist )
        {
            if ( scripts\mp\utility\teams::getteamdata( var_1, "hasSpawned" ) )
                return 1;
        }

        return 0;
    }

    return level.maxplayercount > 1;
}

getlivingplayers( var_0 )
{
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( !isalive( var_3 ) )
            continue;

        if ( level.teambased && isdefined( var_0 ) )
        {
            if ( var_0 == var_3.pers["team"] )
                var_1[var_1.size] = var_3;

            continue;
        }

        var_1[var_1.size] = var_3;
    }

    return var_1;
}

rankingenabled()
{
    if ( !isplayer( self ) )
        return 0;

    return level.rankedmatch && !self.usingonlinedataoffline;
}

onlinestatsenabled()
{
    if ( !isplayer( self ) )
        return 0;

    return level.onlinestatsenabled && !self.usingonlinedataoffline;
}

privatematch()
{
    return level.onlinegame && getdvarint( "LSTLQTSSRM" );
}

lobbyteamselectenabled()
{
    return level.systemlink || privatematch() && getdvarint( "NQORMNOQQM", 0 ) || _func_426();
}

matchmakinggame()
{
    return level.matchmakingmatch;
}

getgametypenumlives()
{
    return scripts\mp\utility\dvars::getwatcheddvar( "numlives" );
}

getlastlivingplayer( var_0 )
{
    var_1 = undefined;

    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_0 ) && var_3.team != var_0 )
            continue;

        if ( !var_3 scripts\cp_mp\utility\player_utility::_isalive() && !var_3 scripts\mp\playerlogic::mayspawn() )
            continue;

        if ( isdefined( var_3.switching_teams ) && var_3.switching_teams )
            continue;

        var_1 = var_3;
    }

    return var_1;
}

_id_13E13()
{
    var_0 = undefined;

    foreach ( var_2 in level.players )
    {
        if ( !var_2 scripts\cp_mp\utility\player_utility::_isalive() && !var_2 scripts\mp\playerlogic::mayspawn() )
            continue;

        if ( level.codcasterenabled )
        {
            if ( var_2 ismlgspectator() )
                continue;
        }

        if ( isdefined( var_0 ) )
            return undefined;
        else
            var_0 = var_2;
    }

    if ( isdefined( var_0 ) )
        return var_0;
    else
        return undefined;
}

getpotentiallivingplayers()
{
    var_0 = [];

    foreach ( var_2 in level.players )
    {
        if ( !var_2 scripts\cp_mp\utility\player_utility::_isalive() && !var_2 scripts\mp\playerlogic::mayspawn() )
            continue;

        if ( level.codcasterenabled )
        {
            if ( var_2 ismlgspectator() )
                continue;
        }

        var_0[var_0.size] = var_2;
    }

    return var_0;
}

denysystemicteamchoice()
{
    if ( !isbot( self ) && !initmaxspeedforpathlengthtable( self ) )
    {
        if ( isgamebattlematch() )
            return 1;

        if ( dotournamentendgame() )
            return 1;

        if ( level.codcasterenabled )
            return 0;
    }

    if ( getdvarint( "scr_skipclasschoice", 0 ) > 0 )
        return 1;

    return 0;
}

allowteamassignment()
{
    if ( getgametype() == "br" || getgametype() == "cranked" )
        return level.teambased;

    var_0 = doesmodesupportplayerteamchoice();
    return var_0;
}

doesmodesupportplayerteamchoice()
{
    if ( getgametype() == "gun" || getgametype() == "infect" )
        return 0;

    var_0 = int( tablelookup( "mp/gametypesTable.csv", 0, getgametype(), 4 ) );
    return var_0 > 0;
}

allowclasschoice()
{
    if ( getdvarint( "scr_skipclasschoice", 0 ) > 0 || skiploadout() )
        return 0;

    if ( isdefined( level.allowclasschoicefunc ) )
    {
        var_0 = self [[ level.allowclasschoicefunc ]]();

        if ( isdefined( var_0 ) )
            return var_0;
    }

    if ( scripts\mp\flags::gameflag( "infil_will_run" ) && isdefined( level.bypassclasschoicefunc ) )
        return 0;

    var_1 = int( tablelookup( "mp/gametypesTable.csv", 0, getgametype(), 5 ) );

    if ( !isai( self ) && istrue( level.denyclasschoice ) )
        return 0;

    return var_1;
}

skiploadout()
{
    if ( getgametype() == "dm" )
        return istrue( level.aonrules );
    else if ( getgametype() == "arena" )
        return isdefined( level.arenaloadouts ) && level.arenaloadouts != 1;

    return 0;
}

showfakeloadout()
{
    return 0;
}

setfakeloadoutweaponslot( var_0, var_1 )
{
    var_2 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    var_3 = [];

    if ( var_2 != "iw8_knife" )
        var_3 = getweaponattachments( var_0 );

    if ( isdefined( var_2 ) )
        var_4 = tablelookuprownum( "mp/statstable.csv", 4, var_2 );
    else
    {

    }

    for ( var_5 = 0; var_5 < 3; var_5++ )
    {
        var_6 = -1;

        if ( isdefined( var_3[var_5] ) )
        {
            if ( !scripts\mp\utility\weapon::isattachmentsniperscopedefault( var_0, var_3[var_5] ) )
                var_6 = tablelookuprownum( "mp/attachmenttable.csv", 4, var_3[var_5] );
        }
    }
}

setcommonrulesfrommatchrulesdata( var_0 )
{
    var_1 = getmatchrulesdata( "commonOption", "teamCount" );
    setdynamicdvar( "scr_" + getgametype() + "_teamcount", var_1 );
    var_2 = getmatchrulesdata( "commonOption", "teamSize" );
    setdynamicdvar( "scr_" + getgametype() + "_teamsize", var_2 );
    var_3 = getmatchrulesdata( "commonOption", "timeLimit" );
    setdynamicdvar( "scr_" + getgametype() + "_timeLimit", var_3 );
    registertimelimitdvar( getgametype(), var_3 );
    var_4 = getmatchrulesdata( "commonOption", "scoreLimit" );
    setdynamicdvar( "scr_" + getgametype() + "_scoreLimit", var_4 );
    registerscorelimitdvar( getgametype(), var_4 );
    var_5 = getmatchrulesdata( "commonOption", "winLimit" );
    setdynamicdvar( "scr_" + getgametype() + "_winLimit", var_5 );
    registerwinlimitdvar( getgametype(), var_5 );
    var_6 = getmatchrulesdata( "commonOption", "roundLimit" );
    setdynamicdvar( "scr_" + getgametype() + "_roundLimit", var_6 );
    registerroundlimitdvar( getgametype(), var_6 );
    var_7 = getmatchrulesdata( "commonOption", "roundSwitch" );
    setdynamicdvar( "scr_" + getgametype() + "_roundSwitch", var_7 );
    registerroundswitchdvar( getgametype(), var_7, 0, 9 );
    var_8 = getmatchrulesdata( "commonOption", "winByTwoEnabled" );
    setdynamicdvar( "scr_" + getgametype() + "_winByTwoEnabled", var_8 );
    registerwinbytwoenableddvar( getgametype(), var_8 );
    var_9 = getmatchrulesdata( "commonOption", "winByTwoMaxRounds" );
    setdynamicdvar( "scr_" + getgametype() + "_winByTwoMaxRounds", var_9 );
    registerwinbytwomaxroundsdvar( getgametype(), var_9 );
    var_10 = getmatchrulesdata( "commonOption", "dogTags" );
    setdynamicdvar( "scr_" + getgametype() + "_dogTags", var_10 );
    registerdogtagsenableddvar( getgametype(), var_10 );
    var_11 = getmatchrulesdata( "commonOption", "spawnProtectionTimer" );
    setdynamicdvar( "scr_" + getgametype() + "_spawnProtectionTimer", var_11 );
    var_12 = getmatchrulesdata( "commonOption", "numLives" );
    setdynamicdvar( "scr_" + getgametype() + "_numLives", var_12 );
    registernumlivesdvar( getgametype(), var_12 );
    var_13 = getmatchrulesdata( "commonOption", "numRevives" );
    setdynamicdvar( "scr_" + getgametype() + "_numRevives", var_13 );
    registernumrevivesdvar( getgametype(), var_13 );
    setdynamicdvar( "scr_player_maxhealth", getmatchrulesdata( "commonOption", "maxHealth" ) );
    setdynamicdvar( "scr_player_healthregentime", getmatchrulesdata( "commonOption", "healthRegen" ) );
    setdynamicdvar( "scr_" + getgametype() + "_healthregentime", getmatchrulesdata( "commonOption", "healthRegen" ) );
    setdynamicdvar( "scr_player_disableSuperSprint", getmatchrulesdata( "commonOption", "disableSuperSprint" ) );
    setdynamicdvar( "scr_player_disableMount", getmatchrulesdata( "commonOption", "disableMount" ) );
    setdynamicdvar( "scr_player_lastStand", getmatchrulesdata( "commonOption", "lastStand" ) );
    var_14 = getmatchrulesdata( "commonOption", "lastStandHealth" );
    setdynamicdvar( "scr_" + getgametype() + "_lastStandHealth", var_14 );
    registerlaststandhealthdvar( var_14 );
    var_15 = getmatchrulesdata( "commonOption", "lastStandReviveHealth" );
    setdynamicdvar( "scr_" + getgametype() + "_lastStandReviveHealth", var_15 );
    registerlaststandrevivehealthdvar( var_15 );
    var_16 = getmatchrulesdata( "commonOption", "lastStandTimer" );
    setdynamicdvar( "scr_" + getgametype() + "_lastStandTimer", var_16 );
    registerlaststandtimerdvar( var_16 );
    var_17 = getmatchrulesdata( "commonOption", "lastStandReviveTimer" );
    setdynamicdvar( "scr_" + getgametype() + "_lastStandReviveTimer", var_17 );
    registerlaststandrevivetimerdvar( var_17 );
    var_18 = getmatchrulesdata( "commonOption", "lastStandSuicideTimer" );
    setdynamicdvar( "scr_" + getgametype() + "_lastStandSuicideTimer", var_18 );
    registerlaststandsuicidetimerdvar( var_18 );
    setdynamicdvar( "scr_player_reviveuseweapon", getmatchrulesdata( "commonOption", "reviveUseWeapon" ) );
    level.matchrules_damagemultiplier = 0;
    setdynamicdvar( "scr_game_vampirism", getmatchrulesdata( "commonOption", "vampirism" ) );
    setdynamicdvar( "scr_game_spectatetype", getmatchrulesdata( "commonOption", "spectateModeAllowed" ) );
    setdynamicdvar( "scr_game_allowkillcam", getmatchrulesdata( "commonOption", "showKillcam" ) );
    setdynamicdvar( "scr_" + getgametype() + "_killcamType", getmatchrulesdata( "commonOption", "killcamType" ) );
    setdynamicdvar( "scr_" + getgametype() + "_allow3rdspectate", getmatchrulesdata( "commonOption", "spectate3rdAllowed" ) );
    setdynamicdvar( "scr_game_enableMinimap", getmatchrulesdata( "commonOption", "enableMinimap" ) );
    setdynamicdvar( "scr_game_forceuav", getmatchrulesdata( "commonOption", "radarAlwaysOn" ) );
    setdynamicdvar( "scr_game_radarHidePings", getmatchrulesdata( "commonOption", "radarHideShots" ) );
    setdynamicdvar( "scr_game_navBarHideEnemy", getmatchrulesdata( "commonOption", "compassHideEnemy" ) );
    setdynamicdvar( "scr_game_navBarHidePings", getmatchrulesdata( "commonOption", "compassHidePings" ) );
    setdynamicdvar( "scr_game_disablespawncamera", getmatchrulesdata( "commonOption", "disableSpawnCamera" ) );
    setdynamicdvar( "scr_" + getgametype() + "_playerrespawndelay", getmatchrulesdata( "commonOption", "respawnDelay" ) );
    setdynamicdvar( "scr_" + getgametype() + "_suicidespawndelay", getmatchrulesdata( "commonOption", "suicideSpawnDelay" ) );
    setdynamicdvar( "scr_" + getgametype() + "_waverespawndelay", getmatchrulesdata( "commonOption", "waveRespawnDelay" ) );
    setdynamicdvar( "scr_" + getgametype() + "_waverespawndelay_alt", getmatchrulesdata( "commonOption", "waveRespawnDelayAlt" ) );
    setdynamicdvar( "scr_player_forcerespawn", getmatchrulesdata( "commonOption", "forceRespawn" ) );
    level.matchrules_allowcustomclasses = getmatchrulesdata( "commonOption", "allowCustomClasses" );
    level.supportintel = getmatchrulesdata( "commonOption", "allowIntel" );
    setdynamicdvar( "scr_" + getgametype() + "_allowKillstreaks", getmatchrulesdata( "commonOption", "allowKillstreaks" ) );
    setdynamicdvar( "scr_" + getgametype() + "_allowPerks", getmatchrulesdata( "commonOption", "allowPerks" ) );
    setdynamicdvar( "scr_" + getgametype() + "_allowSupers", getmatchrulesdata( "commonOption", "allowSupers" ) );
    setdynamicdvar( "scr_" + getgametype() + "_ffPunishLimit", getmatchrulesdata( "commonOption", "ffPunishLimit" ) );
    setdynamicdvar( "scr_" + getgametype() + "_roundRetainStreaks", getmatchrulesdata( "commonOption", "roundRetainStreaks" ) );
    setdynamicdvar( "scr_" + getgametype() + "_roundRetainStreakProg", getmatchrulesdata( "commonOption", "roundRetainStreakProg" ) );
    setdynamicdvar( "scr_" + getgametype() + "_deathRetainStreaks", getmatchrulesdata( "commonOption", "deathRetainStreaks" ) );
    setdynamicdvar( "scr_game_casualScoreStreaks", getmatchrulesdata( "commonOption", "casualScoreStreaks" ) );
    setdynamicdvar( "scr_game_wrapKillstreaks", getmatchrulesdata( "commonOption", "wrapKillstreaks" ) );
    setdynamicdvar( "scr_game_superFastChargeRate", getmatchrulesdata( "commonOption", "superFastChargeRate" ) );
    setdynamicdvar( "scr_game_superPointsMod", getmatchrulesdata( "commonOption", "superPointsMod" ) );
    setdynamicdvar( "scr_game_spawnProtectionTimer", getmatchrulesdata( "commonOption", "spawnProtectionTimer" ) );
    setdynamicdvar( "scr_game_lethalDelay", getmatchrulesdata( "commonOption", "equipmentDelay" ) );
    setdynamicdvar( "scr_game_equipmentMSProtect", getmatchrulesdata( "commonOption", "equipmentMSProtect" ) );
    setdynamicdvar( "scr_game_disableBattleChatter", getmatchrulesdata( "commonOption", "disableBattleChatter" ) );
    setdynamicdvar( "scr_game_disableAnnouncer", getmatchrulesdata( "commonOption", "disableAnnouncer" ) );
    setdynamicdvar( "scr_game_inGameLoot", getmatchrulesdata( "commonOption", "inGameLoot" ) );
    setdynamicdvar( "scr_game_infilSkip", getmatchrulesdata( "commonOption", "infilSkip" ) );
    setdynamicdvar( "scr_" + getgametype() + "_practiceRound", getmatchrulesdata( "commonOption", "practiceRound" ) );
    setdynamicdvar( "scr_game_postGameExfil", getmatchrulesdata( "commonOption", "postGameExfil" ) );
    setdynamicdvar( "scr_game_exfilExtractTimer", getmatchrulesdata( "commonOption", "exfilExtractTimer" ) );
    setdynamicdvar( "scr_game_exfilActiveTimer", getmatchrulesdata( "commonOption", "exfilActiveTimer" ) );
    setdynamicdvar( "scr_player_postGameExfilWeapon", getmatchrulesdata( "commonOption", "postGameExfilWeapon" ) );
    level.crankedbombtimer = getmatchrulesdata( "commonOption", "crankedBombTimer" );
    setdynamicdvar( "scr_" + getgametype() + "_crankedBombTimer", level.crankedbombtimer );
    scripts\mp\cranked::registercrankedtimerdvar( getgametype(), level.crankedbombtimer );
    setdynamicdvar( "scr_game_magcount", getmatchrulesdata( "commonOption", "magCount" ) );
    setdynamicdvar( "scr_game_tacticalmode", getmatchrulesdata( "commonOption", "tacticalMode" ) );
    setdynamicdvar( "scr_game_onlyheadshots", getmatchrulesdata( "commonOption", "headshotsOnly" ) );

    if ( !isdefined( var_0 ) )
        setdynamicdvar( "scr_team_fftype", getmatchrulesdata( "commonOption", "friendlyFire" ) );

    setdvar( "MPOKQNLPRM", getdvarint( "scr_game_forceuav" ) == 1 );
    setdynamicdvar( "scr_" + getgametype() + "_enemyDeathLoc", getmatchrulesdata( "commonOption", "enemyDeathLoc" ) );
    setdynamicdvar( "scr_" + getgametype() + "_pointsPerKill", getmatchrulesdata( "commonOption", "pointsPerKill" ) );
    setdynamicdvar( "scr_" + getgametype() + "_pointsPerDeath", getmatchrulesdata( "commonOption", "pointsPerDeath" ) );
    setdynamicdvar( "scr_" + getgametype() + "_pointsHeadshotBonus", getmatchrulesdata( "commonOption", "pointsHeadshotBonus" ) );
    setdynamicdvar( "scr_" + getgametype() + "_pointsPerKSKill", getmatchrulesdata( "commonOption", "pointsPerKSKill" ) );
    setdynamicdvar( "scr_game_cdltuning", getmatchrulesdata( "commonOption", "cdltuning" ) );
    setdynamicdvar( "scr_devRemoveDomFlag", "" );
    setdynamicdvar( "scr_devPlaceDomFlag", "" );

    if ( privatematch() || level.systemlink || isanymlgmatch() )
    {
        level.codcasterenabled = getmatchrulesdata( "commonOption", "codcasterEnabled" );
        setdvar( "MOSNOQPOSS", level.codcasterenabled );
        setdynamicdvar( "scr_game_matchStartTime", getmatchrulesdata( "commonOption", "matchStartTime" ) );
        setdynamicdvar( "scr_game_roundStartTime", getmatchrulesdata( "commonOption", "roundStartTime" ) );
    }
}

reinitializematchrulesonmigration()
{
    for (;;)
    {
        level waittill( "host_migration_begin" );
        [[ level.initializematchrules ]]();
    }
}

reinitializethermal( var_0 )
{
    self endon( "disconnect" );

    if ( isdefined( var_0 ) )
        var_0 endon( "death" );

    for (;;)
    {
        level waittill( "host_migration_begin" );

        if ( isdefined( self.lastvisionsetthermal ) )
            self visionsetthermalforplayer( self.lastvisionsetthermal, 0 );
    }
}

getmatchrulesspecialclass( var_0, var_1 )
{
    var_2 = [];
    var_2["loadoutPrimaryAttachment2"] = "none";
    var_2["loadoutSecondaryAttachment2"] = "none";
    var_3 = [];
    var_2["loadoutPrimary"] = getmatchrulesdatawithteamandindex( "defaultClasses", var_0, var_1, "class", "weaponSetups", 0, "weapon" );
    var_2["loadoutPrimaryAttachment"] = getmatchrulesdatawithteamandindex( "defaultClasses", var_0, var_1, "class", "weaponSetups", 0, "attachmentSetup", 0, "attachment" );
    var_2["loadoutPrimaryAttachment2"] = getmatchrulesdatawithteamandindex( "defaultClasses", var_0, var_1, "class", "weaponSetups", 0, "attachmentSetup", 1, "attachment" );
    var_2["loadoutPrimaryCamo"] = getmatchrulesdatawithteamandindex( "defaultClasses", var_0, var_1, "class", "weaponSetups", 0, "camo" );
    var_2["loadoutPrimaryReticle"] = getmatchrulesdatawithteamandindex( "defaultClasses", var_0, var_1, "class", "weaponSetups", 0, "reticle" );
    var_2["loadoutSecondary"] = getmatchrulesdatawithteamandindex( "defaultClasses", var_0, var_1, "class", "weaponSetups", 1, "weapon" );
    var_2["loadoutSecondaryAttachment"] = getmatchrulesdatawithteamandindex( "defaultClasses", var_0, var_1, "class", "weaponSetups", 1, "attachmentSetup", 0, "attachment" );
    var_2["loadoutSecondaryAttachment2"] = getmatchrulesdatawithteamandindex( "defaultClasses", var_0, var_1, "class", "weaponSetups", 1, "attachmentSetup", 1, "attachment" );
    var_2["loadoutSecondaryCamo"] = getmatchrulesdatawithteamandindex( "defaultClasses", var_0, var_1, "class", "weaponSetups", 1, "camo" );
    var_2["loadoutSecondaryReticle"] = getmatchrulesdatawithteamandindex( "defaultClasses", var_0, var_1, "class", "weaponSetups", 1, "reticle" );
    var_2["loadoutPerks"] = var_3;
    var_2["loadoutKillstreak1"] = scripts\mp\class::recipe_getkillstreak( var_0, var_1, 0 );
    var_2["loadoutKillstreak2"] = scripts\mp\class::recipe_getkillstreak( var_0, var_1, 1 );
    var_2["loadoutKillstreak3"] = scripts\mp\class::recipe_getkillstreak( var_0, var_1, 2 );
    return var_2;
}

isplayeroutsideofanybombsite( var_0 )
{
    if ( isdefined( level.objectives ) )
    {
        foreach ( var_2 in level.objectives )
        {
            if ( self istouching( var_2.noweapondropallowedtrigger ) )
                return 0;
        }
    }

    return 1;
}

gamehasneutralcrateowner( var_0 )
{
    switch ( var_0 )
    {
        case "sotf_ffa":
        case "sotf":
            return 1;
        default:
            return 0;
    }
}

isanymlgmatch()
{
    if ( isusingmatchrulesdata() )
    {
        if ( getdvarint( "NTLNTTNNLQ" ) == 0 && getmatchrulesdata( "cwlRulesEnabled" ) == 1 )
            return 1;
    }

    return getdvarint( "LOMTKQTRTM" ) || istrue( level.get_wave_max_count );
}

ismlgsystemlink()
{
    if ( level.systemlink && ( getdvarint( "LOMTKQTRTM" ) || istrue( level.get_wave_max_count ) ) )
        return 1;

    return 0;
}

ismlgprivatematch()
{
    if ( privatematch() && ( getdvarint( "LOMTKQTRTM" ) || istrue( level.get_wave_max_count ) ) )
        return 1;

    return 0;
}

ismlgmatch()
{
    if ( ismlgsystemlink() || ismlgprivatematch() )
        return 1;

    return 0;
}

setmlgannouncement( var_0, var_1, var_2, var_3 )
{
    if ( var_1 == "axis" )
        var_0 = var_0 + 2000;
    else if ( var_1 == "allies" )
        var_0 = var_0 + 1000;

    if ( isdefined( var_2 ) )
        var_0 = var_0 + ( var_2 + 1 ) * 10000;

    if ( isdefined( var_3 ) )
    {
        if ( isnumber( var_3 ) )
            var_0 = var_0 + ( var_3 + 1 ) * 1000000;
        else
            scripts\engine\utility::error( "mlg announcement extra data supports numbers only. Invalid extra data: " + var_3 );
    }

    if ( isdefined( var_0 ) )
        setomnvar( "ui_mlg_announcement", var_0 );
}

ismoddedroundgame()
{
    if ( getgametype() == "dom" || getgametype() == "ctf" || getgametype() == "rush" || getgametype() == "blitz" )
        return 1;

    return 0;
}

isusingdefaultclass( var_0, var_1 )
{
    var_2 = 0;

    if ( isdefined( var_1 ) )
    {
        if ( isusingmatchrulesdata() && getmatchrulesdatawithteamandindex( "defaultClasses", var_0, var_1, "class", "inUse" ) )
            var_2 = 1;
    }
    else
    {
        for ( var_1 = 0; var_1 < 6; var_1++ )
        {
            if ( isusingmatchrulesdata() && getmatchrulesdatawithteamandindex( "defaultClasses", var_0, var_1, "class", "inUse" ) )
            {
                var_2 = 1;
                break;
            }
        }
    }

    return var_2;
}

getmatchrulesdatawithteamandindex( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( var_1 == "axis" )
        var_2 = var_2 + 6;

    if ( isdefined( var_6 ) )
        return getmatchrulesdata( var_0, var_2, var_3, var_4, var_5, var_6 );
    else if ( isdefined( var_5 ) )
        return getmatchrulesdata( var_0, var_2, var_3, var_4, var_5 );
    else
        return getmatchrulesdata( var_0, var_2, var_3, var_4 );
}

isspawnprotected()
{
    return gettime() < self.spawntime + level.killstreakspawnshielddelayms;
}

ismatchstartprotected()
{
    return isdefined( level.starttime ) && gettime() < level.starttime + level.equipmentmatchstartshieldms;
}

unset_relic_grounded()
{
    var_0 = getgametype() == "br";
    var_1 = getgametype() == "brtdm";
    return var_0 || var_1;
}

getgametype()
{
    return level.gametype;
}

round_vehicle_logic()
{
    var_0 = getgametype();

    if ( var_0 == "br" )
    {
        var_1 = getdvar( "scr_br_gametype", "" );

        if ( var_1 != "" )
            return var_1;
    }

    return var_0;
}

usingfallback()
{
    var_0 = getgametype();
    var_1 = round_vehicle_logic();
    return var_0 != var_1;
}

validate_track()
{
    if ( round_vehicle_logic() == "br" )
        return 1;
    else if ( round_vehicle_logic() == "jugg" )
        return 1;

    return 0;
}

lpcfeaturegated()
{
    if ( getdvarint( "scr_forceLeanThreadMode" ) == 1 )
        return 1;

    if ( getgametype() == "arm" || getgametype() == "br" || getgametype() == "brtdm" || level.leanthread == 1 )
        return 1;

    return 0;
}

runleanthreadmode()
{
    if ( getdvarint( "scr_forceLeanThreadMode" ) == 1 )
        return 1;

    if ( getgametype() == "br" || level.leanthread == 1 )
        return 1;

    return 0;
}

issquadmode()
{
    return getdvarint( "RRNTNNKNP", 0 ) > 1;
}

gamehasinfil()
{
    if ( !isdefined( game["infil"] ) )
        return 0;

    var_0 = 1;

    foreach ( var_2 in level.teamnamelist )
    {
        if ( !isdefined( game["infil"][var_2] ) || !isdefined( game["infil"][var_2]["lanes"] ) )
        {
            var_0 = 0;
            break;
        }
    }

    return var_0;
}

teamhasinfil( var_0 )
{
    return gamehasinfil() && scripts\mp\utility\teams::isgameplayteam( var_0 ) && isdefined( game["infil"][var_0]["lanes"] );
}

iskillstreakdenied()
{
    return scripts\cp_mp\emp_debuff::is_empd() || isairdenied();
}

isairdenied()
{
    if ( self.team == "spectator" )
        return 0;

    return 0;
}

getmaxoutofboundstime()
{
    var_0 = level.outofboundstime;

    if ( !isdefined( var_0 ) )
    {
        var_0 = max( 0, scripts\engine\utility::ter_op( matchmakinggame(), getdvarfloat( "scr_outOfBoundsTime", 3 ), 3 ) );
        level.outofboundstime = var_0;
    }

    return var_0;
}

getmaxoutofboundscooldown()
{
    var_0 = level.outofboundscooldown;

    if ( !isdefined( var_0 ) )
    {
        var_0 = max( 0, getdvarfloat( "scr_outOfBoundsCooldown", 3 ) );
        level.outofboundscooldown = var_0;
    }

    return var_0;
}

getmaxoutofboundsminefieldtime()
{
    var_0 = level.outofboundstimeminefield;

    if ( !isdefined( var_0 ) )
    {
        var_0 = max( 0, getdvarfloat( "scr_outOfBoundsTimeMinefield", 3 ) );
        level.outofboundstimeminefield = var_0;
    }

    return var_0;
}

getmaxoutofboundsrestrictedtime()
{
    level.outofboundstimerestricted = 5;
    return level.outofboundstimerestricted;
}

repair_grill_fixing_short_sfx()
{
    if ( !isdefined( level._id_12162 ) )
        level._id_12162 = max( 0, getdvarfloat( "scr_outOfBoundsTime", 5 ) );

    return level._id_12162;
}

runbrgametypefunc()
{
    var_0 = self;

    if ( isdefined( var_0._id_120B4 ) )
        return var_0._id_120B4;

    return undefined;
}

repair_grill_stop_exit_foley_sfx()
{
    if ( !isdefined( level._id_12164 ) )
        level._id_12164 = getdvarint( "scr_br_payload_retreat_time", 30 );

    return level._id_12164;
}

repair_grill_start_enter_foley_sfx()
{
    if ( !isdefined( level._id_12163 ) )
        level._id_12163 = getdvarint( "scr_br_payload_redraw_time", 10 );

    return level._id_12163;
}

updateobjectivetext()
{
    if ( self.pers["team"] == "spectator" )
        self setclientdvar( "MSRPQTQOOK", "" );
    else
    {
        if ( level.roundscorelimit > 0 && !isobjectivebased() )
        {
            if ( isdefined( getobjectivescoretext( self.pers["team"] ) ) )
            {
                if ( level.splitscreen )
                {
                    self setclientdvar( "MSRPQTQOOK", getobjectivescoretext( self.pers["team"] ) );
                    return;
                }

                self setclientdvar( "MSRPQTQOOK", getobjectivescoretext( self.pers["team"] ), level.roundscorelimit );
                return;
                return;
            }

            return;
        }

        if ( isdefined( getobjectivetext( self.pers["team"] ) ) )
            self setclientdvar( "MSRPQTQOOK", getobjectivetext( self.pers["team"] ) );
    }
}

setobjectivetext( var_0, var_1 )
{
    game["strings"]["objective_" + var_0] = var_1;
}

setobjectivescoretext( var_0, var_1 )
{
    game["strings"]["objective_score_" + var_0] = var_1;
}

setobjectivehinttext( var_0, var_1 )
{
    game["strings"]["objective_hint_" + var_0] = var_1;
}

getobjectivetext( var_0 )
{
    return game["strings"]["objective_" + var_0];
}

getobjectivescoretext( var_0 )
{
    return game["strings"]["objective_score_" + var_0];
}

getobjectivehinttext( var_0 )
{
    return game["strings"]["objective_hint_" + var_0];
}

testgamemodestringlist( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || var_0 == "" || !isdefined( var_1 ) || var_1 == "" )
        return 0;

    return issubstr( var_0, var_1 );
}

islaststandenabled()
{
    return isdefined( level.laststand ) && level.laststand == 1;
}

isteamreviveenabled()
{
    return isdefined( level.laststand ) && level.laststand == 2;
}

checkrealismhudsettings()
{
    if ( istrue( level.testrandomrealismclients ) )
    {
        if ( !isdefined( self.isrealismenabled ) )
        {
            if ( scripts\engine\utility::cointoss() )
            {
                self setclientomnvar( "ui_realism_hud", 1 );
                self.isrealismenabled = 1;
            }
            else
            {
                self setclientomnvar( "ui_realism_hud", 0 );
                self.isrealismenabled = 0;
            }
        }
    }
    else if ( scripts\cp_mp\utility\game_utility::isrealismenabled() )
        self setclientomnvar( "ui_realism_hud", 1 );
    else
        self setclientomnvar( "ui_realism_hud", 0 );
}

isdefending( var_0 )
{
    var_1 = 0;

    switch ( getgametype() )
    {
        case "cyber":
            if ( isdefined( level.cyberemp.carrier ) && self.team == level.cyberemp.ownerteam && self != level.cyberemp.carrier )
            {
                var_2 = distancesquared( level.cyberemp.carrier.origin, self.origin );
                var_3 = distancesquared( level.cyberemp.carrier.origin, var_0.origin );

                if ( var_2 < 90000 || var_3 < 90000 )
                {
                    var_1 = 1;
                    break;
                }
            }

            foreach ( var_5 in level.objectives )
            {
                if ( istrue( var_5.trigger.trigger_off ) )
                    continue;

                var_6 = var_5.ownerteam;

                if ( var_6 == self.team )
                {
                    var_2 = distancesquared( var_5.trigger.origin, self.origin );
                    var_3 = distancesquared( var_5.trigger.origin, var_0.origin );

                    if ( var_2 < 90000 || var_3 < 90000 )
                    {
                        var_1 = 1;
                        break;
                    }
                }
            }

            break;
        case "dd":
        case "sr":
        case "sd":
            if ( self.team != game["defenders"] )
                break;

            foreach ( var_9 in level.objectives )
            {
                var_10 = distancesquared( var_9.trigger.origin, var_0.origin );

                if ( var_10 < 90000 )
                {
                    var_1 = 1;
                    break;
                }
            }

            break;
        case "grind":
        case "pill":
        case "siege":
        case "dom":
        case "arm":
            foreach ( var_9 in level.objectives )
            {
                if ( self.team != var_9.ownerteam )
                    continue;

                var_13 = distancesquared( var_9.curorigin, self.origin );
                var_14 = distancesquared( var_9.curorigin, var_0.origin );

                if ( var_13 < 90000 || var_14 < 90000 )
                {
                    var_1 = 1;
                    break;
                }
            }

            break;
        case "grnd":
        case "koth":
        case "hq":
            if ( isdefined( level.zone ) )
                var_1 = ispointinvolume( self.origin, level.zone.trigger ) || ispointinvolume( var_0.origin, level.zone.trigger );

            break;
    }

    return var_1;
}

turret_outline_watcher( var_0 )
{
    var_1 = 0;

    switch ( getgametype() )
    {
        case "cyber":
            if ( istrue( var_0.isbombcarrier ) )
            {
                var_1 = 1;
                break;
            }

            if ( isdefined( level.cyberemp.carrier ) && self.team == level.cyberemp.ownerteam && self != level.cyberemp.carrier )
            {
                var_2 = distancesquared( level.cyberemp.carrier.origin, self.origin );
                var_3 = distancesquared( level.cyberemp.carrier.origin, var_0.origin );

                if ( var_2 < 90000 || var_3 < 90000 )
                {
                    var_1 = 1;
                    break;
                }
            }

            foreach ( var_5 in level.objectives )
            {
                if ( istrue( var_5.trigger.trigger_off ) )
                    continue;

                var_6 = var_5.ownerteam;

                if ( var_6 != self.team )
                {
                    var_7 = distancesquared( var_5.trigger.origin, self.origin );
                    var_8 = distancesquared( var_5.trigger.origin, var_0.origin );

                    if ( var_7 < 90000 || var_8 < 90000 )
                    {
                        var_1 = 1;
                        break;
                    }
                }
            }

            break;
        case "dd":
        case "sr":
        case "sd":
            if ( self.team == game["defenders"] )
                break;

            foreach ( var_11 in level.objectives )
            {
                var_12 = distancesquared( var_11.trigger.origin, var_0.origin );

                if ( var_12 < 90000 )
                {
                    var_1 = 1;
                    break;
                }
            }

            break;
        case "grind":
        case "pill":
        case "siege":
        case "dom":
        case "arm":
            foreach ( var_11 in level.objectives )
            {
                if ( self.team == var_11.ownerteam )
                    continue;

                var_7 = distancesquared( var_11.curorigin, self.origin );
                var_8 = distancesquared( var_11.curorigin, var_0.origin );

                if ( var_7 < 90000 || var_8 < 90000 )
                {
                    var_1 = 1;
                    break;
                }
            }

            break;
        case "grnd":
        case "koth":
        case "hq":
            if ( isdefined( level.zone ) )
                var_1 = ispointinvolume( self.origin, level.zone.trigger ) || ispointinvolume( var_0.origin, level.zone.trigger );

            break;
    }

    return var_1;
}

gametypesupportsbasejumping()
{
    switch ( getgametype() )
    {
        case "war":
        case "trial":
        case "brtdm":
        case "siege":
        case "dom":
        case "infect":
        case "br":
        case "arm":
            return 1;
        default:
            return 0;
    }
}

mapsupportsbasejumping()
{
    if ( scripts\cp_mp\utility\game_utility::unlink_on_ai_death() )
        return 1;

    switch ( level.mapname )
    {
        case "mp_carpoc_test":
        case "mp_riverside_gw":
        case "mp_promenade_gw":
        case "mp_layover_gw":
        case "mp_boneyard_gw":
        case "mp_farms2":
        case "mp_bm_bunker01":
        case "mp_firingrange":
        case "mp_br_mechanics":
        case "mp_wz_island":
        case "mp_port2_gw":
        case "mp_farms2_gw":
        case "mp_downtown_gw":
        case "mp_quarry2":
        case "mp_locale_test":
            return 1;
        default:
            return 0;
    }
}

_id_119AC( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = scripts\mp\matchdata::gettimefrommatchstart( gettime() );

    if ( !isdefined( var_2 ) )
        return;

    var_6 = "";

    if ( isdefined( var_4 ) )
        var_6 = var_4;
    else
        var_6 = "none";

    if ( !isdefined( var_0 ) )
    {
        if ( isdefined( var_3 ) )
            getentitylessscriptablearray( "dlog_event_announcement", [ "time_from_match_start", var_5, "announcement", var_2, "extra_info", var_6, "player_team", "none", "contester_team", "none", "zone_x", var_3[0], "zone_y", var_3[1], "zone_z", var_3[2] ] );
        else
            getentitylessscriptablearray( "dlog_event_announcement", [ "time_from_match_start", var_5, "announcement", var_2, "extra_info", var_6 ] );
    }
    else if ( isdefined( var_1 ) )
    {
        if ( isdefined( var_3 ) )
            getentitylessscriptablearray( "dlog_event_announcement", [ "player", var_0, "contester", var_1, "time_from_match_start", var_5, "announcement", var_2, "extra_info", var_6, "player_team", var_0.team, "contester_team", var_1.team, "zone_x", var_3[0], "zone_y", var_3[1], "zone_z", var_3[2] ] );
        else
            getentitylessscriptablearray( "dlog_event_announcement", [ "player", var_0, "contester", var_1, "time_from_match_start", var_5, "announcement", var_2, "extra_info", var_6, "player_team", var_0.team, "contester_team", var_1.team ] );
    }
    else if ( isdefined( var_3 ) )
        getentitylessscriptablearray( "dlog_event_announcement", [ "player", var_0, "time_from_match_start", var_5, "announcement", var_2, "extra_info", var_6, "player_team", var_0.team, "contester_team", "none", "zone_x", var_3[0], "zone_y", var_3[1], "zone_z", var_3[2] ] );
    else
        getentitylessscriptablearray( "dlog_event_announcement", [ "player", var_0, "time_from_match_start", var_5, "announcement", var_2, "extra_info", var_6, "player_team", var_0.team ] );
}

updatex1stashhud()
{
    return istrue( level.updatex1prematchloadoutarray );
}

unset_relic_landlocked()
{
    return istrue( level.unset_relic_laststandmelee ) || istrue( level.unset_relic_lfo ) || istrue( level.unset_relic_laststand );
}

vcloseangles()
{
    var_0 = 0;

    switch ( scripts\cp_mp\utility\game_utility::getmapname() )
    {
        case "mp_riverside_gw":
        case "mp_promenade_gw":
        case "mp_layover_gw":
        case "mp_boneyard_gw":
        case "mp_port2_gw":
        case "mp_farms2_gw":
        case "mp_downtown_gw":
        case "mp_quarry2":
            return 1;
        default:
            return 0;
    }
}

get_allowed_vehicle_types_from_spawnpoint( var_0 )
{
    var_1 = 0;
    var_2 = 0;
    var_3 = scripts\cp_mp\utility\game_utility::getmapname();

    if ( ( getgametype() == "arm" || unset_relic_landlocked() ) && vcloseangles() || getdvarint( "scr_game_forceEnableParachuteCut", 0 ) == 1 )
    {
        if ( var_3 != "mp_aniyah" )
        {
            if ( istrue( level._id_121C8 ) )
                var_1 = 1;

            if ( istrue( level._id_121C9 ) && !istrue( var_0.little_bird_mg_playerexitturret ) )
                var_2 = 1;
        }
    }

    if ( var_1 )
        var_0 getclientomnvar();
    else
        var_0 weaponswitchbuttonpressed();

    if ( var_2 )
        var_0 skydive_cutautodeployon();
    else
        var_0 skydive_cutautodeployoff();
}

tv_station_intro_camera()
{
    return matchmakinggame() && getdvarint( "scr_classtable_override", 0 ) > 0;
}

usefloorrocks()
{
    return matchmakinggame() && getdvarint( "scr_classtable_override", 0 ) == 1;
}

handle_carry_special_item()
{
    if ( tv_station_intro_camera() )
    {
        switch ( getdvarint( "scr_classtable_override", 0 ) )
        {
            case 1:
                return 1;
            default:
                return 0;
        }
    }
    else if ( isdefined( level.set_systems_init_flag ) && level.set_systems_init_flag > 0 )
        return 1;

    return 0;
}

usequesttimer()
{
    return getdvarint( "scr_enable_server_halloween_content", 0 ) != 0;
}

updatetextongamepadchange()
{
    switch ( getgametype() )
    {
        case "brtdm":
            return 0;
        case "br":
            switch ( round_vehicle_logic() )
            {
                case "x2":
                case "payload":
                case "gold_war":
                case "kingslayer":
                case "risk":
                case "rat_race":
                case "dmz":
                case "rumble":
                    return 0;
            }
    }

    return 1;
}

_id_131A3( var_0, var_1 )
{
    if ( var_1 )
        var_0.c130 = 1;
    else
        var_0.c130 = undefined;
}

updatehistoryhud( var_0 )
{
    return istrue( var_0.c130 );
}
