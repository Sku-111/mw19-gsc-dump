// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

exploder_sound()
{
    if ( isdefined( self.script_delay ) )
        wait( self.script_delay );

    self playsound( level.scr_sound[self.script_sound] );
}

playsoundonplayers( var_0, var_1, var_2 )
{
    if ( level.splitscreen )
    {
        if ( isdefined( level.players[0] ) )
            level.players[0] playlocalsound( var_0 );
    }
    else if ( isdefined( var_1 ) )
    {
        if ( isdefined( var_2 ) )
        {
            for ( var_3 = 0; var_3 < level.players.size; var_3++ )
            {
                var_4 = level.players[var_3];

                if ( var_4 issplitscreenplayer() && !var_4 issplitscreenplayerprimary() )
                    continue;

                if ( isdefined( var_4.pers["team"] ) && var_4.pers["team"] == var_1 && !scripts\engine\utility::array_contains( var_2, var_4 ) )
                    var_4 playlocalsound( var_0 );
            }

            return;
        }

        for ( var_3 = 0; var_3 < level.players.size; var_3++ )
        {
            var_4 = level.players[var_3];

            if ( var_4 issplitscreenplayer() && !var_4 issplitscreenplayerprimary() )
                continue;

            if ( isdefined( var_4.pers["team"] ) && var_4.pers["team"] == var_1 )
                var_4 playlocalsound( var_0 );
        }

        return;
    }
    else if ( isdefined( var_2 ) )
    {
        for ( var_3 = 0; var_3 < level.players.size; var_3++ )
        {
            if ( level.players[var_3] issplitscreenplayer() && !level.players[var_3] issplitscreenplayerprimary() )
                continue;

            if ( !scripts\engine\utility::array_contains( var_2, level.players[var_3] ) )
                level.players[var_3] playlocalsound( var_0 );
        }
    }
    else
    {
        for ( var_3 = 0; var_3 < level.players.size; var_3++ )
        {
            if ( level.players[var_3] issplitscreenplayer() && !level.players[var_3] issplitscreenplayerprimary() )
                continue;

            level.players[var_3] playlocalsound( var_0 );
        }
    }
}

play_sound_on_entity( var_0, var_1 )
{
    play_sound_on_tag( var_0 );
}

play_sound_on_tag( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
        playsoundatpos( self gettagorigin( var_1 ), var_0 );
    else
        playsoundatpos( self.origin, var_0 );
}

playplayerandnpcsounds( var_0, var_1, var_2 )
{
    var_0 playlocalsound( var_1 );
    var_0 playsound( var_2, var_0 );
}

playdeathsound( var_0 )
{
    if ( istrue( level._id_133B4 ) || var_0 == "MOD_EXECUTION" )
        return;

    var_1 = randomintrange( 1, 8 );
    var_2 = "generic";

    if ( scripts\mp\utility\player::isfemale() )
        var_2 = "female";

    if ( var_0 == "MOD_FALLING" || var_0 == "MOD_SUICIDE" && isplayer( self ) )
    {
        if ( self.team == "axis" )
            playplayerandnpcsounds( self, "plr_death_explosion", var_2 + "_death_russian_" + var_1 );
        else
            playplayerandnpcsounds( self, "plr_death_explosion", var_2 + "_death_american_" + var_1 );
    }
    else if ( istrue( self.iszombie ) || istrue( level.setplayerselfrevivingextrainfo ) && level.gametype == "infect" && self.team == "axis" )
        playplayerandnpcsounds( self, "zmb_death_generic", "zmb_npc_death_generic" );
    else if ( isplayer( self ) )
    {
        if ( self.team == "axis" )
            playplayerandnpcsounds( self, "plr_death_generic", var_2 + "_death_russian_" + var_1 );
        else
            playplayerandnpcsounds( self, "plr_death_generic", var_2 + "_death_american_" + var_1 );
    }
    else if ( self.team == "axis" )
        self playsound( var_2 + "_death_russian_" + var_1 );
    else
        self playsound( var_2 + "_death_american_" + var_1 );
}

any_player_nearby_same_floor()
{
    if ( !isarray( level.amounttotal ) )
        level.amounttotal = [];

    if ( !isent( level.ammotype ) )
        level.ammotype = spawn( "sound_transient_soundbanks", ( 0, 0, 0 ) );
}

besttime( var_0 )
{
    any_player_nearby_same_floor();

    if ( isdefined( level.amounttotal[var_0] ) )
        return;

    level.ammotype settransientsoundbank( var_0 + ".all", 1 );
    level.amounttotal[var_0] = level.amounttotal.size;
    return;
}

_id_12C2A( var_0 )
{
    any_player_nearby_same_floor();

    if ( isdefined( level.amounttotal[var_0] ) )
    {
        level.ammotype settransientsoundbank( var_0 + ".all", 0 );
        level.amounttotal[var_0] = undefined;
    }
    else
    {

    }
}
