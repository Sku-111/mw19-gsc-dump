// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "init" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "init" ) ]]();

    level._effect["nuke_rolling_death"] = loadfx( "vfx/iw8_mp/killstreak/vfx_nuke_player_death_2.vfx" );
    level.nuke_expl_struct = scripts\cp_mp\utility\game_utility::removematchingents_bycodeclassname( "nuke_expl_pos" );
}

tryusenuke()
{
    var_0 = scripts\cp_mp\utility\killstreak_utility::createstreakinfo( "nuke", self );
    return tryusenukefromstruct( var_0 );
}

tryusenukefromstruct( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( isdefined( level.killstreaktriggeredfunc ) )
    {
        if ( !level [[ level.killstreaktriggeredfunc ]]( var_0 ) )
        {
            var_0 notify( "killstreak_finished_with_deploy_weapon" );
            return 0;
        }
    }

    if ( var_0.streakname == "nuke_select_location" )
        var_1 = 1;
    else
        var_1 = 0;

    var_0.nuketype = var_1;
    var_2 = undefined;
    var_3 = undefined;

    if ( !isdefined( level.nukeincoming ) )
    {
        level.nukeincoming = 1;
        level._id_11F14 = self;
    }
    else
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
            self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "KILLSTREAKS/NUKE_ALREADY_INBOUND" );

        return 0;
    }

    if ( var_1 == 1 )
    {
        var_4 = scripts\cp_mp\killstreaks\killstreakdeploy::streakdeploy_doweaponfireddeploy( var_0, getcompleteweaponname( "iw8_spotter_scope_mp", [ "spotterscope" ] ), "weapon_fired", ::weapongivennuke, ::weaponswitchendednuke, ::weaponfirednuke );
        var_2 = scripts\cp_mp\killstreaks\airstrike::airstrike_getownerlookatpos( self );
        var_3 = 25;
        var_5 = undefined;

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getOtherTeam" ) )
            var_5 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getOtherTeam" ) ]]( var_0.owner.team );

        if ( isdefined( var_5 ) )
            level thread nuke_warnenemiesnukeincoming( var_5[0] );
    }
    else if ( !istrue( level._id_11BD4 ) )
        var_4 = scripts\cp_mp\killstreaks\killstreakdeploy::streakdeploy_doweapontabletdeploy( var_0, undefined, undefined, undefined, undefined, "ks_remote_nuke_mp", 0 );
    else
        var_4 = 1;

    if ( !istrue( var_4 ) || level.gameended )
    {
        level.nukeincoming = undefined;
        level._id_11F14 = undefined;
        var_0 notify( "killstreak_finished_with_deploy_weapon" );
        return 0;
    }

    if ( isdefined( level.killstreakbeginusefunc ) )
    {
        if ( !level [[ level.killstreakbeginusefunc ]]( var_0 ) )
        {
            level.nukeincoming = undefined;
            level._id_11F14 = undefined;
            var_0 notify( "killstreak_finished_with_deploy_weapon" );
            return 0;
        }
    }

    thread nuke_start( var_0, 0, undefined, undefined, var_2, undefined, var_3 );

    if ( var_1 != 1 && !istrue( level._id_11BD4 ) )
        scripts\common\utility::_id_13E0A( level._id_11B2A, "nuke", self.origin );

    return 1;
}

weapongivennuke( var_0 )
{
    return 1;
}

weaponswitchendednuke( var_0, var_1 )
{
    if ( istrue( var_1 ) )
        thread scripts\cp_mp\killstreaks\airstrike::airstrike_watchforads( var_0, "splash_icon_nuke" );
}

weaponfirednuke( var_0, var_1, var_2 )
{
    var_3 = scripts\cp_mp\killstreaks\airstrike::airstrike_getownerlookatpos( self );

    if ( !isdefined( var_3 ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
            self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "KILLSTREAKS/INVALID_POINT" );

        return "continue";
    }

    return "success";
}

nuke_delaythread( var_0, var_1, var_2, var_3 )
{
    level endon( "nuke_cancelled" );

    if ( isdefined( var_0 ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "hostmigration_waitLongDurationWithPause" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "hostmigration_waitLongDurationWithPause" ) ]]( var_0 );
    }

    level thread [[ var_1 ]]( var_2, var_3 );
}

nuke_start( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    level endon( "nuke_cancelled" );
    level notify( "used_nuke" );
    self notify( "used_nuke" );
    var_0 notify( "killstreak_finished_with_deploy_weapon", 1 );
    level.nukeinfo = spawnstruct();

    if ( isplayer( self ) )
        level.nukeinfo.player = self;

    level.nukeinfo.team = self.pers["team"];
    level.nukevisionset = "aftermath_post";
    level.cancelmode = 0;
    level.nukegameover = undefined;
    level.nukedetonated = undefined;
    level.nukecancel = undefined;
    var_8 = 0;
    var_9 = self.origin + ( 0, 0, 30000 ) + anglestoforward( self.angles ) * 30000;
    var_10 = self.origin + anglestoforward( self.angles ) * 15000;

    if ( isdefined( level.nuke_expl_struct ) )
    {
        var_10 = level.nuke_expl_struct.origin;
        var_11 = vectornormalize( ( var_10[0], var_10[1], 0 ) - ( self.origin[0], self.origin[1], 0 ) );
        var_9 = var_10 + var_11 * 15000;
        var_9 = var_9 + ( 0, 0, 30000 ) + var_11 * 5000;
    }
    else if ( var_0.streakname != "nuke_select_location" )
    {

    }

    var_12 = 6;
    var_13 = 10;
    var_14 = 1;

    if ( istrue( var_1 ) )
    {
        var_8 = var_1;

        if ( istrue( var_8 ) )
            level.cancelmode = 1;
    }

    if ( isdefined( var_3 ) )
        var_9 = var_3;

    if ( isdefined( var_4 ) )
        var_10 = var_4;

    if ( istrue( var_5 ) )
        var_12 = var_5;

    if ( istrue( var_6 ) )
        var_13 = var_6;

    if ( istrue( var_2 ) )
        var_14 = var_2;

    if ( !isdefined( level.nuke_clockobject ) )
    {
        level.nuke_clockobject = spawn( "script_origin", var_9 + ( 0, 0, 100 ) );
        level.nuke_clockobject dontinterpolate();
        level.nuke_clockobject hide();
    }
    else
        level.nuke_clockobject.origin = var_9 + ( 0, 0, 100 );

    level.nuke_inflictor = spawn( "script_model", var_10 + ( 0, 0, 5000 ) );
    level.nuke_inflictor setmodel( "tag_origin" );
    level.nuke_inflictor.team = self.team;
    level.nuke_inflictor.owner = self;
    level.nuke_inflictor.streakinfo = var_0;

    if ( istrue( level._id_11BD4 ) )
        var_12 = 0.7;

    level thread nuke_startlaunchsequence( self, var_0, var_14, var_9, var_10, var_12, var_13, var_7 );
    var_0.nukegoalpoint = var_10;
    var_15 = var_12 + var_13;

    if ( isdefined( var_0.nuketype ) && var_0.nuketype == 1 )
        level thread nuke_delaythread( var_15, ::nuke_createradiationzone, self, var_0 );

    level thread nuke_delaythread( var_15, ::nuke_slowmo, self, var_0 );
    level thread nuke_delaythread( var_15, ::nuke_explosion, self, var_0 );
    level thread nuke_delaythread( var_15, ::nuke_earthquake, self, var_0 );
    level thread nuke_delaythread( var_15 + 0.075, ::nuke_vision, self, var_0 );
    level thread nuke_delaythread( var_15 + 5, ::nuke_death, self, var_0 );

    if ( isdefined( level.killstreakfinishusefunc ) )
        level thread [[ level.killstreakfinishusefunc ]]( var_0 );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "addTeamRankXPMultiplier" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "addTeamRankXPMultiplier" ) ]]( 2, level.nukeinfo.team, "nuke" );

    if ( level.cancelmode && var_8 )
        level thread nuke_watchownerdisconnect( level.nukeinfo.player );
}

nuke_watchownerdisconnect( var_0 )
{
    if ( !isdefined( level._id_11EF8 ) )
    {
        createheadiconatorigin( "nuke" );
        level._id_11EF8 = 1;
    }

    level endon( "game_ended" );
    var_0 waittill( "disconnect" );
    _id_11EDE();
}

_id_11EDE()
{
    level.nukecancel = 1;
    level.nukeincoming = undefined;
    level._id_11F14 = undefined;
    nuke_cleartimer();
    setslowmotion( 1, 1, 0 );
    level notify( "nuke_cancelled" );
}

nuke_starttimer( var_0 )
{
    level endon( "nuke_cancelled" );

    if ( istrue( level._id_11BD4 ) )
        _calloutmarkerping_handleluinotify_added::_id_13191( "ui_nuke_data", 9, 2, 2 );
    else
        _calloutmarkerping_handleluinotify_added::_id_13191( "ui_nuke_data", 9, 2, 1 );

    _calloutmarkerping_handleluinotify_added::_id_13191( "ui_nuke_data", 11, 1, 1 );
    level thread nuke_updateuitimers( var_0 );
    var_1 = var_0;
    var_2 = 0;

    for ( var_3 = 0; var_1 > 0; var_1-- )
    {
        if ( var_1 <= 10 )
        {
            level.nuke_clockobject playsound( "iw8_nuke_countdown" );

            if ( isdefined( level.nuke_missile ) && !istrue( var_2 ) )
            {
                level thread nuke_startmissileflightaudio();
                var_2 = 1;
            }
        }

        if ( var_1 <= 4.9 )
        {
            if ( isdefined( level.nuke_missile ) && !istrue( var_3 ) )
            {
                level.nuke_missile playsoundonmovingent( "iw8_nuke_incoming" );
                var_3 = 1;
            }
        }

        wait 1.0;
    }
}

nuke_startmissileflightaudio()
{
    level.nuke_missile endon( "death" );
    level endon( "game_ended" );
    level.nuke_missile playloopsound( "iw8_nuke_flight_loop" );
    wait 7.0;
    level.nuke_missile stoploopsound( "iw8_nuke_flight_loop" );
}

nuke_cleartimer()
{
    _calloutmarkerping_handleluinotify_added::_id_13191( "ui_nuke_data", 11, 1, 0 );
}

nuke_startlaunchsequence( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    level thread nuke_startprelaunchalarm( var_5, var_1, var_0 );

    if ( isplayer( var_0 ) && var_0 ispcplayer() )
        var_0 setclientomnvar( "nVidiaHighlights_events", 15 );

    if ( var_1.streakname != "nuke_select_location" )
    {
        var_8 = "";

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getGameType" ) )
            var_8 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getGameType" ) ]]();

        var_9 = undefined;

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "stopTheClock" ) )
            var_9 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "stopTheClock" ) ]]( var_8 );

        if ( isdefined( var_9 ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "setOverTimeLimitDvar" ) )
                [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "setOverTimeLimitDvar" ) ]]( var_9 );
        }

        level.dontendonscore = 1;

        foreach ( var_11 in level.players )
        {
            if ( isdefined( var_11 ) )
            {
                var_11 notify( "abort_killcam" );
                var_11.cancelkillcam = 1;
            }
        }

        level thread _id_11EDC();
        level.loadoutdefaultfiresalediscount = 1;
    }

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "hostmigration_waitLongDurationWithPause" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "hostmigration_waitLongDurationWithPause" ) ]]( var_5 );

    playsoundatpos( var_3, "iw8_nuke_dist_launch" );
    level thread nuke_launchmissile( var_0, var_1, var_3, var_4, var_6, var_7 );
}

nuke_startprelaunchalarm( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_3 = 0;

    if ( isdefined( var_1 ) && isdefined( var_2 ) )
        var_2 thread scripts\cp_mp\utility\killstreak_utility::playkillstreakoperatordialog( "use_" + var_1.streakname, 1, 1 );

    while ( var_0 > 0 )
    {
        if ( isdefined( level.nuke_clockobject ) && !istrue( var_3 ) )
        {
            level.nuke_clockobject playsound( "iw8_nuke_alarm" );
            var_3 = 1;
        }

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "hostmigration_waitLongDurationWithPause" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "hostmigration_waitLongDurationWithPause" ) ]]( 2 );

        var_0 = var_0 - 2;
    }
}

nuke_launchmissile( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    level endon( "game_ended" );
    var_6 = var_4;
    level thread nuke_starttimer( var_6 );

    if ( isdefined( var_0 ) && isplayer( var_0 ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "teamPlayerCardSplash" ) )
            level thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "teamPlayerCardSplash" ) ]]( "used_nuke", var_0 );
    }

    var_7 = "nuke_mp";

    if ( isdefined( var_5 ) )
        var_7 = var_5;

    var_8 = ( 0, 0, -1 * getdvarint( "NPOQPMP", 800 ) );
    var_9 = ( var_3 - 0.5 * var_8 * squared( var_4 ) - var_2 ) / var_4;
    level.nuke_missile = magicgrenademanual( var_7, var_2, var_9, var_4 );
    level.nuke_missile setscriptablepartstate( "launch", "on", 0 );
}

nuke_findunobstructedfiringinfo( var_0, var_1, var_2 )
{
    var_3 = spawnstruct();
    var_4 = physics_createcontents( [ "physicscontents_solid", "physicscontents_vehicleclip", "physicscontents_missileclip", "physicscontents_clipshot" ] );
    var_5 = -2000;
    var_6 = 2000;
    var_7 = ( 0, 0, -1 * getdvarint( "NPOQPMP", 800 ) );

    for (;;)
    {
        var_8 = var_0;
        var_9 = var_8 + ( 0, 0, 5000 );

        if ( scripts\engine\trace::ray_trace_passed( var_8, var_9, undefined, var_4 ) )
        {
            var_10 = ( var_1 - 0.5 * var_7 * squared( var_2 ) - var_8 ) / var_2;
            var_3.sourcepos = var_8;
            var_3.goalpos = var_1;
            var_3.initvelocity = var_10;
            break;
        }

        var_8 = var_8 + anglestoright( self.angles ) * randomintrange( var_5, var_6 );
        var_5 = int( var_5 * 1.3 );
        var_6 = int( var_6 * 1.3 );
        waitframe();
    }

    return var_3;
}

nuke_explosion( var_0, var_1 )
{
    level endon( "nuke_cancelled" );
    nuke_cleartimer();
    level.nukedetonated = 1;
    level notify( "nuke_detonated" );
    level.nuke_explosionpos = level.nuke_missile.origin;
    level.nuke_missile setscriptablepartstate( "launch", "off", 0 );
    level.nuke_missile delete();
    var_2 = spawn( "script_model", level.nuke_explosionpos );
    var_2 setmodel( "ks_nuke_mp" );
    var_2 setscriptablepartstate( "explode", "on", 0 );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "entity", "delayEntDelete" ) )
        var_2 thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "entity", "delayEntDelete" ) ]]( 50 );

    thread nuke_startexplosionaudio( level.nuke_explosionpos );

    if ( var_1.streakname != "nuke_select_location" )
    {
        foreach ( var_4 in level.characters )
        {
            if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "cankill" ) ]]( var_4, nuke_cankilleverything() ) )
            {
                if ( isplayer( var_4 ) )
                {
                    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "player", "isReallyAlive" ) )
                    {
                        if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "isReallyAlive" ) ]]( var_4 ) )
                            var_4 thread nuke_startnukedeathfx();
                    }
                }
            }
        }
    }
    else
    {
        foreach ( var_4 in level.characters )
        {
            if ( isplayer( var_4 ) && [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "isReallyAlive" ) ]]( var_4 ) )
                var_4 thread nuke_startnukedeathfx_chooselocationversion();
        }
    }
}

nuke_startexplosionaudio( var_0 )
{
    foreach ( var_2 in level.players )
        var_2 setsoundsubmix( "mp_killstreak_nuke", 6 );

    playsoundatpos( var_0, "iw8_nuke_impact_low" );
    playsoundatpos( var_0, "iw8_nuke_incoming_blast_wave" );
    playsoundatpos( var_0, "iw8_nuke_blast" );
}

nuke_slowmo( var_0, var_1 )
{
    if ( var_1.streakname == "nuke_select_location" )
        return;

    level endon( "nuke_cancelled" );
    setnuketimescalefactor();
    level waittill( "nuke_death" );
    setslowmotion( 1, 0.25, 0.1 );
}

setnuketimescalefactor()
{
    if ( !isdefined( level._id_11EF8 ) )
    {
        createheadiconatorigin( "nuke" );
        level._id_11EF8 = 1;
    }
}

nuke_dof( var_0, var_1 )
{
    level endon( "nuke_cancelled" );

    foreach ( var_3 in level.players )
        var_3 thread nuke_adjustexplosiondof();
}

nuke_adjustexplosiondof()
{
    self endon( "disconnect" );
    self setphysicaldepthoffield( 2.0, 1500 );
}

nuke_vision( var_0, var_1 )
{
    level endon( "nuke_cancelled" );
    level.nukevisioninprogress = 1;
    visionsetnaked( "nuke_global_flash", 0.05 );
    setdvar( "r_materialBloomHQScriptMasterEnable", 0 );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "hostmigration_waitLongDurationWithPause" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "hostmigration_waitLongDurationWithPause" ) ]]( 0.5 );

    level notify( "nuke_aftermath_post_started" );
    level thread nuke_fadeflashvision( 1, 2 );
    level waittill( "nuke_death" );
    level thread nuke_updatevisiononhostmigration();
    level nuke_setaftermathvision( 5 );
}

nuke_fadeflashvision( var_0, var_1 )
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "hostmigration_waitLongDurationWithPause" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "hostmigration_waitLongDurationWithPause" ) ]]( var_0 );

    visionsetnaked( "", var_1 );
}

nuke_death( var_0, var_1 )
{
    level endon( "nuke_cancelled" );
    level endon( "game_ended" );
    level notify( "nuke_death" );
    var_2 = level.nukeinfo.player;

    if ( level.teambased )
        var_2 = level.nuke_inflictor.team;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "hostmigration_waitTillHostMigrationDone" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "hostmigration_waitTillHostMigrationDone" ) ]]();

    var_3 = nuke_cankilleverything();

    if ( isdefined( level.nukeinfo.player ) )
    {
        if ( var_1.streakname != "nuke_select_location" )
        {
            foreach ( var_5 in level.characters )
            {
                if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "cankill" ) ]]( var_5, var_3 ) )
                {
                    if ( isplayer( var_5 ) )
                    {
                        var_5.nuked = 1;

                        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "player", "isReallyAlive" ) )
                        {
                            if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "isReallyAlive" ) ]]( var_5 ) )
                            {
                                if ( !istrue( var_5._id_12E54 ) )
                                {
                                    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "killPlayerWithAttacker" ) )
                                        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "killPlayerWithAttacker" ) ]]( var_5 );
                                }
                            }
                        }
                    }
                }
            }

            if ( istrue( var_3 ) )
            {
                if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "destroyActiveObjects" ) )
                    [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "destroyActiveObjects" ) ]]();
            }
            else if ( !istrue( level.blocknukekills ) )
            {
                var_7 = undefined;

                if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getEnemyTeams" ) )
                    var_7 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getEnemyTeams" ) ]]( level.nuke_inflictor.team );

                foreach ( var_9 in var_7 )
                {
                    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "destroyActiveObjects" ) )
                        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "destroyActiveObjects" ) ]]( var_9 );
                }
            }

            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "player", "printGameAction" ) )
                [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "printGameAction" ) ]]( "killstreak ended - nuke", level.nukeinfo.player );
        }
        else
        {
            foreach ( var_5 in level.characters )
            {
                var_12 = 0;

                if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "isPlayerInRadZone" ) )
                    var_12 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "isPlayerInRadZone" ) ]]( var_5, level.nuke_explosionpos, 25000000 );

                if ( var_12 )
                {
                    var_5.nuked = 1;

                    if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "isReallyAlive" ) ]]( var_5 ) )
                    {
                        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "killPlayer" ) )
                            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "killPlayer" ) ]]( var_5 );
                    }
                }
            }
        }

        if ( !istrue( level._id_11BD4 ) )
        {
            if ( isdefined( level.nukeinfo.player ) && isdefined( var_1 ) )
                level.nukeinfo.player scripts\cp_mp\utility\killstreak_utility::_id_12AA7( var_1 );
        }
    }

    if ( istrue( var_3 ) )
    {
        level.nukegameover = 1;
        level thread nuke_delayendgame( 3, var_2 );
    }
}

nuke_delayendgame( var_0, var_1 )
{
    level endon( "game_ended" );
    level thread _id_11EF1( 1 );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "delayEndGame" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "delayEndGame" ) ]]( var_0, var_1 );
}

_id_11EF1( var_0 )
{
    level endon( "game_ended" );
    scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( var_0 );
    level notify( "play_nuke_bnk" );
    setomnvarforallclients( "post_game_state", 13 );
}

nuke_earthquake( var_0, var_1 )
{
    level endon( "nuke_cancelled" );

    if ( !isdefined( level.mapcenter ) )
        var_2 = var_1.nukegoalpoint;
    else
        var_2 = level.mapcenter;

    earthquake( 0.4, 1.5, var_2, 100000 );
    level thread nuke_playshockwaveearthquake( var_1 );
    level waittill( "nuke_death" );

    if ( var_1.streakname == "nuke_select_location" )
        earthquake( 0.3, 1, var_2, 100000 );
    else
        earthquake( 0.7, 3, var_2, 100000 );

    foreach ( var_4 in level.players )
        var_4 playrumbleonentity( "damage_heavy" );
}

nuke_playshockwaveearthquake( var_0 )
{
    level endon( "nuke_cancelled" );
    level endon( "nuke_death" );
    var_1 = 0.01;

    if ( !isdefined( level.mapcenter ) )
        var_2 = var_0.nukegoalpoint;
    else
        var_2 = level.mapcenter;

    for (;;)
    {
        earthquake( var_1, 0.05, var_2, 100000 );
        wait 0.05;
        var_1 = var_1 + 0.0015;

        if ( var_1 >= 0.3 )
            var_1 = 0.3;
    }
}

onplayerspawned()
{
    if ( isdefined( level.nukedetonated ) )
        thread nuke_setvisionforplayer( 0, 0 );
}

nuke_setvisionforplayer( var_0, var_1 )
{
    if ( isdefined( var_0 ) && var_0 > 0 )
        wait( var_0 );

    self visionsetnakedforplayer( "nuke_global_aftermath", var_1 );
}

nuke_updateuitimers( var_0 )
{
    level endon( "game_ended" );
    level endon( "disconnect" );
    level endon( "nuke_cancelled" );
    level endon( "nuke_death" );
    var_1 = var_0 * 1000 + gettime();
    setomnvar( "ui_nuke_end_milliseconds", var_1 );
    level waittill( "host_migration_begin" );
    var_2 = 0;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "hostmigration_waitTillHostMigrationDone" ) )
        var_2 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "hostmigration_waitLongDurationWithPause" ) ]]();

    if ( var_2 > 0 )
        setomnvar( "ui_nuke_end_milliseconds", var_1 + var_2 );
}

nuke_updatevisiononhostmigration()
{
    level endon( "game_ended" );

    for (;;)
    {
        level waittill( "host_migration_end" );
        level nuke_setaftermathvision( 0 );
    }
}

nuke_setaftermathvision( var_0 )
{
    var_2 = 1;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "shouldNukeEndGame" ) )
        var_2 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "shouldNukeEndGame" ) ]]();

    if ( !var_2 )
        return;

    if ( isdefined( level.nukedeathvisionfunc ) )
        level thread [[ level.nukedeathvisionfunc ]]();

    _id_11EF4();
}

_id_11EF4()
{
    setomnvarforallclients( "post_game_state", 12 );

    foreach ( var_1 in level.players )
    {
        if ( !isdefined( var_1 ) )
            continue;

        level thread scripts\cp_mp\utility\game_utility::fadetoblackforplayer( var_1, 1 );
        var_1 setclientomnvar( "ui_world_fade", 1 );
        var_1 setclienttriggeraudiozonepartialwithfade( "nuke_killstreak", 2, "ambient", "ambient_events" );
    }

    level thread _id_11EF2();
}

_id_11EF2()
{
    level endon( "game_ended" );
    level waittill( "play_nuke_bnk" );

    foreach ( var_1 in level.players )
    {
        if ( !isdefined( var_1 ) )
            continue;

        level thread scripts\cp_mp\utility\game_utility::fadetoblackforplayer( var_1, 0, 1 );
    }
}

nuke_startnukedeathfx()
{
    self endon( "disconnect" );

    if ( !istrue( self._id_12E54 ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "weapons", "enableBurnFX" ) )
            self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "weapons", "enableBurnFX" ) ]]( 1, "nuke_active" );
    }

    thread nuke_playrollingdeathfx( 3.25 );
    level waittill( "nuke_death" );

    if ( isdefined( self.burnfxenabled ) && self.burnfxenabled > 0 )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "weapons", "disableBurnFX" ) )
            self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "weapons", "disableBurnFX" ) ]]( 1, "nuke_active" );
    }

    var_0 = 0;

    if ( var_0 )
        return;
}

nuke_startnukedeathfx_chooselocationversion()
{
    self endon( "disconnect" );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "weapons", "enableBurnFX" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "weapons", "enableBurnFX" ) ]]( 1, "nuke_active" );

    thread nuke_playrollingdeathfx( 3.25 );
    level waittill( "nuke_death" );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "weapons", "disableBurnFX" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "weapons", "disableBurnFX" ) ]]( 1, "nuke_active" );
}

nuke_playrollingdeathfx( var_0 )
{
    self endon( "disconnect" );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "hostmigration_waitLongDurationWithPause" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "hostmigration_waitLongDurationWithPause" ) ]]( var_0 );

    if ( !scripts\cp_mp\utility\player_utility::isusingremote() )
        self visionsetnakedforplayer( "nuke_deathblur", 4 );

    var_1 = self.origin;
    var_2 = level.nuke_explosionpos;
    var_3 = var_1;
    var_4 = "nuke_rolling_death";
    playfx( scripts\engine\utility::getfx( var_4 ), var_1, var_2 - var_3, undefined, self );
}

nuke_atomizebody()
{
    self endon( "disconnect" );
    var_0[0][0]["org"] = self gettagorigin( "j_spineupper" );
    var_0[0][0]["angles"] = self gettagangles( "j_spineupper" );
    var_0[0][1]["org"] = self gettagorigin( "j_spinelower" );
    var_0[0][1]["angles"] = self gettagangles( "j_spinelower" );
    var_0[0][2]["org"] = self gettagorigin( "j_head" );
    var_0[0][2]["angles"] = self gettagangles( "j_head" );
    var_0[1][0]["org"] = self gettagorigin( "j_knee_ri" );
    var_0[1][0]["angles"] = self gettagangles( "j_knee_ri" );
    var_0[1][1]["org"] = self gettagorigin( "j_knee_le" );
    var_0[1][1]["angles"] = self gettagangles( "j_knee_le" );
    var_0[1][2]["org"] = self gettagorigin( "j_elbow_ri" );
    var_0[1][2]["angles"] = self gettagangles( "j_elbow_ri" );
    var_0[1][3]["org"] = self gettagorigin( "j_elbow_le" );
    var_0[1][3]["angles"] = self gettagangles( "j_elbow_le" );
    var_0[2][0]["org"] = self gettagorigin( "j_ankle_le" );
    var_0[2][0]["angles"] = self gettagangles( "j_ankle_le" );
    var_0[2][1]["org"] = self gettagorigin( "j_ankle_ri" );
    var_0[2][1]["angles"] = self gettagangles( "j_ankle_ri" );
    var_0[2][2]["org"] = self gettagorigin( "j_wrist_le" );
    var_0[2][2]["angles"] = self gettagangles( "j_wrist_le" );
    var_0[2][3]["org"] = self gettagorigin( "j_wrist_ri" );
    var_0[2][3]["angles"] = self gettagangles( "j_wrist_ri" );
    self.body hide();
    var_1 = self.body.origin;
    var_2 = level.nuke_inflictor.origin * ( 1, 1, 0 );
    var_3 = var_1 * ( 1, 1, 0 );
    var_4 = "nuke_atomize_body";
    playfx( scripts\engine\utility::getfx( var_4 ), var_1, var_2 - var_3 );
}

nuke_cankilleverything()
{
    var_0 = 1;
    var_1 = undefined;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getGameType" ) )
        var_1 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getGameType" ) ]]();

    if ( isdefined( var_1 ) && var_1 == "br" )
        var_0 = 0;

    return var_0;
}

nuke_createradiationzone( var_0, var_1 )
{
    if ( !scripts\common\utility::iscp() )
    {
        if ( 0 )
        {
            wait 10;
            playfx( scripts\engine\utility::getfx( "vfx_nuke_zone_5000_static_s" ), ( 0, 0, 0 ) );
            nuke_registerradzone( ( 0, 0, 0 ) );

            if ( !isdefined( level.nukedangerzones ) )
                level.nukedangerzones = [];

            level.nukedangerzones[level.nukedangerzones.size] = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "spawn", "addSpawnDangerZone" ) ]]( var_1.nukegoalpoint - ( 0, 0, 1000 ), 5000, 15000, "axis", 4000 );
            level.nukedangerzones[level.nukedangerzones.size] = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "spawn", "addSpawnDangerZone" ) ]]( var_1.nukegoalpoint - ( 0, 0, 1000 ), 5000, 15000, "allies", 4000 );
        }
        else
        {
            var_1.sealevelorigin = ( var_1.nukegoalpoint[0], var_1.nukegoalpoint[1], scripts\cp_mp\parachute::getc130sealevel() );
            playfx( scripts\engine\utility::getfx( "vfx_nuke_zone_5000_static_s" ), var_1.sealevelorigin );
            nuke_registerradzone( var_1.sealevelorigin );

            if ( !isdefined( level.nukedangerzones ) )
                level.nukedangerzones = [];

            level.nukedangerzones[level.nukedangerzones.size] = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "spawn", "addSpawnDangerZone" ) ]]( var_1.nukegoalpoint - ( 0, 0, 1000 ), 5000, 15000, "axis", 4000 );
            level.nukedangerzones[level.nukedangerzones.size] = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "spawn", "addSpawnDangerZone" ) ]]( var_1.nukegoalpoint - ( 0, 0, 1000 ), 5000, 15000, "allies", 4000 );
        }
    }

    thread nuke_finalizelocationnuke( var_0 );
}

nuke_registerradzone( var_0 )
{
    if ( !isdefined( level.radzones ) )
    {
        level.radzones = [];
        level thread nuke_radzones_think();
    }

    level.radzones[level.radzones.size] = var_0;
}

nuke_removeradzone( var_0 )
{
    level.radzones = scripts\engine\utility::array_remove( level.radzones, var_0 );
}

nuke_radzones_think()
{
    level endon( "game_ended" );
    var_0 = 10;

    for (;;)
    {
        foreach ( var_2 in level.players )
        {
            var_2.inradzone = 0;

            foreach ( var_4 in level.radzones )
            {
                var_5 = 0;

                if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "isPlayerInRadZone" ) )
                    var_5 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "isPlayerInRadZone" ) ]]( var_2, var_4, 25000000 );

                if ( var_5 )
                {
                    if ( istrue( var_2.gasmaskequipped ) )
                        var_2 scripts\cp_mp\gasmask::processdamage( var_0 );
                    else
                    {
                        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "tutorialPrint" ) )
                            var_2 thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "tutorialPrint" ) ]]( "MP/NUKE_RADIATION_HURT", 2 );

                        var_2 dodamage( var_0, var_2.origin, var_2, undefined, "MOD_TRIGGER_HURT" );
                    }

                    var_2.inradzone = 1;
                    break;
                }
            }

            if ( var_2.inradzone )
                continue;

            foreach ( var_4 in level.radzones )
            {
                var_5 = 0;

                if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "nuke", "isPlayerInRadZone" ) )
                    var_5 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "nuke", "isPlayerInRadZone" ) ]]( var_2, var_4, 36000000 );

                if ( var_5 )
                {
                    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "tutorialPrint" ) )
                        var_2 thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "tutorialPrint" ) ]]( "MP/NUKE_RADIATION_WARNING", 2 );

                    break;
                }
            }
        }

        wait 1;
    }
}

nuke_warnenemiesnukeincoming( var_0 )
{
    level endon( "nuke_death" );

    for (;;)
    {
        foreach ( var_2 in level.players )
        {
            if ( var_2.team == var_0 )
            {
                if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "tutorialPrint" ) )
                    var_2 thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "tutorialPrint" ) ]]( "MP/NUKE_SELECT_LAUNCH_DETECTED", 2 );
            }
        }

        wait 1;
    }
}

nuke_finalizelocationnuke( var_0 )
{
    wait 20;

    if ( istrue( var_0.hasnukeselectks ) )
        var_0.hasnukeselectks = 0;

    if ( isdefined( var_0.killcountthislife ) )
        var_0.killcountthislife = 0;

    visionsetnaked( "", 1 );
}

_id_11EDC()
{
    level endon( "game_ended" );

    for (;;)
    {
        level waittill( "player_spawned", var_0 );

        if ( isdefined( var_0 ) )
        {
            var_0 notify( "abort_killcam" );
            var_0.cancelkillcam = 1;
        }
    }
}
