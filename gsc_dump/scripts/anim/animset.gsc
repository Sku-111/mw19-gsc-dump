// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init_anim_sets()
{

}

registerarchetype( var_0, var_1, var_2 )
{

}

archetypeexists( var_0 )
{
    return archetypeassetloaded( var_0 ) || isdefined( anim.archetypes[var_0] );
}

init_animset_run_move()
{

}

init_animset_heat_run_move()
{

}

init_animset_walk_move()
{

}

init_animset_cqb_move()
{

}

init_animset_pistol_stand()
{

}

init_animset_rpg_stand()
{

}

init_animset_shotgun_stand()
{

}

init_animset_cqb_stand()
{

}

init_animset_heat_stand()
{

}

init_animset_heat_reload()
{

}

init_animset_default_stand()
{

}

init_animset_default_crouch()
{

}

init_animset_rpg_crouch()
{

}

init_animset_shotgun_crouch()
{

}

init_animset_default_prone()
{

}

init_animset_complete_custom_stand( var_0 )
{

}

init_animset_custom_stand( var_0, var_1, var_2, var_3 )
{

}

init_animset_complete_custom_crouch( var_0 )
{

}

init_animset_custom_crouch( var_0, var_1, var_2 )
{

}

clear_custom_animset()
{
    self.custommoveanimset = undefined;
    self.customidleanimset = undefined;
    self.combatstandanims = undefined;
    self.combatcrouchanims = undefined;
}

set_animarray_standing_turns_pistol( var_0 )
{

}

set_animarray_standing_turns()
{

}

set_animarray_crouching_turns()
{

}

set_animarray_stance_change()
{

}

set_animarray_burst_and_semi_fire_stand()
{

}

set_animarray_custom_burst_and_semi_fire_stand( var_0 )
{

}

set_animarray_burst_and_semi_fire_crouch()
{

}

set_animarray_custom_burst_and_semi_fire_crouch( var_0 )
{

}

set_animarray_add_turn_aims_stand()
{

}

set_animarray_add_turn_aims_crouch()
{

}

set_animarray_standing()
{
    if ( scripts\anim\utility_common.gsc::isusingsidearm() )
        self.a.array = scripts\anim\utility.gsc::lookupanimarray( "pistol_stand" );
    else if ( isdefined( self.combatstandanims ) )
        self.a.array = self.combatstandanims;
    else if ( isdefined( self.heat ) )
        self.a.array = scripts\anim\utility.gsc::lookupanimarray( "heat_stand" );
    else if ( scripts\anim\utility_common.gsc::usingrocketlauncher() )
        self.a.array = scripts\anim\utility.gsc::lookupanimarray( "rpg_stand" );
    else if ( isdefined( self.weapon ) && scripts\anim\utility_common.gsc::weapon_pump_action_shotgun() )
        self.a.array = scripts\anim\utility.gsc::lookupanimarray( "shotgun_stand" );
    else if ( scripts\anim\utility.gsc::iscqbwalking() )
        self.a.array = scripts\anim\utility.gsc::lookupanimarray( "cqb_stand" );
    else
        self.a.array = scripts\anim\utility.gsc::lookupanimarray( "default_stand" );
}

set_animarray_crouching()
{
    if ( scripts\anim\utility_common.gsc::isusingsidearm() )
        scripts\anim\shared.gsc::placeweaponon( self.primaryweapon, "right" );

    if ( isdefined( self.combatcrouchanims ) )
        self.a.array = self.combatcrouchanims;
    else if ( scripts\anim\utility_common.gsc::usingrocketlauncher() )
        self.a.array = scripts\anim\utility.gsc::lookupanimarray( "rpg_crouch" );
    else if ( isdefined( self.weapon ) && scripts\anim\utility_common.gsc::weapon_pump_action_shotgun() )
        self.a.array = scripts\anim\utility.gsc::lookupanimarray( "shotgun_crouch" );
    else
        self.a.array = scripts\anim\utility.gsc::lookupanimarray( "default_crouch" );
}

set_animarray_prone()
{
    if ( scripts\anim\utility_common.gsc::isusingsidearm() )
        scripts\anim\shared.gsc::placeweaponon( self.primaryweapon, "right" );

    self.a.array = scripts\anim\utility.gsc::lookupanimarray( "default_prone" );
}

init_moving_turn_animations()
{

}

init_exposed_turn_animations()
{

}

init_grenade_animations()
{

}

init_animset_run_n_gun()
{

}

init_animset_ambush()
{

}

set_ambush_sidestep_anims()
{
    self.a.moveanimset["move_l"] = scripts\anim\utility.gsc::lookupanim( "ambush", "move_l" );
    self.a.moveanimset["move_r"] = scripts\anim\utility.gsc::lookupanim( "ambush", "move_r" );
    self.a.moveanimset["move_b"] = scripts\anim\utility.gsc::lookupanim( "ambush", "move_b" );
}

heat_reload_anim()
{
    if ( self.weapon != self.primaryweapon )
        return scripts\anim\utility.gsc::animarraypickrandom( "reload" );

    if ( isdefined( self.node ) )
    {
        if ( self nearclaimnodeandangle() )
        {
            var_0 = undefined;

            if ( self.node.type == "Cover Left" )
                var_0 = scripts\anim\utility.gsc::lookupanim( "heat_reload", "reload_cover_left" );
            else if ( self.node.type == "Cover Right" )
                var_0 = scripts\anim\utility.gsc::lookupanim( "heat_reload", "reload_cover_right" );

            if ( isdefined( var_0 ) )
                return var_0;
        }
    }

    return scripts\anim\utility.gsc::lookupanim( "heat_reload", "reload_default" );
}
