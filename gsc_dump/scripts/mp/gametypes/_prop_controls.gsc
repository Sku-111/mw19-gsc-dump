// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_13256()
{
    if ( isbot( self ) )
        return;

    self notifyonplayercommand( "lock", "+attack" );
    self notifyonplayercommand( "lock", "+attack_akimbo_accessible" );
    self notifyonplayercommand( "changeProp", "+weapnext" );
    self notifyonplayercommand( "setToSlope", "+usereload" );
    self notifyonplayercommand( "setToSlope", "+activate" );
    self notifyonplayercommand( "propAbility", "+smoke" );
    self notifyonplayercommand( "cloneProp", "+actionslot 2" );
    self notifyonplayercommand( "zoomin", "+actionslot 3" );
    self notifyonplayercommand( "zoomout", "+actionslot 4" );
    thread has_current_combat_action();
}

has_current_combat_action()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "cleanupKeyBindings" );
    self waittill( "death" );
    thread has_been_turned_on();
}

has_been_turned_on()
{
    self notify( "cleanupKeyBindings" );

    if ( isbot( self ) )
        return;

    self notifyonplayercommandremove( "lock", "+attack" );
    self notifyonplayercommandremove( "lock", "+attack_akimbo_accessible" );
    self notifyonplayercommandremove( "changeProp", "+weapnext" );
    self notifyonplayercommandremove( "setToSlope", "+usereload" );
    self notifyonplayercommandremove( "setToSlope", "+activate" );
    self notifyonplayercommandremove( "propAbility", "+smoke" );
    self notifyonplayercommandremove( "cloneProp", "+actionslot 2" );
    self notifyonplayercommandremove( "zoomin", "+actionslot 3" );
    self notifyonplayercommandremove( "zoomout", "+actionslot 4" );
}

bettermissiontierbonuses( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\hud_util::createfontstring( "default", 0.9 );
    var_4.x = 15;
    var_4.y = self.initturretinteraction;
    var_4.alignx = "left";
    var_4.aligny = "top";
    var_4.horzalign = "left_adjustable";
    var_4.vertalign = "top_adjustable";
    var_4.fontscale = 1;
    var_4.alpha = 1;
    var_4.glowalpha = 0;
    var_4.hidewheninmenu = 0;
    var_4._id_1384B = var_4.fontscale;

    if ( isdefined( var_3 ) && !scripts\engine\utility::is_player_gamepad_enabled() )
        var_4.label = var_3;
    else if ( isdefined( var_0 ) )
        var_4.label = var_0;
    else if ( isdefined( var_2 ) )
    {

    }

    if ( isdefined( var_1 ) )
        var_4 setvalue( var_1 );

    self.initturretinteraction = self.initturretinteraction + 18;
    return var_4;
}

_id_128E4()
{
    self.initturretinteraction = 152;
    self.getbrgametypedata = bettermissiontierbonuses( &"MP_PH/CHANGE", 0 );
    self._id_136F2 = bettermissiontierbonuses( &"MP_PH/SPIN", undefined, undefined, &"MP_PH/SPIN_PC" );
    self._id_119A2 = bettermissiontierbonuses( &"MP_PH/LOCK" );
    self._id_11B3D = bettermissiontierbonuses( &"MP_PH/SLOPE", undefined, undefined, &"MP_PH/SLOPE_PC" );
    self.armor_piercing = bettermissiontierbonuses();
    self.heli_boss = bettermissiontierbonuses( &"MP_PH/CLONE" );
    _id_13178();
    self._id_1472B = bettermissiontierbonuses( &"MP_PH/ZOOM" );
    thread _id_14027();
}

has_keycard()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self waittill( "death" );
    thread has_been_turned_on();
    thread has_intel();
}

_id_12E52( var_0 )
{
    if ( isdefined( var_0 ) )
        var_0 destroy();
}

has_intel()
{
    self notify( "cleanupPropControlsHUD" );
    _id_12E52( self.getbrgametypedata );
    _id_12E52( self._id_136F2 );
    _id_12E52( self._id_119A2 );
    _id_12E52( self._id_11B3D );
    _id_12E52( self.armor_piercing );
    _id_12E52( self._id_1472B );
    _id_12E52( self._id_136DA );
    _id_12E52( self.heli_boss );
}

_id_14027()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );

    if ( isbot( self ) )
        return;

    waittillframeend;
    var_0 = scripts\engine\utility::is_player_gamepad_enabled();

    for (;;)
    {
        var_1 = scripts\engine\utility::is_player_gamepad_enabled();

        if ( var_1 != var_0 )
        {
            var_0 = var_1;

            if ( var_1 )
            {
                if ( !istrue( self._id_13414 ) )
                    self._id_11B3D.label = &"MP_PH/SLOPE";
                else
                    self._id_11B3D.label = &"MP_PH/SLOPED";
            }
            else if ( !istrue( self._id_13414 ) )
                self._id_11B3D.label = &"MP_PH/SLOPE_PC";
            else
                self._id_11B3D.label = &"MP_PH/SLOPED_PC";
        }

        waitframe();
    }
}

_id_128F5()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    self.lock = 0;
    self._id_13414 = 0;

    if ( isbot( self ) )
        return;

    if ( !scripts\mp\gametypes\br_gametype_prop.gsc::_id_1408E() )
    {
        self setclientomnvar( "ui_ph_is_locked", 0 );
        self setclientomnvar( "ui_ph_matching_slope", 0 );
    }

    thread _id_12902();
    thread _id_128D9();
    thread _id_12908();
    self._id_12913 = 0;
    self.needdefaultendgameflowonly = 0;
    self.isteamextracted = 1;

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_143B0( "lock", "changeProp", "setToSlope", "propAbility", "cloneProp" );

        if ( !isdefined( var_0 ) )
            continue;

        if ( self._id_12913 )
            continue;

        if ( self.needdefaultendgameflowonly )
            continue;

        waittillframeend;

        if ( var_0 == "lock" )
        {
            _id_128F9();
            continue;
        }

        if ( var_0 == "changeProp" )
        {
            _id_128DA();
            continue;
        }

        if ( var_0 == "setToSlope" )
        {
            _id_128FA();
            continue;
        }

        if ( var_0 == "propAbility" )
        {
            _id_128D3();
            continue;
        }

        if ( var_0 == "cloneProp" )
            _id_128E2();
    }
}

_id_128F9()
{
    if ( self ismantling() )
        return;

    if ( self.lock )
        _id_13F1D();
    else
        _id_119A1();
}

_id_12B34( var_0 )
{
    var_1 = 3;

    if ( !isdefined( var_0._id_1406E ) )
        var_0._id_1406E = 0;

    var_0._id_1406D[var_0._id_1406E] = var_0.prop.info;
    var_0._id_1406E++;

    if ( var_0._id_1406E >= var_1 )
        var_0._id_1406E = 0;
}

_id_128DA( var_0 )
{
    if ( !_id_128EE() && !istrue( var_0 ) )
        return;

    if ( istrue( level.pc ) && !istrue( var_0 ) )
    {
        var_1 = 300;

        if ( isdefined( self.warningendcallbacks ) && gettime() - self.warningendcallbacks < var_1 )
            return;

        self.warningendcallbacks = gettime();
    }

    self notify( "changed_prop" );
    _id_12B34( self );
    self.prop.info = scripts\mp\gametypes\br_gametype_prop.gsc::reset_search_spot_light_nodes( self );
    _id_128DC( self.prop.info );
    self.maxhealth = int( scripts\mp\gametypes\br_gametype_prop.gsc::revive_stim( self.prop.info ) );
    self setnormalhealth( 1.0 );
    _id_13177( self.initplayerplunderevents );
    _id_13177( "CLONE" );

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_1408E() )
    {
        self.armor_piercing.alpha = 1;
        self.heli_boss.alpha = 1;
    }

    if ( !istrue( var_0 ) )
        _id_128E6();
}

_id_128EE()
{
    return self.getbrplayersnoteliminated > 0;
}

_id_128E6()
{
    _id_1290A( self.getbrplayersnoteliminated - 1 );
}

_id_1290A( var_0 )
{
    self.getbrplayersnoteliminated = var_0;

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_1408E() )
    {
        self.getbrgametypedata setvalue( self.getbrplayersnoteliminated );

        if ( self.getbrplayersnoteliminated <= 0 )
            self.getbrgametypedata.alpha = 0.5;
        else if ( self.getbrplayersnoteliminated > 0 && self.getbrgametypedata.alpha < 1 )
            self.getbrgametypedata.alpha = 1.0;
    }
    else
        self setclientomnvar( "ui_ph_num_changes_left", self.getbrplayersnoteliminated );
}

_id_128DC( var_0 )
{
    self.prop.info = var_0;
    self._id_128F4 = var_0;
    self.prop setmodel( var_0.modelname );
    self.prop._id_1467E = var_0._id_1467E;
    self.prop.building_roof_chopper_reenforce = var_0.building_roof_chopper_reenforce;
    self.prop unlink();
    self._id_128EA unlink();
    self._id_128EA.origin = self._id_128D7.origin;
    self.prop.origin = self._id_128EA.origin;
    self._id_128EA.angles = ( self.angles[0], self._id_128EA.angles[1], self.angles[2] );
    self.prop.angles = self._id_128EA.angles;

    if ( istrue( self.turret_guncourse_think ) )
    {
        self.prop.angles = self.angles;
        self.turret_guncourse_think = 0;
    }

    scripts\mp\gametypes\br_gametype_prop.gsc::calculateobjectivesheld();
    scripts\mp\gametypes\br_gametype_prop.gsc::cache1_defender_after_spawn();
    self.prop linkto( self._id_128EA, "J_prop_1" );

    if ( self._id_13414 && istrue( self.lock ) )
        self._id_128EA _id_130A7( self.prop );

    self._id_128EA linkto( self._id_128D7 );
    self._id_13B30 = var_0._id_12905;
    self._id_13B2F = var_0._id_128F1;
    self setcamerathirdperson( 1, self._id_13B30, self._id_13B2F );
}

_id_128FA()
{
    if ( !istrue( self._id_13414 ) )
    {
        self._id_13414 = 1;

        if ( istrue( self.lock ) )
        {
            self._id_128EA unlink();
            self._id_128EA _id_130A7( self.prop );
            self._id_128EA linkto( self._id_128D7 );
        }

        if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_1408E() )
        {
            if ( scripts\engine\utility::is_player_gamepad_enabled() )
                self._id_11B3D.label = &"MP_PH/SLOPED";
            else
                self._id_11B3D.label = &"MP_PH/SLOPED_PC";
        }
        else
            self setclientomnvar( "ui_ph_matching_slope", 1 );
    }
    else
    {
        self._id_13414 = 0;

        if ( istrue( self.lock ) )
        {
            self._id_128EA unlink();
            self._id_128EA.angles = ( self.angles[0], self._id_128EA.angles[1], self.angles[2] );
            self._id_128EA.origin = self._id_128D7.origin;
            self._id_128EA linkto( self._id_128D7 );
        }

        if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_1408E() )
        {
            if ( scripts\engine\utility::is_player_gamepad_enabled() )
                self._id_11B3D.label = &"MP_PH/SLOPE";
            else
                self._id_11B3D.label = &"MP_PH/SLOPE_PC";
        }
        else
            self setclientomnvar( "ui_ph_matching_slope", 0 );
    }
}

_id_128D3()
{
    if ( _id_128F0() )
    {
        thread player_name_who_broke_stealth();
        _id_128E8();
    }
}

_id_128E2()
{
    if ( _id_128EF() )
    {
        thread heli_boss_logic();
        thread _id_128E7();
    }
}

_id_128EF()
{
    return self.heli_boss_shoot > 0;
}

_id_128E7()
{
    _id_1290B( self.heli_boss_shoot - 1 );
}

_id_1290B( var_0 )
{
    self.heli_boss_shoot = var_0;

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_1408E() )
    {
        self.heli_boss setvalue( self.heli_boss_shoot );

        if ( self.heli_boss_shoot <= 0 )
            self.heli_boss.alpha = 0.5;
        else if ( self.heli_boss_shoot > 0 && self.heli_boss.alpha < 1 )
            self.heli_boss.alpha = 1.0;
    }
    else
        self setclientomnvar( "ui_ph_num_clones_left", self.heli_boss_shoot );
}

_id_128F0()
{
    return self.armor_target_vo > 0;
}

_id_128E8()
{
    _id_1290C( self.armor_target_vo - 1 );
}

_id_1290C( var_0 )
{
    self.armor_target_vo = var_0;

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_1408E() )
    {
        self.armor_piercing setvalue( self.armor_target_vo );

        if ( self.armor_target_vo <= 0 )
            self.armor_piercing.alpha = 0.5;
        else if ( self.armor_target_vo > 0 && self.armor_piercing.alpha < 1 )
            self.armor_piercing.alpha = 1.0;
    }
    else
        self setclientomnvar( "ui_ph_num_flashes_left", self.armor_target_vo );
}

_id_130A7( var_0 )
{
    var_1 = propwaitminigameinit( var_0, 0 );

    if ( !isdefined( var_1 ) )
        return;

    var_2 = anglestoforward( self.angles );
    var_3 = anglestoright( self.angles );
    var_4 = vectortoangles( var_1 );
    var_5 = angleclamp180( var_4[0] + 90 );
    var_4 = ( 0, var_4[1], 0 );
    var_6 = anglestoforward( var_4 );
    var_7 = vectordot( var_6, var_3 );

    if ( var_7 < 0 )
        var_7 = -1;
    else
        var_7 = 1;

    var_8 = vectordot( var_6, var_2 );
    var_9 = var_8 * var_5;
    var_10 = ( 1 - abs( var_8 ) ) * var_5 * var_7;
    self.angles = ( var_9, self.angles[1], var_10 );
}

remove_marker_when_player_get_close( var_0, var_1 )
{
    var_2 = 128;
    var_3 = game["defenders"];
    var_4 = level.teamdata[var_3]["alivePlayers"];

    if ( var_4.size > var_2 )
    {
        var_4 = scripts\mp\utility\player::getplayersinradius( var_0, 500, var_3 );

        if ( var_4.size > var_2 )
        {
            var_4 = scripts\mp\utility\player::getplayersinradius( var_0, 50, var_3 );

            if ( var_4.size > var_2 )
                return var_1;
        }
    }

    var_5 = [];

    foreach ( var_7 in var_4 )
        var_5[var_5.size] = var_7.prop;
}

propwaitminigameinit( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_2 = self;
    else
        var_2 = var_0;

    var_3 = remove_marker_when_player_get_close( self.origin, var_2 );
    var_4 = [ self.origin ];

    for ( var_5 = -1.0; var_5 <= 1.0; var_5 = var_5 + 2.0 )
    {
        for ( var_6 = -1.0; var_6 <= 1.0; var_6 = var_6 + 2.0 )
        {
            var_7 = var_2 getpointinbounds( var_5, var_6, 0.0 );
            var_7 = ( var_7[0], var_7[1], self.origin[2] );
            var_4[var_4.size] = var_7;
        }
    }

    var_8 = ( 0, 0, 0 );
    var_9 = 0;

    foreach ( var_11 in var_4 )
    {
        var_12 = scripts\engine\trace::_bullet_trace( var_11 + ( 0, 0, 4 ), var_11 + ( 0, 0, -16 ), 0, var_3 );
        var_13 = var_12["fraction"] > 0.0 && var_12["fraction"] < 1;

        if ( var_13 )
        {
            var_8 = var_8 + var_12["normal"];
            var_9++;
        }
    }

    if ( var_9 > 0 )
    {
        var_8 = var_8 / var_9;
        return var_8;
    }
    else
        return undefined;
}

_id_12902()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    var_0 = 0;
    var_1 = 0;
    var_2 = 0;

    for (;;)
    {
        waitframe();
        var_3 = self getnormalizedmovement();
        var_4 = self jumpbuttonpressed();

        if ( !isdefined( var_3 ) )
            continue;

        if ( self._id_12913 )
            continue;

        var_5 = var_3[0] != 0 || var_3[1] != 0 || var_4;

        if ( self.lock && var_2 && !var_5 )
            var_2 = 0;
        else if ( self.lock && !var_0 && var_5 )
            var_2 = 1;
        else if ( self.lock && var_5 && !var_2 )
            _id_13F1D();

        var_0 = self.lock;
        var_1 = var_5;
    }
}

_id_13F1D()
{
    self unlink();

    if ( self._id_13414 )
    {
        self._id_128EA unlink();
        self._id_128EA.angles = ( self.angles[0], self._id_128EA.angles[1], self.angles[2] );
        self._id_128EA.origin = self._id_128D7.origin;
        self._id_128EA linkto( self._id_128D7 );
    }

    self._id_128D7 linkto( self );
    self.lock = 0;

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_1408E() )
    {
        self._id_119A2.label = &"MP_PH/LOCK";
        thread player_origin_inside_subway_car();
    }
    else
        self setclientomnvar( "ui_ph_is_locked", 0 );
}

_id_119A1()
{
    if ( !get_alive_bots() )
        return;

    self._id_128D7 unlink();
    self._id_128D7.origin = self.origin;
    var_0 = self getgroundentity();

    if ( isdefined( var_0 ) && var_0 nuke_vault_suicidebomber_internal() )
        self._id_128D7 linkto( var_0 );

    self playerlinkto( self._id_128D7 );

    if ( self._id_13414 )
    {
        self._id_128EA unlink();
        self._id_128EA _id_130A7( self.prop );
        self._id_128EA.origin = self.origin;
        self._id_128EA linkto( self._id_128D7 );
    }

    self.lock = 1;
    self notify( "locked" );

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_1408E() )
    {
        self._id_119A2.label = &"MP_PH/LOCKED";
        thread player_origin_inside_subway_car();
    }
    else
        self setclientomnvar( "ui_ph_is_locked", 1 );
}

nuke_vault_suicidebomber_internal()
{
    return isalive( self ) && ( scripts\common\vehicle::isvehicle() || isdefined( self.classname ) && self.classname == "script_vehicle" );
}

player_origin_inside_subway_car()
{
    self endon( "death" );
    self endon( "disconnect" );
    level endon( "game_ended" );
    self notify( "flashLockPropKey" );
    self endon( "flashLockPropKey" );
    var_0 = self._id_119A2._id_1384B + 0.75;
    self._id_119A2 changefontscaleovertime( 0.1 );
    self._id_119A2.fontscale = var_0;
    wait 0.1;

    if ( isdefined( self._id_119A2 ) )
    {
        self._id_119A2 changefontscaleovertime( 0.1 );
        self._id_119A2.fontscale = self._id_119A2._id_1384B;
    }
}

get_alive_bots()
{
    if ( !self isonground() )
    {
        var_0 = getgroundposition( self.origin, 15, 30000, 0 );
        var_1 = getentarray( "trigger_hurt", "classname" );

        foreach ( var_3 in var_1 )
        {
            if ( ispointinvolume( var_0, var_3 ) )
                return 0;
        }
    }

    return 1;
}

_id_12910()
{
    level endon( "noPropsToSpectate" );
    self._id_12913 = 0;
    self.needdefaultendgameflowonly = 0;

    if ( !isdefined( self._id_136DB ) )
        self._id_136DB = 0;

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_143AC( "spectate" );

        if ( self.needdefaultendgameflowonly )
            continue;

        if ( var_0 == "spectate" )
        {
            if ( self._id_12913 )
            {
                self notify( "endPropSpectate" );
                continue;
            }

            scripts\mp\gametypes\br_gametype_prop.gsc::init_swivelroom_variables();

            if ( self._id_136D7.size <= 1 )
                continue;

            self._id_12913 = 1;
            _id_128D4( 0 );
            thread _id_12911();
            childthread _id_12912();
        }
    }
}

_id_12912()
{
    self endon( "endPropSpectate" );

    if ( getkeypadomnvarbitpackinginfo() )
        _id_136DD();
    else
    {
        play_travel_vo( 1 );
        _id_136DD();
    }

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_143AD( "zoomin", "zoomout" );

        if ( self.needdefaultendgameflowonly )
            continue;

        if ( var_0 == "zoomin" )
        {
            play_travel_vo( 1 );
            getkeypadomnvarbitpackinginfo();
            _id_11DBA();
        }

        if ( var_0 == "zoomout" )
        {
            play_travel_vo( 0 );
            getkeypadomnvarbitpackinginfo();
            _id_11DBA();
        }
    }
}

getkeypadomnvarbitpackinginfo()
{
    var_0 = self._id_136D7[self._id_136DB];

    if ( !isdefined( var_0 ) )
        return 0;

    if ( var_0 == self )
        return 0;

    if ( scripts\mp\utility\player::isreallyalive( var_0 ) )
        return 1;

    return 0;
}

play_travel_vo( var_0 )
{
    var_1 = self._id_136DB;

    for (;;)
    {
        if ( istrue( var_0 ) )
            self._id_136DB++;
        else
            self._id_136DB--;

        if ( var_0 && self._id_136D7.size <= self._id_136DB )
            self._id_136DB = 0;
        else if ( self._id_136DB < 0 )
            self._id_136DB = self._id_136D7.size - 1;

        if ( self._id_136DB == var_1 )
            break;

        if ( getkeypadomnvarbitpackinginfo() )
            break;
    }
}

_id_12911()
{
    self endon( "death_or_disconnect" );
    init_swivelroom_obj();
    scripts\engine\utility::waittill_any_ents( self, "endPropSpectate", level, "noPropsToSpectate" );

    if ( istrue( self.needdefaultendgameflowonly ) )
        return;

    self.needdefaultendgameflowonly = 1;
    lb_mg_impulse_dmg_factor_low();
    _id_12CE7();
    waittillframeend;
    _id_128D4( 1 );
    self._id_12913 = 0;
    self.needdefaultendgameflowonly = 0;
}

init_swivelroom_obj()
{
    self._id_136D9 = scripts\mp\hud_util::createfontstring( "default", 1 );
    self._id_136D9.label = &"MP_PH/SPECCOMMANDS";
    self._id_136D9.x = 20;
    self._id_136D9.y = -80;
    self._id_136D9.alignx = "center";
    self._id_136D9.aligny = "middle";
    self._id_136D9.horzalign = "center_adjustable";
    self._id_136D9.vertalign = "bottom_adjustable";
    self._id_136D9.archived = 1;
    self._id_136D9.fontscale = 1;
    self._id_136D9.alpha = 1;
    self._id_136D9.glowalpha = 0.5;
    self._id_136D9.hidewheninmenu = 0;
}

lb_mg_impulse_dmg_factor_low()
{
    if ( isdefined( self._id_136D9 ) )
        self._id_136D9 destroy();
}

_id_136DD()
{
    var_0 = self._id_136D7[self._id_136DB];
    self._id_136DF = var_0;
    self._id_128D7 unlink();
    self._id_128D7.origin = self.origin;
    self setorigin( var_0.origin );
    self.angles = var_0.angles;
    self playerlinkto( var_0._id_128D7 );
}

_id_11DBA()
{
    var_0 = self._id_136D7[self._id_136DB];
    self unlink();
    self.origin = var_0.origin;
    self.angles = var_0.angles;
    self playerlinkto( var_0._id_128D7 );
}

_id_12CE7()
{
    self unlink();
    self setorigin( self._id_128D7.origin );

    if ( self.lock )
        self playerlinkto( self._id_128D7 );
    else
    {
        self._id_128D7 linkto( self );
        self._id_128D7.origin = self.origin;
    }
}

_id_11EBC()
{
    level endon( "game_ended" );
    level waittill( "noPropsToSpectate" );
    _id_12E52( self._id_136DA );
}

_id_128D9()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    var_0 = 10;
    self._id_13B30 = self.prop.info._id_12905;

    for (;;)
    {
        var_1 = scripts\engine\utility::_id_143AD( "zoomin", "zoomout" );

        if ( istrue( self.needdefaultendgameflowonly ) )
            continue;

        if ( !isdefined( var_1 ) )
            continue;

        if ( istrue( self._id_12913 ) )
            continue;

        if ( var_1 == "zoomin" )
        {
            if ( self._id_13B30 - var_0 < 50 )
                continue;

            self._id_13B30 = self._id_13B30 - var_0;
            self setcamerathirdperson( 1, self._id_13B30, self._id_13B2F );
            continue;
        }

        if ( var_1 == "zoomout" )
        {
            var_2 = clamp( self.prop.info._id_12905 + 50, 50, 360 );

            if ( self._id_13B30 + var_0 > var_2 )
                continue;

            self._id_13B30 = self._id_13B30 + var_0;
            self setcamerathirdperson( 1, self._id_13B30, self._id_13B2F );
        }
    }
}

_id_12908()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );

    for (;;)
    {
        if ( self adsbuttonpressed( 1 ) && !istrue( self._id_128EA._id_136F1 ) )
        {
            self._id_128EA scriptmodelpauseanim( 0 );
            self._id_128EA._id_136F1 = 1;
        }
        else if ( !self adsbuttonpressed( 1 ) && istrue( self._id_128EA._id_136F1 ) )
        {
            self._id_128EA scriptmodelpauseanim( 1 );
            self._id_128EA._id_136F1 = 0;
        }

        wait 0.05;
    }
}

_id_13178()
{
    switch ( self.initplayerplunderevents )
    {
        case "FLASH":
            self.armor_piercing.label = &"MP_PH/FLASH";
            break;
        default:
            break;
    }
}

_id_13177( var_0, var_1 )
{
    switch ( var_0 )
    {
        case "FLASH":
            if ( !isdefined( var_1 ) )
                var_1 = level._id_12315.settings._id_12904;

            _id_1290C( var_1 );
            break;
        case "CLONE":
            if ( !isdefined( var_1 ) )
                var_1 = level._id_12315.settings._id_12903;

            _id_1290B( var_1 );
            break;
        default:
            break;
    }
}

player_pined_danger_feedback( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    thread scripts\mp\shellshock::endondeath();
    self endon( "end_explode" );
    self waittill( "explode", var_1 );

    if ( !isdefined( var_0 ) )
        return;

    player_name_who_broke_stealth( var_0, var_1 );
}

player_name_who_broke_stealth( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_0 = self;

    if ( !isdefined( var_1 ) )
        var_1 = self.origin;

    playfx( scripts\engine\utility::getfx( "propFlash" ), var_1 + ( 0, 0, 4 ) );
    playsoundatpos( var_1, "prop_flashbang" );

    foreach ( var_3 in level.players )
    {
        if ( var_3 == var_0 )
            continue;

        if ( istrue( var_3.player_on_helipad ) )
            continue;

        if ( !isdefined( var_3 ) || !isalive( var_3 ) || !isdefined( var_3.team ) || var_3 scripts\mp\gametypes\br_gametype_prop.gsc::_id_125F0() )
            continue;

        var_4 = var_1 + ( 0, 0, 4 ) - var_3 geteye();
        var_5 = length( var_4 );
        var_6 = 500.0;
        var_7 = 150.0;

        if ( var_5 <= var_6 )
        {
            if ( var_5 <= var_7 )
                var_8 = 1;
            else
                var_8 = 1 - ( var_5 - var_7 ) / ( var_6 - var_7 );

            var_9 = vectornormalize( var_4 );
            var_10 = anglestoforward( var_3 getplayerangles() );
            var_11 = vectordot( var_10, var_9 );
            var_3 applyflash( var_1 + ( 0, 0, 4 ), var_8, var_11, var_0, var_0.team, 2.0 );
        }
    }
}

applyflash( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = 2.5;

    if ( !isdefined( var_5 ) )
        var_5 = 0;

    if ( var_2 < 0.25 )
        var_2 = 0.25;
    else if ( var_2 > 0.8 )
        var_2 = 1;

    var_7 = var_1 * var_2 * var_6;
    var_7 = var_7 + var_5;

    if ( var_7 < 0.25 )
        return;

    var_3 thread scripts\mp\damagefeedback::updatedamagefeedback( "standard" );
    thread scripts\mp\equipment\flash_grenade::applyflash( var_3, var_7 );
}

lastdirty()
{
    var_0 = 9;

    if ( self._id_128E3.size + 1 <= var_0 )
        return;

    var_1 = 0;

    foreach ( var_3 in self._id_128E3 )
    {
        if ( isdefined( var_3 ) )
            var_1++;
    }

    if ( var_1 + 1 <= var_0 )
        return;

    var_5 = [];
    var_6 = undefined;

    for ( var_7 = 0; var_7 < self._id_128E3.size; var_7++ )
    {
        var_3 = self._id_128E3[var_7];

        if ( !isdefined( var_3 ) )
            continue;

        if ( !isdefined( var_6 ) )
        {
            var_6 = var_3;
            continue;
        }

        var_5[var_5.size] = var_3;
    }

    var_6 notify( "maxDelete" );
    var_6 delete();
    self._id_128E3 = var_5;
}

heli_boss_logic()
{
    if ( !isdefined( self._id_128E3 ) )
        self._id_128E3 = [];
    else
        lastdirty();

    var_0 = spawn( "script_model", self.prop.origin );
    var_0.targetname = "propClone";
    var_0 setmodel( self.prop.model );
    var_0.angles = self.prop.angles;
    var_0.health = 50;
    var_0.playerowner = self;
    var_0 setcandamage( 1 );
    var_0 thread scripts\mp\damage::monitordamage( var_0.health, "hitequip", ::heli_audio, ::is_station_active );
    var_0 thread scripts\mp\gametypes\br_gametype_prop.gsc::spawn_exfil_techo( game["defenders"], "outline_nodepth_orange" );
    var_0 scripts\mp\sentientpoolmanager::registersentient( "Tactical_Static", self.team );
    self._id_128E3[self._id_128E3.size] = var_0;
}

is_station_active( var_0 )
{
    if ( !isdefined( var_0.attacker ) )
        return 0;

    if ( isplayer( var_0.attacker ) )
    {
        if ( istrue( self.unlockprop ) )
            return 0;

        var_0.attacker thread scripts\mp\damagefeedback::updatedamagefeedback( "hitequip" );
        self.lastattacker = var_0.inflictor;
    }

    return var_0.damage;
}

heli_audio( var_0 )
{
    if ( !isdefined( self.unlockprop ) )
        self.unlockprop = 1;

    if ( isdefined( self.lastattacker ) )
    {
        self.lastattacker thread scripts\mp\gametypes\br_gametype_prop.gsc::scriptablesmax( "clone_destroyed" );

        if ( isdefined( self.playerowner ) )
            self.playerowner thread scripts\mp\gametypes\br_gametype_prop.gsc::scriptablesmax( "clone_was_destroyed" );
    }

    var_1 = "prop_death";
    var_2 = "propDeathFX";
    playsoundatpos( self.origin + ( 0, 0, 4 ), var_1 );
    playfx( scripts\engine\utility::getfx( var_2 ), self.origin + ( 0, 0, 4 ) );

    if ( isdefined( self ) )
        self delete();
}

patched_collision( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( !isdefined( var_0 ) )
        var_0 = 5;

    if ( !isdefined( var_1 ) )
        var_1 = 1;

    if ( !isdefined( var_2 ) )
        var_2 = 1;

    var_3 = newclienthudelem( self );
    var_3.foreground = 0;
    var_3.x = 0;
    var_3.y = 0;
    var_3 setshader( "black", 640, 480 );
    var_3.alignx = "left";
    var_3.aligny = "top";
    var_3.horzalign = "fullscreen";
    var_3.vertalign = "fullscreen";
    var_3.alpha = 0;
    waitframe();

    if ( var_1 > 0 )
        var_3 fadeovertime( var_1 );

    var_3.alpha = 1;
    wait( var_0 - var_2 );

    if ( var_2 > 0 )
        var_3 fadeovertime( var_2 );

    var_3.alpha = 0;
    wait( var_2 );
    waitframe();
    _id_12E52( var_3 );
}

_id_144F6()
{
    self endon( "death_or_disconnect" );
    self notifyonplayercommand( "specialGrenade", "+smoke" );

    for (;;)
    {
        self waittill( "specialGrenade" );
        self._id_13B5E = self._id_13B5E + 1;
    }
}

spawn_carried_punchcard_if_player_down()
{
    level waittill( "game_ended" );

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_1408E() )
    {
        level.monitor_player_plundercount.alpha = 0;
        level._id_12315._id_145BB.alpha = 0;
        level._id_145BC.alpha = 0;
    }

    foreach ( var_1 in level.players )
        var_1 _id_128D4( 0 );
}

_id_12E64( var_0, var_1 )
{
    if ( isdefined( var_0 ) )
        var_0.alpha = var_1;
}

_id_128D4( var_0, var_1 )
{
    if ( istrue( var_0 ) )
        var_2 = 1;
    else
        var_2 = 0;

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_1408E() || istrue( var_1 ) )
    {
        _id_12E64( self.getbrgametypedata, var_2 );
        _id_12E64( self._id_136F2, var_2 );
        _id_12E64( self._id_119A2, var_2 );
        _id_12E64( self._id_11B3D, var_2 );
        _id_12E64( self.armor_piercing, var_2 );
        _id_12E64( self.heli_boss, var_2 );
        _id_12E64( self._id_1472B, var_2 );

        if ( !istrue( level._id_11EB9 ) )
            _id_12E64( self._id_136DA, var_2 );
    }
}
