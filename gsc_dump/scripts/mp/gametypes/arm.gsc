// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "mapname" ) == "mp_background" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = scripts\mp\utility\game::getgametype();
    var_0[1] = "tdm";
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 300 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 2400 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    }

    setdvar( "scr_game_spawncamera_frontline", 0 );
    setdvar( "scr_allow_technicals", 1 );
    setdvar( "scr_runlean_max_technicals", 30 );
    setdvar( "scr_allow_vehicles", 1 );
    setdvar( "LSSKOMTQKK", 0 );
    setomnvar( "ui_num_dom_flags", 5 );
    updategametypedvars();
    level.scoreperplayer = undefined;
    level.teambased = 1;
    level.onstartgametype = ::onstartgametype;
    level.onplayerconnect = ::onplayerconnect;
    level.getspawnpoint = ::getspawnpoint;
    level.modeonspawnplayer = ::onspawnplayer;
    level.onplayerkilled = ::onplayerkilled;
    level.onrespawndelay = ::getrespawndelay;
    level.onnormaldeath = ::onnormaldeath;
    level.onobjectivecomplete = scripts\mp\gametypes\dom.gsc::onflagcapture;
    level.updatefobspawnselection = ::updatefobspawnselection;
    level.lastcaptime = gettime();
    level.alliescapturing = [];
    level.axiscapturing = [];
    level.lastcaptureteam = undefined;
    level.previousclosespawnent = undefined;
    level.promode = 1;
    level._id_12C49 = 1;
    level.requiredplayercount["allies"] = 24;
    level.requiredplayercount["axis"] = 24;
    game["dialog"]["gametype"] = "gametype_groundwar";

    if ( getdvarint( "OSMSLRTOP" ) )
        game["dialog"]["gametype"] = "hc_" + game["dialog"]["gametype"];
    else if ( getdvarint( "NOSLRNTRKL" ) )
        game["dialog"]["gametype"] = "thirdp_" + game["dialog"]["gametype"];
    else if ( getdvarint( "scr_diehard" ) )
        game["dialog"]["gametype"] = "dh_" + game["dialog"]["gametype"];
    else if ( getdvarint( "scr_" + scripts\mp\utility\game::getgametype() + "_promode" ) )
        game["dialog"]["gametype"] = game["dialog"]["gametype"] + "_pro";

    game["dialog"]["offense_obj"] = "boost_groundwar";
    game["dialog"]["defense_obj"] = "boost_groundwar";
    game["dialog"]["obj_destroyed"] = "obj_destroyed";
    game["dialog"]["obj_captured"] = "obj_captured";
    game["dialog"]["securing_a"] = "securing_a";
    game["dialog"]["securing_b"] = "securing_b";
    game["dialog"]["securing_c"] = "securing_c";
    game["dialog"]["securing_d"] = "securing_d";
    game["dialog"]["securing_e"] = "securing_e";
    game["dialog"]["secured_a"] = "secured_a";
    game["dialog"]["secured_b"] = "secured_b";
    game["dialog"]["secured_c"] = "secured_c";
    game["dialog"]["secured_d"] = "secured_d";
    game["dialog"]["secured_e"] = "secured_e";
    game["dialog"]["losing_a"] = "losing_a";
    game["dialog"]["losing_b"] = "losing_b";
    game["dialog"]["losing_c"] = "losing_c";
    game["dialog"]["losing_d"] = "losing_d";
    game["dialog"]["losing_e"] = "losing_e";
    game["dialog"]["lost_a"] = "lost_a";
    game["dialog"]["lost_b"] = "lost_b";
    game["dialog"]["lost_c"] = "lost_c";
    game["dialog"]["lost_d"] = "lost_d";
    game["dialog"]["lost_e"] = "lost_e";
    game["dialog"]["lost_all"] = "gamestate_domlosing";
    game["dialog"]["secure_all"] = "gamestate_domwinning";
    level._effect["vfx_smk_signal"] = loadfx( "vfx/_requests/mp_gameplay/vfx_smk_signal" );
    level._effect["vfx_smk_signal_gr"] = loadfx( "vfx/_requests/mp_gameplay/vfx_smk_signal_gr" );
    level._effect["vfx_snatch_ac130_clouds"] = loadfx( "vfx/iw8_mp/gamemode/vfx_snatch_ac130_clouds.vfx" );
    level._effect["vfx_br_infil_cloud_scroll"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_infil_cloud_scroll.vfx" );
    level._effect["vfx_br_infil_jump_smoke_01"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_infil_jump_smoke_01.vfx" );
    level._effect["vfx_br_infil_jump_wisp_01"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_infil_jump_wisp_01.vfx" );
    level._effect["vfx_br_infil_jump_wisp_02"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_infil_jump_wisp_02.vfx" );
    level._effect["vfx_br_infil_omni_light"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_infil_omni_light.vfx" );
    level._effect["vfx_br_infil_spot_light"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_infil_spot_light.vfx" );
    level.nukeselectactive = getdvarint( "scr_arm_nukeSelectActive", 0 );
    level.killstoearnnukeselect = getdvarint( "scr_arm_killsToEarnNukeSelect", 7 );
    level.useobjectives = getdvarint( "scr_arm_useObjectives", 1 );
    level.userallypointvehicles = getdvarint( "scr_arm_rallyPointVehicles", 1 );
    level.hideenemyhq = getdvarint( "scr_arm_hideEnemyHQ", 0 );
    level.hideenemyfobs = getdvarint( "scr_arm_hideEnemyFOBs", 0 );
    level.disablelittlebirdrally = getdvarint( "scr_arm_disableLittleBirdRally", 1 );
    level.completelyremovelittlebird = getdvarint( "scr_arm_completelyRemoveLittleBird", 0 );
    level.move_spawnpoints_to_valid_positions = getdvarint( "scr_arm_enableLittleBirdMG", 0 );
    level.usec130spawn = getdvarint( "scr_arm_useC130Spawns", 0 );
    level.usec130spawnfirstonly = getdvarint( "scr_arm_c130SpawnFirstOnly", 0 );
    level.c130movementmethod = getdvarint( "scr_arm_c130method", 0 );
    level.c130flightdist = getdvarfloat( "scr_arm_c130FlightDist", 4000 );
    level.c130distapart = getdvarfloat( "scr_arm_c130DistApart", 5000 );
    level.c130alignedtolocale = getdvarfloat( "scr_arm_c130AlignedToLocale", 1 );
    level.dropbrloot = getdvarint( "scr_arm_dropBRLoot", 0 );
    level.spawnselectionshowenemy = getdvarint( "scr_spawnSelectionShowEnemy", 0 );
    level.spawnselectionshowfriendly = getdvarint( "scr_spawnSelectionShowFriendly", 0 );
    level.usesquadleader = getdvarint( "scr_arm_useSquadLeader", 1 );
    level.spawnsquadleaderonly = getdvarint( "scr_arm_spawnSquadLeaderOnly", 0 );
    level.usestaticspawnselectioncamera = getdvarint( "scr_arm_staticSpawnCamera", 0 );
    level.useunifiedspawnselectioncameraheight = getdvarint( "scr_arm_spawnCameraUnifiedHeight", 1 );
    level.forcetopickafob = getdvarint( "scr_arm_forceSpawning", 0 );
    level.maxhqtanks = getdvarint( "scr_arm_maxHQTanks", 2 );
    level._id_13A58 = getdvarint( "scr_arm_tankRespawnTime", 120 );
    level.c4_obj_and_progress_clear = getdvarint( "scr_arm_apcRespawnTime", 120 );
    level.longdialoguecooldown = getdvarint( "scr_arm_longDialogueCooldown", 1 );
    level._id_11BD2 = getdvarint( "scr_arm_mercyEndingNuke", 1 );
    level._id_11BD3 = getdvarint( "scr_arm_mercyEndingTime", 30 );
    level._id_11F41 = getdvarint( "scr_arm_numNonRallyVehicles", 25 );
    level.loadout_updateclassdefault_weapons = getdvarint( "scr_arm_disablePersonalNuke", 0 );
    level._id_12305 = getdvarint( "scr_personalNukeCostOverride", 30 );
    level._id_13377 = getdvarint( "scr_arm_showTeamTanks", 1 );
    level._id_13375 = getdvarint( "scr_arm_showTeamLittleBirds", 1 );
    level._id_1369C = getdvarint( "scr_arm_spawnSelectionAFKTime", 120 );
    level._id_11AC5 = getdvarint( "scr_arm_manualAdjustLittleBirdLocs", 1 );
    level.matchdata_logvictimkillevent = getdvarint( "scr_arm_dontSpawnJeep", 0 );
    level.matchdata_logscoreevent = getdvarint( "scr_arm_dontSpawnCargoTruck", 0 );
    level._id_1408C = getdvarint( "scr_arm_usePingSystem", 1 );

    if ( istrue( level._id_13377 ) )
    {
        level._id_13C4A = [];
        level._id_13C4A["axis"] = [];
        level._id_13C4A["allies"] = [];
    }

    if ( istrue( level._id_13375 ) )
    {
        level._id_13C49 = [];
        level._id_13C49["axis"] = [];
        level._id_13C49["allies"] = [];
        level._id_13C49["untouched"] = [];
    }

    if ( level.useobjectives || level.userallypointvehicles || level.usesquadspawnselection )
    {
        setdvar( "scr_game_usespawnselection", 1 );
        setdvar( "scr_game_disablespawncamera", 0 );
        setdvar( "scr_game_spawncamera_snap", 1 );
    }
    else
    {
        setdvar( "scr_game_usespawnselection", 0 );
        setdvar( "scr_game_disablespawncamera", 1 );
        setdvar( "scr_game_spawncamera_snap", 1 );
    }

    if ( level.dropbrloot )
        level.blockweapondrops = 1;

    if ( level.c130movementmethod == 1 )
    {
        level.c130pathkilltracker = [];
        level.c130pathkilltracker["axis"] = 0;
        level.c130pathkilltracker["allies"] = 0;
    }

    level.modecontrolledvehiclespawningonly = 1;
    level.disableteamstartspawns = 1;
    level._id_1368D = ::_id_1368D;
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "scr_btm_zoneLifetime", getmatchrulesdata( "kothData", "zoneLifetime" ) );
    setdynamicdvar( "scr_btm_zoneCaptureTime", getmatchrulesdata( "kothData", "zoneCaptureTime" ) );
    setdynamicdvar( "scr_btm_zoneActivationDelay", getmatchrulesdata( "kothData", "zoneActivationDelay" ) );
    setdynamicdvar( "scr_btm_randomLocationOrder", getmatchrulesdata( "kothData", "randomLocationOrder" ) );
    setdynamicdvar( "scr_btm_additiveScoring", getmatchrulesdata( "kothData", "additiveScoring" ) );
    setdynamicdvar( "scr_btm_pauseTime", getmatchrulesdata( "kothData", "pauseTime" ) );
    setdynamicdvar( "scr_btm_delayPlayer", getmatchrulesdata( "kothData", "delayPlayer" ) );
    setdynamicdvar( "scr_btm_useHQRules", getmatchrulesdata( "kothData", "useHQRules" ) );
    setdynamicdvar( "scr_btm_spawndelay", getmatchrulesdata( "tdefData", "spawnDelay" ) );
    scripts\mp\utility\game::registerhalftimedvar( "arm", 0 );
}

onstartgametype()
{
    if ( !isdefined( game["switchedsides"] ) )
        game["switchedsides"] = 0;

    setclientnamemode( "auto_change" );
    level.objectives = [];
    level.uncapturableobjectives = [];
    initspawns();
    seticonnames();
    level.usedomflag = 0;
    level.killstreakqueue = [];
    level.teamkillstreakqueue = [];
    level.teamkillstreakqueue["allies"] = [];
    level.teamkillstreakqueue["axis"] = [];
    level.killstreaklist = [];
    level.killstreaklist[4] = [ "cruise_predator", "scrambler_drone_guard" ];
    level.killstreaklist[3] = [ "precision_airstrike", "multi_airstrike", "bradley" ];
    level.killstreaklist[2] = [ "toma_strike", "chopper_gunner", "pac_sentry", "gunship" ];
    level.teamkillstreakqueue["allies"] = [ "cruise_predator", "precision_airstrike", "cruise_predator" ];
    level.teamkillstreakqueue["axis"] = [ "cruise_predator", "precision_airstrike", "cruise_predator" ];
    level thread setupwaypointicons();
    debug_setupmatchdata();
    _id_1324D();
    calculatehqmidpoint();

    if ( istrue( level.useobjectives ) )
        setupobjectives();

    level thread runobjectives();

    if ( level.usec130spawn )
        level thread managec130spawns();

    if ( istrue( level.userallypointvehicles ) )
    {
        scripts\mp\rally_point::init();
        level thread init_rallyvehicles();
    }

    thread init_groundwarvehicles();
    level thread updatedomscores();
    scripts\mp\utility\dialog::initstatusdialog();

    if ( istrue( level._id_11BD2 ) )
        level thread _id_11EEE();

    monitordriverexitbutton();

    if ( istrue( level._id_1408C ) )
        scripts\cp_mp\vehicles\vehicle_compass::calloutmarkerping_init();

    scripts\cp_mp\parachute::initparachutedvars();
}

updategametypedvars()
{
    scripts\mp\gametypes\common.gsc::updatecommongametypedvars();
    level.pausescoring = scripts\mp\utility\dvars::dvarintvalue( "pauseTime", 1, 0, 1 );
    level.delayplayer = scripts\mp\utility\dvars::dvarintvalue( "delayPlayer", 1, 0, 1 );
    level.spawndelay = scripts\mp\utility\dvars::dvarfloatvalue( "spawnDelay", 5, 0, 30 );
    level.usehqrules = 1;
    level.flagcapturetime = scripts\mp\utility\dvars::dvarfloatvalue( "flagCaptureTime", 30, 0, 30 );
    level.flagsrequiredtoscore = scripts\mp\utility\dvars::dvarintvalue( "flagsRequiredToScore", 1, 1, 3 );
    level.pointsperflag = scripts\mp\utility\dvars::dvarintvalue( "pointsPerFlag", 1, 1, 300 );
    level.flagneutralization = scripts\mp\utility\dvars::dvarintvalue( "flagNeutralization", 0, 0, 1 );
    level.precappoints = scripts\mp\utility\dvars::dvarintvalue( "preCapPoints", 0, 0, 1 );
    level.capturedecay = scripts\mp\utility\dvars::dvarintvalue( "captureDecay", 1, 0, 1 );
    level.capturetype = scripts\mp\utility\dvars::dvarintvalue( "captureType", 1, 0, 3 );
    level.numflagsscoreonkill = scripts\mp\utility\dvars::dvarintvalue( "numFlagsScoreOnKill", 0, 0, 3 );
    level.objectivescaler = scripts\mp\utility\dvars::dvarfloatvalue( "objScalar", 4, 1, 10 );

    if ( getdvarint( "allow_team_proxchat", 0 ) == 1 )
    {
        setdvar( "LKTPRPKPMR", 1 );
        var_0 = 1000;
        var_1 = getdvarint( "proxchat_radius_override", 0 );

        if ( var_1 != 0 )
            var_0 = var_1;

        setdvar( "NNMLSMNTOQ", var_0 );
    }
}

seticonnames()
{
    level.iconcapture = "waypoint_capture";
    level.iconneutral = "waypoint_captureneutral";
    level.icondefend = "waypoint_defend";
    level.iconcontested = "waypoint_contested";
    level.icondefending = "waypoint_defending";
    level.icontaking = "waypoint_taking";
    level.iconlosing = "waypoint_losing";
}

monitordriverexitbutton()
{
    scripts\cp_mp\utility\game_utility::_id_12C10( "delete_on_load", "targetname" );
    scripts\cp_mp\utility\game_utility::_id_12C10( "vehicle_volume", "script_noteworthy" );
    scripts\cp_mp\utility\game_utility::_id_12C10( "vehicle_volume_simplified", "script_noteworthy" );
    scripts\cp_mp\utility\game_utility::_id_12C10( "super", "script_noteworthy" );
    scripts\cp_mp\utility\game_utility::_id_12C10( "militarybase", "script_noteworthy" );
    scripts\cp_mp\utility\game_utility::_id_12C10( "location_volume", "targetname" );
    scripts\cp_mp\utility\game_utility::_id_12C10( "locale_area_trigger", "targetname" );
    scripts\cp_mp\utility\game_utility::_id_12C10( "shadow_blocker", "targetname" );
    scripts\cp_mp\utility\game_utility::_id_12C11( "door_prison_cell_metal_mp", 1 );
    scripts\cp_mp\utility\game_utility::_id_12C11( "veh8_mil_air_acharlie130", 1 );
    scripts\cp_mp\utility\game_utility::_id_12C11( "door_wooden_panel_mp_01", 1 );
    scripts\cp_mp\utility\game_utility::_id_12C11( "me_electrical_box_street_01", 1 );
    scripts\cp_mp\utility\game_utility::_id_12C0F( "light" );
    scripts\cp_mp\utility\game_utility::_id_12C0F( "trigger_use_touch" );

    if ( isdefined( level.localeid ) && level.localeid == "locale_6" )
        scripts\cp_mp\utility\game_utility::_id_12C10( "locale_8", "script_noteworthy" );

    var_0 = [];
    var_0[0] = ( -22592, 27367, 1000 );
    var_0[1] = ( -22592, 27303, -448 );
    var_0[2] = ( 7837, -9674, 1154 );
    var_0[3] = ( 7637, -9674, 1154 );
    var_0[4] = ( 7901, -9674, -270 );
    var_0[5] = ( 7701, -9674, -270 );
    var_0[6] = ( 10366, -11606, 66 );
    var_0[7] = ( 10366, -11813, 66 );
    var_0[6] = ( 10366, -11670, -270 );
    var_0[7] = ( 10366, -11877, -270 );
    var_0[8] = ( 7498, -11716, 66 );
    var_0[9] = ( 7498, -11652, -270 );
    var_0[10] = ( -1200, -18954, -242 );
    var_0[11] = ( -1215, -19016, 774 );
    var_1 = getentarray();

    foreach ( var_3 in var_1 )
    {
        if ( isdefined( var_3.model ) && var_3.model == "tag_origin" )
        {
            var_4 = 0;

            foreach ( var_6 in var_0 )
            {
                if ( var_4 )
                    break;

                if ( distancesquared( var_3.origin, var_6 ) < 144 )
                    var_4 = 1;
            }

            if ( var_4 )
                var_3 delete();
        }
    }
}

_id_12C14()
{
    wait 5;
    var_0 = [];
    var_0[0] = "tactical_cover_col";
    var_0[1] = "tactical_ladder_col";
    var_0[2] = "clip8x8x256";
    var_0[3] = "player8x8x256";
    var_0[4] = "ladderMetal264";
    var_0[5] = "ladderWood192";
    var_0[6] = "ladderMetal192";
    var_0[7] = "mount128";
    var_0[8] = "mount64";
    var_0[9] = "mount32";
    var_0[10] = "mount256";
    var_0[11] = "ladderWood264";
    var_0[12] = "nosight256x256x8";
    var_0[13] = "nosight128x128x8";
    var_0[14] = "mountCorner128";
    var_0[15] = "mantle256";
    var_0[16] = "mantle128";
    var_0[17] = "mantle64";
    var_0[18] = "mantle32";
    var_0[19] = "stairsHalfFlight128";
    var_0[20] = "stairsFullFlight128";

    foreach ( var_2 in var_0 )
        scripts\cp_mp\utility\game_utility::_id_12C10( var_2, "targetname" );
}

debug_setupmatchdata()
{
    level.axishqname = "gw_fob_axisHQ";
    level.allieshqname = "gw_fob_alliesHQ";
    level.startingfobnames_allies = [];
    level.startingfobnames_axis = [];
    level.startingfobnames_neutral = [ "gw_fob_01", "gw_fob_02", "gw_fob_03", "gw_fob_04", "gw_fob_05" ];
    level.defaultaxisspawn = "gw_fob_axishq";
    level.defaultaxisspawncamera = "gw_fob_axishq";
    level.defaultalliesspawn = "gw_fob_allieshq";
    level.defaultalliesspawncamera = "gw_fob_allieshq";
}

setupwaypointicons()
{
    while ( !isdefined( game["killstreakTable"] ) )
        waitframe();

    foreach ( var_2, var_1 in game["killstreakTable"].tabledatabyref )
    {
        level.waypointcolors[var_2 + "_incoming"] = "neutral";
        level.waypointbgtype[var_2 + "_incoming"] = 1;
        level.waypointstring[var_2 + "_incoming"] = "";
        level.waypointshader[var_2 + "_incoming"] = var_1["hudIcon"];
        level.waypointpulses[var_2 + "_incoming"] = 0;
        level.waypointcolors[var_2] = "neutral";
        level.waypointbgtype[var_2] = 1;
        level.waypointstring[var_2] = "MP_INGAME_ONLY/OBJ_CAPTURE_CAPS";
        level.waypointshader[var_2] = var_1["hudIcon"];
    }
}

_id_1324D()
{
    level.gw_objstruct = spawnstruct();
    level.gw_objstruct.axishqloc = spawnstruct();
    level.gw_objstruct.axishqloc.trigger = scripts\cp_mp\utility\game_utility::getlocaleent( level.axishqname );

    if ( !isdefined( level.gw_objstruct.axishqloc ) )
    {

    }

    level.gw_objstruct.allieshqloc = spawnstruct();
    level.gw_objstruct.allieshqloc.trigger = scripts\cp_mp\utility\game_utility::getlocaleent( level.allieshqname );

    if ( !isdefined( level.gw_objstruct.allieshqloc ) )
        return;
}

setupobjectives()
{
    level.gw_objstruct.startingfobs_allies = [];
    level.gw_objstruct.startingfobs_axis = [];
    level.gw_objstruct.startingfobs_neutral = [];
    var_0 = [ "_a", "_b", "_c", "_d", "_e" ];
    var_1 = 0;

    foreach ( var_3 in level.startingfobnames_allies )
    {
        var_4 = spawnstruct();
        var_4.name = var_3;
        var_4.trigger = scripts\cp_mp\utility\game_utility::getlocaleent( var_3 );
        var_4.trigger.objkey = var_0[var_1];
        var_1++;
        level.gw_objstruct.startingfobs_allies[level.gw_objstruct.startingfobs_allies.size] = var_4;
    }

    foreach ( var_3 in level.startingfobnames_axis )
    {
        var_4 = spawnstruct();
        var_4.name = var_3;
        var_4.trigger = scripts\cp_mp\utility\game_utility::getlocaleent( var_3 );
        var_4.trigger.objkey = var_0[var_1];
        var_1++;
        level.gw_objstruct.startingfobs_axis[level.gw_objstruct.startingfobs_axis.size] = var_4;
    }

    foreach ( var_3 in level.startingfobnames_neutral )
    {
        var_4 = spawnstruct();
        var_4.name = var_3;
        var_4.trigger = scripts\cp_mp\utility\game_utility::getlocaleent( var_3 );
        var_4.trigger.objkey = var_0[var_1];
        var_1++;
        level.gw_objstruct.startingfobs_neutral[level.gw_objstruct.startingfobs_neutral.size] = var_4;
    }
}

updatedomscores()
{
    level endon( "game_ended" );
    var_0 = undefined;
    var_1 = undefined;
    level waittill( "prematch_done" );
    level thread scripts\mp\spawnselection::_id_13FD9();

    while ( !level.gameended )
    {
        wait 10;
        scripts\mp\hostmigration::waittillhostmigrationdone();
        var_2 = getowneddomflags();

        if ( !isdefined( level.scoretick ) )
            level.scoretick = [];

        foreach ( var_4 in level.teamnamelist )
            level.scoretick[var_4] = 0;

        if ( var_2.size )
        {
            for ( var_6 = 1; var_6 < var_2.size; var_6++ )
            {
                var_7 = var_2[var_6];
                var_8 = gettime() - var_7.capturetime;

                for ( var_9 = var_6 - 1; var_9 >= 0 && var_8 > gettime() - var_2[var_9].capturetime; var_9-- )
                    var_2[var_9 + 1] = var_2[var_9];

                var_2[var_9 + 1] = var_7;
            }

            foreach ( var_7 in var_2 )
            {
                var_11 = var_7 scripts\mp\gameobjects::getownerteam();
                var_0 = getteamscore( var_11 );
                var_12 = scripts\mp\gametypes\obj_dom.gsc::getteamflagcount( var_11 );

                if ( var_12 >= level.flagsrequiredtoscore )
                    level.scoretick[var_11] = level.scoretick[var_11] + level.pointsperflag;
            }
        }

        updatescores();
    }
}

getowneddomflags()
{
    var_0 = [];

    foreach ( var_2 in level.objectives )
    {
        if ( var_2 scripts\mp\gameobjects::getownerteam() != "neutral" && isdefined( var_2.capturetime ) )
            var_0[var_0.size] = var_2;
    }

    return var_0;
}

updatescores()
{
    var_0 = [];

    foreach ( var_2 in level.teamnamelist )
    {
        var_3 = game["teamScores"][var_2] + level.scoretick[var_2];

        if ( var_3 >= level.roundscorelimit )
            var_0[var_0.size] = var_2;
    }

    if ( var_0.size == 1 )
        level.scoretick[var_0[0]] = level.roundscorelimit - game["teamScores"][var_0[0]];

    var_5 = scripts\mp\gamescore::freight_lift_door_switch();

    foreach ( var_2 in level.teamnamelist )
    {
        if ( level.scoretick[var_2] > 0 )
            scripts\mp\gamescore::giveteamscoreforobjective( var_2, level.scoretick[var_2], 1, undefined, 1 );
    }

    var_8 = scripts\mp\gamescore::freight_lift_door_switch();

    if ( var_5 != var_8 )
        scripts\mp\gamescore::_id_12762( var_8, 1, var_5 );
}

runobjectives( var_0 )
{
    level.axisspawnareas = [ level.axishqname ];
    level.alliesspawnareas = [ level.allieshqname ];
    level.allfobs = [];

    if ( istrue( level.useobjectives ) )
    {
        foreach ( var_2 in level.gw_objstruct.startingfobs_axis )
        {
            var_3 = runobjflag( var_2.trigger, "axis" );
            level.allfobs[level.allfobs.size] = var_2;
            level.axisspawnareas[level.axisspawnareas.size] = var_2.name;

            if ( isdefined( level.spawnselectionlocations[var_2.name]["axis"].anchorentity ) )
                level.spawnselectionlocations[var_2.name]["axis"].anchorentity.origin = var_2.trigger.origin + ( 0, 0, 100 );
        }

        foreach ( var_2 in level.gw_objstruct.startingfobs_allies )
        {
            var_3 = runobjflag( var_2.trigger, "allies" );
            level.allfobs[level.allfobs.size] = var_2;
            level.alliesspawnareas[level.alliesspawnareas.size] = var_2.name;

            if ( isdefined( level.spawnselectionlocations[var_2.name]["allies"].anchorentity ) )
                level.spawnselectionlocations[var_2.name]["allies"].anchorentity.origin = var_2.trigger.origin + ( 0, 0, 100 );
        }

        foreach ( var_2 in level.gw_objstruct.startingfobs_neutral )
        {
            var_3 = runobjflag( var_2.trigger, "neutral" );
            level.allfobs[level.allfobs.size] = var_2;
        }

        foreach ( var_2 in level.allfobs )
        {
            var_2.trigger.gameobject.oncontested = ::objective_oncontested;
            var_2.trigger.gameobject.onuncontested = ::objective_onuncontested;
            var_2.trigger.gameobject.onuse = ::objective_onuse;
            var_2.trigger.gameobject.onbeginuse = ::objective_onusebegin;
            var_2.trigger.gameobject.onenduse = ::objective_onuseend;
            var_2.trigger.gameobject.onpinnedstate = ::objective_onpinnedstate;
            var_2.trigger.gameobject.onunpinnedstate = ::objective_onunpinnedstate;

            if ( istrue( level.playinggulagbink ) )
                var_2._id_136CD = scripts\mp\gametypes\obj_dom.gsc::_id_136CE;

            level.objectives[var_2.trigger.gameobject.objectivekey] = var_2.trigger.gameobject;
            level.spawnselectionlocations[var_2.name]["allies"].objectivekey = var_2.trigger.gameobject.objectivekey;
            level.spawnselectionlocations[var_2.name]["axis"].objectivekey = var_2.trigger.gameobject.objectivekey;
        }
    }

    if ( level.usesquadspawnselection )
    {
        scripts\mp\spawnselection::setspawnlocations( level.axisspawnareas, "axis" );
        scripts\mp\spawnselection::setspawnlocations( level.alliesspawnareas, "allies" );
        sethqmarkerobjective();

        while ( !isdefined( level.spawnselectionlocations ) )
            waitframe();

        waitframe();

        if ( isdefined( level.spawnselectionlocations[level.axishqname]["axis"].anchorentity ) )
            level.spawnselectionlocations[level.axishqname]["axis"].anchorentity.origin = level.gw_objstruct.axishqloc.trigger.origin;

        if ( isdefined( level.spawnselectionlocations[level.allieshqname]["allies"].anchorentity ) )
            level.spawnselectionlocations[level.allieshqname]["allies"].anchorentity.origin = level.gw_objstruct.allieshqloc.trigger.origin;
    }

    level thread objective_manageobjectivesintrovisibility();
    hackfixcameras();
    level thread brking_getspawnpoint();
}

brking_getspawnpoint()
{
    scripts\mp\flags::gameflagwait( "prematch_done" );

    foreach ( var_1 in level.allfobs )
        var_1.trigger.gameobject scripts\mp\gameobjects::allowuse( "enemy" );
}

objective_manageobjectivesintrovisibility()
{
    wait 1;
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( level.gw_objstruct.axishqloc.marker.objidnum );
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( level.gw_objstruct.allieshqloc.marker.objidnum );
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( level.gw_objstruct.axishqloc.nuclear_core_on_chopper.objidnum );
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( level.gw_objstruct.allieshqloc.nuclear_core_on_chopper.objidnum );

    foreach ( var_1 in level.allfobs )
        scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_1.trigger.gameobject.objidnum );

    if ( isdefined( level.rallypointvehicles ) )
    {
        foreach ( var_4 in level.rallypointvehicles )
            scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_4.marker.objidnum );
    }

    while ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        waitframe();

    scripts\mp\objidpoolmanager::objective_teammask_addtomask( level.gw_objstruct.axishqloc.marker.objidnum, "axis" );
    scripts\mp\objidpoolmanager::objective_teammask_addtomask( level.gw_objstruct.allieshqloc.marker.objidnum, "allies" );

    foreach ( var_1 in level.allfobs )
        scripts\mp\objidpoolmanager::objective_playermask_showtoall( var_1.trigger.gameobject.objidnum );

    if ( isdefined( level.rallypointvehicles ) )
    {
        foreach ( var_4 in level.rallypointvehicles )
        {
            if ( isdefined( var_4 ) )
                scripts\mp\objidpoolmanager::objective_teammask_addtomask( var_4.marker.objidnum, var_4.team );
        }
    }
}

hackfixcameras()
{
    if ( istrue( level.usestaticspawnselectioncamera ) )
        return;

    while ( !isdefined( level.spawncameras["gw_fob_alliesHQ"] ) )
        waitframe();

    var_0 = "allies";
    var_1 = level.spawnselectionteamforward[var_0];
    var_2 = [ "gw_fob_alliesHQ", "gw_fob_01", "gw_fob_02", "gw_fob_03", "gw_fob_04", "gw_fob_05" ];

    foreach ( var_4 in var_2 )
    {
        var_5 = level.spawnselectionlocations[var_4][var_0].anchorentity.origin;
        var_6 = var_5 + var_1 * -8500 + ( 0, 0, 7000 );
        var_7 = vectornormalize( var_5 - var_6 );
        var_8 = scripts\mp\utility\script::vectortoanglessafe( var_7, ( 0, 0, 1 ) );

        if ( istrue( level.useunifiedspawnselectioncameraheight ) )
        {
            var_9 = scripts\mp\spawnselection::getunifedspawnselectioncameraheight();
            var_6 = ( var_6[0], var_6[1], var_9 );
        }

        var_6 = var_6 + calculatecameraoffset( var_0, var_5 );
        level.spawncameras[var_4][var_0].origin = var_6;
        level.spawncameras[var_4][var_0].angles = var_8;
    }

    while ( !isdefined( level.spawncameras["gw_fob_axisHQ"] ) )
        waitframe();

    var_0 = "axis";
    var_1 = level.spawnselectionteamforward[var_0];
    var_2 = [ "gw_fob_axisHQ", "gw_fob_01", "gw_fob_02", "gw_fob_03", "gw_fob_04", "gw_fob_05" ];

    foreach ( var_4 in var_2 )
    {
        var_5 = level.spawnselectionlocations[var_4][var_0].anchorentity.origin;
        var_6 = var_5 + var_1 * -8500 + ( 0, 0, 7000 );
        var_7 = vectornormalize( var_5 - var_6 );
        var_8 = scripts\mp\utility\script::vectortoanglessafe( var_7, ( 0, 0, 1 ) );

        if ( istrue( level.useunifiedspawnselectioncameraheight ) )
        {
            var_9 = scripts\mp\spawnselection::getunifedspawnselectioncameraheight();
            var_6 = ( var_6[0], var_6[1], var_9 );
        }

        var_6 = var_6 + calculatecameraoffset( var_0, var_5 );
        level.spawncameras[var_4][var_0].origin = var_6;
        level.spawncameras[var_4][var_0].angles = var_8;
    }
}

updatefobspawnselection()
{
    level.axisspawnareas = [ level.axishqname ];
    level.alliesspawnareas = [ level.allieshqname ];

    foreach ( var_1 in level.allfobs )
    {
        var_2 = var_1.trigger.gameobject;

        if ( var_2.ownerteam == "axis" )
        {
            level.axisspawnareas[level.axisspawnareas.size] = var_1.name;

            if ( isdefined( level.spawnselectionlocations[var_1.name]["axis"].anchorentity ) )
                level.spawnselectionlocations[var_1.name]["axis"].anchorentity.origin = var_1.trigger.origin + ( 0, 0, 100 );

            continue;
        }

        if ( var_2.ownerteam == "allies" )
        {
            level.alliesspawnareas[level.alliesspawnareas.size] = var_1.name;

            if ( isdefined( level.spawnselectionlocations[var_1.name]["allies"].anchorentity ) )
                level.spawnselectionlocations[var_1.name]["allies"].anchorentity.origin = var_1.trigger.origin + ( 0, 0, 100 );
        }
    }

    scripts\mp\spawnselection::setspawnlocations( level.axisspawnareas, "axis" );
    scripts\mp\spawnselection::setspawnlocations( level.alliesspawnareas, "allies" );
}

sethqmarkerobjective()
{
    var_0 = "any";
    var_1 = level.gw_objstruct.axishqloc.trigger.origin;
    var_2 = scripts\mp\gameobjects::createobjidobject( var_1, "neutral", ( 0, 0, 0 ), undefined, var_0, 0 );
    scripts\mp\objidpoolmanager::update_objective_ownerteam( var_2.objidnum, "axis" );
    scripts\mp\objidpoolmanager::objective_teammask_addtomask( var_2.objidnum, "axis" );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_2.objidnum, 0 );
    var_2.lockupdatingicons = 0;
    scripts\mp\objidpoolmanager::objective_pin_global( var_2.objidnum, 0 );
    scripts\mp\objidpoolmanager::update_objective_icon( var_2.objidnum, "icon_waypoint_hq_friendly" );
    scripts\mp\objidpoolmanager::update_objective_setbackground( var_2.objidnum, 6 );
    var_2.lockupdatingicons = 1;
    level.gw_objstruct.axishqloc.marker = var_2;
    level.uncapturableobjectives[level.uncapturableobjectives.size] = var_2;
    var_2 = scripts\mp\gameobjects::createobjidobject( var_1, "neutral", ( 0, 0, 0 ), undefined, var_0, 0 );
    scripts\mp\objidpoolmanager::update_objective_ownerteam( var_2.objidnum, "axis" );
    scripts\mp\objidpoolmanager::objective_teammask_addtomask( var_2.objidnum, "allies" );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_2.objidnum, 0 );
    var_2.lockupdatingicons = 0;
    scripts\mp\objidpoolmanager::objective_pin_global( var_2.objidnum, 0 );
    scripts\mp\objidpoolmanager::update_objective_icon( var_2.objidnum, "icon_waypoint_hq_enemy" );
    scripts\mp\objidpoolmanager::update_objective_setbackground( var_2.objidnum, 7 );
    var_2.lockupdatingicons = 1;
    level.gw_objstruct.axishqloc.nuclear_core_on_chopper = var_2;
    level.uncapturableobjectives[level.uncapturableobjectives.size] = var_2;
    var_1 = level.gw_objstruct.allieshqloc.trigger.origin;
    var_2 = scripts\mp\gameobjects::createobjidobject( var_1, "neutral", ( 0, 0, 0 ), undefined, var_0, 0 );
    scripts\mp\objidpoolmanager::update_objective_ownerteam( var_2.objidnum, "allies" );
    scripts\mp\objidpoolmanager::objective_teammask_addtomask( var_2.objidnum, "allies" );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_2.objidnum, 0 );
    var_2.lockupdatingicons = 0;
    scripts\mp\objidpoolmanager::objective_pin_global( var_2.objidnum, 0 );
    scripts\mp\objidpoolmanager::update_objective_icon( var_2.objidnum, "icon_waypoint_hq_friendly" );
    scripts\mp\objidpoolmanager::update_objective_setbackground( var_2.objidnum, 6 );
    var_2.lockupdatingicons = 1;
    level.gw_objstruct.allieshqloc.marker = var_2;
    level.uncapturableobjectives[level.uncapturableobjectives.size] = var_2;
    var_2 = scripts\mp\gameobjects::createobjidobject( var_1, "neutral", ( 0, 0, 0 ), undefined, var_0, 0 );
    scripts\mp\objidpoolmanager::update_objective_ownerteam( var_2.objidnum, "allies" );
    scripts\mp\objidpoolmanager::objective_teammask_addtomask( var_2.objidnum, "axis" );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_2.objidnum, 0 );
    var_2.lockupdatingicons = 0;
    scripts\mp\objidpoolmanager::objective_pin_global( var_2.objidnum, 0 );
    scripts\mp\objidpoolmanager::update_objective_icon( var_2.objidnum, "icon_waypoint_hq_enemy" );
    scripts\mp\objidpoolmanager::update_objective_setbackground( var_2.objidnum, 7 );
    var_2.lockupdatingicons = 1;
    level.gw_objstruct.allieshqloc.nuclear_core_on_chopper = var_2;
    level.uncapturableobjectives[level.uncapturableobjectives.size] = var_2;
    level.spawnselectionteamforward = [];
    level.spawnselectionteamforward["allies"] = vectornormalize( level.gw_objstruct.axishqloc.trigger.origin - level.gw_objstruct.allieshqloc.trigger.origin );
    level.spawnselectionteamforward["axis"] = vectornormalize( level.gw_objstruct.allieshqloc.trigger.origin - level.gw_objstruct.axishqloc.trigger.origin );
}

spawnselection_showenemyhq()
{
    self endon( "disconnect" );

    if ( self.team == "allies" )
    {
        scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( level.gw_objstruct.allieshqloc.marker.objidnum, self );
        scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( level.gw_objstruct.axishqloc.nuclear_core_on_chopper.objidnum, self );
    }
    else
    {
        scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( level.gw_objstruct.allieshqloc.nuclear_core_on_chopper.objidnum, self );
        scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( level.gw_objstruct.axishqloc.marker.objidnum, self );
    }

    while ( self.inspawnselection )
        waitframe();

    if ( self.team == "axis" )
        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( level.gw_objstruct.allieshqloc.nuclear_core_on_chopper.objidnum, self );
    else
        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( level.gw_objstruct.axishqloc.nuclear_core_on_chopper.objidnum, self );
}

objective_oncontested()
{
    scripts\mp\gametypes\obj_dom.gsc::dompoint_oncontested();

    if ( !istrue( self.updatedoncontestedspawnselection ) )
    {
        updatefobspawnselection();
        self.updatedoncontestedspawnselection = 1;
    }
}

objective_onuncontested( var_0 )
{
    scripts\mp\gametypes\obj_dom.gsc::dompoint_onuncontested( var_0 );

    if ( istrue( self.updatedoncontestedspawnselection ) )
    {
        updatefobspawnselection();
        self.updatedoncontestedspawnselection = 0;
    }
}

objective_onusebegin( var_0 )
{
    scripts\mp\gametypes\obj_dom.gsc::dompoint_onusebegin( var_0 );
    updatefobspawnselection();
}

objective_onuseend( var_0, var_1, var_2 )
{
    scripts\mp\gametypes\obj_dom.gsc::dompoint_onuseend( var_0, var_1, var_2 );
    updatefobspawnselection();
}

objective_onuse( var_0 )
{
    scripts\mp\gametypes\obj_dom.gsc::dompoint_onuse( var_0 );
    updatefobspawnselection();
}

objective_onuseupdate( var_0, var_1, var_2, var_3 )
{

}

objective_onpinnedstate( var_0 )
{
    updatefobspawnselection();
    scripts\mp\gametypes\obj_dom.gsc::dompoint_onunpinnedstate( var_0 );
}

objective_onunpinnedstate( var_0 )
{
    updatefobspawnselection();
    scripts\mp\gametypes\obj_dom.gsc::dompoint_onunpinnedstate( var_0 );
}

dommainloop()
{

}

runobjflag( var_0, var_1 )
{
    level endon( "game_ended" );

    while ( !isdefined( level.spawnselectionlocations ) )
        waitframe();

    var_0.script_label = var_0.objkey;
    var_2 = scripts\mp\gametypes\obj_dom.gsc::setupobjective( var_0, undefined, undefined, undefined, 0 );
    var_2.origin = var_0.origin;
    var_2 scripts\mp\gameobjects::allowuse( "none" );
    var_2.didstatusnotify = 0;
    var_2 scripts\mp\gameobjects::setownerteam( var_1 );
    var_3 = "any";

    if ( var_1 != "neutral" )
    {
        if ( level.hideenemyfobs )
            var_3 = "friendly";

        var_2.capturetime = gettime();
    }

    var_2 scripts\mp\gameobjects::setvisibleteam( var_3 );
    return var_2;
}

dropcrate( var_0, var_1, var_2 )
{
    var_3 = scripts\cp_mp\killstreaks\airdrop::droparmcratefromscriptedheli( var_2, var_0, var_1.origin, ( 0, randomint( 360 ), 0 ), undefined );
    return var_3;
}

docratedropsmoke( var_0, var_1, var_2 )
{
    var_3 = var_1.origin + ( 0, 0, 2000 );
    var_4 = scripts\common\utility::groundpos( var_3, ( 0, 0, 1 ) );
    var_1.vfxent = spawn( "script_model", var_4 );
    var_1.vfxent setmodel( "tag_origin" );
    var_1.vfxent.angles = ( 0, 0, 0 );
    var_1.vfxent playloopsound( "smoke_carepackage_smoke_lp" );
    wait 1;
    playfxontag( scripts\engine\utility::getfx( "vfx_smk_signal_gr" ), var_1.vfxent, "tag_origin" );

    if ( isdefined( var_0 ) )
        var_0 scripts\engine\utility::_id_143B9( var_2, "crate_dropped" );
    else
        wait( var_2 );

    stopfxontag( scripts\engine\utility::getfx( "vfx_smk_signal_gr" ), var_1.vfxent, "tag_origin" );
    var_1.vfxent delete();
}

addkillstreakstoqueue( var_0 )
{
    level.killstreaklist[var_0] = scripts\engine\utility::array_randomize( level.killstreaklist[var_0] );

    foreach ( var_2 in level.killstreaklist[var_0] )
        level.killstreakqueue[level.killstreakqueue.size] = var_2;
}

dropdefconkillstreaks( var_0 )
{
    level.activezone.airdroplocations[var_0] = scripts\engine\utility::array_randomize( level.activezone.airdroplocations[var_0] );

    for ( var_1 = 0; var_1 < 3; var_1++ )
    {
        var_2 = level.activezone.airdroplocations[var_0][var_1];

        if ( isdefined( var_2 ) )
        {
            var_2.isinside = 0;
            level thread runkillstreakreward( var_2.origin, var_0 );
            wait( randomfloatrange( 1.5, 2.5 ) );
        }
    }
}

registervaliddroplocations()
{
    scripts\cp_mp\killstreaks\airdrop::initplundercratedata();
    level.validdroplocationstruct = spawnstruct();
    level.validdroplocationstruct.clusters = scripts\engine\utility::getstructarray( "dropBagCluterNode", "script_noteworthy" );
    var_0 = scripts\engine\utility::getstructarray( "dropBagLocation", "script_noteworthy" );

    foreach ( var_2 in var_0 )
    {
        var_2.inuse = 0;

        foreach ( var_4 in level.validdroplocationstruct.clusters )
        {
            if ( var_2.target == var_4.targetname )
            {
                if ( !isdefined( var_4.droplocations ) )
                    var_4.droplocations = [];

                var_4.droplocations[var_4.droplocations.size] = var_2;
                continue;
            }
        }
    }

    level.nextkillstreakgoal = 100;

    if ( 0 )
        thread debug_testcratedroplocationpicker();
}

debug_testcratedroplocationpicker()
{
    for (;;)
    {
        choosecratelocation();
        wait 1;
    }
}

checkkillstreakcratedrop( var_0 )
{
    if ( game["teamScores"][var_0] >= level.nextkillstreakgoal )
    {
        level.nextkillstreakgoal = level.nextkillstreakgoal + 100;
        dropkillstreakcrates( 2 );
    }
}

dropkillstreakcrates( var_0 )
{
    var_1 = undefined;

    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_3 ) )
        {
            var_1 = var_3;
            break;
        }
    }

    for ( var_5 = 0; var_5 < var_0; var_5++ )
    {
        var_6 = choosecratelocation();
        thread runkillstreakreward( var_6, var_1, getkillstreak( 1 ) );
        wait 5;
    }
}

choosecratelocation()
{
    var_0 = randomfloatrange( 0, 1.0 );
    var_1 = vectorlerp( level.c130pathstruct_a.startpt, level.c130pathstruct_a.endpt, var_0 );
    var_2 = vectorlerp( level.c130pathstruct_b.endpt, level.c130pathstruct_b.startpt, var_0 );
    var_3 = vectorlerp( var_1, var_2, 0.5 );
    var_4 = scripts\engine\trace::ray_trace( var_3, var_3 - ( 0, 0, 100000 ) );
    var_3 = var_4["position"];
    var_5 = findclosestdroplocation( var_3 );

    if ( 0 )
    {
        debugsphereonlocation( var_1, ( 0, 0, 1 ), 100 );
        debugsphereonlocation( var_2, ( 0, 0, 1 ), 100 );
        debugsphereonlocation( var_3, ( 1, 0, 0 ), 100 );
        debugsphereonlocation( var_5.origin, ( 0, 1, 0 ), 100 );
        thread scripts\mp\utility\debug::drawline( var_3, var_5.origin, 3, ( 0, 1, 0 ) );
    }

    return var_5;
}

findclosestdroplocation( var_0 )
{
    var_1 = spawnstruct();
    var_1.origin = var_0;
    var_2 = var_1 scripts\engine\utility::array_sort_with_func( level.validdroplocationstruct.clusters, ::sortlocationsbydistance );

    foreach ( var_4 in var_2 )
    {
        var_5 = scripts\engine\utility::array_randomize( var_4.droplocations );

        if ( 0 )
            return var_5[0];
        else
        {
            foreach ( var_7 in var_5 )
            {
                if ( !var_7.inuse )
                {
                    var_7.inuse = 1;
                    return var_7;
                }
            }
        }
    }

    return undefined;
}

choosenukecratelocation()
{
    var_0 = randomfloatrange( level.mapsafecorners[1][0], level.mapsafecorners[0][0] );
    var_1 = randomfloatrange( level.mapsafecorners[1][1], level.mapsafecorners[0][1] );
    var_2 = ( var_0, var_1, 100000 );
    var_3 = scripts\engine\trace::ray_trace( var_2, var_2 - ( 0, 0, 100000 ) );
    var_2 = var_3["position"];
    var_4 = findclosestdroplocation( var_2 );

    if ( 0 )
    {
        debugsphereonlocation( var_2, ( 1, 0, 0 ), 100 );
        debugsphereonlocation( var_4.origin, ( 0, 1, 0 ), 100 );
        thread scripts\mp\utility\debug::drawline( var_2, var_4.origin, 3, ( 0, 1, 0 ) );
    }

    return var_4;
}

runkillstreakreward( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_3 = undefined;
    var_4 = scripts\mp\gameobjects::createobjidobject( var_0.origin, "neutral", ( 0, 0, 72 ), undefined, "any" );
    var_4.origin = var_0.origin;
    var_4.angles = var_0.angles;
    thread docratedropsmoke( undefined, var_0, 16 );
    var_4.iconname = "_incoming";
    var_4.lockupdatingicons = 0;
    var_4 scripts\mp\gameobjects::setobjectivestatusicons( var_2 );
    var_4.lockupdatingicons = 1;
    wait 4;
    var_3 = scripts\cp_mp\killstreaks\airdrop::droparmcratefromscriptedheli( var_1.team, var_2, var_0.origin, ( 0, randomint( 360 ), 0 ), undefined );
    var_3.skipminimapicon = 1;
    var_3.nevertimeout = 0;
    var_3.waitforobjectiveactivate = 1;
    var_3.killminimapicon = 0;
    var_3.disallowheadiconid = 1;
    var_3.isarmcrate = 1;
    var_3 waittill( "crate_dropped" );
    var_4.useobj = var_3;
    var_4.origin = var_3.origin;
    var_5 = 0;
    var_6 = 0.1;
    wait 1;
    var_3 notify( "objective_activate" );
    scripts\mp\objidpoolmanager::update_objective_onentity( var_4.objidnum, var_3 );
    scripts\mp\objidpoolmanager::update_objective_setzoffset( var_4.objidnum, 72 );
    var_4.iconname = "";
    var_4.lockupdatingicons = 0;
    var_4 scripts\mp\gameobjects::setobjectivestatusicons( var_2 );
    var_4.lockupdatingicons = 1;
    objective_setlabel( var_4.objidnum, "" );
    var_3 waittill( "death" );
    var_4 scripts\mp\gameobjects::setvisibleteam( "none" );
    var_4 scripts\mp\gameobjects::releaseid();
    var_4.visibleteam = "none";
}

getkillstreak( var_0 )
{
    if ( !isdefined( level.killstreaktierlist ) )
        processkillstreaksintotiers();

    level.killstreaktierlist[var_0] = scripts\engine\utility::array_randomize( level.killstreaktierlist[var_0] );
    return level.killstreaktierlist[var_0][0];
}

processkillstreaksintotiers()
{
    level.killstreaktierlist = [];
    level.killstreaktierlist[3] = [ "cruise_predator", "scrambler_drone_guard", "uav" ];
    level.killstreaktierlist[2] = [ "precision_airstrike", "multi_airstrike", "bradley" ];
    level.killstreaktierlist[1] = [ "toma_strike", "uav", "pac_sentry", "white_phosphorus" ];
    level.killstreaktierlist[0] = [ "uav" ];
}

br_getrewardicon( var_0 )
{
    return level.killstreakglobals.streaktable.tabledatabyref[var_0]["hudIcon"];
}

_id_11EEE()
{
    scripts\mp\flags::gameflagwait( "prematch_done" );

    if ( istrue( level.useobjectives ) )
        level thread _id_11EEF();
}

_id_11EEF()
{
    level endon( "game_ended" );
    level endon( "mercy_ending_timer_started" );

    for (;;)
    {
        if ( freeze_bomb_case_timer( "axis" ) == level.objectives.size )
            level thread _id_11EF6( "axis" );
        else if ( freeze_bomb_case_timer( "allies" ) == level.objectives.size )
            level thread _id_11EF6( "allies" );

        waitframe();
    }
}

_id_11EF6( var_0 )
{
    level notify( "mercy_ending_timer_started" );
    level endon( "mercy_ending_triggered" );
    setomnvar( "ui_arm_dominatingTeam", scripts\engine\utility::ter_op( var_0 == "axis", 1, 2 ) );
    _calloutmarkerping_handleluinotify_added::_id_13191( "ui_nuke_data", 9, 2, 1 );
    _calloutmarkerping_handleluinotify_added::_id_13191( "ui_nuke_data", 0, 9, level._id_11BD3 );
    _calloutmarkerping_handleluinotify_added::_id_13191( "ui_nuke_data", 11, 1, 1 );
    var_1 = 0;
    var_2 = gettime();
    var_3 = level._id_11BD3 * 1000 + var_2;
    setomnvar( "ui_nuke_end_milliseconds", level._id_11BD3 * 1000 + var_2 );

    while ( freeze_bomb_case_timer( var_0 ) == level.objectives.size )
    {
        waitframe();

        if ( gettime() > var_3 )
        {
            _id_11EF9( var_0 );
            level notify( "mercy_ending_triggered" );
        }
    }

    _calloutmarkerping_handleluinotify_added::_id_13191( "ui_nuke_data", 11, 1, 0 );
    level thread _id_11EEF();
}

_id_11EF9( var_0 )
{
    level endon( "game_ended" );
    level._id_11BD4 = 1;
    level.blocknukekills = 1;

    foreach ( var_2 in level.objectives )
        var_2 scripts\mp\gameobjects::allowuse( "none" );

    _calloutmarkerping_handleluinotify_added::_id_13191( "ui_nuke_data", 11, 1, 0 );

    foreach ( var_5 in level.players )
    {
        if ( isdefined( var_5 ) && !isbot( var_5 ) && istrue( var_5.inspawnselection ) )
        {
            if ( isdefined( var_5._id_12135 ) )
            {
                var_5 clearsoundsubmix( "iw8_mp_spawn_camera" );
                var_5._id_12135 stoploopsound( var_5._id_12136 );
                var_5._id_12135 delete();
                var_5._id_12135 = undefined;
                var_5._id_12136 = undefined;
            }
        }
    }

    if ( isdefined( level.teamdata[var_0]["alivePlayers"][0] ) )
    {
        var_7 = level.teamdata[var_0]["alivePlayers"][0];
        var_7 _calloutmarkerping_handleluinotify_acknowledged::tryusenuke();
    }
    else
        level thread scripts\mp\gamelogic::endgame( var_0, game["end_reason"]["mercy_win"], game["end_reason"]["mercy_loss"], 0, 1 );
}

nukeselectgimmewatcher( var_0 )
{
    if ( !istrue( var_0.hasnukeselectks ) )
    {
        var_1 = var_0.killcountthislife % level.killstoearnnukeselect;

        if ( var_1 >= 0 && var_0.killcountthislife >= level.killstoearnnukeselect )
        {
            var_0.hasnukeselectks = 1;
            var_0 thread scripts\mp\killstreaks\killstreaks::givekillstreak( "nuke_select_location", 0, 0, var_0 );
            var_0 scripts\mp\hud_message::showkillstreaksplash( "nuke_select_location", undefined, 1 );
        }
    }
}

initspawns( var_0 )
{
    level.gamemodestartspawnpointnames = [];

    if ( istrue( var_0 ) )
    {
        var_1 = "mp_gw_spawn_allies_start";
        var_2 = "mp_gw_spawn_axis_start";
        var_3 = scripts\mp\spawnlogic::getspawnpointarray( "mp_gw_spawn_allies_start_mod" );

        if ( var_3.size > 0 )
            var_1 = "mp_gw_spawn_allies_start_mod";

        var_4 = scripts\mp\spawnlogic::getspawnpointarray( "mp_gw_spawn_axis_start_mod" );

        if ( var_4.size > 0 )
            var_2 = "mp_gw_spawn_axis_start_mod";
    }
    else
    {
        var_1 = "mp_gw_spawn_allies_start";
        var_2 = "mp_gw_spawn_axis_start";
    }

    level.gamemodestartspawnpointnames["allies"] = var_1;
    level.gamemodestartspawnpointnames["axis"] = var_2;
    level.gamemodespawnpointnames = [];
    level.gamemodespawnpointnames["allies"] = "mp_tdm_spawn";
    level.gamemodespawnpointnames["axis"] = "mp_tdm_spawn";
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );

    if ( scripts\cp_mp\utility\game_utility::getmapname() == "mp_aniyah" )
        scripts\mp\spawnlogic::setactivespawnlogic( "GroundWarTTLOS", "Crit_Default" );
    else if ( scripts\cp_mp\utility\game_utility::islargemap() )
        scripts\mp\spawnlogic::setactivespawnlogic( "GroundWar", "Crit_Default" );
    else
        scripts\mp\spawnlogic::setactivespawnlogic( "Default", "Crit_Default" );

    scripts\mp\spawnlogic::addstartspawnpoints( var_1 );
    scripts\mp\spawnlogic::addstartspawnpoints( var_2 );
    scripts\mp\spawnlogic::addspawnpoints( game["attackers"], var_1 );
    scripts\mp\spawnlogic::addspawnpoints( game["defenders"], var_2 );
    var_5 = scripts\mp\spawnlogic::getspawnpointarray( var_1 );
    var_6 = scripts\mp\spawnlogic::getspawnpointarray( var_2 );
    scripts\mp\spawnlogic::registerspawnset( "start_attackers", var_5 );
    scripts\mp\spawnlogic::registerspawnset( "start_defenders", var_6 );
    scripts\mp\spawnlogic::addspawnpoints( "allies", "mp_tdm_spawn" );
    scripts\mp\spawnlogic::addspawnpoints( "axis", "mp_tdm_spawn" );
    scripts\mp\spawnlogic::addspawnpoints( "allies", "mp_tdm_spawn_secondary", 1, 1 );
    scripts\mp\spawnlogic::addspawnpoints( "axis", "mp_tdm_spawn_secondary", 1, 1 );
    var_7 = scripts\mp\spawnlogic::getspawnpointarray( "mp_tdm_spawn" );
    var_8 = scripts\mp\spawnlogic::getspawnpointarray( "mp_tdm_spawn_secondary" );
    scripts\mp\spawnlogic::registerspawnset( "normal", var_7 );
    scripts\mp\spawnlogic::registerspawnset( "fallback", var_8 );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
    level.spawnpoints = var_7;
}

calculatespawndisttozones( var_0 )
{
    var_0.scriptdata.distsqtokothzones = [];

    foreach ( var_2 in level.objectives )
    {
        var_3 = getpathdist( var_0.origin, var_2.origin, 5000 );

        if ( var_3 < 0 )
            var_3 = scripts\engine\utility::distance_2d_squared( var_0.origin, var_2.origin );
        else
            var_3 = var_3 * var_3;

        var_0.scriptdata.distsqtokothzones[var_2 getentitynumber()] = var_3;

        if ( var_3 > var_2.furthestspawndistsq )
            var_2.furthestspawndistsq = var_3;
    }
}

getspawnpoint()
{
    var_0 = self.pers["team"];

    if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
    {
        if ( var_0 == game["attackers"] )
        {
            scripts\mp\spawnlogic::activatespawnset( "start_attackers", 1 );
            var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "start_attackers" );
        }
        else
        {
            scripts\mp\spawnlogic::activatespawnset( "start_defenders", 1 );
            var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "start_defenders" );
        }
    }
    else
    {
        scripts\mp\spawnlogic::activatespawnset( "normal", 1 );
        var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "fallback" );
    }

    if ( istrue( level.usesquadspawn ) && istrue( self.squadspawnconfirmed ) )
    {
        var_2 = self getspectatingplayer();

        if ( isdefined( var_2 ) && isdefined( self.squadindex ) && self.team == var_2.team && self.squadindex == var_2.squadindex )
            var_1 = scripts\mp\spawnscoring::findteammatebuddyspawn( var_2 );
    }

    return var_1;
}

onspawnplayer()
{
    self.forcespawnnearteammates = undefined;
    thread updatematchstatushintonspawn();
    scripts\mp\menus::updatesquadomnvars( self.team, self.squadindex );
}

updatematchstatushintonspawn()
{
    level endon( "game_ended" );

    if ( isdefined( level.nukeprogress ) )
        self setclientomnvar( "ui_match_status_hint_text", 28 );
    else
        self setclientomnvar( "ui_match_status_hint_text", 27 );
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    scripts\mp\menus::updatesquadomnvars( self.team, self.squadindex );
    scripts\mp\gametypes\obj_dom.gsc::awardgenericmedals( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );

    if ( level.nukeselectactive && isplayer( var_1 ) && var_3 != "MOD_SUICIDE" )
    {
        if ( !isdefined( var_1.killcountthislife ) )
            var_1.killcountthislife = 0;

        if ( !istrue( var_1.hasnukeselectks ) )
            var_1.killcountthislife++;

        nukeselectgimmewatcher( var_1 );
    }

    if ( !isdefined( level.c130pathkilltracker ) || level.c130movementmethod != 1 )
        return;

    level.c130pathkilltracker[self.team] = level.c130pathkilltracker[self.team] + 1;
}

managedroppedents( var_0 )
{
    if ( !isdefined( level.br_droppedloot ) )
        level.br_droppedloot = [];

    if ( level.br_droppedloot.size > 64 )
    {
        for ( var_1 = 0; var_1 < 16; var_1++ )
        {
            if ( isdefined( level.br_droppedloot[var_1] ) )
            {
                level.br_droppedloot[var_1] delete();
                level.br_droppedloot[var_1] = undefined;
            }
        }

        var_2 = [];

        for ( var_1 = 16; var_1 < level.br_droppedloot.size; var_1++ )
            var_2[var_1 - 16] = level.br_droppedloot[var_1];

        level.br_droppedloot = var_2;
    }

    foreach ( var_4 in var_0 )
        level.br_droppedloot[level.br_droppedloot.size] = var_4;

    if ( !isdefined( level.br_pickups.droppeditems ) )
        level.br_pickups.droppeditems = [];

    if ( level.br_pickups.droppeditems.size > 64 )
    {
        for ( var_1 = 0; var_1 < 16; var_1++ )
        {
            if ( isdefined( level.br_pickups.droppeditems[var_1] ) )
            {
                level.br_pickups.droppeditems[var_1] delete();
                level.br_pickups.droppeditems[var_1] = undefined;
            }
        }

        var_2 = [];

        for ( var_1 = 16; var_1 < level.br_pickups.droppeditems.size; var_1++ )
            var_2[var_1 - 16] = level.br_pickups.droppeditems[var_1];

        level.br_pickups.droppeditems = var_2;
    }
}

onplayerconnect( var_0 )
{
    if ( isdefined( level.rallypointvehicles ) )
        thread scripts\mp\rally_point::rallypoint_showtoplayer( var_0 );

    if ( istrue( level._id_1408C ) )
        var_0 scripts\cp\vehicles\little_bird_mg_cp::calloutmarkerping_initplayer();

    scripts\mp\utility\disconnect_event_aggregator::registerondisconnecteventcallback( ::onplayerdisconnect );
}

onplayerdisconnect( var_0 )
{
    thread scripts\mp\spawnselection::_id_12ACB( var_0.team, var_0.squadindex );
}

updategamemodespawncamera()
{
    var_0 = "lane02_4";

    if ( isdefined( level.activezone ) )
        var_0 = level.activezone.zonetrigger.script_label;

    scripts\mp\spawncamera::setgamemodecamera( "allies", level.spawncameras[var_0]["allies"] );
    scripts\mp\spawncamera::setgamemodecamera( "axis", level.spawncameras[var_0]["axis"] );
}

debugdrawtocameras()
{
    for (;;)
    {
        wait 0.25;

        if ( !isdefined( level.players[0] ) )
            continue;

        foreach ( var_5, var_1 in level.spawncameras )
        {
            foreach ( var_4, var_3 in var_1 )
            {
                thread scripts\mp\utility\debug::drawangles( var_3.origin, var_3.angles, 0.25, 50 );
                thread scripts\mp\utility\debug::drawsphere( var_3.origin, 50.0, 0.25, scripts\engine\utility::ter_op( var_4 == "allies", ( 0, 0, 1 ), ( 1, 0, 0 ) ) );
            }
        }
    }
}

onplayerspawned( var_0 )
{
    for (;;)
        var_0 waittill( "spawned" );
}

getownerteamplayer( var_0 )
{
    var_1 = undefined;

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == var_0 )
        {
            var_1 = var_3;
            break;
        }
    }

    return var_1;
}

getrespawndelay()
{
    self.spawncameraskipthermal = 0;
    return undefined;
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    scripts\mp\gametypes\common.gsc::oncommonnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 );
}

initspecatatorcameras()
{
    level.spectatorcameras = [];
    level.currentspectatorcamref = "cop_2";
    var_0 = scripts\engine\utility::getstructarray( "tac_ops_map_config", "targetname" );

    foreach ( var_2 in var_0 )
    {
        var_3 = var_2.script_noteworthy;
        var_4 = scripts\engine\utility::getstructarray( var_2.target, "targetname" );

        foreach ( var_6 in var_4 )
        {
            switch ( var_6.script_label )
            {
                case "to_allies_camera":
                    setteammapposition( var_3, "allies", var_6 );
                    break;
                case "to_axis_camera":
                    setteammapposition( var_3, "axis", var_6 );
                    break;
            }
        }
    }
}

setteammapposition( var_0, var_1, var_2 )
{
    if ( !isdefined( level.spectatorcameras[var_0] ) )
        level.spectatorcameras[var_0] = [];

    level.spectatorcameras[var_0][var_1] = var_2;
}

applythermal()
{
    self visionsetthermalforplayer( "proto_apache_flir_mp" );
    self thermalvisionon();
}

removethermal()
{
    self thermalvisionoff();
}

startspectatorview()
{
    if ( scripts\mp\utility\game::isteamreviveenabled() )
        return;

    waitframe();
    scripts\mp\utility\player::updatesessionstate( "spectator" );
    scripts\mp\spectating::setdisabled();

    if ( isdefined( self.lastdeathangles ) )
        self setplayerangles( self.lastdeathangles );

    wait 0.1;
    scripts\mp\utility\player::setdof_default();
    var_0 = 0;
    var_1 = undefined;
    var_2 = ( 0, 0, 0 );
    var_3 = 1000;
    var_4 = self.origin + ( 0, 0, var_3 );
    var_5 = self.angles;
    self.deathspectatepos = var_4;
    self.deathspectateangles = var_5;
    var_6 = spawn( "script_model", self getvieworigin() );
    var_6 setmodel( "tag_origin" );
    var_6.angles = var_5;
    self.spectatorcament = var_6;
    self.isusingtacopsmapcamera = 1;
    self cameralinkto( var_6, "tag_origin", 1 );
    thread dohalfwayflash();
    var_6 movecameratomappos( self, var_4, var_5 );
}

dohalfwayflash()
{
    wait 0.4;
    thread playslamzoomflash();
    applythermal();
}

endspectatorview()
{
    if ( !isdefined( self.spectatorcament ) )
        return;

    removethermal();
    thread runslamzoomonspawn();
}

movecameratomappos( var_0, var_1, var_2 )
{
    var_0 endon( "spawned_player" );
    var_3 = 1.0;
    var_4 = 1.0;
    self moveto( var_1, 2.0, 1.0, 1.0 );
    var_0 playlocalsound( "mp_cmd_camera_zoom_out" );
    var_0 setclienttriggeraudiozonepartialwithfade( "spawn_cam", 0.5, "mix" );
    self rotateto( var_2, 2.0, 1.0, 1.0 );
    wait 1.1;
    var_5 = anglestoforward( var_2 ) * 300;
    var_5 = var_5 * ( 1, 1, 0 );

    if ( isdefined( var_0 ) && isdefined( var_0.spectatorcament ) )
    {
        self moveto( var_1 + var_5, 15.0, 1.0, 1.0 );
        var_0 earthquakeforplayer( 0.03, 15.0, var_1 + var_5, 1000 );
    }
}

runslamzoomonspawn()
{
    self waittill( "spawned_player" );
    var_0 = self geteye();
    var_1 = self.angles;
    scripts\mp\utility\player::updatesessionstate( "spectator" );
    self cameralinkto( self.spectatorcament, "tag_origin", 1 );
    self visionsetnakedforplayer( "tac_ops_slamzoom", 0.2 );
    self.spectatorcament moveto( var_0, 0.5 );
    self playlocalsound( "mp_cmd_camera_zoom_in" );
    self clearclienttriggeraudiozone( 0.5 );
    self.spectatorcament rotateto( var_1, 0.5, 0.5 );
    wait 0.5;

    if ( !isdefined( self ) )
        return;

    self visionsetnakedforplayer( "", 0 );
    thread playslamzoomflash();
    scripts\mp\utility\player::updatesessionstate( "playing" );
    self cameraunlink();
    self.spectatorcament delete();
}

playslamzoomflash()
{
    var_0 = newclienthudelem( self );
    var_0.x = 0;
    var_0.y = 0;
    var_0.alignx = "left";
    var_0.aligny = "top";
    var_0.sort = 1;
    var_0.horzalign = "fullscreen";
    var_0.vertalign = "fullscreen";
    var_0.alpha = 1;
    var_0.foreground = 1;
    var_0 setshader( "white", 640, 480 );
    var_0 fadeovertime( 0.4 );
    var_0.alpha = 0.0;
    wait 0.4;
    var_0 destroy();
}

arm_playstatusdialog( var_0, var_1 )
{
    var_2 = "dx_mpa_ustl_" + var_0;
    var_2 = tolower( var_2 );
    var_3 = undefined;

    if ( var_1 == "bothTeams" )
    {
        var_4 = scripts\mp\utility\teams::getteamdata( "axis", "players" );
        var_5 = scripts\mp\utility\teams::getteamdata( "allies", "players" );
        var_3 = scripts\engine\utility::array_combine( var_4, var_5 );
    }
    else if ( var_1 == "axis" || var_1 == "allies" )
        var_3 = scripts\mp\utility\teams::getteamdata( var_1, "players" );

    foreach ( var_7 in var_3 )
    {
        if ( !isbot( var_7 ) )
            var_7 arm_leaderdialogonplayer_internal( var_2, var_0 );
    }
}

arm_playstatusdialogonplayer( var_0 )
{
    var_1 = "dx_mpa_ustl_announcer_" + var_0;
    var_1 = tolower( var_1 );
    arm_leaderdialogonplayer_internal( var_1, var_0 );
}

arm_leaderdialogonplayer_internal( var_0, var_1 )
{
    if ( isdefined( self.playerlastdialogstatus ) )
    {
        var_2 = 5000;

        if ( gettime() < self.playerlastdialogstatus["time"] + var_2 && self.playerlastdialogstatus["dialog"] == var_1 )
            return;

        self.playerlastdialogstatus["time"] = gettime();
        self.playerlastdialogstatus["dialog"] = var_1;
    }

    if ( soundexists( var_0 ) )
        self queuedialogforplayer( var_0, var_1, 2 );
}

managec130spawns()
{
    level endon( "game_ended" );
    var_0 = 6000;
    var_1 = 12000;
    var_2 = 20000;
    var_3 = 1;
    var_4 = ( 0, 0, 6000 );
    level.timebetweenc130passes = 0;
    level.flighttime = 20;
    level.spawnc130 = [];

    foreach ( var_6 in level.teamnamelist )
        level.spawnc130[var_6] = undefined;

    c130_pickrandomflightpath();
    level.spawnc130["axis"] = createc130( "axis", level.c130pathstruct_a.startpt + var_4 );
    level.spawnc130["allies"] = createc130( "allies", level.c130pathstruct_b.startpt + var_4 );

    while ( !isdefined( level.spawnselectionlocations ) )
        waitframe();

    scripts\mp\flags::gameflagwait( "prematch_done" );

    for (;;)
    {
        if ( !isdefined( level.timeuntilnextc130 ) )
            level.timeuntilnextc130 = [];

        if ( !isdefined( level.timeuntilnextc130["axis"] ) )
            level.timeuntilnextc130["axis"] = 0;

        if ( !isdefined( level.timeuntilnextc130["allies"] ) )
            level.timeuntilnextc130["allies"] = 0;

        var_8 = gettime() + ( level.flighttime + level.timebetweenc130passes ) * 1000;
        level.timeuntilnextc130["axis"] = var_8;
        level.timeuntilnextc130["allies"] = var_8;

        if ( 0 )
        {
            thread scripts\mp\utility\debug::drawline( level.c130pathstruct_a.startpt, level.c130pathstruct_a.endpt, 1000, ( 1, 0, 0 ) );
            thread scripts\mp\utility\debug::drawline( level.c130pathstruct_b.startpt, level.c130pathstruct_b.endpt, 1000, ( 0, 0, 1 ) );
        }

        if ( var_3 )
        {
            level.spawnc130["axis"] thread handlec130motion( level.c130pathstruct_a.startpt + var_4, level.c130pathstruct_a.endpt + var_4, level.flighttime, "axis" );
            level.spawnc130["allies"] thread handlec130motion( level.c130pathstruct_b.startpt + var_4, level.c130pathstruct_b.endpt + var_4, level.flighttime, "allies" );
        }
        else
        {
            level.spawnc130["axis"] thread handlec130motion( level.c130pathstruct_a.startpt, level.c130pathstruct_a.endpt, level.flighttime, "axis" );
            level.spawnc130["allies"] thread handlec130motion( level.c130pathstruct_b.startpt, level.c130pathstruct_b.endpt, level.flighttime, "allies" );
        }

        level.c130firstpassstarted = 1;
        level scripts\engine\utility::waittill_all_in_array( [ "C130_path_complete_axis", "C130_path_complete_allies" ] );
        c130_fightpathmove();
        var_9 = level.c130pathstruct_a.startpt;
        level.c130pathstruct_a.startpt = level.c130pathstruct_a.endpt;
        level.c130pathstruct_a.endpt = var_9;
        var_9 = level.c130pathstruct_b.startpt;
        level.c130pathstruct_b.startpt = level.c130pathstruct_b.endpt;
        level.c130pathstruct_b.endpt = var_9;
        var_3 = 0;

        if ( istrue( level.usec130spawnfirstonly ) )
        {
            level.usec130spawn = 0;
            break;
        }
    }

    scripts\mp\spawnselection::removedynamicspawnarea( "axis", "dynamic_c130" );
    scripts\mp\spawnselection::removedynamicspawnarea( "allies", "dynamic_c130" );
    scripts\mp\spawnselection::removespawnlocation( "dynamic_c130", "axis" );
    scripts\mp\spawnselection::removespawnlocation( "dynamic_c130", "allies" );
    level.spawnc130["axis"] delete();
    level.spawnc130["allies"] delete();
}

createc130( var_0, var_1 )
{
    var_2 = spawn( "script_model", var_1 );
    var_2 setmodel( "veh8_mil_air_acharlie130" );
    var_2 setcandamage( 0 );
    var_2.maxhealth = 100000;
    var_2.health = var_2.maxhealth;
    var_2.playeroffsets = [ ( 32, 30, 0 ), ( -32, 30, 0 ), ( 0, 30, 0 ), ( 16, 30, 0 ), ( -16, 30, 0 ) ];
    var_2.currentplayeroffset = 0;
    var_2.respawnqueue = [];
    var_2.players = [];
    var_2.team = var_0;
    var_2 playloopsound( "iw8_ks_ac130_lp" );
    var_2 thread scripts\mp\gametypes\br_public.gsc::gunship_spawnvfx();
    return var_2;
}

handlec130motion( var_0, var_1, var_2, var_3 )
{
    var_4 = vectornormalize( var_1 - var_0 );
    var_5 = distance( var_1, var_0 );
    var_6 = var_0 + var_4 * var_5 * 0.425;
    var_7 = var_0 + var_4 * var_5 * 0.55;
    var_8 = var_2 * 0.3;
    var_9 = var_2 * 0.6;
    var_10 = var_2 * 0.1;
    self.canjoin = 1;
    self.canparachute = 0;
    var_11 = vectornormalize( var_1 - var_0 );
    self.angles = vectortoangles( var_11 );
    self.origin = var_0;
    gatherc130playerstospawn();
    self moveto( var_1, var_8 + var_9 + var_10, var_8 * 0.25 );
    wait( var_8 );
    self.canparachute = 1;

    foreach ( var_13 in self.players )
        var_13 notify( "canParachute" );

    wait( var_9 );
    self.canjoin = 0;
    self.canparachute = 0;

    foreach ( var_13 in self.players )
        var_13 notify( "halo_kick_c130" );

    wait( var_10 );
    level notify( "C130_path_complete_" + var_3 );
}

gatherc130playerstospawn()
{
    self.players = scripts\engine\utility::array_combine( self.players, self.respawnqueue );
    self.respawnqueue = [];
    var_0 = 1400;
    var_1 = ( 30, 0, 0 );
    var_2 = anglestoforward( var_1 ) * var_0 * -1;
    var_3 = self gettagorigin( "tag_origin" ) + var_2;
    var_4 = self.angles;

    foreach ( var_6 in self.players )
    {
        if ( !isdefined( var_6 ) )
            continue;

        var_6.forcespawncameraorg = var_3;
        var_6.forcespawncameraang = var_4;
        var_6 notify( "c130_ready" );
    }
}

removefromspawnselectionaftertime( var_0 )
{
    wait( var_0 );
    removefromspawnselection();
}

removefromspawnselection()
{
    scripts\mp\spawnselection::removedynamicspawnarea( self.team, "dynamic_c130" );
    scripts\mp\spawnselection::removespawnlocation( "dynamic_c130", self.team );
}

spawnplayertoc130()
{
    self endon( "disconnect" );

    if ( !isdefined( level.spawnc130[self.team] ) )
        return;

    self waittill( "spawn_camera_idle" );
    var_0 = level.spawnc130[self.team];
    var_0.respawnqueue[var_0.respawnqueue.size] = self;

    if ( istrue( var_0.canjoin ) )
        var_0 gatherc130playerstospawn();

    if ( istrue( self.inspawncamera ) )
        self waittill( "spawn_camera_complete" );
    else
        self waittill( "spawned_player" );

    scripts\common\utility::allow_killstreaks( 0 );
    self disableusability();
    self disableoffhandweapons();
    self allowmelee( 0 );
    self allowads( 0 );
    self allowfire( 0 );
    self setcandamage( 0 );
    thread jumplistener( var_0, 0 );
    self.br_infil_type = "c130";

    if ( !isbot( self ) )
        thread scripts\mp\gametypes\br_public.gsc::orbitcam( var_0 );
}

jumplistener( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self notify( "jumpListener()" );
    self endon( "jumpListener()" );

    if ( isdefined( self.parachute ) )
        self.parachute delete();

    scripts\mp\utility\game::_id_131A3( self, 1 );
    thread listenjump( var_0, var_1 );
    thread listenkick( var_0, var_1 );
}

listenkick( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "br_jump" );
    self notify( "listenKick()" );
    self endon( "listenKick()" );
    self waittill( "halo_kick_c130" );
    self cameradefault();
    self unlink();
    wait 0.1;

    if ( self.sessionstate == "spectator" )
        return;

    var_2 = var_0 scripts\mp\gametypes\br_public.gsc::calctrailpoint();
    thread parachute( var_0, var_1 );
    self notify( "br_jump" );
    self notify( "stop_cam_shake" );
}

listenjump( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "br_jump" );
    self notify( "listenJump()" );
    self endon( "listenJump()" );
    self notifyonplayercommand( "halo_jump_c130", "+gostand" );

    for (;;)
    {
        var_2 = scripts\engine\utility::waittill_either( "halo_jump_c130", "canParachute" );

        if ( isdefined( var_2 ) && var_2 == "canParachute" )
            self iprintlnbold( "Press Jump to Parachute!" );
        else if ( !istrue( var_0.canparachute ) )
            self iprintlnbold( "Not over the AO" );
        else
            break;

        if ( self.sessionstate == "spectator" )
            return;
    }

    self cameradefault();
    self unlink();
    wait 0.1;
    thread parachute( var_0, var_1 );
    self notify( "br_jump" );
    self notify( "stop_cam_shake" );
}

parachute( var_0, var_1 )
{
    self endon( "jumpListener()" );
    self notify( "parachute()" );
    self endon( "parachute()" );

    if ( self.team == "axis" )
        var_2 = level.c130pathstruct_b.midpt;
    else
        var_2 = level.c130pathstruct_a.midpt;

    var_3 = vectornormalize( var_2 - var_0.origin );
    var_0.players = scripts\engine\utility::array_remove( var_0.players, self );

    if ( isdefined( var_0.playeroffsets ) && isdefined( var_0.currentplayeroffset ) )
    {
        var_4 = var_0.playeroffsets[var_0.currentplayeroffset];
        self setorigin( var_0.origin + var_4, 1, 1 );
        var_0.currentplayeroffset++;

        if ( var_0.currentplayeroffset == var_0.playeroffsets.size )
            var_0.currentplayeroffset = 0;
    }
    else
    {
        var_5 = anglestoforward( var_0.angles ) * var_0.br_vieworigin;
        self setorigin( var_0.origin + var_5, 1, 1 );
    }

    waitframe();
    self playershow();
    self.plotarmor = 0;
    scripts\mp\utility\game::_id_131A3( self, 0 );
    self setplayerangles( vectortoangles( var_3 ) );
    thread scripts\cp_mp\parachute::startfreefall( 5.0, 0 );
}

debug_randomflightpathstest()
{
    wait 10;

    for (;;)
    {
        c130_pickrandomflightpath();
        level.c130pathstruct_a.startpt = level.c130pathstruct_a.startpt - ( 0, 0, 10000 );
        level.c130pathstruct_a.endpt = level.c130pathstruct_a.endpt - ( 0, 0, 10000 );
        level.c130pathstruct_b.startpt = level.c130pathstruct_b.startpt - ( 0, 0, 10000 );
        level.c130pathstruct_b.endpt = level.c130pathstruct_b.endpt - ( 0, 0, 10000 );
        thread scripts\mp\utility\debug::drawline( level.c130pathstruct_a.startpt, level.c130pathstruct_a.endpt, 1, ( 1, 0, 1 ) );
        thread scripts\mp\utility\debug::drawline( level.c130pathstruct_b.startpt, level.c130pathstruct_b.endpt, 1, ( 1, 0, 1 ) );
        wait 1;
    }
}

c130_pickrandomflightpath()
{
    if ( istrue( level.c130alignedtolocale ) && istrue( level.useobjectives ) )
    {
        var_0 = ( level.gw_objstruct.axishqloc.trigger.origin + level.gw_objstruct.allieshqloc.trigger.origin ) * 0.5;
        var_1 = vectortoangles( level.gw_objstruct.axishqloc.trigger.origin - level.gw_objstruct.allieshqloc.trigger.origin );
        var_2 = var_1[1];

        if ( 0 )
            debugsphereonlocation( var_0, ( 0, 1, 0 ), 100000 );
    }
    else
    {
        var_0 = ( level.mapsafecorners[0] + level.mapsafecorners[1] ) * 0.5;
        var_2 = randomfloatrange( 0, 359 );
    }

    var_3 = makec130pathparamsstruct( var_0, var_2 - 90 );
    level.c130pathstruct_a = scripts\mp\gametypes\br_public.gsc::makepathstruct( var_3 );
    var_3.randomangle = var_3.randomangle + 180;
    level.c130pathstruct_b = scripts\mp\gametypes\br_public.gsc::makepathstruct( var_3 );
    var_4 = 0.2;
    var_5 = 0;
    var_6 = 0;

    if ( istrue( level.c130spacing_usebigmapsettings ) )
    {
        var_4 = 0.1;
        var_5 = randomfloatrange( -5000.0, 5000 );
        var_6 = randomfloatrange( -5000.0, 5000 );
    }

    var_7 = anglestoright( level.c130pathstruct_a.angle );
    level.c130pathstruct_a.startpt = var_7 * level.c130distapart + level.c130pathstruct_a.startpt;
    level.c130pathstruct_a.endpt = var_7 * level.c130distapart + level.c130pathstruct_a.endpt;
    var_7 = anglestoright( level.c130pathstruct_b.angle );
    level.c130pathstruct_b.startpt = var_7 * level.c130distapart + level.c130pathstruct_b.startpt;
    level.c130pathstruct_b.endpt = var_7 * level.c130distapart + level.c130pathstruct_b.endpt;
    var_8 = ( var_5, var_6, 0 );
    level.c130pathstruct_a.startpt = level.c130pathstruct_a.startpt + var_8;
    level.c130pathstruct_a.endpt = level.c130pathstruct_a.endpt + var_8;
    level.c130pathstruct_a.midpt = vectorlerp( level.c130pathstruct_a.startpt, level.c130pathstruct_a.endpt, 0.5 );
    level.c130pathstruct_b.startpt = level.c130pathstruct_b.startpt + var_8;
    level.c130pathstruct_b.endpt = level.c130pathstruct_b.endpt + var_8;
    level.c130pathstruct_b.midpt = vectorlerp( level.c130pathstruct_b.startpt, level.c130pathstruct_b.endpt, 0.5 );
    level.battlecenter = vectorlerp( level.c130pathstruct_a.midpt, level.c130pathstruct_b.midpt, 0.5 );
    level.c130minpathmovementinterval = vectorlerp( level.c130pathstruct_a.startpt, level.c130pathstruct_b.endpt, var_4 );
    level.c130minpathmovementinterval = level.c130minpathmovementinterval - level.c130pathstruct_a.startpt;
    level.c130minpathmovementinterval = vectornormalize( level.c130minpathmovementinterval ) * level.c130distapart / 10;
    level.c130minpathmovementinterval = ( level.c130minpathmovementinterval[0], level.c130minpathmovementinterval[1], 0 );
}

makec130pathparamsstruct( var_0, var_1 )
{
    var_2 = 6.28318;
    var_3 = var_1;
    var_4 = 180;
    var_5 = level.c130flightdist;
    var_6 = spawnstruct();
    var_6.r = var_5;
    var_6.randomangle = var_3;
    var_6.endangleoffset = var_4;
    var_6.centerpt = var_0;
    return var_6;
}

c130_fightpathmove()
{
    if ( 0 )
        level.c130movementmethod = 2;

    if ( level.c130movementmethod == 0 )
        return;
    else if ( level.c130movementmethod == 1 )
    {
        if ( 0 )
        {
            level.c130pathkilltracker["axis"] = 1;
            level.c130pathkilltracker["allies"] = 0;
        }

        if ( level.c130pathkilltracker["axis"] > level.c130pathkilltracker["allies"] )
        {
            if ( arenextpathsinsafebounds( level.c130minpathmovementinterval ) )
            {
                level.c130pathstruct_a.startpt = level.c130pathstruct_a.startpt + level.c130minpathmovementinterval;
                level.c130pathstruct_a.endpt = level.c130pathstruct_a.endpt + level.c130minpathmovementinterval;
                level.c130pathstruct_b.startpt = level.c130pathstruct_b.startpt + level.c130minpathmovementinterval;
                level.c130pathstruct_b.endpt = level.c130pathstruct_b.endpt + level.c130minpathmovementinterval;
            }
        }
        else if ( arenextpathsinsafebounds( level.c130minpathmovementinterval * -1.0 ) )
        {
            level.c130pathstruct_a.startpt = level.c130pathstruct_a.startpt - level.c130minpathmovementinterval;
            level.c130pathstruct_a.endpt = level.c130pathstruct_a.endpt - level.c130minpathmovementinterval;
            level.c130pathstruct_b.startpt = level.c130pathstruct_b.startpt - level.c130minpathmovementinterval;
            level.c130pathstruct_b.endpt = level.c130pathstruct_b.endpt - level.c130minpathmovementinterval;
        }

        level.c130pathstruct_a.midpt = vectorlerp( level.c130pathstruct_a.startpt, level.c130pathstruct_a.endpt, 0.5 );
        level.c130pathstruct_b.midpt = vectorlerp( level.c130pathstruct_b.startpt, level.c130pathstruct_b.endpt, 0.5 );
        level.c130pathkilltracker["axis"] = 0;
        level.c130pathkilltracker["allies"] = 0;
    }
    else if ( level.c130movementmethod == 2 )
    {
        var_0 = ( 0, 0, 0 );
        var_1 = ( 0, 0, 0 );
        var_2 = 0;
        var_3 = 0;

        foreach ( var_5 in level.players )
        {
            if ( isalive( var_5 ) )
            {
                if ( var_5.team == "axis" )
                {
                    var_0 = var_0 + var_5.origin;
                    var_2++;
                    continue;
                }

                if ( var_5.team == "allies" )
                {
                    var_1 = var_1 + var_5.origin;
                    var_3++;
                }
            }
        }

        if ( var_2 == 0 || var_3 == 0 )
            return;

        var_7 = var_0 / var_2;
        var_8 = var_1 / var_3;
        var_9 = vectorlerp( var_7, var_8, 0.5 );
        level.c130minpathmovementinterval = vectorlerp( level.battlecenter, var_9, 0.5 );
        level.c130minpathmovementinterval = level.c130minpathmovementinterval - level.battlecenter;
        var_10 = distance2d( level.battlecenter, var_9 );
        level.c130minpathmovementinterval = vectornormalize( level.c130minpathmovementinterval ) * var_10 / 4;
        level.c130minpathmovementinterval = ( level.c130minpathmovementinterval[0], level.c130minpathmovementinterval[1], 0 );

        if ( arenextpathsinsafebounds( level.c130minpathmovementinterval ) )
        {
            level.c130pathstruct_a.startpt = level.c130pathstruct_a.startpt + level.c130minpathmovementinterval;
            level.c130pathstruct_a.endpt = level.c130pathstruct_a.endpt + level.c130minpathmovementinterval;
            level.c130pathstruct_a.midpt = vectorlerp( level.c130pathstruct_a.startpt, level.c130pathstruct_a.endpt, 0.5 );
            level.c130pathstruct_b.startpt = level.c130pathstruct_b.startpt + level.c130minpathmovementinterval;
            level.c130pathstruct_b.endpt = level.c130pathstruct_b.endpt + level.c130minpathmovementinterval;
            level.c130pathstruct_b.midpt = vectorlerp( level.c130pathstruct_b.startpt, level.c130pathstruct_b.endpt, 0.5 );

            if ( 0 )
            {
                debugsphereonlocation( level.battlecenter, ( 1, 0, 0 ), 700 );
                debugsphereonlocation( var_9, ( 0, 1, 0 ), 700 );
            }

            level.battlecenter = level.battlecenter + level.c130minpathmovementinterval;
        }
    }
}

arenextpathsinsafebounds( var_0 )
{
    return ispointinsafebounds( level.c130pathstruct_a.startpt + var_0 ) && ispointinsafebounds( level.c130pathstruct_a.endpt + var_0 ) && ispointinsafebounds( level.c130pathstruct_b.startpt + var_0 ) && ispointinsafebounds( level.c130pathstruct_b.endpt + var_0 );
}

ispointinsafebounds( var_0 )
{
    return var_0[0] < level.mapsafecorners[0][0] && var_0[0] > level.mapsafecorners[1][0] && var_0[1] < level.mapsafecorners[0][1] && var_0[1] > level.mapsafecorners[1][1];
}

registervehicletype( var_0, var_1, var_2 )
{
    var_3 = spawnstruct();
    var_3.refname = var_0;
    var_3.spawncallback = var_2;
    var_3.vehiclespawns = [[ var_1 ]]();

    if ( !isdefined( level.vehicleinfo ) )
        level.vehicleinfo = [];

    level.vehicleinfo[var_0] = var_3;
}

init_groundwarvehicles()
{
    level.ignorevehicletypeinstancelimit = 1;
    registervehicletype( "technical", scripts\cp_mp\vehicles\technical::technical_getspawnstructscallback, ::vehiclespawn_truck );
    registervehicletype( "little_bird", scripts\cp_mp\vehicles\little_bird::little_bird_getspawnstructscallback, ::vehiclespawn_littlebird );
    registervehicletype( "little_bird_mg", _calloutmarkerping_poolidisdanger::x1stash_detectplayers, ::_id_14266 );
    registervehicletype( "cop_car", scripts\cp_mp\vehicles\cop_car::cop_car_getspawnstructscallback, ::vehiclespawn_copcar );
    registervehicletype( "atv", scripts\cp_mp\vehicles\atv::atv_getspawnstructscallback, ::vehiclespawn_atv );
    registervehicletype( "cargo_truck", scripts\cp_mp\vehicles\cargo_truck::cargo_truck_getspawnstructscallback, ::vehiclespawn_cargotruck );
    registervehicletype( "hoopty", scripts\cp_mp\vehicles\hoopty::hoopty_getspawnstructscallback, ::vehiclespawn_hoopty );
    registervehicletype( "hoopty_truck", scripts\cp_mp\vehicles\hoopty_truck::hoopty_truck_getspawnstructscallback, ::vehiclespawn_hooptytruck );
    registervehicletype( "jeep", scripts\cp_mp\vehicles\jeep::jeep_getspawnstructscallback, ::vehiclespawn_jeep );
    registervehicletype( "large_transport", scripts\cp_mp\vehicles\large_transport::large_transport_getspawnstructscallback, ::vehiclespawn_largetransport );
    registervehicletype( "medium_transport", scripts\cp_mp\vehicles\med_transport::med_transport_getspawnstructscallback, ::vehiclespawn_medtransport );
    registervehicletype( "pickup_truck", scripts\cp_mp\vehicles\pickup_truck::pickup_truck_getspawnstructscallback, ::vehiclespawn_pickuptruck );
    registervehicletype( "tac_rover", scripts\cp_mp\vehicles\tac_rover::tac_rover_getspawnstructscallback, ::vehiclespawn_tacrover );
    registervehicletype( "van", scripts\cp_mp\vehicles\van::van_getspawnstructscallback, ::vehiclespawn_van );
    registervehicletype( "light_tank", scripts\cp_mp\vehicles\light_tank::light_tank_getspawnstructscallback, ::vehiclespawn_tank );
    level.vehiclespawnlocs = [];
    level.tankspawnlocs_axis = [];
    level.tankspawnlocs_allies = [];

    foreach ( var_1 in level.vehicleinfo )
    {
        if ( var_1.refname == "light_tank" && level.mapname == "mp_downtown_gw" && level.localeid == "locale_6" )
        {
            var_2 = [];
            var_3 = [];
            var_2[0] = ( 17465, -21971, -150 );
            var_3[0] = ( 10, 90, 0 );
            var_2[1] = ( 16460, -22045, -150 );
            var_3[1] = ( 358, 26, 0 );
            var_4 = 0;
            var_5 = [];
            var_6 = [];
            var_5[0] = ( 19430, -2396, -380 );
            var_6[0] = ( 7, 315, 0 );
            var_5[1] = ( 21100, -2356, -380 );
            var_6[1] = ( 7, 219, 0 );
            var_7 = 0;

            foreach ( var_9 in var_1.vehiclespawns )
            {
                if ( isdefined( var_9.script_noteworthy ) && var_9.script_noteworthy == "locale_6" )
                {
                    if ( isdefined( var_9.script_team ) && var_9.script_team == "axis" )
                    {
                        var_9.origin = var_2[var_4];
                        var_9.angles = var_3[var_4];
                        var_4++;
                        continue;
                    }

                    if ( isdefined( var_9.script_team ) && var_9.script_team == "allies" )
                    {
                        var_9.origin = var_5[var_7];
                        var_9.angles = var_6[var_7];
                        var_7++;
                    }
                }
            }
        }

        if ( var_1.refname == "atv" )
        {
            if ( level.mapname == "mp_farms2_gw" && level.localeid == "locale_9" )
            {
                var_11 = [];
                var_12 = [];
                var_11[0] = ( 46022, 1039, 56 );
                var_12[0] = ( 7, 289, 0 );
                var_11[1] = ( 47881, -1404, 115 );
                var_12[1] = ( 8, 294, 0 );
                var_11[2] = ( 47970, -22545, -320 );
                var_12[2] = ( 9, 105, 0 );

                for ( var_13 = 0; var_13 < var_11.size; var_13++ )
                {
                    var_14 = spawnstruct();
                    var_14.origin = var_11[var_13];
                    var_14.angles = var_12[var_13];
                    var_14.script_noteworthy = "locale_9";
                    var_14.targetname = "atv_spawn";
                    var_14.vehicletype = "atango_physics_mp";
                    var_1.vehiclespawns[var_1.vehiclespawns.size] = var_14;
                }

                foreach ( var_9 in var_1.vehiclespawns )
                {
                    if ( distancesquared( var_9.origin, ( 53109, -8400, -710 ) ) < 16384 )
                    {
                        var_9.origin = ( 46868, -457, 18 );
                        var_9.angles = ( 11, 252, 0 );
                        continue;
                    }

                    if ( distancesquared( var_9.origin, ( 48215, -1671, 56 ) ) < 16384 )
                    {
                        var_9.origin = ( 47906, -676, 55 );
                        var_9.angles = ( 11, 309, 0 );
                    }
                }
            }
            else if ( level.mapname == "mp_downtown_gw" && level.localeid == "locale_6" )
            {
                var_11 = [];
                var_12 = [];
                var_11[0] = ( 17806, -20823, -110 );
                var_12[0] = ( 11, 358, 0 );
                var_11[1] = ( 16109, -24057, -144 );
                var_12[1] = ( 1, 90, 0 );
                var_11[2] = ( 18227, -704, -448 );
                var_12[2] = ( 7, 266, 0 );
                var_11[3] = ( 19180, 332, -447 );
                var_12[3] = ( 6, 298, 0 );

                for ( var_13 = 0; var_13 < var_11.size; var_13++ )
                {
                    var_14 = spawnstruct();
                    var_14.origin = var_11[var_13];
                    var_14.angles = var_12[var_13];
                    var_14.script_noteworthy = "locale_6";
                    var_14.targetname = "atv_spawn";
                    var_14.vehicletype = "atango_physics_mp";
                    var_1.vehiclespawns[var_1.vehiclespawns.size] = var_14;
                }

                foreach ( var_9 in var_1.vehiclespawns )
                {
                    if ( distancesquared( var_9.origin, ( 18368, -21157, -107 ) ) < 16384 )
                    {
                        var_9.origin = ( 16572, -19828, 86 );
                        var_9.angles = ( 2, 55, 0 );
                        continue;
                    }

                    if ( distancesquared( var_9.origin, ( 19526, -15475, -97 ) ) < 16384 )
                    {
                        var_9.origin = ( 19177, -15490, -116 );
                        var_9.angles = ( 2, 64, 0 );
                    }
                }
            }
        }

        if ( var_1.refname == "tac_rover" )
        {
            if ( level.mapname == "mp_farms2_gw" && level.localeid == "locale_9" )
            {
                var_11 = [];
                var_12 = [];
                var_11[0] = ( 48384, -1703, 70 );
                var_12[0] = ( 7, 260, 0 );
                var_11[1] = ( 50216, -22058, -336 );
                var_12[1] = ( 5, 84, 0 );

                for ( var_13 = 0; var_13 < var_11.size; var_13++ )
                {
                    var_14 = spawnstruct();
                    var_14.origin = var_11[var_13];
                    var_14.angles = var_12[var_13];
                    var_14.script_noteworthy = "locale_9";
                    var_14.targetname = "tacrover_spawn";
                    var_14.vehicletype = "tromeo_physics_mp";
                    var_1.vehiclespawns[var_1.vehiclespawns.size] = var_14;
                }
            }
            else if ( level.mapname == "mp_downtown_gw" && level.localeid == "locale_6" )
            {
                var_11 = [];
                var_12 = [];
                var_11[0] = ( 21969, -11928, -156 );
                var_12[0] = ( 7, 269, 0 );
                var_11[1] = ( 16413, -22817, -144 );
                var_12[1] = ( 7, 85, 0 );

                for ( var_13 = 0; var_13 < var_11.size; var_13++ )
                {
                    var_14 = spawnstruct();
                    var_14.origin = var_11[var_13];
                    var_14.angles = var_12[var_13];
                    var_14.script_noteworthy = "locale_6";
                    var_14.targetname = "tacrover_spawn";
                    var_14.vehicletype = "tromeo_physics_mp";
                    var_1.vehiclespawns[var_1.vehiclespawns.size] = var_14;
                }
            }
        }

        if ( var_1.refname == "cargo_truck" && level.mapname == "mp_downtown_gw" && level.localeid == "locale_6" )
        {
            foreach ( var_9 in var_1.vehiclespawns )
            {
                if ( distancesquared( var_9.origin, ( 20559, -24015, -105 ) ) < 16384 )
                {
                    var_9.origin = ( 18119, -21282, -118 );
                    var_9.angles = ( 6, 55, 0 );
                }
            }
        }

        foreach ( var_9 in var_1.vehiclespawns )
        {
            if ( isdefined( scripts\cp_mp\utility\game_utility::getlocaleid() ) && isdefined( var_9.script_noteworthy ) && var_9.script_noteworthy == level.localeid )
            {
                if ( var_1.refname == "light_tank" )
                {
                    if ( isdefined( var_9.script_team ) && var_9.script_team == "axis" )
                    {
                        var_22 = level.tankspawnlocs_axis.size;
                        level.tankspawnlocs_axis[var_22] = var_9;
                        level.tankspawnlocs_axis[var_22].refname = var_1.refname;
                    }
                    else if ( isdefined( var_9.script_team ) && var_9.script_team == "allies" )
                    {
                        var_22 = level.tankspawnlocs_allies.size;
                        level.tankspawnlocs_allies[var_22] = var_9;
                        level.tankspawnlocs_allies[var_22].refname = var_1.refname;
                    }

                    continue;
                }

                if ( istrue( level.matchdata_logvictimkillevent ) && var_1.refname == "jeep" || istrue( level.matchdata_logscoreevent ) && var_1.refname == "cargo_truck" )
                    continue;
                else
                {
                    var_22 = level.vehiclespawnlocs.size;
                    level.vehiclespawnlocs[var_22] = var_9;
                    level.vehiclespawnlocs[var_22].refname = var_1.refname;
                }
            }
        }
    }

    if ( 0 )
    {
        foreach ( var_26 in level.vehiclespawnlocs )
            thread scripts\mp\utility\debug::drawline( var_26.origin, var_26.origin + ( 0, 0, 1500 ), 1000, ( 1, 0, 0 ) );
    }

    level.vehiclespawnlocs = scripts\engine\utility::array_randomize( level.vehiclespawnlocs );
    var_28 = level._id_11F41;

    if ( !isdefined( level._id_11F41 ) )
        var_28 = 25;

    if ( 0 )
    {
        for ( var_13 = 0; var_13 < var_28; var_13++ )
        {
            var_26 = level.vehiclespawnlocs[var_13];
            thread scripts\mp\utility\debug::drawline( var_26.origin + ( 0, 0, 1500 ), var_26.origin + ( 0, 0, 2500 ), 1000, ( 0, 1, 0 ) );
        }
    }

    for ( var_13 = 0; var_13 < var_28; var_13++ )
    {
        var_26 = level.vehiclespawnlocs[var_13];

        if ( isdefined( var_26 ) )
        {
            var_1 = level.vehicleinfo[var_26.refname];
            [[ var_1.spawncallback ]]( var_26 );
        }
    }

    scripts\mp\flags::gameflagwait( "prematch_countdown" );
    level.numhqtanks_axis = 0;
    level.numhqtanks_allies = 0;
    thread vehiclespawn_hqtanks( level.tankspawnlocs_axis );
    thread vehiclespawn_hqtanks( level.tankspawnlocs_allies );
}

vehiclespawn_hqtanks( var_0 )
{
    foreach ( var_2 in var_0 )
    {
        var_3 = level.vehicleinfo[var_2.refname];
        [[ var_3.spawncallback ]]( var_2 );
        wait( randomfloatrange( 2.0, 3.0 ) );
    }
}

vehiclespawn_truck( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, randomfloat( 360 ), 0 );

    var_2 = vehiclespawn_getspawndata( var_0 );
    return scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "technical", var_2, var_1 );
}

vehiclespawn_littlebird( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, randomfloat( 360 ), 0 );

    var_2 = vehiclespawn_getspawndata( var_0 );
    return scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "little_bird", var_2, var_1 );
}

_id_14266( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, randomfloat( 360 ), 0 );

    var_2 = vehiclespawn_getspawndata( var_0 );
    return scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "little_bird_mg", var_2, var_1 );
}

vehiclespawn_copcar( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, randomfloat( 360 ), 0 );

    var_2 = vehiclespawn_getspawndata( var_0 );
    return scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "cop_car", var_2, var_1 );
}

vehiclespawn_atv( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, randomfloat( 360 ), 0 );

    var_2 = vehiclespawn_getspawndata( var_0 );
    return scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "atv", var_2, var_1 );
}

vehiclespawn_cargotruck( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, randomfloat( 360 ), 0 );

    var_2 = vehiclespawn_getspawndata( var_0 );
    return scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "cargo_truck", var_2, var_1 );
}

vehiclespawn_hoopty( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, randomfloat( 360 ), 0 );

    var_2 = vehiclespawn_getspawndata( var_0 );
    return scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "hoopty", var_2, var_1 );
}

vehiclespawn_hooptytruck( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, randomfloat( 360 ), 0 );

    var_2 = vehiclespawn_getspawndata( var_0 );
    return scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "hoopty_truck", var_2, var_1 );
}

vehiclespawn_jeep( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, randomfloat( 360 ), 0 );

    var_2 = vehiclespawn_getspawndata( var_0 );
    return scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "jeep", var_2, var_1 );
}

vehiclespawn_largetransport( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, randomfloat( 360 ), 0 );

    var_2 = vehiclespawn_getspawndata( var_0 );
    return scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "large_transport", var_2, var_1 );
}

vehiclespawn_medtransport( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, randomfloat( 360 ), 0 );

    var_2 = vehiclespawn_getspawndata( var_0 );
    return scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "medium_transport", var_2, var_1 );
}

vehiclespawn_pickuptruck( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, randomfloat( 360 ), 0 );

    var_2 = vehiclespawn_getspawndata( var_0 );
    return scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "pickup_truck", var_2, var_1 );
}

vehiclespawn_tacrover( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, randomfloat( 360 ), 0 );

    var_2 = vehiclespawn_getspawndata( var_0 );
    return scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "tac_rover", var_2, var_1 );
}

vehiclespawn_van( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, randomfloat( 360 ), 0 );

    var_2 = vehiclespawn_getspawndata( var_0 );
    return scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "van", var_2, var_1 );
}

vehiclespawn_tank( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, randomfloat( 360 ), 0 );

    var_2 = vehiclespawn_getspawndata( var_0 );
    var_2.spawnmethod = "airdrop_at_position_unsafe";

    if ( isdefined( var_0.script_team ) && var_0.script_team == "axis" )
    {
        if ( level.numhqtanks_axis >= level.maxhqtanks )
            return;

        var_2.usealtmodel = 1;
        var_2.team = "axis";
        level.numhqtanks_axis++;
    }
    else
    {
        if ( level.numhqtanks_allies >= level.maxhqtanks )
            return;

        var_2.team = "allies";
        level.numhqtanks_allies++;
    }

    var_3 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "light_tank", var_2, var_1 );

    if ( istrue( level._id_13377 ) )
        _id_1413B( var_3, var_3.team );

    return var_3;
}

_id_1413B( var_0, var_1 )
{
    wait 1;
    var_2 = scripts\mp\gameobjects::createobjidobject( var_0.origin, var_1, ( 0, 0, 0 ), undefined, 0, 0 );
    scripts\mp\objidpoolmanager::update_objective_ownerteam( var_2.objidnum, var_1 );
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_2.objidnum );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_2.objidnum, 0 );
    var_2.lockupdatingicons = 0;
    scripts\mp\objidpoolmanager::objective_pin_global( var_2.objidnum, 0 );
    scripts\mp\objidpoolmanager::update_objective_icon( var_2.objidnum, "icon_minimap_bradley_spawn_selection" );
    scripts\mp\objidpoolmanager::update_objective_setbackground( var_2.objidnum, 1 );
    scripts\mp\objidpoolmanager::update_objective_onentity( var_2.objidnum, var_0 );
    var_2.lockupdatingicons = 1;

    foreach ( var_4 in level.players )
    {
        if ( isdefined( var_4 ) && isdefined( var_4.team ) && var_4.team == var_1 && istrue( var_4.inspawnselection ) )
            scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( var_2.objidnum, var_4 );
    }

    var_0._id_1369D = var_2;
    thread _id_14228( var_0 );
    level._id_13C4A[var_1][level._id_13C4A[var_1].size] = var_0;
}

_id_14228( var_0 )
{
    var_1 = var_0._id_1369D.objidnum;
    var_2 = var_0.team;
    var_0 waittill( "death" );
    scripts\mp\objidpoolmanager::returnobjectiveid( var_1 );
    level._id_13C4A[var_2] = scripts\engine\utility::array_remove( level._id_13C4A[var_2], var_0 );
}

_id_1420E()
{
    self endon( "disconnect" );
    scripts\mp\flags::gameflagwait( "prematch_done" );

    foreach ( var_1 in level._id_13C4A[self.team] )
        scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( var_1._id_1369D.objidnum, self );

    while ( self.inspawnselection )
        waitframe();

    foreach ( var_1 in level._id_13C4A["axis"] )
        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_1._id_1369D.objidnum, self );

    foreach ( var_1 in level._id_13C4A["allies"] )
        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_1._id_1369D.objidnum, self );
}

vehiclespawn_getspawndata( var_0 )
{
    var_1 = spawnstruct();
    var_1.origin = var_0.origin;
    var_1.angles = var_0.angles;
    var_1.spawntype = "GAME_MODE";
    var_1.showheadicon = 1;
    return var_1;
}

droptank_playincomingdialog( var_0 )
{
    var_1 = var_0.team;
    var_2 = "bradley";

    if ( level.teambased )
    {
        if ( isdefined( level.killstreakactivatedtime[var_2] ) )
        {
            if ( isdefined( level.killstreakactivatedtime[var_2][var_1] ) )
            {
                if ( gettime() < level.killstreakactivatedtime[var_2][var_1] )
                    return;
            }
        }

        level.killstreakactivatedtime[var_2][var_1] = gettime() + scripts\mp\utility\dialog::getkillstreakdialogcooldown() * 1000;
    }

    scripts\mp\utility\dialog::leaderdialog( var_1 + "_friendly_" + var_2 + "_inbound", var_1, "killstreak_used" );
}

_id_1413A( var_0, var_1 )
{
    wait 1;
    var_2 = scripts\mp\gameobjects::createobjidobject( var_0.origin, var_1, ( 0, 0, 0 ), undefined, 0, 0 );
    scripts\mp\objidpoolmanager::update_objective_ownerteam( var_2.objidnum, var_1 );
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_2.objidnum );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_2.objidnum, 0 );
    var_2.lockupdatingicons = 0;
    scripts\mp\objidpoolmanager::objective_pin_global( var_2.objidnum, 0 );
    scripts\mp\objidpoolmanager::update_objective_icon( var_2.objidnum, "icon_minimap_littlebird_static" );
    scripts\mp\objidpoolmanager::update_objective_setbackground( var_2.objidnum, 1 );
    scripts\mp\objidpoolmanager::update_objective_onentity( var_2.objidnum, var_0 );
    var_2.lockupdatingicons = 1;

    foreach ( var_4 in level.players )
    {
        if ( isdefined( var_4 ) && istrue( var_4.inspawnselection ) )
            scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( var_2.objidnum, var_4 );
    }

    var_0._id_1369D = var_2;
    thread _id_14227( var_0 );
    level._id_13C49["untouched"][level._id_13C49["untouched"].size] = var_0;
}

_id_14227( var_0 )
{
    var_1 = var_0._id_1369D.objidnum;
    var_0 waittill( "death" );
    scripts\mp\objidpoolmanager::returnobjectiveid( var_1 );
    var_2 = var_0.watch_for_player_entered_trap_room;

    if ( !isdefined( var_0.watch_for_player_entered_trap_room ) )
        var_2 = "untouched";

    level._id_13C49[var_2] = scripts\engine\utility::array_remove( level._id_13C49[var_2], var_0 );
}

_id_1420F()
{
    self endon( "disconnect" );
    scripts\mp\flags::gameflagwait( "prematch_done" );

    foreach ( var_1 in level._id_13C49[self.team] )
        scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( var_1._id_1369D.objidnum, self );

    foreach ( var_1 in level._id_13C49["untouched"] )
        scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( var_1._id_1369D.objidnum, self );

    while ( self.inspawnselection )
        waitframe();

    foreach ( var_1 in level._id_13C49["axis"] )
        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_1._id_1369D.objidnum, self );

    foreach ( var_1 in level._id_13C49["allies"] )
        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_1._id_1369D.objidnum, self );

    foreach ( var_1 in level._id_13C49["untouched"] )
        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_1._id_1369D.objidnum, self );
}

_id_141FF( var_0 )
{
    if ( isdefined( self.watch_for_player_entered_trap_room ) )
        level._id_13C49[self.watch_for_player_entered_trap_room] = scripts\engine\utility::array_remove( level._id_13C49[self.watch_for_player_entered_trap_room], self );
    else
        level._id_13C49["untouched"] = scripts\engine\utility::array_remove( level._id_13C49["untouched"], self );

    self.watch_for_player_entered_trap_room = var_0;
    level._id_13C49[var_0][level._id_13C49[var_0].size] = self;
    scripts\mp\objidpoolmanager::update_objective_icon( self._id_1369D.objidnum, "icon_minimap_littlebird_spawn_selection" );

    foreach ( var_2 in level.players )
    {
        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( self._id_1369D.objidnum, var_2 );

        if ( isdefined( var_2 ) && isdefined( var_2.team ) && var_2.team == var_0 && istrue( var_2.inspawnselection ) )
        {
            scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( self._id_1369D.objidnum, var_2 );
            continue;
        }

        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( self._id_1369D.objidnum, var_2 );
    }
}

init_rallyvehicles()
{
    while ( !isdefined( level.spawnselectionlocations ) )
        waitframe();

    waitframe();
    level.rallypointvehicles = [];
    var_0 = scripts\engine\utility::getstructarray( "rallyPointTechnical", "targetname" );

    foreach ( var_2 in var_0 )
    {
        if ( isdefined( scripts\cp_mp\utility\game_utility::getlocaleid() ) && isdefined( var_2.script_noteworthy ) && var_2.script_noteworthy != level.localeid )
            continue;

        var_3 = scripts\engine\utility::ter_op( var_2.script_team == "axis", "axis", "allies" );
        var_4 = getrallyvehiclespawndata( var_2, var_3 );
        var_5 = spawnstruct();
        var_6 = scripts\mp\vehicles\technical_mp::technical_mp_spawncallback( var_4, var_5 );

        if ( isdefined( var_6 ) )
        {
            level.rallypointvehicles[level.rallypointvehicles.size] = var_6;
            continue;
        }
    }

    var_0 = scripts\engine\utility::getstructarray( "rallyPointLittleBird", "targetname" );

    if ( !istrue( level.disablelittlebirdrally ) )
    {
        foreach ( var_2 in var_0 )
        {
            if ( isdefined( scripts\cp_mp\utility\game_utility::getlocaleid() ) && isdefined( var_2.script_noteworthy ) && var_2.script_noteworthy != level.localeid )
                continue;

            var_3 = scripts\engine\utility::ter_op( var_2.script_team == "axis", "axis", "allies" );
            var_4 = getrallyvehiclespawndata( var_2, var_3 );
            var_5 = spawnstruct();

            if ( level.move_spawnpoints_to_valid_positions )
                var_6 = _x1opsnpcwaittilluse::xyvelscale_low( var_4, var_5 );
            else
                var_6 = scripts\mp\vehicles\little_bird_mp::little_bird_mp_spawncallback( var_4, var_5 );

            if ( isdefined( var_6 ) )
            {
                level.rallypointvehicles[level.rallypointvehicles.size] = var_6;
                continue;
            }
        }
    }
    else if ( !istrue( level.completelyremovelittlebird ) )
    {
        if ( level.localeid == "locale_6" && level.mapname == "mp_downtown_gw" && istrue( level._id_11AC5 ) )
        {
            var_10 = [];
            var_10[0] = ( 23718, -4470, -350 );
            var_10[1] = ( 25046, -17463, -50 );
            var_10[2] = ( 19627, -17495, 50 );
            var_10[3] = ( 23478, -7635, -250 );
            var_11 = [];
            var_11[0] = ( 6, 316, 0 );
            var_11[1] = ( 8, 225, 0 );
            var_11[2] = ( 10, 47, 0 );
            var_11[3] = ( 11, 176, 0 );

            foreach ( var_13, var_2 in var_0 )
            {
                var_2.origin = var_10[var_13];
                var_2.angles = var_11[var_13];
            }
        }

        foreach ( var_2 in var_0 )
        {
            if ( isdefined( scripts\cp_mp\utility\game_utility::getlocaleid() ) && isdefined( var_2.script_noteworthy ) && var_2.script_noteworthy != level.localeid )
                continue;

            if ( !isdefined( var_2.angles ) )
                var_2.angles = ( 0, randomfloat( 360 ), 0 );

            var_4 = vehiclespawn_getspawndata( var_2 );

            if ( level.move_spawnpoints_to_valid_positions )
                var_6 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "little_bird_mg", var_4, undefined );
            else
                var_6 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "little_bird", var_4, undefined );

            level thread _id_1413A( var_6, "neutral" );
        }
    }

    var_0 = scripts\engine\utility::getstructarray( "rallyPointAPC", "targetname" );

    foreach ( var_2 in var_0 )
    {
        if ( isdefined( scripts\cp_mp\utility\game_utility::getlocaleid() ) && isdefined( var_2.script_noteworthy ) && var_2.script_noteworthy != level.localeid )
            continue;

        var_3 = scripts\engine\utility::ter_op( var_2.script_team == "axis", "axis", "allies" );
        var_4 = getrallyvehiclespawndata( var_2, var_3 );

        if ( var_3 == "allies" )
            var_4.usealtmodel = 1;

        var_5 = spawnstruct();
        var_6 = scripts\mp\vehicles\apc_rus_mp::apc_rus_mp_spawncallback( var_4, var_5 );

        if ( isdefined( var_6 ) )
        {
            level.rallypointvehicles[level.rallypointvehicles.size] = var_6;
            continue;
        }
    }

    foreach ( var_19 in level.teamnamelist )
    {
        while ( !isdefined( level.availablespawnlocations[var_19][0] ) )
            waitframe();
    }

    var_21 = 0;
    var_22 = 0;
    var_23 = 0;
    var_24 = 0;
    var_25 = 0;
    var_26 = 0;
    var_27 = "gw_vehicle_technical_";
    var_28 = "gw_vehicle_littlebird_";
    var_29 = "gw_vehicle_apc_";

    foreach ( var_6 in level.rallypointvehicles )
    {
        var_4 = scripts\cp_mp\vehicles\vehicle_tracking::getvehiclespawndata( var_6 );

        if ( !isdefined( var_4.rallypointhealth ) )
            var_4.rallypointhealth = var_6.health;
        else
            var_6.health = var_4.rallypointhealth;

        var_13 = 0;
        var_31 = undefined;

        if ( var_6.team == "axis" )
        {
            if ( var_6.vehiclename == "technical" )
            {
                var_21++;

                if ( var_21 <= 8 )
                    var_4.ref = var_27 + var_21;
                else
                {

                }
            }
            else if ( var_6.vehiclename == "little_bird" || var_6.vehiclename == "little_bird_mg" )
            {
                var_22++;

                if ( var_22 <= 2 )
                    var_4.ref = var_28 + var_22;
                else
                {

                }
            }
            else if ( var_6.vehiclename == "apc_russian" )
            {
                var_23++;

                if ( var_23 <= 2 )
                    var_4.ref = var_29 + var_23;
                else
                {

                }
            }
        }
        else if ( var_6.vehiclename == "technical" )
        {
            var_24++;

            if ( var_24 <= 8 )
                var_4.ref = var_27 + var_24;
            else
            {

            }
        }
        else if ( var_6.vehiclename == "little_bird" || var_6.vehiclename == "little_bird_mg" )
        {
            var_25++;

            if ( var_25 <= 2 )
                var_4.ref = var_28 + var_25;
            else
            {

            }
        }
        else if ( var_6.vehiclename == "apc_russian" )
        {
            var_26++;

            if ( var_26 <= 2 )
                var_4.ref = var_29 + var_26;
            else
            {

            }
        }

        if ( istrue( level.userallypointvehicles ) && level.userallypointvehicles != 2 )
            watchvehicleforrallypointactivation( var_6 );
    }
}

watchvehicleforrallypointactivation( var_0 )
{
    scripts\mp\rally_point::rallypointvehicle_activate( var_0 );
}

getrallyvehiclespawndata( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.origin = var_0.origin;
    var_2.angles = var_0.angles;
    var_2.spawntype = "GAME_MODE";
    var_2.cannotbesuspended = 1;
    var_2.team = var_1;
    return var_2;
}

arm_initoutofbounds()
{
    level.outofboundstriggers = [];
    var_0 = getentarray( "OutOfBounds", "targetname" );

    foreach ( var_2 in var_0 )
    {
        if ( isdefined( scripts\cp_mp\utility\game_utility::getlocaleid() ) && isdefined( var_2.script_noteworthy ) && var_2.script_noteworthy == level.localeid && scripts\mp\utility\game_utility_mp::_id_11C8A( var_2 ) )
        {
            level.outofboundstriggers[level.outofboundstriggers.size] = var_2;
            continue;
        }

        var_2 delete();
    }
}

debugprint( var_0 )
{
    if ( 0 )
        return;
}

isobjectivecontested( var_0 )
{
    if ( var_0.ownerteam == "axis" )
        return var_0.numtouching["allies"] > 0;
    else if ( var_0.ownerteam == "allies" )
        return var_0.numtouching["axis"] > 0;
}

freeze_bomb_case_timer( var_0 )
{
    var_1 = 0;

    foreach ( var_3 in level.objectives )
    {
        if ( var_3.ownerteam == var_0 )
            var_1++;
    }

    return var_1;
}

createhintobject( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11 )
{
    var_12 = undefined;

    if ( isdefined( var_11 ) )
        var_12 = var_11;
    else
        var_12 = spawn( "script_model", var_0 );

    var_12 makeusable();

    if ( isdefined( var_11 ) && isdefined( var_0 ) )
        var_12 sethinttag( var_0 );

    if ( isdefined( var_1 ) )
        var_12 setcursorhint( var_1 );
    else
        var_12 setcursorhint( "HINT_NOICON" );

    if ( isdefined( var_2 ) )
        var_12 sethinticon( var_2 );

    if ( isdefined( var_3 ) )
        var_12 sethintstring( var_3 );

    if ( isdefined( var_4 ) )
        var_12 setusepriority( var_4 );
    else
        var_12 setusepriority( 0 );

    if ( isdefined( var_5 ) )
        var_12 setuseholdduration( var_5 );
    else
        var_12 setuseholdduration( "duration_short" );

    if ( isdefined( var_6 ) )
        var_12 sethintonobstruction( var_6 );
    else
        var_12 sethintonobstruction( "hide" );

    if ( isdefined( var_7 ) )
        var_12 sethintdisplayrange( var_7 );
    else
        var_12 sethintdisplayrange( 200 );

    if ( isdefined( var_8 ) )
        var_12 sethintdisplayfov( var_8 );
    else
        var_12 sethintdisplayfov( 160 );

    if ( isdefined( var_9 ) )
        var_12 setuserange( var_9 );
    else
        var_12 setuserange( 50 );

    if ( isdefined( var_10 ) )
        var_12 setusefov( var_10 );
    else
        var_12 setusefov( 120 );

    if ( !isdefined( var_11 ) )
        return var_12;
}

calculatefrontline()
{
    if ( level.mapname == "mp_arm_test" )
    {
        level.c130frontlinepos = ( 0, 375, 0 );
        level.c130frontlinevec = ( 0, 1, 0 );
        level.axisfrontlinevec = ( -1, 0, 0 );
        level.alliesfrontlinevec = ( 1, 0, 0 );
    }
    else
    {
        level.c130frontlinepos = ( 5100, -1615, 0 );
        level.c130frontlinevec = ( 1, 0, 0 );
        level.axisfrontlinevec = ( 0, -1, 0 );
        level.alliesfrontlinevec = ( 0, 1, 0 );
    }
}

getexfilstructs()
{
    var_0 = scripts\engine\utility::getstructarray( "airdropLocation_allies", "targetname" );
    var_1 = scripts\engine\utility::getstructarray( "airdropLocation_axis", "targetname" );
    var_2 = scripts\engine\utility::array_combine( var_0, var_1 );
    var_3 = scripts\engine\utility::getclosest( level.lane_1_obj_struct.currentobjective.gameobject.origin, var_2 );
    var_4 = scripts\engine\utility::getclosest( level.lane_2_obj_struct.currentobjective.gameobject.origin, var_2 );
    var_5 = scripts\engine\utility::getclosest( level.lane_3_obj_struct.currentobjective.gameobject.origin, var_2 );
    level.armexfilcount = 3;
    return [ var_3, var_4, var_5 ];
}

onexfilfinish( var_0 )
{

}

onexfilkilled( var_0 )
{
    level.armexfilcount--;

    if ( level.armexfilcount == 0 )
        thread scripts\mp\gamelogic::endgame( var_0, game["end_reason"]["target_destroyed"] );
}

sortlocationsbydistance( var_0, var_1 )
{
    return distancesquared( var_0.origin, self.origin ) < distancesquared( var_1.origin, self.origin );
}

calculatedroplocationnearlocation( var_0, var_1, var_2 )
{
    var_3 = var_0.origin;
    var_4 = undefined;
    var_5 = undefined;
    var_6 = randomint( 2 );
    var_7 = scripts\engine\utility::ter_op( var_6, -1.0, 1.0 );

    if ( var_7 > 0 )
    {
        var_4 = randomfloatrange( var_3[0] + var_1 * var_7, var_3[0] + var_2 * var_7 );

        if ( var_4 >= level.br_level.br_corners[0][0] )
            var_4 = level.br_level.br_corners[0][0] - 250;
    }
    else
    {
        var_4 = randomfloatrange( var_3[0] + var_2 * var_7, var_3[0] + var_1 * var_7 );

        if ( var_4 <= level.br_level.br_corners[1][0] )
            var_4 = level.br_level.br_corners[1][0] + 250;
    }

    var_6 = randomint( 2 );
    var_7 = scripts\engine\utility::ter_op( var_6, -1.0, 1.0 );

    if ( var_7 > 0 )
    {
        var_5 = randomfloatrange( var_3[1] + var_1 * var_7, var_3[1] + var_2 * var_7 );

        if ( var_5 >= level.br_level.br_corners[0][1] )
            var_5 = level.br_level.br_corners[0][1] - 250;
    }
    else
    {
        var_5 = randomfloatrange( var_3[1] + var_2 * var_7, var_3[1] + var_1 * var_7 );

        if ( var_5 >= level.br_level.br_corners[1][1] )
            var_5 = level.br_level.br_corners[1][1] + 250;
    }

    var_8 = spawnstruct();
    var_8.origin = ( var_4, var_5, var_3[2] );
    return var_8;
}

debugsphereonlocation( var_0, var_1, var_2 )
{

}

getmissedinfilcamerapositions( var_0 )
{
    var_1 = spawnstruct();
    var_1.startorigin = undefined;
    var_1.endpos = undefined;

    if ( level.mapname == "mp_locale_test" )
    {
        switch ( level.localeid )
        {
            case "locale_8":
            case "locale_6":
                if ( var_0 == "axis" )
                {
                    var_1.startorigin = ( 2094, -1804, 2763 );
                    var_1.startangles = ( 54, 40, 0 );
                    var_1.endorigin = ( 2094, -1804, 2763 );
                    var_1.endangles = ( 54, 40, 0 );
                }
                else
                {
                    var_1.startorigin = ( 2315, 1956, 2763 );
                    var_1.startangles = ( 54, 296, 0 );
                    var_1.endorigin = ( 2094, -1804, 2763 );
                    var_1.endangles = ( 54, 40, 0 );
                }

                break;
            default:
                var_1.startorigin = ( 0, 0, 0 );
                var_1.startangles = ( 0, 0, 0 );
                var_1.endorigin = ( 0, 0, 0 );
                var_1.endangles = ( 0, 0, 0 );
                break;
        }
    }
    else
    {
        switch ( level.localeid )
        {
            case "locale_3":
                if ( var_0 == "axis" )
                {
                    var_1.startorigin = ( 38864, -14018, -396 );
                    var_1.startangles = ( 3, 250, 0 );
                    var_1.endorigin = ( 38473, -14077, 401 );
                    var_1.endangles = ( 15, 252, 0 );
                }
                else
                {
                    var_1.startorigin = ( 30526, -38262, -483 );
                    var_1.startangles = ( 0, 72, 0 );
                    var_1.endorigin = ( 30024, -38403, 560 );
                    var_1.endangles = ( 19, 67, 0 );
                }

                break;
            case "locale_6":
                if ( var_0 == "axis" )
                {
                    var_1.startorigin = ( 16977, -23256, 169 );
                    var_1.startangles = ( 9, 69, 0 );
                    var_1.endorigin = ( 16899, -23467, 683 );
                    var_1.endangles = ( 15, 68, 0 );
                }
                else
                {
                    var_1.startorigin = ( 18607, 1423, -355 );
                    var_1.startangles = ( 8, 289, 0 );
                    var_1.endorigin = ( 18100, 1083, 503 );
                    var_1.endangles = ( 22, 302, 0 );
                }

                break;
            case "locale_8":
                if ( var_0 == "axis" )
                {
                    var_1.startorigin = ( 18672, -26836, -129 );
                    var_1.startangles = ( 359, 76, 0 );
                    var_1.endorigin = ( 18518, -26909, 314 );
                    var_1.endangles = ( 14, 69, 0 );
                }
                else
                {
                    var_1.startorigin = ( 18607, 1423, -355 );
                    var_1.startangles = ( 8, 289, 0 );
                    var_1.endorigin = ( 18100, 1083, 503 );
                    var_1.endangles = ( 22, 302, 0 );
                }

                break;
            case "locale_16":
            case "locale_5":
                if ( var_0 == "axis" )
                {
                    var_1.startorigin = ( 24893, 28349, 1408 );
                    var_1.startangles = ( 15, 54, 0 );
                    var_1.endorigin = ( 25613, 29274, 1255 );
                    var_1.endangles = ( 19, 53, 0 );
                }
                else
                {
                    var_1.startorigin = ( 39490, 48919, 2302 );
                    var_1.startangles = ( 17, 235, 0 );
                    var_1.endorigin = ( 39254, 48584, 1542 );
                    var_1.endangles = ( 18, 245, 0 );
                }

                break;
            case "locale_9":
                if ( var_0 == "axis" )
                {
                    var_1.startorigin = ( 48331, -24822, 514 );
                    var_1.startangles = ( 12, 77, 0 );
                    var_1.endorigin = ( 48424, -24421, -240 );
                    var_1.endangles = ( 2, 77, 0 );
                }
                else
                {
                    var_1.startorigin = ( 46188, 2520, 49 );
                    var_1.startangles = ( 7, 295, 0 );
                    var_1.endorigin = ( 46571, 2664, 526 );
                    var_1.endangles = ( 16, 276, 0 );
                }

                break;
            case "locale_10":
                if ( var_0 == "axis" )
                {
                    var_1.startorigin = ( -11083, 22197, 381 );
                    var_1.startangles = ( 10, 181, 0 );
                    var_1.endorigin = ( -12112, 23761, 381 );
                    var_1.endangles = ( 11, 201, 0 );
                }
                else
                {
                    var_1.startorigin = ( -31134, 11924, -116 );
                    var_1.startangles = ( 0, 36, 0 );
                    var_1.endorigin = ( -31134, 11924, 434 );
                    var_1.endangles = ( 11, 36, 0 );
                }

                break;
            case "locale_17":
                if ( var_0 == "axis" )
                {
                    var_1.startorigin = ( 9215, 984, 325 );
                    var_1.startangles = ( 357, 186, 0 );
                    var_1.endorigin = ( 9107, 628, 1144 );
                    var_1.endangles = ( 19, 182, 0 );
                }
                else
                {
                    var_1.startorigin = ( -5351, 641, 408 );
                    var_1.startangles = ( 2, 352, 0 );
                    var_1.endorigin = ( -5282, 996, 1103 );
                    var_1.endangles = ( 11, 347, 0 );
                }

                break;
            case "locale_18":
                if ( var_0 == "axis" )
                {
                    var_1.startorigin = ( -22847, -28632, 34 );
                    var_1.startangles = ( 12, 42, 0 );
                    var_1.endorigin = ( -22694, -28429, 356 );
                    var_1.endangles = ( 12, 40, 0 );
                }
                else
                {
                    var_1.startorigin = ( -8084, -20649, 72 );
                    var_1.startangles = ( 10, 185, 0 );
                    var_1.endorigin = ( -9092, -20635, 224 );
                    var_1.endangles = ( 12, 184, 0 );
                }

                break;
            default:
                var_1.startorigin = ( 0, 0, 0 );
                var_1.startangles = ( 0, 0, 0 );
                var_1.endorigin = ( 0, 0, 0 );
                var_1.endangles = ( 0, 0, 0 );
                break;
        }
    }

    return var_1;
}

calculatehqmidpoint()
{
    level.hqmidpoint = ( level.gw_objstruct.axishqloc.trigger.origin + level.gw_objstruct.allieshqloc.trigger.origin ) * 0.5;
    level.hqvecttomid_allies = level.gw_objstruct.axishqloc.trigger.origin - level.hqmidpoint;
    level.hqvecttomid_axis = level.gw_objstruct.allieshqloc.trigger.origin - level.hqmidpoint;
    level.hqdisttomid = length( level.hqvecttomid_axis );
}

calculatecameraoffset( var_0, var_1 )
{
    switch ( level.mapname )
    {
        case "mp_quarry2":
            var_2 = 0.25;
            var_3 = 0.35;
            break;
        case "mp_farms2":
            var_2 = 0.25;
            var_3 = 0.8;
            break;
        case "mp_aniyah":
            var_2 = 0.5;
            var_3 = 0.3;
            break;
        default:
            var_2 = 0.0;
            var_3 = 0.0;
            break;
    }

    var_4 = distance( var_1, level.hqmidpoint );

    if ( var_4 < 2048 )
        return ( 0, 0, 0 );

    if ( var_0 == "axis" )
    {
        var_5 = distance( level.gw_objstruct.axishqloc.trigger.origin, var_1 );
        var_6 = level.hqvecttomid_axis;
    }
    else
    {
        var_5 = distance( level.gw_objstruct.allieshqloc.trigger.origin, var_1 );
        var_6 = level.hqvecttomid_allies;
    }

    if ( var_5 < 2048 )
        return var_6 * var_2;

    if ( var_5 > level.hqdisttomid )
    {
        if ( var_0 == "axis" )
            var_5 = distance( level.gw_objstruct.allieshqloc.trigger.origin, var_1 );
        else
            var_5 = distance( level.gw_objstruct.axishqloc.trigger.origin, var_1 );

        var_7 = 100 - var_5 * 100 / level.hqdisttomid;
        var_8 = var_6 * var_3 * -1.0 * ( var_7 / 100 );
        return var_8;
    }
    else
    {
        var_7 = 100 - var_5 * 100 / level.hqdisttomid;
        var_8 = var_6 * var_2 * ( var_7 / 100 );
        return var_8;
    }
}

_id_1368D()
{
    if ( isdefined( self.selectedspawnarea ) && issubstr( self.selectedspawnarea, "HQ" ) )
        return 1;

    return 0;
}
