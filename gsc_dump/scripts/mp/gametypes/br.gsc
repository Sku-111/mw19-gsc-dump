// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    level._id_14434 = 1;
    level.nobroshot = 1;
    level.clearstockondrop = 1;
    level.loadoutdefaultfiresalediscount = 1;
    level.armoronweaponswitchlongpress = 1;
    level.iscacprimaryweapongroup = 1;
    level.noweaponfalloff = 0;
    level.half_size = 2;
    level.vehicle_occupancy_forceweaponswitchallowed = 1;
    level.client_activate = 0;
    level.debug_safehouse_regroup_start = getdvarint( "scr_br_allowLoadout", 0 );
    level.debug_show2dvotext = getdvarint( "scr_br_allowLoadoutOnlyInPreLobby", 0 );
    level.delay_spawn_room_soldiers = getdvarint( "scr_br_meleefinisher_clamp", 0 );
    level.delay_spawn_tanks = getdvarint( "scr_br_meleefinisher_damage", 120 );
    level.deletehistoryhud = getdvarfloat( "scr_br_s4shotgun_scalar", 1.0 );
    level.deletecrateimmediate = getdvarfloat( "scr_br_s4pistol_scalar", 1.0 );
    level.deleteallglass = getdvarint( "scr_br_remove_stimregen_onhit", 0 );
    level.deleteable = getdvarint( "scr_br_remove_natregen_onhit", 1 );
    level.deletescriptableinstanceaftertime_proc = getdvarint( "scr_br_stim_cancel_threshold", 1 );
    level.deletesecretstashhud = getdvarfloat( "scr_br_stim_movespeed_scalar", 1.2 );
    level.delay_show_balloon = getdvarint( "scr_br_me_proj_head_dmg", 300 );
    level.delay_show_marker_to_tv_station = getdvarint( "scr_br_me_proj_neck_dmg", 300 );
    level.delay_spawn_nav_repulsor = getdvarint( "scr_br_me_proj_utorso_dmg", 300 );
    level.delay_show_player_clip = getdvarint( "scr_br_me_proj_uarm_dmg", 300 );
    level.br_sniper_fixed_hs_damage = getdvarint( "scr_br_fixed_sniper_hsdmg", 0 );
    level.br_speedboost_pickup_enabled = getdvarint( "scr_br_speedboost_pickup_enable", 1 );
    level.decide_new_code = getdvarint( "scr_br_circle_frailty_enabled", 0 );

    if ( level.decide_new_code == 1 )
    {
        level.decoy_clearaithreatbiasgroup = getdvarfloat( "scr_player_gas_timer_mult_time_1", 60.0 );
        level.decoy_giveassistpoint = getdvarfloat( "scr_player_gas_timer_mult_time_2", 90.0 );
        level.decoy_delaystoptrackingassist = getdvarfloat( "scr_player_gas_timer_mult_time_3", 120.0 );
        level.decoy_aicanseeanyplayer = getdvarfloat( "scr_br_circle_frailty_multi_1", 1.1 );
        level.decoy_canseeplayer = getdvarfloat( "scr_br_circle_frailty_multi_2", 1.2 );
        level.decoy_aiseenplayerrecently = getdvarfloat( "scr_br_circle_frailty_multi_3", 1.3 );
    }

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();

    if ( level.br_speedboost_pickup_enabled == 1 )
    {
        _keypadscriptableused_bunkeralt::init();
        _keypadscriptableused::init();
        scripts\mp\utility\sound::besttime( "mp_tu_canteen_sfx" );
    }

    setdvarifuninitialized( "wsow_event_dvar_hot_reload", 0 );
    scripts\mp\gametypes\br_gametypes.gsc::init();

    if ( scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee_params( "allowLateJoiners" ) )
        level.brkillchainchance = 1;

    level.defend_spawn_crates = getdvarint( "scr_br_death_watch", 1.5 );
    var_0[0] = scripts\mp\utility\game::getgametype();

    if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_pullchute( "allowedEntities" ) )
        var_0 = scripts\mp\gametypes\br_gametypes.gsc::reinforcement_manager( "allowedEntities" );

    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 0, 0, 1 );
        scripts\mp\utility\game::registerlaststandhealthdvar( 100 );
        scripts\mp\utility\game::registerlaststandrevivehealthdvar( 30 );
        scripts\mp\utility\game::registerlaststandtimerdvar( 60 );
        scripts\mp\utility\game::registerlaststandinvulntimerdvar( 0 );
        scripts\mp\utility\game::registerlaststandsuicidetimerdvar( 10 );
        scripts\mp\utility\game::registerlaststandrevivetimerdvar( 5 );
        scripts\mp\utility\game::registerlaststandweapondvar( "iw8_gunless" );
        scripts\mp\utility\game::registerlaststandrevivedecayscaledvar( 0.5 );
        scripts\mp\utility\game::registerlaststandweapondelaydvar( 1.0 );

        if ( getdvarint( "scr_game_tacticalmode" ) )
        {
            setdvar( "scr_game_enableMinimap", 0 );
            setdvar( "scr_br_radarHidePings", 2 );
            setdvar( "scr_br_navBarHidePings", 2 );
            setdvar( "scr_br_navBarHideEnemy", 0 );
        }
        else if ( getdvarint( "scr_game_hcmode" ) )
        {
            setdvar( "scr_player_maxhealth", 50 );
            setdvar( "scr_game_enableMinimap", 0 );
            setdvar( "scr_br_radarHidePings", 2 );
            setdvar( "scr_br_navBarHidePings", 2 );
            setdvar( "scr_br_navBarHideEnemy", 0 );
        }
        else
        {
            setdvar( "scr_game_enableMinimap", 1 );
            setdvar( "scr_br_radarHidePings", 0 );
            setdvar( "scr_br_navBarHidePings", 0 );
            setdvar( "scr_br_navBarHideEnemy", 0 );
        }

        setdvar( "scr_br_spawnProtectionTimer", 5 );
        setdvar( "scr_br_allowkillstreaks", 1 );
        setdvarifuninitialized( "scr_player_enableSecondWindAndPistol", 0 );
        setdvarifuninitialized( "scr_player_lastStandEnableSecondWind", getdvarint( "scr_player_enableSecondWindAndPistol", 0 ) );
        setdvarifuninitialized( "scr_player_lastStandHealthScalar", 2 );
        setdvarifuninitialized( "scr_player_lastStandReviveRetainHealth", 1 );
        setdvarifuninitialized( "scr_player_lastStandSpeedAddition", 1.0 );
        setdvarifuninitialized( "scr_br_squadLeaderForceJump", 0 );
        setdvarifuninitialized( "scr_br_respawn_token_is_self_revive", 1 );
    }

    defineplayerloadout();
    updategametypedvars();
    scripts\cp_mp\parachute::initparachutedvars();
    var_1 = "mp/classtable_br_prematch.csv";
    level._id_1195F = 10;

    if ( getdvar( "scr_br_altprematchloadout" ) != "" )
        var_1 = "mp/" + getdvar( "scr_br_altprematchloadout" ) + ".csv";

    if ( scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee_params( "prematchBlueprints" ) )
        level thread _id_12858();
    else
        _id_12859( var_1 );

    if ( istrue( level.debug_safehouse_regroup_start ) )
    {
        level._id_11C73 = scripts\mp\gametypes\br_weapons.gsc::droptogroundmultitrace;

        if ( !istrue( level.debug_show2dvotext ) )
            level.delay_put_players_in_black_screen = 0;

        level.scriptedphysicaldofenabled = 1;
    }

    thread waitthensetstatgroupreadonly();
    level.teambased = 0;
    level.overridecrateusetime = 0.5;
    level.onplayerscore = ::onplayerscore;
    level.onprecachegametype = ::onprecachegametype;
    level.onstartgametype = ::onstartgametype;
    level.onplayerconnect = ::onplayerconnect;
    level.getspawnpoint = ::getspawnpoint;
    level.modeonspawnplayer = ::onspawnplayer;
    level.modifyplayerdamage = ::brmodifyplayerdamage;
    level._id_11CA1 = ::elevator_lower;
    level._id_120AB = ::_id_120AB;
    level.onplayerdamaged = ::onplayerdamaged;
    level.onnormaldeath = ::onnormaldeath;
    level.ondeadevent = ::ondeadevent;
    level.ononeleftevent = ::ononeleftevent;
    level.onplayerkilled = ::onplayerkilled;
    level.onsuicidedeath = ::onsuicidedeath;
    level.iconvisall = ::iconvisall;
    level.objvisall = ::objvisall;
    level.ontimelimit = ::ontimelimit;
    level.onplayerjointeam = ::onplayerjointeam;
    level._id_12888 = ::emp_drone_proximity_explode;
    level.parachutetakeweaponscb = scripts\cp_mp\parachute::takeweaponsdefaultfunc;
    level._id_11C7D = scripts\mp\gametypes\br_public.gsc::_id_11C7D;
    level.allowfauxdeath = 0;
    var_2 = istrue( level.debug_safehouse_regroup_start ) && !istrue( level.debug_show2dvotext );

    if ( var_2 )
        level.parachuterestoreweaponscb = ::_id_1195B;
    else
        level.parachuterestoreweaponscb = ::nakeddrop;

    level.modeshoulddofauxdeathfunc = scripts\mp\gametypes\br_respawn.gsc::playershoulddofauxdeath;
    level.modeonlaststandfunc = scripts\mp\gametypes\br_respawn.gsc::playersetinlaststand;
    level._id_11C79 = ::_id_12551;
    level.endgame = ::brendgame;
    level.laststandweaponcallback = ::brchooselaststandweapon;
    level._id_11C6F = ::_id_11C6F;
    level.preplayerdamaged = ::emp_drone_pick_up_use_think;
    level._id_11C8B = ::enemy_mines_init;
    level._id_11C8C = ::elevator_init;
    level._id_11C6C = ::disabledvehicles;
    level._id_11C84 = ::spawnclientbr;
    level._id_12099 = ::_id_12099;
    level._id_11FFE = ::_id_11FFE;
    level._id_12082 = ::_id_12082;
    level._id_1205C = ::_id_1205C;
    level._id_1203B = ::_id_1203B;
    level._id_120AF = ::_id_120AF;
    level._id_120B0 = ::_id_120B0;
    level._id_11C7A = ::emp_drone_damage_monitor;
    level._id_11C76 = ::dyn_door;
    level._id_12065 = ::_id_12065;
    level._id_125F1 = ::_id_125F1;
    level.waittillmatch_wait = ::waittillmatch_wait;
    level._id_12AD2 = ::endgame_luidecisionreceived;
    level._id_12AD1 = ::endgame_finitewaves_vo;
    level._id_11C65 = ::elements_hidden;
    level._id_11C7E = ::elevator_doors_open;
    level._id_11C66 = ::_id_11C66;
    level._id_11C6B = ::_id_11C6B;
    level._id_11C82 = ::_id_11C82;
    level._id_11C87 = ::_id_11C87;
    level._id_1331D = ::ending_fade_out;
    level.delay_makeuseable = getdvarint( "scr_br_laststandwipe", 1 );
    level.updategameevents = ::demo_debug_nuke;
    level.getinfectedairdropposition = ::debugprintvipstates;
    level.getinfilplayers = ::debugthink;
    level._id_14254 = scripts\mp\gametypes\br_public.gsc::delay_then_run_wave_override;
    level.allowclasschoicefunc = scripts\mp\gametypes\br_weapons.gsc::deregistergasmaskscriptableatframeend;
    level.tacticaltimemod = scripts\mp\utility\dvars::dvarfloatvalue( "tacticalTimeMod", 2.5, 0.5, 5 );
    level.battle_tracks_stopbattletrackstoalloccupants = scripts\engine\utility::void;
    level._id_1285F = ::prematchperiod;
    level.debug_unlock_silo = getdvarint( "scr_br_flinch_scaling", 0 );
    level.dontshootwhileparachuting = 1;
    level.disablecopycatloadout = 1;
    level.disableinitplayergameobjects = 1;
    level.watch_for_icbm_spawners = 1;
    level.votes = ::votes;
    level.grenade_effect = scripts\cp_mp\killstreaks\chopper_support::debugtimedelta;
    level.calculateclientmatchdataextrainfopayload = ::calculateclientmatchdataextrainfopayload;
    level._id_11A9D = 1;
    level._id_13C34 = ::_id_13C34;
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "brGetGameModeSpecificCrateData", ::br_armor_plate_used );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "game", "squadAsTeamEnabled", scripts\mp\menus::_id_13733 );

    if ( istrue( getdvarint( "scr_br_prematchffa", 0 ) ) )
    {
        level.br_prematchffa = 1;
        level.allowprematchdamage = 1;
        level.recordfinalkillcam = 0;
        level.ignorescoring = 1;
        level.disableweaponstats = 1;
        level.disablestattracking = 1;
        level.prematchaddkillfunc = ::brprematchaddkill;
        level._id_12001 = ::eliminate_drone_attack_max_cooldown;
        level.getarenapickupattachmentoverrides = 1;
        setdynamicdvar( "scr_" + scripts\mp\utility\game::getgametype() + "_numLives", 0 );
    }

    level.br_prematchloot = [];
    level.br_prematchlootparts = [];
    setomnvar( "scriptable_loot_hide", 1 );
    setomnvar( "ui_killcam_copycat", 0 );
    level.bypassclasschoicefunc = ::_id_12341;
    setomnvarforallclients( "ui_skip_loadout", 0 );
    game["dialog"]["gametype"] = "gametype_survival";

    if ( getdvarint( "OSMSLRTOP" ) )
        game["dialog"]["gametype"] = "hc_" + game["dialog"]["gametype"];

    game["dialog"]["offense_obj"] = "hint_killall";
    game["dialog"]["defense_obj"] = "hint_ffa";
    game["dialog"]["obj_extraction"] = "objective_extraction";
    game["dialog"]["prematch_enter"] = "gamestate_prematch_enter";
    game["dialog"]["prematch_end"] = "gamestate_prematch_end";
    game["dialog"]["deploy_squad_leader"] = "gamestate_deploy_squad_leader";
    game["dialog"]["first_circle"] = "gamestate_circle_first";
    game["dialog"]["new_circle"] = "gamestate_circle_new";
    game["dialog"]["circle_closing"] = "gamestate_circle_red_close";
    game["dialog"]["final_circle"] = "gamestate_circle_red_final";
    game["dialog"]["last_man_standing"] = "gamestate_last_man_standing";
    game["dialog"]["match_start"] = "gametype_battleroyale";
    game["dialog"]["primary_objective"] = "objective_battleroyale";
    game["dialog"]["supply_drop_incoming"] = "gamestate_supply_drop";
    game["dialog"]["team_loss"] = "gamestate_lose";
    game["dialog"]["team_victory"] = "gamestate_win";
    game["dialog"]["top_5"] = "gamestate_top_5";
    game["dialog"]["top_10"] = "gamestate_top_10";
    game["dialog"]["top_25"] = "gamestate_top_25";
    game["dialog"]["top_50"] = "gamestate_top_50";
    game["dialog"]["top_5_lose"] = "gametype_top_5_lose";
    game["dialog"]["top_10_lose"] = "gametype_top_10_lose";
    game["dialog"]["top_25_lose"] = "gametype_top_25_lose";
    game["dialog"]["finish_calls"] = "game_end_prompt_finish_calls";
    level notify( "br_dialog_initialized" );

    if ( scripts\mp\gametypes\br_gametype_olaride.gsc::arefactionpointsenabled() )
        game["dialog"]["welcome_faction"] = "end_faction_welcome";

    level.little_bird_mp_initmines = 1;
    level.little_bird_onenterheavydamagestate = ::disable_all_turrets_permanently;
    level.startingspawns = [];
    level._effect["vfx_smk_signal"] = loadfx( "vfx/_requests/mp_gameplay/vfx_smk_signal" );
    level._effect["vfx_smk_signal_gr"] = loadfx( "vfx/_requests/mp_gameplay/vfx_smk_signal_gr" );
    level._effect["vfx_smk_signal_red"] = loadfx( "vfx/iw8_cp/prop/vfx_smk_signal_red" );
    level._effect["vfx_br_ac130_clouds"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_ac130_clouds" );
    level._effect["vfx_br_infil_cloud_anim"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_infil_cloud_anim" );
    level.bots_ignore_team_balance = 1;
    level._id_11A5D = getdvarint( "live_lobby_lowpop_check", 0 );
    setdvar( "NKTQRKRMTS", getdvarint( "scr_br_minFallDamageHeight", 560 ) );
    setdvar( "LKMOLLSKKO", getdvarint( "scr_br_maxFallDamageHeight", 561 ) );
    setdvar( "OMLLLQKQSR", getdvarint( "scr_br_minSoftLandingHeight", 560 ) );
    setdvar( "LTMMLKRKTR", getdvarint( "scr_br_maxSoftLandingHeight", 561 ) );
    level.modespecificparachutecompletecb = ::parachutecomplete;
    level._id_12036 = ::_id_12036;

    if ( !isdefined( level.skipprematchdropspawn ) )
        level.skipprematchdropspawn = getdvarint( "scr_br_skipPrematchDropSpawn", 0 );

    level.br_debugsolotest = getdvarint( "scr_br_solo_test", 0 );

    if ( level.br_debugsolotest )
        level.disableforfeit = 1;

    level.br_infils_disabled = getdvarint( "scr_br_infils_disable", 0 ) || scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "infil" );
    level.br_circle_disabled = getdvarint( "scr_br_circle_disable", 0 );
    level.overheatreductionamount = getdvarint( "scr_bmo_extract_heli_invulnerable", 1 );
    level.defensefactormod = getdvarint( "scr_br_ending_delay", 4 );
    level.roundenddelay = 0.5;
    level.postroundtime = 9;
    level._id_12602 = getdvarint( "scr_player_maxhealth" );
    level._id_11BF1 = getdvarint( "scr_br_minArmorDropOnDeath", 1 );
    level.delete_door_clip = getdvarint( "scr_br_pelletMaxDamage", -1 );
    level.delete_dropped_weapon = getdvarint( "scr_br_pelletMaxDamageFast", -1 );
    level.deletescavengerhud = getdvarint( "scr_br_slugMaxDamage", -1 );

    if ( !isdefined( level.delay_put_players_in_black_screen ) )
        disabledfeatures();

    scripts\mp\gametypes\br_analytics.gsc::destroycrateinbadtrigger();
    scripts\mp\gametypes\br_vehicles.gsc::brvehiclesinit();
    scripts\mp\gametypes\br_infils.gsc::main();

    if ( !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "armor" ) )
        scripts\mp\gametypes\br_armor.gsc::main();

    scripts\mp\gametypes\br_ending.gsc::define_as_level_infil_driver();
    scripts\mp\gametypes\br_killstreaks.gsc::init();
    initializetweakableoverrides();
    entcleanup();
    scripts\mp\gametypes\br_gametype_olaride.gsc::kiosk_initializecallbacks();
    level thread bush_zones();
    setdvarifuninitialized( "scr_br_no_inventory", 1 );
    setdvarifuninitialized( "scr_br_platePouchCount", 3 );
    setdvarifuninitialized( "scr_trophy_timeoutOverride", 600.0 );
    setdvarifuninitialized( "scr_tacCover_timeoutOverride", 600.0 );
    setdvarifuninitialized( "scr_manualTurret_timeoutOverride", 600.0 );
    setdvar( "compassScramblerRadius", 12000 );
    _id_12803();
    thread scriptvariablelimittest();
}

scriptvariablelimittest()
{
    if ( !getdvarint( "scr_script_variable_test", 0 ) )
        return;

    wait 120;

    for (;;)
    {
        if ( !isdefined( level.bad ) )
            level.bad = [];

        var_0 = level.bad.size;
        level.bad[var_0] = [];

        for ( var_1 = 0; var_1 < 5000; var_1++ )
            level.bad[var_0][var_1] = 9999;

        waitframe();
    }
}

_id_12803()
{
    scripts\mp\gametypes\br_alt_mode_inflation.gsc::init();
    thread scripts\mp\gametypes\br_zones.gsc::init();
    thread scripts\mp\gametypes\br_c130airdrop.gsc::init();
    thread scripts\mp\gametypes\br_jugg_common.gsc::init();
    thread scripts\mp\gametypes\br_dev.gsc::init();
    scripts\mp\utility\sound::besttime( "weapon_turret_aa" );

    if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "postMainInit" ) )
        scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "postMainInit" );
}

waitthensetstatgroupreadonly()
{
    self endon( "game_ended" );
    wait 1;

    if ( isdefined( level.playerstats ) )
    {
        scripts\mp\playerstats_interface::makeplayerstatgroupreadonly( "losses" );
        scripts\mp\playerstats_interface::makeplayerstatgroupreadonly( "winLoss" );
    }
}

entcleanup()
{
    for ( var_0 = 1; var_0 < 10; var_0++ )
        _delete_ents( "script_noteworthy", "locale_" + var_0 );

    _delete_ents( "script_noteworthy", "locale_99" );
}

_delete_ents( var_0, var_1 )
{
    var_2 = getentarray( var_1, var_0 );
    scripts\engine\utility::array_call( var_2, ::delete );
}

totalroundtime( var_0 )
{
    var_1 = tablelookupgetnumcols( "mp/classtable_br.csv" ) - 1;
    var_2["loadoutArchetype"] = "archetype_assault";
    var_2["loadoutPrimary"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimary", var_0 + 1 );
    var_2["loadoutPrimaryAttachment"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimaryAttachment1", var_0 + 1 );
    var_2["loadoutPrimaryAttachment2"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimaryAttachment2", var_0 + 1 );
    var_2["loadoutPrimaryAttachment3"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimaryAttachment3", var_0 + 1 );
    var_2["loadoutPrimaryAttachment4"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimaryAttachment4", var_0 + 1 );
    var_2["loadoutPrimaryAttachment5"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimaryAttachment5", var_0 + 1 );
    var_2["loadoutPrimaryCamo"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimaryCamo", var_0 + 1 );
    var_2["loadoutPrimaryReticle"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimaryReticle", var_0 + 1 );
    var_2["loadoutSecondary"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondary", var_0 + 1 );
    var_2["loadoutSecondaryAttachment"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondaryAttachment1", var_0 + 1 );
    var_2["loadoutSecondaryAttachment2"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondaryAttachment2", var_0 + 1 );
    var_2["loadoutSecondaryAttachment3"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondaryAttachment3", var_0 + 1 );
    var_2["loadoutSecondaryAttachment4"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondaryAttachment4", var_0 + 1 );
    var_2["loadoutSecondaryAttachment5"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondaryAttachment5", var_0 + 1 );
    var_2["loadoutSecondaryCamo"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondaryCamo", var_0 + 1 );
    var_2["loadoutSecondaryReticle"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondaryReticle", var_0 + 1 );
    var_2["loadoutMeleeSlot"] = "none";
    var_2["loadoutEquipmentPrimary"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutEquipmentPrimary", var_0 + 1 );
    var_2["loadoutEquipmentSecondary"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutEquipmentSecondary", var_0 + 1 );
    var_2["loadoutStreakType"] = "assault";
    var_2["loadoutKillstreak1"] = "none";
    var_2["loadoutKillstreak2"] = "none";
    var_2["loadoutKillstreak3"] = "none";
    var_2["loadoutSuper"] = "super_br_extract";
    var_2["loadoutPerks"] = [ tablelookup( "mp/classtable_br.csv", 0, "loadoutPerk1", var_0 + 1 ), tablelookup( "mp/classtable_br.csv", 0, "loadoutPerk2", var_0 + 1 ), tablelookup( "mp/classtable_br.csv", 0, "loadoutPerk3", var_0 + 1 ), tablelookup( "mp/classtable_br.csv", 0, "loadoutExtraPerk1", var_0 + 1 ), tablelookup( "mp/classtable_br.csv", 0, "loadoutExtraPerk2", var_0 + 1 ), tablelookup( "mp/classtable_br.csv", 0, "loadoutExtraPerk3", var_0 + 1 ) ];
    var_2["loadoutGesture"] = "playerData";

    if ( getdvarint( "scr_br_alt_mode_zxp", 0 ) || getdvarint( "scr_br_alt_mode_gxp", 0 ) )
        var_2["loadoutEquipmentSecondary"] = "equip_binoculars";
    else
        var_2["loadoutEquipmentSecondary"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutEquipmentSecondary", var_0 + 1 );

    if ( getdvarint( "scr_br_altdefaultloadout", 0 ) == 1 )
    {
        if ( getdvarint( "scr_br_randomstarterloadout", 0 ) == 1 )
            var_2["loadoutSecondary"] = risktokencount();
        else
            var_2["loadoutSecondary"] = "s4_me_knife";
    }

    if ( getdvarint( "scr_br_rocketSecondary", 0 ) == 1 )
        var_2["loadoutSecondary"] = "s4_la_palpha42";

    if ( getdvarint( "scr_br_dbdaltdefaultloadout", 0 ) == 1 )
    {
        var_2["loadoutPrimary"] = "iw8_pi_decho";

        if ( getdvarint( "scr_br_dbd_randomstarterloadout", 0 ) == 1 )
            var_2["loadoutSecondary"] = risktokencount();
        else
            var_2["loadoutSecondary"] = "s4_me_sledgehammer";
    }

    if ( getdvarint( "scr_br_vovaltdefaultloadout", 0 ) == 1 )
    {
        var_2["loadoutPrimary"] = "iw8_pi_golf21";

        if ( getdvarint( "scr_br_vov_randomstarterloadout", 0 ) == 1 )
            var_2["loadoutSecondary"] = risk_flagspawncountchange();
        else
            var_2["loadoutSecondary"] = "iw8_me_t9mace";
    }

    if ( getdvarint( "scr_br_alt_mode_ff", 0 ) == 1 && getdvarint( "scr_br_ff_loaded", 0 ) > 0 )
    {
        if ( getdvarint( "scr_br_ff_loaded", 0 ) == 2 )
            var_2["loadoutPrimary"] = riskspawn_initialset();
        else
            var_2["loadoutPrimary"] = "s4_mg_mgolf42";

        if ( getdvarint( "scr_br_ff_loaded", 0 ) == 2 )
            var_2["loadoutSecondary"] = risktokencountondeath();
        else
            var_2["loadoutSecondary"] = "s4_sh_lindia98";

        var_2["loadoutEquipmentPrimary"] = "equip_frag";
        var_2["loadoutEquipmentSecondary"] = "equip_flash";
    }

    if ( getdvarint( "scr_br_melee_starting_loadout", 0 ) == 1 )
        var_2["loadoutPrimary"] = "iw8_fists";

    return var_2;
}

searchcircleorigin( var_0, var_1, var_2 )
{
    if ( !isdefined( level.deletescriptableinstanceaftertime ) )
        level.deletescriptableinstanceaftertime = totalroundtime( var_0 );

    self.pers["gamemodeLoadout"] = level.deletescriptableinstanceaftertime;
    self.class = "gamemode";
    self.prevweaponobj = undefined;
    var_3 = scripts\mp\class::loadout_getclassstruct();
    var_3 = scripts\mp\class::loadout_updateclass( var_3, "gamemode" );
    scripts\mp\class::preloadandqueueclassstruct( var_3, 1, 1 );
    self takeallweapons();
    scripts\mp\class::giveloadout( self.team, "gamemode", var_1, var_1 );

    if ( !issubstr( var_3.loadoutprimaryobject.basename, "fist" ) )
        self givestartammo( var_3.loadoutprimaryobject );

    if ( !issubstr( var_3.loadoutprimaryobject.basename, "fist" ) )
        self givestartammo( var_3.loadoutsecondaryobject );

    scriptednode( self );
    scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();

    if ( !istrue( var_2 ) )
        scripts\mp\gametypes\br_weapons.gsc::delay_add_to_chopper_boss_drone_target_array();

    scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );
    self notify( "ammo_update" );
}

_id_11E23()
{
    if ( disable_collect_leads() )
    {
        var_0 = 0;

        if ( istrue( self.shouldhumanspawntags ) )
            return;

        var_1 = isdefined( self.shouldhumanspawntags ) && !self.shouldhumanspawntags;

        if ( var_1 )
            var_0 = 1;

        var_2 = disablealltablets();
        searchcircleorigin( var_2, var_0 );

        if ( var_1 )
            self.shouldhumanspawntags = 1;
    }
    else if ( disable_fulton_group_interactions() )
        givematchloadoutfordropbags();
    else if ( disable_cinematic_skip() )
    {
        var_3 = disable_usability_for_duration();
        var_4 = disable_timer();
        givematchloadout( var_3, var_4 );
    }
    else
        scripts\mp\utility\script::laststand_dogtags( "The naked-drop loadout was not provided. Probably because the drop function should be overridden or scr_br_allowLoadoutOnlyInPreLobby should be set to 0. See IWH-426702." );

    if ( isdefined( level.obit_activation ) && level.obit_activation._id_129DA == 1 )
        disablearmorykiosk();
}

nakeddrop()
{
    var_0 = scripts\mp\gametypes\br_gulag.gsc::set_solution();

    if ( var_0 && scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "playerAdditionalGulagDropLogic" ) )
        scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "playerAdditionalGulagDropLogic" );

    if ( !var_0 && istrue( level.br_prematchstarted ) && !istrue( self.gulag ) )
    {
        if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "playerNakedDropLoadout" ) )
            scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "playerNakedDropLoadout" );
        else
            _id_11E23();
    }

    thread defend_wave_2();
}

_id_1195B()
{
    if ( istrue( self.use_armor ) )
    {
        self.use_armor = undefined;
        return;
    }

    var_0 = self.class;

    if ( istrue( self.thrownspecialcount ) )
    {
        if ( istrue( level.scriptedphysicaldofenabled ) )
        {
            if ( isdefined( self.wam_sequence ) )
                var_0 = self.wam_sequence;
        }
        else
        {
            self.pers["gamemodeLoadout"] = level.br_respawn_loadout;
            var_0 = "gamemode";
        }
    }

    var_1 = scripts\mp\class::preloadandqueueclass( var_0, 1 );
    thread scripts\mp\class::swaploadout();

    if ( var_0 != "gamemode" )
        scripts\cp_mp\utility\inventory_utility::_takeweapon( "iw8_fists_mp" );

    self._id_13BCC = 0;

    if ( !istrue( self._id_1285B ) )
    {
        if ( istrue( level.scriptedphysicaldofenabled ) )
            disablearmorykiosk();
    }

    self._id_1285B = 1;

    if ( !istrue( self.thrownspecialcount ) )
    {
        if ( istrue( level.br_prematchstarted ) )
        {
            if ( istrue( level.scriptedphysicaldofenabled ) )
                disablearmorykiosk();

            self.thrownspecialcount = 1;
        }
    }

    if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "playerDropLoadout" ) )
        scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "playerDropLoadout" );

    thread defend_wave_2();
}

managerespawnfade( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 1, 1 );
    var_5 = 70;
    var_6 = var_1.origin - var_0.origin;
    var_7 = ( var_6[0], var_6[1], 0 );
    var_8 = 0;

    if ( length2d( var_7 ) > 0.001 )
    {
        var_9 = vectornormalize( var_7 );
        var_10 = vectortoangles( var_9 );
        var_8 = angleclamp180( var_10[1] );
    }

    var_11 = var_0.origin;
    var_12 = ( cos( var_8 ), sin( var_8 ), 0 );
    var_12 = vectornormalize( var_12 );
    var_12 = var_12 * var_5;
    var_13 = scripts\mp\gametypes\br_public.gsc::_id_12A1C( var_11, var_12[0], var_12[1], var_2, var_3, var_4, var_0 );

    if ( var_13["fraction"] < 1.0 )
    {
        var_14 = var_13["position"] + ( 0, 0, 0.001 );
        var_15 = var_11 + ( 0, 0, 30 );
        var_16 = scripts\engine\trace::ray_trace( var_15, var_14, var_0, var_4 );

        if ( var_16["fraction"] >= 1.0 )
        {
            var_1 setorigin( var_14 );
            return;
        }
        else
        {

        }
    }

    var_13 = scripts\mp\gametypes\br_public.gsc::_id_12A1C( var_11, 0, 0, var_2, var_3, var_4 );

    if ( var_13["fraction"] < 1.0 )
    {
        var_17 = var_13["position"] + ( 0, 0, 0.2 );
        var_18 = var_13["position"] + ( 0, 0, 1 );
        var_19 = playerphysicstrace( var_17, var_18 );

        if ( var_19 == var_18 )
        {
            var_1 setorigin( var_13["position"] );
            return;
        }
    }

    var_1 kill( var_0.origin );
}

disablearmorykiosk()
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "giveStartFieldUpgrade" ) )
        return;

    if ( istrue( level.allowsupers ) )
    {
        var_0 = scripts\mp\supers::getcurrentsuper();

        if ( isdefined( var_0 ) )
        {
            scripts\mp\supers::givesuperpoints( scripts\mp\supers::getsuperpointsneeded() );
            return;
        }
    }
    else
        scripts\mp\gametypes\br_pickups.gsc::forcegivesuper( self._id_11954 );
}

emp_drone( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !isalive( var_0 ) )
        return 0;

    if ( istrue( var_0.gulag ) )
        return 0;

    if ( !isdefined( var_0.team ) )
        return 0;

    if ( isdefined( var_1 ) && var_1.team != var_0.team )
        return 0;

    if ( isdefined( var_1 ) && var_1 == var_0 )
        return 0;

    return 1;
}

emp_drone_clean_up( var_0 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_0.pers["squadMemberIndex"] ) || !isdefined( var_0._id_13AB3 ) )
        return;

    var_1 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getFriendlyPlayers" ) ]]( var_0.team, 1 );
    var_2 = "outline_nodepth_brplayer" + var_0.pers["squadMemberIndex"];
    var_3 = getdvarint( "scr_br_hudoutlineForTeammatesDistance", 1024 );
    var_4 = squared( var_3 );
    var_5 = emp_drone( var_0 );

    foreach ( var_7 in var_1 )
    {
        var_8 = var_7 getentitynumber();
        var_9 = var_5 && emp_drone( var_7, var_0 );

        if ( var_9 )
        {
            var_10 = distancesquared( var_0.origin, var_7.origin );

            if ( var_10 > var_4 )
                var_9 = 0;
        }

        if ( !var_9 )
        {
            if ( isdefined( var_0._id_13AB3[var_8] ) )
            {
                scripts\mp\utility\outline::outlinedisable( var_0._id_13AB3[var_8], var_0 );
                var_0._id_13AB3[var_8] = undefined;
            }

            continue;
        }

        if ( !isdefined( var_0._id_13AB3[var_8] ) )
            var_0._id_13AB3[var_8] = scripts\mp\utility\outline::outlineenableforplayer( var_0, var_7, var_2, "level_script" );
    }
}

emp_drone_clean_up_func( var_0 )
{
    var_0 endon( "disconnect" );

    for (;;)
    {
        level waittill( "update_circle_hide" );
        emp_drone_clean_up( var_0 );
    }
}

emissive( var_0 )
{
    var_0 endon( "disconnect" );

    if ( !isdefined( var_0.pers["squadMemberIndex"] ) )
        return;

    if ( !istrue( level.br_infils_disabled ) )
        var_0 waittill( "infil_jump_done" );

    var_0._id_13AB3 = [];
    var_0 thread emp_drone_clean_up_func( var_0 );

    for (;;)
    {
        emp_drone_clean_up( var_0 );
        wait 1;
    }
}

initializetweakableoverrides()
{
    if ( !isdefined( level.tweakablesinitialized ) )
        thread scripts\mp\tweakables::init();
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "scr_br_brLoadouts", getmatchrulesdata( "brData", "brLoadouts" ) );
    setdynamicdvar( "scr_br_crateDropTimer", getmatchrulesdata( "brData", "crateDropTimer" ) );
    setdynamicdvar( "scr_br_infilC130", getmatchrulesdata( "brData", "infilC130" ) );
    setdynamicdvar( "scr_br_gulag", getmatchrulesdata( "brData", "gulag" ) );
    setdynamicdvar( "scr_br_circleDamageMultiplier", getmatchrulesdata( "brData", "circleDamageMultiplier" ) );
    setdynamicdvar( "scr_br_startingWeapon", getmatchrulesdata( "brData", "startingWeapon" ) );
    setdynamicdvar( "scr_br_roundlimit", 1 );
    scripts\mp\utility\game::registerroundlimitdvar( "br", 1 );
    setdynamicdvar( "scr_br_winlimit", 1 );
    scripts\mp\utility\game::registerwinlimitdvar( "br", 1 );
    setdynamicdvar( "scr_br_promode", 0 );
    scripts\mp\utility\game::registerlaststandinvulntimerdvar( 0 );
}

updategametypedvars()
{
    scripts\mp\gametypes\common.gsc::updatecommongametypedvars();
    level.numendgame = scripts\mp\utility\dvars::dvarintvalue( "numEndGame", 4, 0, 20 );
    level.brloadouts = scripts\mp\utility\dvars::dvarintvalue( "brLoadouts", 0, 0, 5 );
    level.cratedroptimer = scripts\mp\utility\dvars::dvarintvalue( "crateDropTimer", 60, 0, 300 );
    level.goalenabletimer = scripts\mp\utility\dvars::dvarfloatvalue( "goalEnableTimer", 60, 0, 300 );
    level.goalmovetimer = scripts\mp\utility\dvars::dvarfloatvalue( "goalMoveTimer", 0, 0, 300 );
    level.radarendgame = scripts\mp\utility\dvars::dvarfloatvalue( "radarEndGame", 1, 0, 1 );
    level.infilcanusec130 = scripts\mp\utility\dvars::dvarfloatvalue( "infilC130", 1, 0, 1 );
    level.usegulag = scripts\mp\utility\dvars::dvarfloatvalue( "gulag", 1, 0, 1 );
    level.circledamagemultiplier = scripts\mp\utility\dvars::dvarfloatvalue( "circleDamageMultiplier", 1, 0.5, 4 );
    level.startingweapon = scripts\mp\utility\dvars::dvarintvalue( "startingWeapon", 0, 0, 8 );
    level.timetoadd = 30;
}

_id_12341()
{
    var_0 = "";

    if ( !istrue( level.br_prematchstarted ) && istrue( level.br_prematchffa ) )
        var_0 = _id_1234A();
    else
    {
        var_1 = level.br_loadouts["default"];

        if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "getDefaultLoadout" ) )
            var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "getDefaultLoadout" );

        self.pers["gamemodeLoadout"] = var_1;
        var_0 = "gamemode";
    }

    self.pers["class"] = var_0;
    return var_0;
}

binoculars_clearpendingtimer()
{
    if ( self calloutmarkerping_getent() )
    {
        if ( self.pers["gamemodeLoadout"]["loadoutEquipmentPrimary"] == "equip_molotov" )
            self.pers["gamemodeLoadout"]["loadoutEquipmentPrimary"] = "equip_frag";
    }
}

_id_14290()
{
    wait 5.0;
    iprintln( "Loadout verification starting in 10 seconds." );
    wait 5.0;
    iprintln( "5 seconds to start." );
    wait 5.0;
    iprintln( "Verification start!" );

    for ( var_0 = 0; var_0 < level._id_1195F; var_0++ )
    {
        iprintln( "Loadout: " + var_0 );
        self.pers["gamemodeLoadout"] = level._id_1285D[level._id_12861[var_0]];
        self.class = "gamemode";
        scripts\mp\class::preloadandqueueclass( self.pers["class"] );
        scripts\mp\class::swaploadout();
        scripts\mp\gametypes\br_weapons.gsc::debug_spawncover_badnodetest();
        wait 5.0;
        scripts\cp_mp\utility\inventory_utility::_switchtoweapon( self.secondaryweapon );
        wait 4.0;
    }

    self.pers["gamemodeLoadout"] = level._id_1285D[level._id_12861[0]];
    self.class = "gamemode";
    scripts\mp\class::preloadandqueueclass( self.pers["class"] );
    scripts\mp\class::swaploadout();
    scripts\mp\gametypes\br_weapons.gsc::debug_spawncover_badnodetest();
    iprintln( "Verification done!" );
}

_id_1234A()
{
    var_0 = "";

    if ( getdvarint( "scr_br_use_set_loadouts", 1 ) )
    {
        if ( !isdefined( level._id_12861 ) )
        {
            level._id_12861 = [];

            for ( var_1 = 0; var_1 < level._id_1195F; var_1++ )
                level._id_12861[level._id_12861.size] = var_1;

            if ( getdvar( "scr_br_prematch_loadout_override" ) == "" && getdvarint( "scr_br_verify_prematch_loadouts", 0 ) == 0 )
                level._id_12861 = scripts\engine\utility::array_randomize( level._id_12861 );

            self._id_1285C = level._id_1195F - 2;
        }

        if ( !isdefined( self._id_1285C ) || self._id_1285C < 0 || self._id_1285C >= level._id_1195F - 1 )
            self._id_1285C = 0;
        else
            self._id_1285C++;

        self.pers["gamemodeLoadout"] = level._id_1285D[level._id_12861[self._id_1285C]];
        var_0 = "gamemode";
        binoculars_clearpendingtimer();
    }
    else
        var_0 = "default" + ( randomint( 10 ) + 1 );

    return var_0;
}

_id_12858()
{
    level endon( "game_ended" );

    while ( !isdefined( level.weaponlootmapdata ) )
        waitframe();

    level._id_1285D = [];
    var_0 = [];
    var_0["classIdxPrimaryArray"] = [];
    var_0["classIdxSecondaryArray"] = [];
    var_1 = "mp/classtable_br_prematch_bp.csv";
    var_0 = firstinfectedsplash( var_0 );

    for ( var_3 = 0; var_3 < var_0["classIdxPrimaryArray"].size; var_3++ )
    {
        var_4 = var_0["classIdxPrimaryArray"][var_3];
        var_5 = var_0["classIdxSecondaryArray"][var_3];
        level._id_1285D[level._id_1285D.size] = _id_1400B( var_1, var_4, var_5 );
    }
}

firstinfectedsplash( var_0 )
{
    var_1 = 0;
    var_2 = 2;
    var_3 = 2;
    var_4 = 1;
    var_5 = 1;
    var_6 = 2;
    var_7 = 2;

    for ( var_8 = [ var_2, var_3, var_4, var_5, var_6, var_7 ]; var_1 < var_8.size; var_1++ )
    {
        var_9 = 0;
        var_10 = 0;
        var_11 = 5;

        while ( var_9 < var_8[var_1] )
        {
            var_12 = search_turret_fire_think( var_1 );

            if ( !scripts\engine\utility::array_contains( var_0["classIdxPrimaryArray"], var_12 ) || var_10 >= var_11 )
            {
                var_9++;
                var_10 = 0;
                var_0["classIdxPrimaryArray"][var_0["classIdxPrimaryArray"].size] = var_12;
                continue;
            }

            var_10++;
        }
    }

    var_13 = 0;

    for ( var_14 = 0; var_14 < var_0["classIdxPrimaryArray"].size; var_14++ )
    {
        if ( var_13 < 3 )
        {
            if ( randomint( 4 ) == 1 )
                var_15 = search_turret_fire_think( 6 );
            else
                var_15 = search_turret_fire_think( 5 );

            var_13++;
        }
        else
            var_15 = search_turret_fire_think( 7 );

        var_0["classIdxSecondaryArray"][var_0["classIdxSecondaryArray"].size] = var_15;
    }

    var_0["classIdxPrimaryArray"] = scripts\engine\utility::array_randomize( var_0["classIdxPrimaryArray"] );
    var_0["classIdxSecondaryArray"] = scripts\engine\utility::array_randomize( var_0["classIdxSecondaryArray"] );
    return var_0;
}

_id_1285A()
{
    level endon( "game_ended" );

    while ( !isdefined( level.weaponlootmapdata ) )
        waitframe();

    level._id_1285D = [];
    var_0 = "mp/classtable_br_eventbp.csv";
    var_1 = 0;

    for ( var_2 = tablelookupgetnumcols( var_0 ) - 1; var_1 < var_2; var_1++ )
        level._id_1285D[level._id_1285D.size] = _id_1402F( var_0, var_1 );
}

search_turret_fire_think( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case 0:
            var_1 = 0 + randomint( 10 );
            break;
        case 1:
            var_1 = 10 + randomint( 7 );
            break;
        case 2:
            var_1 = 23 + randomint( 5 );
            break;
        case 3:
            var_1 = 28 + randomint( 8 );
            break;
        case 4:
            var_1 = 36 + randomint( 6 );
            break;
        case 5:
            var_1 = randomint( 42 );
            break;
        case 6:
            var_1 = 42 + randomint( 3 );
            break;
        case 7:
            var_1 = 17 + randomint( 6 );
            break;
        default:
            break;
    }

    return var_1;
}

_id_1400B( var_0, var_1, var_2 )
{
    if ( var_1 == var_2 )
    {
        if ( var_2 > 0 )
            var_2--;
        else
            var_2 = 1;
    }

    var_3 = [];
    var_3["loadoutArchetype"] = "archetype_assault";
    var_3["loadoutPrimaryAttachment"] = "none";
    var_3["loadoutPrimaryAttachment2"] = "none";
    var_3["loadoutPrimaryAttachment3"] = "none";
    var_3["loadoutPrimaryAttachment4"] = "none";
    var_3["loadoutPrimaryAttachment5"] = "none";
    var_3["loadoutPrimaryCosmeticAttachment"] = "none";
    var_3["loadoutPrimarySticker"] = "none";
    var_3["loadoutPrimarySticker1"] = "none";
    var_3["loadoutPrimarySticker2"] = "none";
    var_3["loadoutPrimarySticker3"] = "none";
    var_3["loadoutSecondary"] = "none";
    var_3["loadoutSecondaryAttachment"] = "none";
    var_3["loadoutSecondaryAttachment2"] = "none";
    var_3["loadoutSecondaryAttachment3"] = "none";
    var_3["loadoutSecondaryAttachment4"] = "none";
    var_3["loadoutSecondaryAttachment5"] = "none";
    var_3["loadoutSecondarySticker"] = "none";
    var_3["loadoutSecondarySticker1"] = "none";
    var_3["loadoutSecondarySticker2"] = "none";
    var_3["loadoutSecondarySticker3"] = "none";
    var_3["loadoutMeleeSlot"] = "none";
    var_3["loadoutStreakType"] = "assault";
    var_3["loadoutKillstreak1"] = "none";
    var_3["loadoutKillstreak2"] = "none";
    var_3["loadoutKillstreak3"] = "none";
    var_3["loadoutSuper"] = "none";
    var_3["tableColumn"] = var_1;
    var_3["loadoutPrimaryAddBlueprintAttachments"] = scripts\mp\class::_id_139E4( var_0, var_1, 0 );
    var_3["loadoutPrimary"] = scripts\mp\class::table_getweapon( var_0, var_1, 0 );

    for ( var_4 = 0; var_4 < scripts\mp\class::getmaxprimaryattachments(); var_4++ )
    {
        var_5 = scripts\mp\class::getattachmentloadoutstring( var_4, "primary" );
        var_3[var_5] = scripts\mp\class::table_getweaponattachment( var_0, var_1, 0, var_4 );
    }

    var_3["loadoutPrimaryCamo"] = scripts\mp\class::table_getweaponcamo( var_0, var_1, 0 );
    var_3["loadoutPrimaryReticle"] = scripts\mp\class::table_getweaponreticle( var_0, var_1, 0 );
    var_3["loadoutPrimaryVariantID"] = scripts\mp\class::_id_139E6( var_0, var_1, 0, var_3["loadoutPrimary"] );
    var_3["loadoutSecondaryAddBlueprintAttachments"] = scripts\mp\class::_id_139E4( var_0, var_2, 0 );
    var_3["loadoutSecondary"] = scripts\mp\class::table_getweapon( var_0, var_2, 0 );

    for ( var_4 = 0; var_4 < scripts\mp\class::getmaxsecondaryattachments(); var_4++ )
    {
        var_5 = scripts\mp\class::getattachmentloadoutstring( var_4, "secondary" );
        var_3[var_5] = scripts\mp\class::table_getweaponattachment( var_0, var_2, 0, var_4 );
    }

    var_3["loadoutSecondaryCamo"] = scripts\mp\class::table_getweaponcamo( var_0, var_2, 0 );
    var_3["loadoutSecondaryReticle"] = scripts\mp\class::table_getweaponreticle( var_0, var_2, 0 );
    var_3["loadoutSecondaryVariantID"] = scripts\mp\class::_id_139E6( var_0, var_2, 0, var_3["loadoutSecondary"] );
    var_3["loadoutEquipmentPrimary"] = riskspawn_getspawnlocationsbytier( "lethal" );

    if ( scripts\engine\utility::cointoss() )
        var_3["loadoutExtraEquipmentPrimary"] = "TRUE";
    else
        var_3["loadoutExtraEquipmentPrimary"] = "FALSE";

    var_3["loadoutEquipmentSecondary"] = riskspawn_getspawnlocationsbytier( "tactical" );

    if ( var_3["loadoutEquipmentSecondary"] != "equip_smoke" && scripts\engine\utility::cointoss() )
        var_3["loadoutExtraEquipmentSecondary"] = "TRUE";
    else
        var_3["loadoutExtraEquipmentSecondary"] = "FALSE";

    var_3["loadoutPerks"] = [];

    for ( var_6 = 0; var_6 < 3; var_6++ )
    {
        var_7 = scripts\mp\class::table_getperk( var_0, var_1, var_6 );

        if ( var_7 != "specialty_null" )
            var_3["loadoutPerks"][var_3["loadoutPerks"].size] = var_7;
    }

    var_3["loadoutGesture"] = "playerData";
    var_3["loadoutExecution"] = "playerData";
    return var_3;
}

_id_1402F( var_0, var_1 )
{
    var_2 = [];
    var_2["loadoutArchetype"] = "archetype_assault";
    var_2["loadoutPrimaryAttachment"] = "none";
    var_2["loadoutPrimaryAttachment2"] = "none";
    var_2["loadoutPrimaryAttachment3"] = "none";
    var_2["loadoutPrimaryAttachment4"] = "none";
    var_2["loadoutPrimaryAttachment5"] = "none";
    var_2["loadoutPrimaryCosmeticAttachment"] = "none";
    var_2["loadoutPrimarySticker"] = "none";
    var_2["loadoutPrimarySticker1"] = "none";
    var_2["loadoutPrimarySticker2"] = "none";
    var_2["loadoutPrimarySticker3"] = "none";
    var_2["loadoutSecondary"] = "none";
    var_2["loadoutSecondaryAttachment"] = "none";
    var_2["loadoutSecondaryAttachment2"] = "none";
    var_2["loadoutSecondaryAttachment3"] = "none";
    var_2["loadoutSecondaryAttachment4"] = "none";
    var_2["loadoutSecondaryAttachment5"] = "none";
    var_2["loadoutSecondarySticker"] = "none";
    var_2["loadoutSecondarySticker1"] = "none";
    var_2["loadoutSecondarySticker2"] = "none";
    var_2["loadoutSecondarySticker3"] = "none";
    var_2["loadoutMeleeSlot"] = "none";
    var_2["loadoutStreakType"] = "assault";
    var_2["loadoutKillstreak1"] = "none";
    var_2["loadoutKillstreak2"] = "none";
    var_2["loadoutKillstreak3"] = "none";
    var_2["loadoutSuper"] = "none";
    var_2["tableColumn"] = var_1;
    var_2["loadoutPrimaryAddBlueprintAttachments"] = scripts\mp\class::_id_139E4( var_0, var_1, 0 );
    var_2["loadoutPrimary"] = scripts\mp\class::table_getweapon( var_0, var_1, 0 );

    for ( var_3 = 0; var_3 < scripts\mp\class::getmaxprimaryattachments(); var_3++ )
    {
        var_4 = scripts\mp\class::getattachmentloadoutstring( var_3, "primary" );
        var_2[var_4] = scripts\mp\class::table_getweaponattachment( var_0, var_1, 0, var_3 );
    }

    var_2["loadoutPrimaryCamo"] = scripts\mp\class::table_getweaponcamo( var_0, var_1, 0 );
    var_2["loadoutPrimaryReticle"] = scripts\mp\class::table_getweaponreticle( var_0, var_1, 0 );
    var_2["loadoutPrimaryVariantID"] = scripts\mp\class::_id_139E6( var_0, var_1, 0, var_2["loadoutPrimary"] );
    var_2["loadoutSecondaryAddBlueprintAttachments"] = scripts\mp\class::_id_139E4( var_0, var_1, 1 );
    var_2["loadoutSecondary"] = scripts\mp\class::table_getweapon( var_0, var_1, 1 );

    for ( var_3 = 0; var_3 < scripts\mp\class::getmaxsecondaryattachments(); var_3++ )
    {
        var_4 = scripts\mp\class::getattachmentloadoutstring( var_3, "secondary" );
        var_2[var_4] = scripts\mp\class::table_getweaponattachment( var_0, var_1, 1, var_3 );
    }

    var_2["loadoutSecondaryCamo"] = scripts\mp\class::table_getweaponcamo( var_0, var_1, 1 );
    var_2["loadoutSecondaryReticle"] = scripts\mp\class::table_getweaponreticle( var_0, var_1, 1 );
    var_2["loadoutSecondaryVariantID"] = int( tablelookup( var_0, 0, "loadoutSecondaryVariantID", var_1 + 1 ) );
    var_2["loadoutEquipmentPrimary"] = tablelookup( var_0, 0, "loadoutEquipmentPrimary", var_1 + 1 );

    if ( scripts\engine\utility::cointoss() )
        var_2["loadoutExtraEquipmentPrimary"] = "TRUE";
    else
        var_2["loadoutExtraEquipmentPrimary"] = "FALSE";

    var_2["loadoutEquipmentSecondary"] = tablelookup( var_0, 0, "loadoutEquipmentSecondary", var_1 + 1 );

    if ( var_2["loadoutEquipmentSecondary"] != "equip_smoke" && scripts\engine\utility::cointoss() )
        var_2["loadoutExtraEquipmentSecondary"] = "TRUE";
    else
        var_2["loadoutExtraEquipmentSecondary"] = "FALSE";

    var_2["loadoutPerks"] = [];
    var_2["loadoutGesture"] = "playerData";
    var_2["loadoutExecution"] = "playerData";
    return var_2;
}

riskspawn_getspawnlocationsbytier( var_0 )
{
    var_1 = [];

    if ( var_0 == "lethal" )
        var_1 = [ "equip_at_mine", "equip_claymore", "equip_c4", "equip_frag", "equip_molotov", "equip_semtex", "equip_thermite", "equip_throwing_knife", "equip_throwing_knife_fire", "equip_throwing_knife_electric", "equip_throwing_knife_drill" ];
    else if ( var_0 == "tactical" )
        var_1 = [ "equip_adrenaline", "equip_concussion", "equip_decoy", "equip_flash", "equip_gas_grenade", "equip_hb_sensor", "equip_smoke", "equip_snapshot_grenade" ];
    else
    {

    }

    var_2 = var_1[randomint( var_1.size )];
    return var_2;
}

_id_12859( var_0 )
{
    var_1 = tablelookupgetnumcols( var_0 ) - 1;
    level._id_1285D = [];
    var_2 = 0;

    if ( getdvar( "scr_br_prematch_loadout_override" ) != "" )
    {
        var_3 = strtok( getdvar( "scr_br_prematch_loadout_override" ), " " );
        var_4 = [];

        for ( var_5 = 0; var_5 < var_3.size; var_5++ )
            var_4[var_4.size] = int( var_3[var_4.size] );

        for ( var_6 = 0; var_6 < var_4.size; var_6++ )
            level._id_1285D[level._id_1285D.size] = init_swivelroom_currsolution_marquee( var_4[var_6], var_0 );

        level._id_1195F = var_4.size;
        return;
    }
    else if ( getdvarint( "scr_br_use_set_loadouts", 1 ) )
    {
        if ( getdvarint( "scr_br_verify_prematch_loadouts", 0 ) == 1 && getdvarint( "scr_br_prematch_loadout_set", -1 ) == -1 )
        {
            var_2 = 0;
            level._id_1195F = var_1;
        }
        else
        {
            var_2 = int( randomint( var_1 - 1 ) * 0.1 ) * 10;

            if ( getdvarint( "scr_br_prematch_loadout_set", -1 ) != -1 )
                var_2 = getdvarint( "scr_br_prematch_loadout_set", -1 );

            var_1 = var_2 + 10;
        }
    }

    for ( var_7 = var_2; var_7 < var_1; var_7++ )
        level._id_1285D[level._id_1285D.size] = init_swivelroom_currsolution_marquee( var_7, var_0 );
}

init_swivelroom_currsolution_marquee( var_0, var_1 )
{
    var_2["loadoutArchetype"] = "archetype_assault";
    var_2["loadoutPrimary"] = tablelookup( var_1, 0, "loadoutPrimary", var_0 + 1 );
    var_2["loadoutPrimaryAttachment"] = tablelookup( var_1, 0, "loadoutPrimaryAttachment1", var_0 + 1 );
    var_2["loadoutPrimaryAttachment2"] = tablelookup( var_1, 0, "loadoutPrimaryAttachment2", var_0 + 1 );
    var_2["loadoutPrimaryAttachment3"] = tablelookup( var_1, 0, "loadoutPrimaryAttachment3", var_0 + 1 );
    var_2["loadoutPrimaryAttachment4"] = tablelookup( var_1, 0, "loadoutPrimaryAttachment4", var_0 + 1 );
    var_2["loadoutPrimaryAttachment5"] = tablelookup( var_1, 0, "loadoutPrimaryAttachment5", var_0 + 1 );
    var_2["loadoutPrimaryCamo"] = tablelookup( var_1, 0, "loadoutPrimaryCamo", var_0 + 1 );
    var_2["loadoutPrimaryReticle"] = tablelookup( var_1, 0, "loadoutPrimaryReticle", var_0 + 1 );
    var_2["loadoutSecondary"] = tablelookup( var_1, 0, "loadoutSecondary", var_0 + 1 );
    var_2["loadoutSecondaryAttachment"] = tablelookup( var_1, 0, "loadoutSecondaryAttachment1", var_0 + 1 );
    var_2["loadoutSecondaryAttachment2"] = tablelookup( var_1, 0, "loadoutSecondaryAttachment2", var_0 + 1 );
    var_2["loadoutSecondaryAttachment3"] = tablelookup( var_1, 0, "loadoutSecondaryAttachment3", var_0 + 1 );
    var_2["loadoutSecondaryAttachment4"] = tablelookup( var_1, 0, "loadoutSecondaryAttachment4", var_0 + 1 );
    var_2["loadoutSecondaryAttachment5"] = tablelookup( var_1, 0, "loadoutSecondaryAttachment5", var_0 + 1 );
    var_2["loadoutSecondaryCamo"] = tablelookup( var_1, 0, "loadoutSecondaryCamo", var_0 + 1 );
    var_2["loadoutSecondaryReticle"] = tablelookup( var_1, 0, "loadoutSecondaryReticle", var_0 + 1 );
    var_2["loadoutMeleeSlot"] = "none";
    var_2["loadoutEquipmentPrimary"] = tablelookup( var_1, 0, "loadoutEquipmentPrimary", var_0 + 1 );
    var_2["loadoutEquipmentSecondary"] = tablelookup( var_1, 0, "loadoutEquipmentSecondary", var_0 + 1 );
    var_2["loadoutStreakType"] = "assault";
    var_2["loadoutKillstreak1"] = "none";
    var_2["loadoutKillstreak2"] = "none";
    var_2["loadoutKillstreak3"] = "none";
    var_2["loadoutSuper"] = "super_br_extract";
    var_2["loadoutPerks"] = [ tablelookup( var_1, 0, "loadoutPerk1", var_0 + 1 ), tablelookup( var_1, 0, "loadoutPerk2", var_0 + 1 ), tablelookup( var_1, 0, "loadoutPerk3", var_0 + 1 ), tablelookup( var_1, 0, "loadoutExtraPerk1", var_0 + 1 ), tablelookup( var_1, 0, "loadoutExtraPerk2", var_0 + 1 ), tablelookup( var_1, 0, "loadoutExtraPerk3", var_0 + 1 ) ];
    var_2["loadoutGesture"] = "playerData";
    var_2["tableColumn"] = var_0;
    return var_2;
}

defineplayerloadout()
{
    level.br_loadouts["default"]["loadoutArchetype"] = "archetype_assault";
    level.br_loadouts["default"]["loadoutPrimary"] = "none";
    level.br_loadouts["default"]["loadoutPrimaryAttachment"] = "none";
    level.br_loadouts["default"]["loadoutPrimaryAttachment2"] = "none";
    level.br_loadouts["default"]["loadoutPrimaryCamo"] = "none";
    level.br_loadouts["default"]["loadoutPrimaryReticle"] = "none";
    level.br_loadouts["default"]["loadoutSecondary"] = "none";
    level.br_loadouts["default"]["loadoutSecondaryAttachment"] = "none";
    level.br_loadouts["default"]["loadoutSecondaryAttachment2"] = "none";
    level.br_loadouts["default"]["loadoutSecondaryCamo"] = "none";
    level.br_loadouts["default"]["loadoutSecondaryReticle"] = "none";
    level.br_loadouts["default"]["loadoutMeleeSlot"] = "iw8_fists_mp";
    level.br_loadouts["default"]["loadoutEquipmentPrimary"] = "none";
    level.br_loadouts["default"]["loadoutEquipmentSecondary"] = "none";
    level.br_loadouts["default"]["loadoutStreakType"] = "assault";
    level.br_loadouts["default"]["loadoutKillstreak1"] = "none";
    level.br_loadouts["default"]["loadoutKillstreak2"] = "none";
    level.br_loadouts["default"]["loadoutKillstreak3"] = "none";
    level.br_loadouts["default"]["loadoutSuper"] = "super_br_extract";
    level.br_loadouts["default"]["loadoutPerks"] = [ "specialty_null" ];
    level.br_loadouts["default"]["loadoutGesture"] = "playerData";
    level.br_loadouts["allies"] = level.br_loadouts["default"];
    level.br_loadouts["axis"] = level.br_loadouts["default"];
    level.br_respawn_loadout = level.br_loadouts["default"];
    level.br_respawn_loadout["loadoutSecondary"] = "iw8_pi_t9semiauto";
}

onprecachegametype()
{
    level._effect["vfx_gas_ring_player"] = loadfx( "vfx/iw8_cp/br_ring/vfx_gas_ring_player.vfx" );
    level._effect["vfx_gas_ring_puffy"] = loadfx( "vfx/iw8_cp/br_ring/vfx_gas_ring_puffy.vfx" );
    level._effect["vfx_br_infil_jump_smoke_01"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_infil_jump_smoke_01.vfx" );
    level._effect["vfx_br_infil_jump_wisp_01"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_infil_jump_wisp_01.vfx" );
    level._effect["vfx_br_infil_jump_wisp_02"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_infil_jump_wisp_02.vfx" );
    level._effect["vfx_gas_mask_break"] = loadfx( "vfx/iw8_br/gameplay/vfx_br_gasmask_dest.vfx" );
}

onstartgametype()
{
    level.blockweapondrops = 1;
    level.customlaststandactionset = "brlaststand";
    scripts\mp\playeractions::registeractionset( level.customlaststandactionset, [ "usability", "weapon_switch", "offhand_primary_weapons", "offhand_secondary_weapons", "killstreaks", "supers", "gesture", "allow_jump", "sprint", "crouch", "prone", "melee", "fire" ] );
    level.graceperiod = 3;
    level.ingraceperiod = level.graceperiod;
    level.prematchperiodend = 0;

    if ( !level.allowsupers )
        level.setsuperweapondisabled = ::_id_131C8;

    setclientnamemode( "auto_change" );

    foreach ( var_1 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_1, &"OBJECTIVES/DM" );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_1, &"OBJECTIVES/DM" );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_1, &"OBJECTIVES/DM_SCORE" );

        scripts\mp\utility\game::setobjectivehinttext( var_1, &"OBJECTIVES/DM_HINT" );
    }

    initspawns();

    if ( !_id_11A5C() )
        scripts\mp\gametypes\br_circle.gsc::initcircle();

    scripts\mp\gametypes\br_weapons.gsc::br_ammo_init();
    scripts\mp\gametypes\br_c130.gsc::init();
    scripts\mp\gametypes\br_pickups.gsc::delete_objective_on_death_safe();
    scripts\mp\gametypes\br_pickups.gsc::initpickupusability();
    scripts\mp\gametypes\br_callouts.gsc::init();
    scripts\mp\gametypes\br_functional_poi.gsc::init();

    if ( !_id_11A5C() )
        scripts\mp\gametypes\br_quest_util.gsc::init_quest_util();

    scripts\cp_mp\vehicles\vehicle_compass::calloutmarkerping_init();
    scripts\mp\gametypes\br_lootcache.gsc::brlootcache_init();
    scripts\mp\gametypes\br_loot_cache_trapped.gsc::init();
    scripts\mp\gametypes\br_publicevents.gsc::init();
    scripts\mp\gametypes\br_challenges.gsc::init();
    scripts\mp\gametypes\br_alt_mode_escape.gsc::init();
    scripts\mp\gametypes\br_alt_mode_gxp.gsc::init();
    scripts\mp\gametypes\br_alt_mode_zai.gsc::init();
    scripts\mp\gametypes\br_alt_mode_zxp.gsc::init();
    scripts\mp\gametypes\br_containmentprotocol.gsc::init();
    scripts\mp\gametypes\br_satellite_hunt.gsc::init();
    scripts\mp\gametypes\br_alt_mode_bblitz.gsc::init();
    scripts\mp\gametypes\br_alt_mode_brshot.gsc::init();
    level.br_pickups.crates = [];
    level.br_pickups.portablekiosks = [];
    level.br_pickups.outercrates = [];
    scripts\mp\gametypes\br_gulag.gsc::initgulag();
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_compass", "shouldBeVisibleToPlayer", ::_id_1411D );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "br", "superSlotCleanUp", scripts\mp\gametypes\br_pickups.gsc::_id_1398A );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "br", "challengeEvaluator", scripts\mp\gametypes\br_challenges.gsc::getallspawninstances );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "registerCrateForCleanup", ::airdrop_registercrateforcleanup );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "brLoadoutCrateFirstActivation", ::br_ammorestock_playeruse );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "makeWeaponFromCrate", ::airdrop_makeweaponfromcrate );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "makeItemFromCrate", ::airdrop_makeitemfromcrate );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "makeItemsFromCrate", ::airdrop_makeitemsfromcrate );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "br_giveDropBagLoadout", ::airdrop_br_givedropbagloadout );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "brOnLoadoutCrateDestroyed", ::br_armor_repair_end );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "gasmask", "breakGasMaskBR", scripts\mp\gametypes\br_pickups.gsc::disable_near_snake_cam_after_open );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "game", "skipPlayerVO", ::ending_viewing_players_setup );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "game", "playSoundToSquad", scripts\mp\gametypes\br_public.gsc::_id_1276A );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "game", "getSquadPlayers", scripts\mp\gametypes\br_public.gsc::round_enemy_stuck_logic );
    _hidesafecircleui::stopusingbomb();
    initloot();
    level thread onprematchstarted();
    thread turnofftimer();
    level thread watchprematchdone();
    level thread scripts\mp\gametypes\br_vehicles.gsc::brvehiclesonstartgametype();

    if ( scripts\mp\utility\game::round_vehicle_logic() == "rat_race" )
        thread scripts\mp\gametypes\br_gametype_rat_race.gsc::_id_14363();
    else
        thread scripts\mp\gametypes\br_gametype_dmz.gsc::_id_14363();

    level thread updateplayerlocationcallouts();
    scripts\mp\utility\lui_game_event_aggregator::registeronluieventcallback( ::brdpadcallback );
    scripts\mp\utility\disconnect_event_aggregator::registerondisconnecteventcallback( ::onplayerdisconnect );
    scripts\mp\utility\lui_game_event_aggregator::registeronluieventcallback( ::setup_teleport_rooms );

    if ( getdvarint( "scr_disableLoadout", 0 ) == 1 )
        scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "drogBagLoadout" );

    if ( disable_fulton_group_interactions() )
    {
        thread scripts\mp\gametypes\br_rewards.gsc::initdropbagsystem();
        thread cleanupdropbagsoncircle();
    }

    level.killstreakbeginusefunc = ::display_hint_single;
    scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "onStartGameType" );
}

_id_1411D( var_0, var_1 )
{
    return 1;
}

has_focus_fire_objective()
{
    var_0 = getentarray( "grenade", "classname" );

    foreach ( var_2 in var_0 )
    {
        if ( isdefined( var_2 ) && isdefined( var_2.weapon_name ) && var_2.weapon_name == "molotov_mp" )
            thread scripts\mp\equipment\molotov::_id_11CB5( var_2 );
    }
}

_id_12076()
{
    scripts\mp\flags::gameflagwait( "prematch_fade_done" );

    if ( getdvarint( "scr_br_bigFallModeEnabled", 0 ) )
        level.client_activate = 1;

    if ( scripts\cp_mp\utility\game_utility::tutorialzoneenter() )
        scripts\mp\gametypes\br_ww2.gsc::_id_145EE();

    if ( !istrue( level._id_133E0 ) )
    {
        level thread resetalldoors( 2.1 );
        level thread scripts\cp\vehicles\little_bird_mg_cp::fulton_destroy( 1 );
        level thread scripts\mp\gametypes\br_vehicles.gsc::brvehicleonprematchstarted();
        level thread scripts\mp\equipment\binoculars::teamuseonly();
    }

    level thread scripts\mp\gametypes\br_functional_poi.gsc::onprematchdone();

    if ( !istrue( level._id_133E0 ) )
    {
        has_focus_fire_objective();
        scripts\mp\gametypes\br_vehicles.gsc::emptyallvehicles();

        if ( !istrue( level.br_infils_disabled ) )
        {
            foreach ( var_1 in level.players )
            {
                var_1 scripts\mp\gametypes\br_infils.gsc::setplayerprematchallows();
                var_1 thread scripts\mp\gametypes\br_pickups.gsc::resetplayerinventory();

                if ( istrue( var_1.hasspawned ) )
                {
                    if ( istrue( var_1.usingascender ) )
                        var_1 scripts\cp_mp\auto_ascender::canseesafecircleui();

                    var_1 thread scripts\mp\weapons::deleteplacedequipment( 1 );
                }
            }
        }

        foreach ( var_1 in level.players )
        {
            if ( isdefined( var_1.burninginfo ) )
                var_1 scripts\mp\equipment\molotov::molotov_clear_burning();

            var_1 scripts\mp\javelin::vehicle_damage_deregistervisualpercentcallback();
        }

        level notify( "prematch_cleanup" );
    }

    level.little_bird_mp_initmines = 0;

    foreach ( var_7, var_6 in level.br_prematchloot )
        var_6 setscriptablepartstate( level.br_prematchlootparts[var_7], "visible" );

    level.br_prematchloot = undefined;
    level.br_prematchlootparts = undefined;

    if ( !scripts\mp\gametypes\br_public.gsc::isusinginfilselection() && disable_flag() )
        scripts\mp\gametypes\br_infils.gsc::classselectionbeginnonexclusion();

    var_8 = getdvarint( "wsow_event_dvar_hot_reload", 0 );

    if ( istrue( var_8 ) )
        _id_12BB7();

    if ( !istrue( level.br_circle_disabled ) )
        level thread scripts\mp\gametypes\br_circle.gsc::_id_12E09( 1 );
}

_id_12BB7()
{
    if ( !istrue( getdvarint( "scr_br_gulag", 1 ) ) )
    {
        if ( !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "gulag" ) )
            level scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "gulag" );

        level.usegulag = 0;
        setomnvar( "ui_gulag_state", 0 );
        setomnvar( "ui_gulag_show_closing_state", 2 );
    }

    if ( !istrue( level.br_circle_disabled ) )
    {
        level scripts\mp\gametypes\br_circle.gsc::cacheentity();
        level thread scripts\mp\gametypes\br_circle.gsc::allplayers_setphysicaldof();
    }
}

onprematchstarted()
{
    level thread _id_12076();
    var_0 = undefined;

    if ( !istrue( level.br_infils_disabled ) && !scripts\mp\gametypes\br_public.gsc::isusinginfilselection() )
    {
        if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "createC130PathStruct" ) )
            var_0 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "createC130PathStruct" );
        else
            var_0 = scripts\mp\gametypes\br_c130.gsc::createtestc130path();
    }

    if ( !istrue( level._id_133E0 ) && !scripts\cp_mp\utility\game_utility::isrealismenabled() )
    {
        foreach ( var_2 in level.teamnamelist )
        {
            setteamradar( var_2, 1 );
            setteamradarstrength( var_2, 1 );
        }
    }

    if ( scripts\mp\utility\game::round_vehicle_logic() != "zxp" )
        thread scripts\mp\music_and_dialog::stopsuspensemusic();

    level waittill( "prematch_started" );

    if ( _id_11A5C() )
    {
        scripts\mp\gametypes\br_circle.gsc::initcircle();
        scripts\mp\gametypes\br_quest_util.gsc::init_quest_util();
    }

    if ( !istrue( level._id_133E0 ) )
    {
        var_4 = getdvarint( "scr_br_radar_strength", 0 );

        foreach ( var_2 in level.teamnamelist )
        {
            if ( var_4 )
            {
                setteamradar( var_2, 1 );
                setteamradarstrength( var_2, var_4 );
                continue;
            }

            setteamradar( var_2, 0 );
            setteamradarstrength( var_2, 0 );
        }
    }

    if ( istrue( level.debug_safehouse_regroup_start ) && istrue( level.debug_show2dvotext ) )
        setomnvarforallclients( "ui_options_menu", 0 );

    var_7 = 0;
    level.debugnextpropindex = 0;
    level.delay_music_reinforcements = 0;

    if ( !istrue( level.br_infils_disabled ) )
    {
        if ( !istrue( level.infilcanusec130 ) && !istrue( level.infilcanusemap ) )
            level.infilcanusec130 = 1;

        if ( istrue( level.infilcanusemap ) )
        {
            if ( disable_fulton_group_interactions() && !dialog_mount_nag_watcher() )
                scripts\mp\gametypes\br_rewards.gsc::_id_1284D( 1 );

            scripts\mp\gametypes\br_infils.gsc::spawnselectioninfil( "player" );
            waitframe();

            foreach ( var_9 in level.players )
            {
                var_9 stopanimscriptsceneevent();
                var_9 notify( "infil_jump_done" );

                if ( !var_9.brmapselectionafk )
                {
                    var_9 thread scripts\mp\gametypes\br_infils.gsc::_id_13AEC();
                    continue;
                }

                var_9 thread sendafksquadmembertogulag();
            }
        }

        setdvarifuninitialized( "scr_br_use_script_model_infil", 0 );

        if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "infilSequence" ) )
            scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "infilSequence" );
        else if ( istrue( level.infilcanusec130 ) && !istrue( level.infilcanusemap ) )
        {
            var_11 = undefined;

            if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "getInfilPlayers" ) )
                var_11 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "getInfilPlayers" );

            if ( !getdvarint( "scr_br_use_script_model_infil", 0 ) )
                scripts\mp\gametypes\br_infils.gsc::clear_tier_lights( var_0, "player", var_11 );
            else
            {
                scripts\mp\gametypes\br_infils.gsc::clear_tier_lights( var_0, "script_model" );

                if ( isdefined( level.infilstruct ) && isdefined( level.infilstruct.transporttime ) )
                    var_7 = level.infilstruct.transporttime;
            }

            level thread scripts\mp\gametypes\br_c130.gsc::waittoplayinfildialog();
        }
    }
    else
    {
        if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "skipInfilSequence" ) )
            scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "skipInfilSequence" );

        scripts\mp\flags::gameflagset( "prematch_fade_done" );
        waitframe();
        level.allowprematchdamage = 0;
        var_11 = undefined;

        if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "getInfilPlayers" ) )
            var_11 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "getInfilPlayers" );

        if ( !isdefined( var_11 ) || var_11.size > 0 )
            scripts\mp\gametypes\br_infils.gsc::_id_1435F( var_11 );

        foreach ( var_9 in level.players )
        {
            var_9.plotarmor = undefined;

            if ( istrue( level.client_activate ) )
            {
                var_9 skydive_setdeploymentstatus( 1 );
                var_9 skydive_setbasejumpingstatus( 1 );
                continue;
            }

            var_9 skydive_setdeploymentstatus( 0 );
            var_9 skydive_setbasejumpingstatus( 0 );
        }

        scripts\mp\flags::gameflagset( "br_ready_to_jump" );
    }

    level thread setup_player_killstreak_loadouts();
    level thread setup_weapons_at_pos();

    if ( !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "teamSpectate" ) )
        level thread scripts\mp\gametypes\br_spectate.gsc::spectate_init();

    level.br_prematchstarted = 1;
    level notify( "infils_ready" );
}

setup_weapons_at_pos()
{
    if ( scripts\mp\utility\game::updatex1stashhud() )
        return;

    scripts\mp\scoreboard::_id_128B0();

    if ( getdvarint( "MTKSQRQLKN" ) != 0 )
    {
        if ( scripts\mp\utility\game::matchmakinggame() && !scripts\mp\utility\game::privatematch() )
            setclientmatchdata( "isPublicMatch", 1 );
        else
            setclientmatchdata( "isPublicMatch", 0 );
    }

    level scripts\engine\utility::waittill_notify_or_timeout( "br_c130_left_bounds", 120 );
    scripts\mp\scoreboard::_id_128B0();
}

setup_player_killstreak_loadouts()
{
    level endon( "game_ended" );

    if ( disable_fulton_group_interactions() && dialog_mount_nag_watcher() )
    {
        if ( !scripts\mp\gametypes\br_public.gsc::validtousesticker() && !scripts\mp\gametypes\br_public.gsc::tutorial_playsound() )
        {
            var_0 = disable_weapon_swap_until_swap_finished();
            scripts\mp\gametypes\br_rewards.gsc::kioskreviveplayer( var_0 );

            if ( scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee_params( "dropBagLoop" ) )
            {
                for (;;)
                    scripts\mp\gametypes\br_rewards.gsc::kioskreviveplayer( var_0 );
            }
        }
    }

    level.dropbagstruct = undefined;
}

resetalldoors( var_0 )
{
    level endon( "game_ended" );

    if ( isdefined( var_0 ) )
        wait( var_0 );

    difficulty_update_time( 200 );
}

setup_teleport_rooms( var_0, var_1 )
{
    if ( isdefined( var_0 ) && var_0 == "exit_squad_eliminated" )
        self setclientomnvar( "ui_br_squad_eliminated_active", 0 );
}

updateplayerlocationcallouts()
{
    level endon( "game_ended" );

    if ( !isdefined( level.calloutglobals.calloutzones ) )
        level.calloutglobals.calloutzones = getentarray( "location_volume", "targetname" );

    if ( !level.calloutglobals.calloutzones.size )
        return;

    for (;;)
    {
        var_0 = 0;

        foreach ( var_2 in level.players )
        {
            if ( !isplayer( var_2 ) || !isalive( var_2 ) )
                continue;

            if ( isdefined( var_2.br_currentcalloutzone ) && var_2 istouching( var_2.br_currentcalloutzone ) )
                continue;

            var_3 = 0;

            foreach ( var_5 in level.calloutglobals.calloutzones )
            {
                if ( var_2 istouching( var_5 ) )
                {
                    var_3 = 1;
                    var_2.br_currentcalloutzone = var_5;
                    var_2 scripts\mp\callouts::setplayercalloutarea( var_5.script_noteworthy );
                    var_2 thread scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "onEnterCalloutArea", var_5.script_noteworthy );
                    break;
                }
            }

            if ( !var_3 )
            {
                var_2.br_currentcalloutzone = undefined;
                var_2 scripts\mp\callouts::setplayercalloutarea( "none" );
            }

            var_0 = ( var_0 + 1 ) % 2;

            if ( var_0 == 0 )
                waitframe();
        }

        waitframe();
    }
}

getusingproxdoors()
{
    return 0;
}

watchprematchdone()
{
    scripts\mp\flags::gameflagwait( "prematch_fade_done" );
    level notify( "br_prematchEnded" );
    var_0 = scripts\mp\utility\game::getlivingplayers();
    level.totalplayers = var_0.size;
    var_1 = 0;

    foreach ( var_3 in level.teamnamelist )
    {
        if ( scripts\mp\utility\teams::getteamdata( var_3, "aliveCount" ) > 0 )
            var_1++;
    }

    level._id_1385E = max( 1, var_1 );
    level._id_12855 = gettime();
    level.recordfinalkillcam = 1;
    level.ignorescoring = 0;
    level.disableweaponstats = 0;
    level.disablestattracking = 0;
    level.prematchaddkillfunc = undefined;
    level.getarenapickupattachmentoverrides = 0;
    difficulty_think();

    foreach ( var_6 in level.players )
        var_6 _id_12C6F();

    if ( !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee_params( "allowLateJoiners" ) )
    {
        level.allowlatecomers = 0;
        setnojiptime( 1, 1 );
        setnojipscore( 1, 1 );
    }

    vehicle_getarrayinradius();
    setomnvar( "scriptable_loot_hide", 0 );

    foreach ( var_6 in level.players )
    {
        var_6 setclientdvar( "MQNNLTKNTS", 1 );

        if ( isalive( var_6 ) )
        {
            var_6.health = var_6.maxhealth;
            var_6 scripts\cp\vehicles\vehicle_compass_cp::_id_1383B( "alive_not_downed" );
        }
    }

    scripts\mp\gametypes\br_analytics.gsc::detonatedripfx( var_0.size );
    level _id_1319B();
}

turnofftimer()
{
    wait 1;
    setomnvar( "ui_match_timer_hidden", 1 );
}

initspawns()
{
    scripts\mp\spawnlogic::setactivespawnlogic( "FreeForAll", "Crit_Default" );
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
}

tolerance()
{
    if ( !scripts\mp\gametypes\br_public.gsc::tutorial_playsound() )
    {
        level.startingspawns = scripts\mp\spawnlogic::getspawnpointarray( "mp_dm_spawn_start" );

        if ( level.startingspawns.size == 0 )
            level.startingspawns = scripts\mp\spawnlogic::getspawnpointarray( "mp_tdm_spawn_allies_start" );

        level.prematchspawnorigins = getprematchlocationspawnorigins();
    }
}

debugspawnlocations()
{
    for (;;)
    {
        foreach ( var_1 in level.prematchspawnorigins )
        {
            [var_3, var_4] = getprematchradius( var_1 );

            if ( var_3 > 0 )
            {

            }
        }

        waitframe();
    }
}

_id_14070()
{
    var_0 = getdvarint( "scr_useProfileSpawn", 0 ) != 0;
    return ( !istrue( level.br_prematchstarted ) || istrue( level.debug_safehouse_gunshop_start ) ) && !istrue( level.skipprematchdropspawn ) && !var_0 && !istrue( level.stop_end_breach_fx );
}

getspawnpoint( var_0 )
{
    if ( isdefined( self._id_1286F ) )
    {
        var_1 = self._id_1286F;
        self._id_1286F = undefined;
        return var_1;
    }

    if ( isdefined( self.thrust_fx_model ) )
    {
        var_1 = self.thrust_fx_model;
        return var_1;
    }

    if ( !isdefined( level.prematchspawnorigins ) )
        tolerance();

    if ( istrue( var_0 ) || _id_14070() )
    {
        var_2 = ( 0, randomintrange( 0, 360 ), 0 );
        var_4 = getprematchspawnorigin();
        [var_6, var_7] = getprematchradius( var_4 );
        var_8 = randomfloatrange( var_6, var_7 );

        if ( getdvarint( "scr_br_streamFurthestInitial", 0 ) == 1 )
        {
            var_10 = vectortoangles( var_4.origin );
            var_2 = ( 0, var_10[1], 0 ) * -1;
            var_8 = var_7;
        }

        if ( isdefined( var_4.angles ) )
            var_2 = var_4.angles;

        var_11 = anglestoforward( var_2 ) * -1;
        var_12 = var_11 * var_8;
        var_13 = var_4.origin + var_12;
        var_13 = scripts\mp\gametypes\br_c130.gsc::_id_1342E( var_4.origin, var_13, 30 );

        if ( isdefined( self.setspawnpoint ) )
        {
            var_14 = scripts\mp\gametypes\br_public.gsc::getinfilspawnoffset();
            var_13 = self.setspawnpoint.playerspawnpos + ( 0, 0, var_14 );
            var_2 = self.setspawnpoint.playerspawnangles;
            scripts\mp\equipment\tac_insert::_id_13681( 0, 1 );
        }

        var_1 = spawnstruct();
        var_1.origin = var_13;
        var_1.angles = var_2;
        var_1.index = -1;
        return var_1;
    }

    var_15 = level.startingspawns;
    var_1 = scripts\mp\spawnlogic::getspawnpoint_random( var_15 );

    if ( !isdefined( var_1 ) )
    {
        var_1 = spawnstruct();
        var_1.origin = ( 0, 0, 0 );
        var_1.angles = ( 0, 0, 0 );
        var_1.index = -1;
    }

    return var_1;
}

createspawnlocation( var_0, var_1, var_2 )
{
    var_3 = spawnstruct();
    var_3.origin = var_0;
    var_3.minradius = var_1;
    var_3.radius = var_2;
    return var_3;
}

getprematchlocationspawnorigins()
{
    var_0 = 0;
    var_1 = scripts\engine\utility::getstructarray( "br_prematch_insertion_point", "targetname" );

    if ( isdefined( level.delete_script_object ) )
    {
        var_0 = 1;
        var_1 = level.delete_script_object;
    }
    else if ( !var_1.size )
    {
        var_0 = 1;
        var_1 = getentarray( "vehicle_volume", "script_noteworthy" );
    }

    foreach ( var_3 in var_1 )
    {
        var_3.groundorigin = var_3.origin;

        if ( !isdefined( var_3.radius ) )
            var_3.radius = 5000;

        if ( !isdefined( var_3.minradius ) )
            var_3.minradius = 500;
    }

    var_5 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "prematchSpawnMaxLocations" );

    if ( !isdefined( var_5 ) )
        var_5 = getdvarint( "scr_br_maxprematchlocations", 5 );

    if ( var_5 > 0 && var_5 < var_1.size )
        var_1 = scripts\engine\utility::array_slice( scripts\engine\utility::array_randomize( var_1 ), 0, var_5 );

    foreach ( var_3 in var_1 )
    {
        if ( var_0 )
        {
            var_3.origin = getoffsetspawnorigin( var_3.origin );
            continue;
        }

        var_7 = getoffsetspawnorigin( var_3.origin )[2];

        if ( var_3.origin[2] < var_7 )
            var_3.origin = ( var_3.origin[0], var_3.origin[1], var_7 );
    }

    return var_1;
}

getoffsetspawnorigin( var_0, var_1 )
{
    var_2 = scripts\engine\trace::create_default_contents( 1 );
    var_3 = ( 0, 0, 5000 );
    var_4 = var_0 + var_3;
    var_5 = var_0 - var_3;
    var_6 = scripts\engine\trace::ray_trace( var_4, var_5, undefined, var_2 );
    var_7 = var_0;

    if ( var_6["hittype"] != "hittype_none" )
        var_7 = var_6["position"];

    if ( !isdefined( var_1 ) )
    {
        var_8 = scripts\mp\gametypes\br_public.gsc::getinfilspawnoffset();
        var_1 = ( 0, 0, var_8 );
    }

    return var_7 + var_1;
}

resetcircuitbreakers( var_0, var_1 )
{
    var_2 = 5000;
    var_3 = -5000;
    var_4 = scripts\mp\gametypes\br_public.gsc::modifyplayer_damage( var_0, var_2, var_3 );

    if ( !isdefined( var_1 ) )
    {
        var_5 = scripts\mp\gametypes\br_public.gsc::getinfilspawnoffset();
        var_1 = ( 0, 0, var_5 );
    }

    return var_4 + var_1;
}

relic_squadlink_toofar_hud_logic()
{
    var_0 = int( 150 / scripts\mp\gametypes\br_public.gsc::replace_sat_piece_on_deathordisconnect() );
    return var_0;
}

getprematchspawnorigin()
{
    var_0 = scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee_params( "doFirstUnusedPrematchSpawnOrigin" );

    if ( istrue( var_0 ) && isdefined( level._id_12864 ) )
    {
        var_1 = 0;

        for ( var_2 = 0; var_2 < level.prematchspawnorigins.size; var_2++ )
        {
            if ( level._id_12864[var_2] < level._id_12864[var_1] )
                var_1 = var_2;
        }

        level._id_12864[var_1]++;
        var_3 = level.prematchspawnorigins[var_1];
        return var_3;
    }

    if ( !isdefined( level.prematchspawnoriginnextidx ) )
    {
        if ( scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "randomizePrematchSpawnOriginNextIdx" ) )
            level.prematchspawnoriginnextidx = 0;
        else
            level.prematchspawnoriginnextidx = randomint( level.prematchspawnorigins.size );

        level._id_12865 = [];

        for ( var_2 = 0; var_2 < level.prematchspawnorigins.size; var_2++ )
            level._id_12865[var_2] = 0;
    }

    var_3 = scripts\mp\gametypes\br_public.gsc::round_at_max( self.sessionteam, self.squadindex, "prematchSpawnOrigin" );

    if ( !isdefined( var_3 ) )
    {
        var_3 = level.prematchspawnorigins[level.prematchspawnoriginnextidx];
        scripts\mp\gametypes\br_public.gsc::_id_131C3( self.sessionteam, self.squadindex, "prematchSpawnOrigin", var_3 );
        level._id_12865[level.prematchspawnoriginnextidx]++;
        var_4 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "prematchSpawnNumTeamsPerLocation" );

        if ( !isdefined( var_4 ) )
        {
            var_5 = relic_squadlink_toofar_hud_logic();
            var_4 = int( var_5 / level.prematchspawnorigins.size );
        }

        if ( level._id_12865[level.prematchspawnoriginnextidx] >= var_4 )
            level.prematchspawnoriginnextidx = ( level.prematchspawnoriginnextidx + 1 ) % level.prematchspawnorigins.size;
    }

    var_6 = getdvarint( "scr_br_overrideprematchspawn", -1 );

    if ( var_6 >= 0 && var_6 < level.prematchspawnorigins.size )
        var_3 = level.prematchspawnorigins[var_6];

    return var_3;
}

onplayerconnect( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0.ui_dom_securing = undefined;
    var_0.ui_dom_stalemate = undefined;
    var_0.needtoplayintro = undefined;
    var_0.br_infil_type = undefined;
    var_0.equipment = [];
    var_0.delay_give_tactical_grenade = 1;
    var_0 thread scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_init();
    var_0 scripts\cp\vehicles\little_bird_mg_cp::calloutmarkerping_initplayer();

    if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "playerWelcomeSplashes" ) )
        var_0 thread scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "playerWelcomeSplashes" );
    else
        var_0 thread _id_126F1();

    var_0 _id_12C6F();
    scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "onPlayerConnect", var_0 );

    if ( scripts\mp\gametypes\br_gametype_olaride.gsc::arefactionpointsenabled() )
        var_0 thread scripts\mp\gametypes\br_gametype_olaride.gsc::loadplayerhvveventpoints();

    if ( !istrue( level.prematchstarted ) )
    {
        var_0.radarmode = "slow_radar";
        level waittill( "prematch_started" );
        wait 1.4;
    }

    if ( !isdefined( var_0.streakdata ) )
        waittillframeend;

    if ( isdefined( var_0 ) )
    {
        if ( !scripts\mp\gametypes\br_public.gsc::uniquelootitemid() && !scripts\mp\gametypes\br_public.gsc::validtousesticker() && !scripts\mp\gametypes\br_public.gsc::tutorial_playsound() && !scripts\mp\utility\game::updatex1stashhud() )
        {
            if ( !istrue( level._id_133E0 ) )
            {
                var_0 scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
                var_0 scripts\mp\gametypes\br_pickups.gsc::resetplayerinventory();
            }

            var_0 scripts\cp_mp\utility\game_utility::startkeyearning();
        }

        var_0 thread _id_11D22();
        var_1 = getdvar( "scr_br_radar_mode", "" );

        if ( var_1 != "" )
            var_0.radarmode = var_1;
        else
            var_0.radarmode = "normal_radar";

        scripts\mp\gametypes\br_quest_util.gsc::onplayerconnect( var_0 );
        threat_sight_monitor( var_0 );
        var_0 scripts\mp\gametypes\br_gulag.gsc::updatecanusegulag();
    }
}

_id_126F1()
{
    self endon( "disconnect" );
    self waittill( "spawned_player" );
    wait 1;

    if ( !istrue( game["liveLobbyCompleted"] ) )
    {
        scripts\mp\hud_message::showsplash( "br_prematch_welcome" );

        if ( istrue( level.vehicle_collision_getleveldata ) )
            self setplayermusicstate( "event01_lobby" );
    }

    if ( !istrue( level.br_infils_disabled ) )
    {
        self waittill( "br_jump" );

        if ( isdefined( game["dialog"]["match_desc"] ) )
            scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "match_desc", self, 0 );

        while ( !self isonground() )
            waitframe();
    }
    else
        level waittill( "prematch_done" );

    scripts\mp\gametypes\br_analytics.gsc::detachriotshield( self );
    wait 1;
    scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "primary_objective", self, 0 );
}

onspawnplayer()
{
    self notify( "br_spawned" );
    var_0 = istrue( self.gulag );
    scripts\mp\gametypes\br_pickups.gsc::initplayer( var_0 );
    scripts\mp\gametypes\br_functional_poi.gsc::initplayer();

    if ( !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "armor" ) )
        scripts\mp\gametypes\br_armor.gsc::teamfriendlyto();

    if ( !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "teamSpectate" ) )
        scripts\mp\gametypes\br_spectate.gsc::initplayer();

    self.oldprimarygun = undefined;
    self.newprimarygun = undefined;
    self.healthregendisabled = 0;
    self.br_lastscenecheck = gettime();
    self.needtoplayintro = undefined;
    self.gunnlessweapon = undefined;
    self.disable_hotjoining_after_time = undefined;
    self._id_12885 = undefined;

    if ( !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "waitLoadoutDone" ) )
        thread waitloadoutdone();

    level.superdelay = 0;
    level.superpointsmod = 1;
    self.br_perks = [ 0, 0, 0, 0, 0 ];
    self.br_perkpoints = 0;

    if ( level._id_121C8 )
        self getclientomnvar();
    else
        self weaponswitchbuttonpressed();

    if ( level._id_121C9 )
        self skydive_cutautodeployon();
    else
        self skydive_cutautodeployoff();

    if ( getdvarint( "scr_br_hudoutlineForTeammates", 0 ) > 0 )
        level thread emissive( self );

    if ( getdvarint( "scr_game_hcmode" ) == 1 )
        self.healthregendisabled = 1;

    scripts\mp\gametypes\br_public.gsc::_id_1319E( 0 );
    scripts\mp\gametypes\br_public.gsc::_id_1319C( 0 );
    _id_1401F( self, self, 0, 1 );
    level thread _id_14006();
}

waittill_return( var_0, var_1 )
{
    if ( var_0 != "death" )
        self endon( "death" );

    var_1 endon( "die" );
    self waittill( var_0, var_2, var_3 );
    var_1 notify( "returned", var_2, var_3, var_0 );
}

waittill_confirm_or_cancel( var_0, var_1, var_2 )
{
    if ( ( !isdefined( var_0 ) || var_0 != "death" ) && ( !isdefined( var_1 ) || var_1 != "death" ) )
        self endon( "death" );

    var_3 = spawnstruct();

    if ( isdefined( var_0 ) )
        childthread waittill_return( var_0, var_3 );

    if ( isdefined( var_1 ) )
        childthread waittill_return( var_1, var_3 );

    if ( isdefined( var_2 ) )
        childthread waittill_return( var_2, var_3 );

    var_3 waittill( "returned", var_4, var_5, var_6 );
    var_3 notify( "die" );
    var_7 = spawnstruct();
    var_7.location = var_4;
    var_7.angles = var_5;
    var_7.string = var_6;
    return var_7;
}

_id_13C34( var_0 )
{
    var_1 = var_0 + ( 0, 0, 10000 );
    var_2 = var_0 - ( 0, 0, 10000 );
    var_3 = scripts\cp_mp\vehicles\vehicle_tracking::vehicle_tracking_getgameinstancesforall();
    var_4 = level.activekillstreaks;
    var_5 = scripts\engine\utility::array_combine( var_3, var_4 );
    var_6 = scripts\engine\trace::create_contents( 0, 1, 0, 1, 1, 0, 0, 0, 0 );
    return scripts\engine\trace::ray_trace( var_1, var_2, var_5, var_6, 0, 1 );
}

giveprematchloadout()
{
    self endon( "death_or_disconnect" );

    if ( !istrue( level.br_prematchffa ) )
        return;

    if ( isdefined( level.calculateclientmatchdataextrainfopayload ) )
        self [[ level.calculateclientmatchdataextrainfopayload ]]();
}

calculateclientmatchdataextrainfopayload()
{
    var_0 = getdvarint( "scr_br_allow_prematch_perks", 0 ) == 1;

    if ( !var_0 )
        thread scripts\mp\class::loadout_clearperks();

    waitframe();

    if ( !level.allowsupers && !istrue( level.scriptedphysicaldofenabled ) || getdvar( "scr_br_gametype", "" ) == "reveal" || getdvarint( "scr_br_force_prematch_ammo_drop", 1 ) == 1 )
    {
        scripts\mp\gametypes\br_pickups.gsc::_id_12C81();
        scripts\mp\gametypes\br_pickups.gsc::forcegivesuper( "super_ammo_drop", 0 );
    }
}

givematchloadout( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 0.5;

    if ( !isdefined( var_1 ) )
        var_1 = 20;

    var_2 = self;
    var_3 = var_2 scripts\mp\class::loadout_getorbuildclassstruct( var_2.class );

    if ( !isdefined( var_3 ) )
        return;

    var_2.prevweaponobj = undefined;
    var_2 scripts\mp\class::loadout_clearperks();
    var_2 scripts\mp\class::loadout_updateplayerperks( var_3 );
    scriptednode( var_2 );
    var_4 = 0;

    if ( isdefined( var_3.loadoutsecondaryobject ) && !nullweapon( var_3.loadoutsecondaryobject ) )
    {
        scripts\mp\gametypes\br_weapons.gsc::br_forcegivecustomweapon( var_2, var_3.loadoutsecondaryobject, var_3.loadoutsecondaryfullname, var_3.loadoutsecondary, var_0, var_1 );
        var_4++;
    }

    if ( isdefined( var_3.loadoutprimaryobject ) && !nullweapon( var_3.loadoutprimaryobject ) )
    {
        scripts\mp\gametypes\br_weapons.gsc::br_forcegivecustomweapon( var_2, var_3.loadoutprimaryobject, var_3.loadoutprimaryfullname, var_3.loadoutprimary, var_0, var_1 );
        var_4++;
    }

    if ( var_4 > 1 )
        var_2 takeweapon( "iw8_fists_mp" );

    var_5 = [];

    if ( isdefined( var_3.loadoutequipmentprimary ) )
        var_5[var_5.size] = var_3.loadoutequipmentprimary;

    if ( isdefined( var_3.loadoutequipmentsecondary ) )
        var_5[var_5.size] = var_3.loadoutequipmentsecondary;

    foreach ( var_7 in var_5 )
    {
        if ( isdefined( level.br_pickups.br_equipnametoscriptable[var_7] ) )
        {
            var_8 = level.br_pickups.br_equipnametoscriptable[var_7];
            scripts\mp\gametypes\br_pickups.gsc::br_forcegivecustompickupitem( var_2, var_8, 1 );
        }
    }
}

givematchloadoutfordropbags()
{
    var_0 = self;
    var_0.prevweaponobj = undefined;
    var_0 scripts\mp\class::loadout_clearperks();
    scriptednode( var_0 );
}

prematchdeployparachute()
{
    self endon( "disconnect" );

    while ( self.sessionstate != "playing" )
        waitframe();

    thread scripts\cp_mp\parachute::startfreefall( 2, 0, undefined, undefined, 1, 0 );
}

getprematchradius( var_0 )
{
    var_1 = var_0.radius;
    var_2 = var_0.minradius;
    var_3 = getdvarint( "scr_br_prematch_spawn_max_radius", -1 );

    if ( var_3 >= 0 )
        var_1 = var_3;

    var_3 = getdvarint( "scr_br_prematch_spawn_min_radius", -1 );

    if ( var_3 >= 0 )
        var_2 = var_3;

    if ( var_2 >= var_1 )
        var_1 = var_2 + 1;

    return [ var_2, var_1 ];
}

scriptednode( var_0 )
{
    if ( istrue( level.playerkillstreakgetownerlookatignoreents ) )
        return;

    if ( !level.teambased )
        return;

    var_1 = level.maxteamsize == 1;
    var_2 = istrue( var_0.shouldgetnewspawnpoint );

    if ( var_1 && !var_2 && !istrue( level.brking_initpostmain ) )
        return;

    if ( !tvstation_fastrope_init( var_0 ) )
        return;

    if ( var_0 scripts\mp\utility\perk::_hasperk( "specialty_pistoldeath" ) )
        return;

    if ( scripts\mp\utility\game::getgametype() != "br" )
        return;

    var_0 scripts\mp\utility\perk::giveperk( "specialty_pistoldeath" );
}

search_update_delay( var_0 )
{
    if ( !tvstation_fastrope_init( var_0 ) )
        return;

    if ( !var_0 scripts\mp\gametypes\br_public.gsc::shouldlink() )
        return;

    if ( scripts\mp\utility\game::getgametype() != "br" )
        return;

    var_0 scripts\mp\perks\perks::bears();
}

waitloadoutdone()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "death" );
    self waittill( "giveLoadout" );

    if ( scripts\mp\gametypes\br_public.gsc::validtousesticker() || scripts\mp\gametypes\br_public.gsc::uniquelootitemid() )
        return;

    if ( scripts\mp\gametypes\br_public.gsc::tutorial_playsound() )
    {
        scripts\mp\gametypes\br_armor.gsc::searchcirclesize();
        return;
    }

    if ( !istrue( level.br_prematchstarted ) )
    {
        thread giveprematchloadout();
        scripts\mp\gametypes\br_armor.gsc::searchcirclesize();

        if ( !istrue( self._id_12860 ) )
        {
            self._id_12860 = 1;
            scripts\engine\utility::delaythread( 1.0, scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward, "prematch_enter", self );
            var_0 = game["music"]["br_lobby_intro"].size - 1;
            var_1 = randomint( var_0 );
            self setplayermusicstate( game["music"]["br_lobby_intro"][var_1] );
        }

        var_2 = getdvarint( "scr_useProfileSpawn", 0 ) != 0;

        if ( istrue( level.infilcanusemap ) && !var_2 )
        {
            level waittill( "begin_infil_map_selection" );
            scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
            scripts\mp\gametypes\br_pickups.gsc::resetplayerinventory();
        }

        level waittill( "infils_ready" );

        if ( level.allowsupers )
            scripts\mp\supers::clearsuper( 0 );
    }

    scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
    var_3 = istrue( self.gulag ) || scripts\mp\gametypes\br_public.gsc::validtousesticker() || istrue( self._id_12CA8 );
    scripts\mp\gametypes\br_pickups.gsc::resetplayerinventory( var_3 );

    if ( !var_3 )
        scripts\mp\gametypes\br_armor.gsc::searchcirclesize();

    scriptednode( self );

    if ( istrue( self.isrespawn ) )
        return;

    if ( istrue( self.gulag ) || istrue( self._id_12CA8 ) )
        return;

    if ( !istrue( level.br_infils_disabled ) && !istrue( self.watch_for_usb_notetrack_switchoff ) )
        thread scripts\mp\gametypes\br_infils.gsc::setplayerprematchallows();
}

onplayerscore( var_0, var_1, var_2, var_3 )
{
    return var_2;
}

brmodifyplayerdamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 )
{
    var_11 = var_3;

    if ( level.tacticalmode )
        var_3 = scripts\mp\damage::gamemodemodifyplayerdamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );

    if ( var_1 scripts\mp\gametypes\br_public.gsc::isplayeringulag() && istrue( var_1.gulagarena ) && getdvarint( "scr_gulag_mp_damage", 1 ) )
        return var_3;

    if ( !isdefined( var_10 ) )
        var_10 = var_3;

    if ( var_3 > 0 )
    {
        if ( istrue( var_1.tracking_max_health ) )
            var_1 notify( "br_try_armor_cancel" );

        var_12 = scripts\mp\utility\weapon::getweaponrootname( var_5 );
        var_13 = scripts\mp\utility\weapon::getweaponbasenamescript( var_5 );
        var_14 = weaponclass( var_5 );

        if ( var_4 == "MOD_FALLING" )
        {
            if ( isdefined( level._id_11C94 ) )
                var_3 = var_1 [[ level._id_11C94 ]]( var_3 );
            else if ( var_1 scripts\mp\utility\killstreak::isjuggernaut() )
            {

            }
            else if ( getdvarint( "scr_br_alt_mode_rocketjump", 0 ) )
            {
                if ( var_1 isskydiving() )
                    var_1 skydive_interrupt();

                var_3 = 0;
            }
            else if ( isdefined( self.br_maxarmorhealth ) )
                var_3 = self.maxhealth + self.br_maxarmorhealth;
            else
                var_3 = self.maxhealth;
        }
        else if ( isdefined( var_0 ) && var_0 scripts\cp_mp\vehicles\vehicle::isvehicle() && !istrue( var_0.stadium_one_death_func ) )
        {
            if ( isdefined( level._id_11C96 ) )
                var_3 = var_1 [[ level._id_11C96 ]]( var_3 );
            else if ( var_1 scripts\mp\utility\killstreak::isjuggernaut() )
            {

            }
            else
            {
                var_15 = self.maxhealth;

                if ( isdefined( self.br_maxarmorhealth ) )
                    var_15 = var_15 + self.br_maxarmorhealth;

                var_3 = scripts\mp\utility\script::roundup( var_3 * ( var_15 / level._id_12602 ) );
            }
        }
        else if ( var_12 == "iw8_sn_crossbow" && var_4 != "MOD_PISTOL_BULLET" )
        {

        }
        else if ( var_4 == "MOD_MELEE" )
        {
            var_3 = int( var_10 );
            var_3 = _id_11C9C( var_3, var_5 );

            if ( isdefined( var_0 ) )
            {
                if ( var_0 scripts\mp\utility\perk::_hasperk( "serum_gadget" ) )
                {
                    var_16 = _findnewlocaleplacement::randomoffsetmortar();
                    var_3 = int( var_3 * var_16 );
                }
            }
        }
        else if ( scripts\mp\utility\weapon::iskillstreakweapon( var_5 ) )
        {
            if ( istrue( var_1.inlaststand ) && scripts\mp\utility\killstreak::getkillstreaknamefromweapon( var_5 ) == "precision_airstrike" )
            {
                if ( isdefined( var_1.disable_hotjoining_after_time ) )
                {
                    var_17 = gettime() - var_1.disable_hotjoining_after_time < 5000;

                    if ( var_17 )
                        var_3 = 0;
                }
            }
        }
        else if ( var_4 == "MOD_EXPLOSIVE" || var_4 == "MOD_GRENADE_SPLASH" || var_4 == "MOD_PROJECTILE_SPLASH" || var_4 == "MOD_FIRE" )
        {
            if ( getdvarint( "scr_br_alt_mode_rocketjump", 0 ) && isdefined( var_0 ) )
            {
                var_3 = 0;
                var_1 thread debug_showcardlocs( var_0 );
            }

            if ( var_12 == "claymore_mp" || var_12 == "claymore_radial_mp" )
                var_3 = int( var_3 * 1.5 );
        }
        else if ( getdvarint( "scr_br_alt_mode_gg", 0 ) && var_4 != "MOD_TRIGGER_HURT" )
            var_3 = difficulty_allowseekafterthreshold( var_9, var_14, var_12, var_8, var_3 );
        else if ( getdvarint( "scr_br_clamp_step_damage", istrue( level.half_size ) ) && var_4 != "MOD_TRIGGER_HURT" )
            var_3 = died_poorly_funcs( var_9, var_14, var_12, var_8, var_10, var_3, var_5, var_4 );

        if ( isdefined( var_5 ) )
        {
            if ( var_5.type == "grenade" )
            {
                switch ( var_5.basename )
                {
                    case "frag_grenade_mp":
                        var_3 = int( var_3 * getdvarfloat( "scr_br_lethal_frag_multiplier", 2 ) );
                        break;
                    case "claymore_mp":
                        var_3 = int( var_3 * getdvarfloat( "scr_br_lethal_claymore_multiplier", 1.667 ) );
                        break;
                    case "semtex_mp":
                        var_3 = int( var_3 * getdvarfloat( "scr_br_lethal_semtex_multiplier", 1.5 ) );
                        break;
                    case "at_mine_ap_mp":
                        var_3 = int( var_3 * getdvarfloat( "scr_br_atMine_multiplier", 1.4 ) );
                        break;
                    case "molotov_mp":
                        var_3 = int( var_3 * getdvarfloat( "scr_br_molotov_multiplier", 1.45 ) );
                        break;
                    case "throwingknife_drill_mp":
                    case "throwingknife_electric_mp":
                    case "throwingknife_fire_mp":
                    case "throwingknife_mp":
                        if ( var_8 == "head" || var_8 == "helmet" )
                            var_3 = getdvarint( "scr_br_lethal_throwingKnife_set", 300 );
                        else
                            var_3 = getdvarint( "scr_br_lethal_throwingKnife_set", 200 );

                        break;
                }
            }
        }

        if ( disablebunker11cachelocations( var_1 ) )
        {
            if ( var_12 != "rock_mp" )
            {
                var_3 = 0;

                if ( isdefined( var_2 ) )
                    var_2 thread scripts\mp\damagefeedback::updatedamagefeedback( "standard", 0, 0, "standard", 0 );
            }
            else
                var_3 = 1;

            if ( var_1.health - var_3 <= 0 )
                var_3 = 0;
        }

        if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "modifyPlayerDamage" ) )
        {
            var_18 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_2, self, var_3, var_5, var_4, var_0, var_6, var_7 );
            var_18.shitloc = var_8;
            var_18.idflags = var_9;
            var_3 = thread scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "modifyPlayerDamage", var_18 );
        }

        if ( var_3 == 10000 && level.delay_spawn_room_soldiers == 1 )
            var_3 = int( level.delay_spawn_tanks );

        if ( level.decide_new_code == 1 && istrue( self.unset_relic_shieldsonly ) && ( isdefined( var_4 ) && var_4 != "MOD_TRIGGER_HURT" ) )
            var_3 = guard_shack_mantle( var_3, var_1 );

        if ( var_13 == "s4_me_icepick_mp" || var_13 == "s4_me_axe_mp" )
        {
            switch ( var_8 )
            {
                case "none":
                    break;
                case "head":
                    var_3 = level.delay_show_balloon;
                    break;
                case "neck":
                    var_3 = level.delay_show_marker_to_tv_station;
                    break;
                case "torso_upper":
                    var_3 = level.delay_spawn_nav_repulsor;
                    break;
                case "right_arm_upper":
                    var_3 = level.delay_show_player_clip;
                    break;
                case "left_arm_upper":
                    var_3 = level.delay_show_player_clip;
                    break;
            }
        }

        if ( isdefined( var_0 ) && isdefined( var_0.objweapon ) )
        {
            if ( var_0.objweapon.basename == "tur_gun_fd_mp_seeking" )
                var_3 = int( var_3 * level.pipe_room_dogtag_revive );
            else if ( var_0.objweapon.basename == "tur_gun_bt_mp" )
                var_3 = int( var_3 * level.pipe_room_dogtag_revive );
        }
    }

    if ( isdefined( var_2 ) && isplayer( var_2 ) && var_2 _meth_87DA( 1 ) )
    {
        if ( var_3 > var_11 )
            var_3 = var_11;
    }

    return var_3;
}

_id_11C9C( var_0, var_1 )
{
    if ( isdefined( level.player_equip_regen ) )
    {
        var_2 = scripts\mp\utility\weapon::getweaponrootname( var_1.basename );

        if ( var_2 == "iw8_fists" )
            return var_0 * level.player_equip_regen;
    }
    else
        return var_0;
}

elevator_lower( var_0 )
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "modifyVehicleDamage" ) )
        return scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "modifyVehicleDamage", var_0 );
    else if ( isdefined( level.playerbrsquadleaderscore ) )
        return [[ level.playerbrsquadleaderscore ]]( var_0 );

    return var_0.damage;
}

_id_11C66( var_0 )
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "allowMeleeVehicleDamage" ) )
        return scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "allowMeleeVehicleDamage", var_0 );

    return 0;
}

_id_120AB( var_0 )
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "onVehicleDamaged" ) )
        thread scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "onVehicleDamaged", var_0 );
}

_id_11C6B( var_0 )
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "ignoreVehicleExplosiveDamage" ) )
        return scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "ignoreVehicleExplosiveDamage", var_0 );

    return 0;
}

_id_11C82( var_0 )
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "shouldLastStandDamageScale" ) )
        return scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "shouldLastStandDamageScale", var_0 );

    return 1;
}

_id_11C67( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        switch ( var_0 )
        {
            case "supply_c130_loot":
            case "heavy_weapon_crate":
            case "battle_royale_chopper_loot":
            case "kiosk_drop":
            case "battle_royale_loadout":
            case "battle_royale_c130_loot":
            case "battle_royale_juggernaut":
                return 1;
            default:
                return 0;
        }
    }

    return 0;
}

_id_11C87( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
    {
        var_2 = istrue( var_1.managerespawnfade );

        if ( !var_2 )
            var_2 = isdefined( var_1.cratetype ) && _id_11C67( var_1.cratetype );

        if ( var_2 )
        {
            managerespawnfade( var_1, var_0, 75.0, -75.0 );
            return 1;
        }
    }

    if ( isscriptabledefined() )
    {
        var_3 = undefined;

        if ( isdefined( var_1 ) )
        {
            var_3 = getclosestpointonnavmesh( var_1.origin );

            if ( isdefined( var_3 ) )
            {
                var_4 = var_3 + ( 0, 0, 5 );
                var_5 = playerphysicstrace( var_3, var_4 );

                if ( var_5 != var_4 )
                    var_3 = undefined;
            }
        }

        if ( !isdefined( var_3 ) )
        {
            var_6 = scripts\mp\gametypes\br_public.gsc::modifyplayer_damage( var_0.origin, 30 );
            var_3 = getclosestpointonnavmesh( var_6 );
        }

        if ( isdefined( var_3 ) && isdefined( var_1 ) && istrue( var_1.manageprematchfade ) )
        {
            var_7 = [];

            if ( isdefined( var_1.stage1accradius ) && isarray( var_1.stage1accradius ) )
                var_7 = var_1.stage1accradius;

            var_8 = scripts\engine\trace::create_contents( 1, 1, 1, 1, 1, 1 );
            var_9 = scripts\engine\trace::ray_trace( var_0 gettagorigin( "tag_eye" ), var_3, scripts\engine\utility::array_add( var_7, var_1 ), var_8 );

            if ( isdefined( var_9["hittype"] ) && var_9["hittype"] != "hittype_none" || !canspawn( var_3 ) )
                var_3 = undefined;
        }

        if ( isdefined( var_3 ) )
        {
            var_0 setorigin( var_3 );
            return 1;
        }
    }

    return 0;
}

debug_showcardlocs( var_0 )
{
    var_1 = ( self.origin[0], self.origin[1], self.origin[2] + 36 );

    if ( self isonground() )
    {
        var_2 = ( self.origin[0], self.origin[1], self.origin[2] + 20 );
        self setorigin( var_2 );
    }

    var_3 = var_1 - var_0.origin;
    var_3 = vectornormalize( var_3 );
    var_4 = getdvarfloat( "scr_br_alt_mode_rocketjump_mult", 1300 );
    var_5 = undefined;

    if ( var_3[2] > -0.3 )
        var_5 = getdvarfloat( "scr_br_alt_mode_rocketjump_minz", 600 );

    var_6 = distance2d( var_0.origin, self.origin ) - 20;
    var_7 = clamp( var_6, 0, 80 ) / 100 * 0.5;
    var_8 = 1;
    var_9 = var_8 - var_7;
    var_3 = var_3 * var_4 * var_9;

    if ( isdefined( var_5 ) )
    {
        var_10 = var_8 - var_7 * 0.5;
        var_5 = var_5 * var_10;
        var_3 = ( var_3[0], var_3[1], max( var_5, var_3[2] ) );
    }

    self setvelocity( var_3 );
}

difficulty_allowseekafterthreshold( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( var_0 ) && var_0 & level.idflags_penetration )
        var_5 = 1;
    else
        var_5 = 0;

    if ( !var_5 )
    {
        switch ( var_1 )
        {
            case "pistol":
                if ( var_2 == "iw8_pi_decho" || var_2 == "iw8_pi_cpapa" )
                {
                    if ( var_3 == "head" || var_3 == "helmet" )
                        var_4 = 250;
                    else
                        var_4 = 150;
                }

                break;
            case "sniper":
                if ( var_2 == "iw8_sn_crossbowx" )
                    var_4 = 250;

                break;
            default:
                break;
        }
    }

    return var_4;
}

tutzonetriggerlogic( var_0 )
{
    return isdefined( var_0 ) && var_0 & level.idflags_penetration;
}

usefailvehiclemsg( var_0 )
{
    return var_0 == "iw8_sn_delta" || var_0 == "iw8_sn_golf28" || var_0 == "iw8_sn_mike14" || var_0 == "iw8_sn_sbeta" || var_0 == "iw8_sn_sksierra";
}

use_respawn_rules( var_0 )
{
    return var_0 == "s4_mr_gecho43" || var_0 == "s4_mr_m1golf" || var_0 == "s4_mr_svictor40" || var_0 == "s4_mr_malpha1916";
}

vehicle_collision_handleevent( var_0, var_1, var_2 )
{
    return var_0 == "iw8_sn_xmike109" && var_1 == "MOD_PISTOL_BULLET" && var_2 == 1;
}

unset_maze_ai_stealth_settings( var_0 )
{
    return var_0 == "iw8_sh_oscar12" || var_0 == "iw8_sh_aalpha12" || var_0 == "iw8_sh_t9fullauto" || var_0 == "iw8_sh_dpapa12" || var_0 == "iw8_sh_t9semiauto" || var_0 == "s4_sh_bromeo5";
}

died_poorly_funcs( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = tutzonetriggerlogic( var_0 );

    if ( !var_8 )
    {
        switch ( var_1 )
        {
            case "rifle":
                var_9 = var_5 / var_4;

                if ( getweaponammopoolname( var_6 ) == "WEAPON/AMMO_SLUGS" )
                {
                    if ( level.deletescavengerhud >= 0 )
                    {
                        var_9 = var_5 / var_4;
                        var_5 = min( var_5, level.deletescavengerhud );
                        var_5 = int( var_9 * var_5 );
                    }

                    break;
                }

                if ( scripts\cp_mp\utility\weapon_utility::tv_station_boss( var_2 ) )
                    var_10 = 1;
                else if ( usefailvehiclemsg( var_2 ) )
                {
                    if ( var_3 == "head" || var_3 == "helmet" )
                    {
                        var_5 = getdvarint( "scr_br_min_snprsemi_headshot_dmg", 175 );
                        break;
                    }

                    var_10 = 1;
                }
                else if ( var_2 == "iw8_ar_kilo433" || var_2 == "iw8_ar_t9accurate" || var_2 == "iw8_sn_t9precisionsemi" )
                    var_10 = level.half_size + 1;
                else
                    var_10 = level.half_size;

                var_5 = difficulty_init( var_4, var_6, var_10 );
                var_5 = int( var_9 * var_5 );
                break;
            case "pistol":
            case "mg":
                if ( var_2 == "iw8_pi_mike" && var_6 hasattachment( "barauto_mike" ) )
                    return var_5 * 0.9;
                else if ( var_2 == "iw8_pi_t9fullauto" )
                    return var_5;
                else if ( var_2 == "iw8_pi_papa320" && var_6 hasattachment( "akimbo_papa320" ) )
                    return var_5 * 0.9;
                else
                {
                    var_9 = var_5 / var_4;
                    var_5 = difficulty_init( var_4, var_6, level.half_size );
                    var_5 = int( var_9 * var_5 );
                }

                break;
            case "sniper":
                if ( level.br_sniper_fixed_hs_damage == 0 )
                    break;

                if ( var_3 == "head" || var_3 == "helmet" )
                {
                    if ( vehicle_collision_handleevent( var_2, var_7, var_5 ) )
                        var_5 = 75;
                    else if ( usefailvehiclemsg( var_2 ) )
                        var_5 = getdvarint( "scr_br_min_snprsemi_headshot_dmg", 175 );
                    else if ( use_respawn_rules( var_2 ) )
                        return var_5;
                    else
                        var_5 = getdvarint( "scr_br_min_snpr_headshot_dmg", 250 );
                }
                else if ( vehicle_collision_handleevent( var_2, var_7, var_5 ) )
                    return var_5;
                else
                {
                    var_9 = var_5 / var_4;

                    if ( usefailvehiclemsg( var_2 ) || var_2 == "iw8_sn_kilo98" )
                        var_11 = 1;
                    else if ( var_2 == "iw8_sn_romeo700" )
                        var_11 = 3;
                    else
                        var_11 = level.half_size;

                    var_5 = difficulty_init( var_4, var_6, var_11 );
                    var_5 = int( var_9 * var_5 );
                }

                break;
            case "smg":
                if ( var_2 == "iw8_sm_t9cqb" || var_2 == "iw8_sm_t9flechette" && var_7 == "MOD_EXPLOSIVE_BULLET" )
                    return var_5;
                else if ( scripts\cp_mp\utility\weapon_utility::tv_station_boss( var_2 ) )
                {
                    var_12 = 1;

                    if ( var_2 == "iw8_sm_t9burst" )
                        var_12 = 2;
                }
                else
                    var_12 = 3;

                var_9 = var_5 / var_4;
                var_5 = difficulty_init( var_4, var_6, var_12 );
                var_5 = int( var_9 * var_5 );

                if ( var_6 hasattachment( "calcust_mpapa5" ) && var_5 >= 30 && var_5 != 36 )
                    var_5 = var_5 * 0.92;

                break;
            case "spread":
                if ( var_2 == "iw8_pi_t9pistolshot" && var_6 hasattachment( "akimbo_pi_t9pistolshot" ) && var_6 hasattachment( "extclip_pi_t9pistolshot01" ) )
                    return var_5 * 0.95;

                if ( var_2 == "iw8_pi_t9pistolshot" )
                    return var_5;

                if ( level.delete_door_clip >= 0 )
                {
                    if ( unset_maze_ai_stealth_settings( var_2 ) && level.delete_dropped_weapon >= 0 )
                        var_13 = level.delete_dropped_weapon;
                    else
                        var_13 = level.delete_door_clip;

                    var_9 = var_5 / var_4;
                    var_5 = min( var_5, var_13 );
                    var_5 = int( var_9 * var_5 );
                }
            default:
                break;
        }
    }

    return var_5;
}

disablebunker11cachelocations( var_0 )
{
    return istrue( var_0.gulag ) && !istrue( var_0.gulagarena );
}

difficulty_init( var_0, var_1, var_2 )
{
    var_3 = 0;

    if ( var_2 == 4 )
        var_3 = var_1 clearvehiclesticker();
    else if ( var_2 == 3 )
        var_3 = var_1 getweaponclassint();
    else if ( var_2 == 2 )
        var_3 = var_1 getmid3damage();

    if ( var_3 <= 0 )
        var_3 = var_1.mindamage;

    if ( var_2 == 1 || var_3 <= 0 )
        var_3 = var_1.maxdamage;

    if ( var_0 < var_3 )
        return int( var_3 );
    else
        return var_0;
}

onplayerdamaged( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 )
{
    if ( scripts\mp\utility\weapon::iskillstreakweapon( var_6 ) )
    {
        if ( scripts\mp\utility\killstreak::getkillstreaknamefromweapon( var_6 ) == "precision_airstrike" && istrue( level.vehicle_collision_getleveldata ) )
            return;
    }

    if ( isdefined( var_1 ) && var_1 != var_2 && isplayer( var_1 ) )
    {
        if ( var_3 >= var_7 )
            var_3 = var_7;

        if ( var_3 > 0 )
        {
            var_14 = scripts\mp\utility\weapon::getweaponbasenamescript( var_6 );

            if ( var_14 == "rock_mp" && isalive( var_2 ) )
                var_2 playlocalsound( "br_gulag_rock_player_impact" );

            if ( ( var_14 == "snowball_mp" || var_14 == "coal_mp" ) && isalive( var_2 ) )
                scripts\mp\gametypes\br_alt_mode_hh.gsc::airstrike_watchownerdisown( var_14, var_1, var_2 );
        }

        var_1 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "damageDealt", var_1.pers["damage"] );
    }
    else if ( isdefined( var_0 ) && var_0 scripts\cp_mp\vehicles\vehicle::isvehicle() )
    {
        var_15 = var_0;

        if ( isdefined( var_15.owner ) && isplayer( var_15.owner ) && var_15.owner != var_2 )
            var_15.owner scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "damageDealt", var_15.owner.pers["damage"] );
    }
    else if ( isdefined( var_0 ) && var_0 _calloutmarkerping_isvehicleoccupiedbyenemy::unrescuable_fail() )
    {
        var_16 = var_0;

        if ( isdefined( var_16.owner ) && isplayer( var_16.owner ) && var_16.owner != var_2 )
            var_16.owner scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "damageDealt", var_16.owner.pers["damage"] );
    }

    if ( isdefined( var_6 ) && scripts\mp\utility\weapon::iskillstreakweapon( var_6 ) )
    {
        var_17 = var_3 >= var_7 && scripts\mp\utility\killstreak::getkillstreaknamefromweapon( var_6 ) == "precision_airstrike";
        var_18 = istrue( var_2.inlaststand );

        if ( var_17 && var_18 )
            var_2.disable_hotjoining_after_time = gettime();
    }

    if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "onPlayerDamaged" ) )
    {
        var_19 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_1, var_2, var_3, var_6, var_5, var_0, undefined, var_9 );
        thread scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "onPlayerDamaged", var_19 );
    }
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !istrue( level.br_prematchstarted ) )
        return;

    scripts\mp\gametypes\common.gsc::oncommonnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 );
    var_0.hostdamagepercenthigh = 0;
    var_6 = scripts\mp\utility\game::round_vehicle_logic();

    if ( var_6 == "dmz" || var_6 == "rat_race" || var_6 == "risk" || var_6 == "kingslayer" || var_6 == "rumble" || var_6 == "payload" || var_6 == "rumble_invasion" || var_6 == "gold_war" )
        return;

    var_7 = scripts\mp\utility\game::getlivingplayers();

    if ( isdefined( level.numendgame ) )
    {
        if ( var_7.size <= level.numendgame )
            level thread startendgame( 1 );
    }

    var_8 = level.totalplayers - var_7.size;
    var_9 = 0;

    foreach ( var_11 in level.players )
    {
        if ( isdefined( var_11.score ) && var_11.score > var_9 )
            var_9 = var_11.score;

        if ( isdefined( var_11.petwatch ) && isalive( var_11 ) )
        {
            var_12 = 1 - var_8 / level.totalplayers;
            var_11 scripts\cp_mp\pet_watch::_id_13E23( var_12, 5 );
        }
    }

    if ( !level.teambased )
    {
        var_0.score = level.totalplayers - var_7.size;

        foreach ( var_11 in var_7 )
            var_11.score = var_0.score + 1;
    }
}

getalivecount( var_0 )
{
    var_1 = 0;

    if ( istrue( var_0 ) )
    {
        foreach ( var_3 in level.teamnamelist )
            var_1 = var_1 + scripts\mp\utility\teams::getteamdata( var_3, "aliveCount" );
    }
    else
    {
        foreach ( var_3 in level.teamnamelist )
        {
            var_6 = scripts\mp\utility\teams::getteamdata( var_3, "aliveCount" );

            if ( var_6 )
            {
                var_7 = scripts\mp\utility\teams::getteamdata( var_3, "alivePlayers" );

                foreach ( var_9 in var_7 )
                {
                    if ( isdefined( var_9 ) && !istrue( var_9.gulag ) )
                        var_1 = var_1 + 1;
                }
            }
        }
    }

    return var_1;
}

doplayerkilledsplashes( var_0, var_1 )
{
    if ( istrue( level.usegulag ) && var_0 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
        return;

    var_2 = scripts\mp\gametypes\br_public.gsc::rotationrefsbyseatandweapon( var_0.team, var_0.squadindex );

    foreach ( var_4 in var_2 )
    {
        if ( !isdefined( var_4 ) )
            continue;

        if ( var_4 != var_0 )
            var_4 thread scripts\mp\hud_message::showsplash( "br_teammate_dead", undefined, var_0 );
    }
}

_id_13387()
{
    if ( istrue( level.usegulag ) && !istrue( level.gulag.shutdown ) )
    {
        var_0 = getalivecount( 0 );

        if ( var_0 <= getdvarint( "scr_br_fc_num_players_disable", -1 ) )
            scripts\mp\gametypes\br_gulag.gsc::shutdowngulag( "player_count", var_0 );
    }
}

_id_13388()
{
    if ( istrue( level.usegulag ) && !istrue( level.gulag.shutdown ) )
    {
        var_0 = getdvarint( "scr_br_fc_num_teams_disable", -1 );

        if ( var_0 < 0 )
            return;

        var_1 = _id_11F43( 0 );

        if ( var_1 <= var_0 )
            scripts\mp\gametypes\br_gulag.gsc::shutdowngulag( "team_count", var_1 );
    }
}

onplayerdisconnect( var_0 )
{
    if ( !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "teamSpectate" ) )
        thread scripts\mp\gametypes\br_spectate.gsc::_id_11BE2( var_0, undefined, 0 );

    if ( istrue( level.br_prematchstarted ) )
    {
        thread _id_13387();
        thread _id_13388();
        thread scripts\mp\gametypes\br_gulag.gsc::onplayerdisconnect( var_0 );

        if ( isdefined( var_0 ) && istrue( var_0.inlaststand ) && scripts\mp\utility\game::round_vehicle_logic() != "dmz" && scripts\mp\utility\game::round_vehicle_logic() != "rat_race" && scripts\mp\utility\game::round_vehicle_logic() != "risk" && scripts\mp\utility\game::round_vehicle_logic() != "kingslayer" && scripts\mp\utility\game::round_vehicle_logic() != "rumble" && scripts\mp\utility\game::round_vehicle_logic() != "gold_war" )
        {
            var_0 thread scripts\mp\gametypes\br_pickups.gsc::droponplayerdeath();

            if ( isdefined( var_0.watch_for_attack ) )
                var_0.watch_for_attack thread scripts\mp\damage::_id_125E3();
        }
    }

    thread scripts\mp\gametypes\br_analytics.gsc::destpoint( var_0, int( scripts\mp\utility\player::isreallyalive( var_0 ) ) );

    if ( isdefined( var_0 ) )
    {
        if ( isdefined( var_0.team ) )
        {
            var_1 = scripts\mp\utility\teams::getenemyteams( var_0.team );
            var_2 = [];

            foreach ( var_4 in var_1 )
            {
                if ( scripts\mp\utility\teams::getteamdata( var_4, "aliveCount" ) )
                    var_2[var_2.size] = var_4;
            }

            var_6 = var_2.size + 1;

            if ( scripts\mp\flags::gameflag( "prematch_done" ) )
            {
                [var_8, var_9, var_10] = forceunsetdemeanor( var_6 );

                if ( var_8 > 0 )
                {
                    var_0 scriptableusepart( var_8, undefined, "disconnect" );
                    var_0.matchbonus = var_9;
                    var_0._id_12394 = var_10;
                }

                var_0 _id_1319A( var_6 );
                var_0 scripts\cp_mp\utility\game_utility::_id_13168( var_6 );
                scripts\mp\gamelogic::ammobox_onplayerholduse( var_0, var_6 );
                var_0 scripts\mp\gametypes\br_challenges.gsc::_id_11E53();
            }

            var_0 thread setup_intel( var_6 );
        }

        if ( scripts\mp\flags::gameflag( "prematch_done" ) )
        {
            var_0 _id_138D6();
            _id_13FCC( var_0 );
        }
    }

    level thread _id_14006();
}

_id_13FCC( var_0 )
{
    scripts\mp\gamelogic::_id_128AF( var_0 );
    scripts\mp\scoreboard::_id_128A8( var_0 );
    var_1 = getdvarint( "MTKSQRQLKN", 0 );

    if ( var_1 )
        var_0 setshowinrealism();
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( istrue( level.br_prematchstarted ) )
    {
        if ( var_3 == "MOD_EXECUTION" )
            self._id_14436 = 1;
        else
            self._id_14436 = 0;

        scripts\mp\gametypes\br_pickups.gsc::droponplayerdeath( var_1 );
        doplayerkilledsplashes( self, var_1 );
        _id_13387();
        _id_13388();
        _id_12641( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );
    }

    scripts\mp\gametypes\br_jugg_common.gsc::onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );
    scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
    scripts\mp\gametypes\br_pickups.gsc::resetplayerinventory();
    onplayerscore( "kill", var_1, 0, self );

    if ( isdefined( self.watch_for_molotov_ambush_and_spawners ) )
    {
        scripts\mp\utility\outline::outlinedisable( self.watch_for_molotov_ambush_and_spawners, self );
        self.watch_for_molotov_ambush_and_spawners = undefined;
    }

    if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "onPlayerKilled" ) )
    {
        var_10 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_1, self, var_2, var_4, var_3, var_0, undefined, var_5 );
        var_10.hitloc = var_6;
        thread scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "onPlayerKilled", var_10 );
    }

    searchradiusmax( var_0, var_1, var_4 );

    if ( !istrue( level.br_prematchstarted ) )
    {
        scripts\mp\gametypes\br_plunder.gsc::playerplunderlivelobbydropondeath( var_3 );
        return;
    }

    thread scripts\mp\gametypes\br_quest_util.gsc::onplayerkilled( var_1, self );
    thread scripts\mp\gametypes\br_respawn.gsc::playerdied( var_1, var_4 );
    scripts\mp\gametypes\br_public.gsc::_id_1319E( 0 );
    scripts\mp\gametypes\br_public.gsc::_id_1319C( 0 );
    _id_1401F( self, self, 0, 1 );

    if ( istrue( self.inlaststand ) )
    {
        if ( isplayer( var_1 ) )
            var_1 incrementcleanupsstat();
    }

    var_11 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "markPlayerAsEliminatedOnKilled" );

    if ( !isdefined( var_11 ) )
        var_11 = !istrue( level.usegulag );

    if ( var_11 )
        _id_11B15( self, "onPlayerKilled" );

    if ( scripts\mp\gametypes\br_public.gsc::tutorial_playsound() )
    {
        if ( isbot( self ) && isplayer( var_1 ) && !istrue( var_1 scripts\mp\gametypes\br_public.gsc::isplayeringulag() ) )
            var_1 notify( "killed_enemy" );
    }

    if ( istrue( level.disable_super_in_turret.brmayconsiderplayerdead ) )
        self._id_1443F = scripts\mp\gametypes\br_public.gsc::_id_125F3();

    if ( istrue( level.disable_super_in_turret.brlootchoppercratecapturecallback ) )
        self._id_14438 = scripts\mp\gametypes\br_public.gsc::_id_125EC();

    if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "kiosk_onPlayerKilled" ) )
        scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "kiosk_onPlayerKilled", self );

    var_12 = getdvarint( "scr_spawn_hvv_tokens", 0 ) > 0;
    var_13 = scripts\mp\gametypes\br_public.gsc::isplayeringulag();

    if ( var_12 && !var_13 )
    {
        var_14 = getdvarfloat( "scr_br_hvv_token_chance_on_death", 0.5 );

        if ( randomfloat( 1.0 ) < var_14 )
            scripts\mp\gametypes\br_gametype_olaride.gsc::spawnherovillaintoken( self.origin, var_1.angles + ( 0, 90, 0 ), self );
    }

    level thread _id_14006();
}

_id_11B15( var_0, var_1 )
{
    var_0 _id_12640( 1, var_1 );
    var_0.delay_enter_combat_after_investigating_grenade = 1;
    level notify( "br_player_eliminated" );
    var_0 _id_14007();
    var_0 scripts\mp\gamelogic::updateplayerleaderboardstats();
}

_id_13F21( var_0, var_1 )
{
    var_0 _id_12640( 0, var_1 );
    var_0.delay_enter_combat_after_investigating_grenade = 0;
    var_0 scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    var_0 _id_14007();
}

_id_12641( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( getdvarint( "scr_br_print_alive_count", 1 ) && !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "oneLife" ) )
    {
        var_10 = "*-- Kill: " + gettime() + ", ";
        var_10 = var_10 + ( scripts\engine\utility::ter_op( isdefined( var_1 ) && !isstruct( var_1 ), var_1 getentitynumber(), "?" ) + scripts\engine\utility::ter_op( isdefined( var_0 ), "," + var_0 getentitynumber(), "" ) + "->" );
        var_10 = var_10 + scripts\engine\utility::ter_op( isdefined( self ), self getentitynumber(), "?" );
        var_10 = var_10 + scripts\engine\utility::ter_op( isdefined( var_3 ), ", " + var_3, "" );
        logstring( var_10 );
    }
}

_id_12640( var_0, var_1 )
{
    if ( getdvarint( "scr_br_print_alive_count", 1 ) && !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "oneLife" ) )
    {
        var_2 = scripts\engine\utility::ter_op( istrue( var_0 ), "*-- Mark: ", "*-- Unmark: " ) + gettime() + ", ";
        var_2 = var_2 + ( scripts\engine\utility::ter_op( isdefined( self ), self getentitynumber(), "?" ) + ", " );
        var_2 = var_2 + scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, "gamemode" );
        logstring( var_2 );
    }
}

_id_1263F( var_0, var_1, var_2 )
{
    if ( getdvarint( "scr_br_print_alive_count", 1 ) && !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "oneLife" ) )
    {
        var_3 = scripts\engine\utility::ter_op( istrue( var_0 ), "*-- Add: ", "*-- Remove: " ) + gettime() + ", ";
        var_3 = var_3 + ( scripts\engine\utility::ter_op( isdefined( self ), self getentitynumber(), "?" ) + ", " + var_1 + ", " );
        var_3 = var_3 + scripts\engine\utility::ter_op( isdefined( var_2 ), var_2, "none" );
        logstring( var_3 );
    }
}

getglobalbattlepassxpmultiplier( var_0 )
{
    if ( getdvarint( "scr_br_print_alive_count", 1 ) && !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "oneLife" ) )
    {
        foreach ( var_2 in level.players )
        {
            if ( isalive( var_2 ) && !istrue( var_2.delay_enter_combat_after_investigating_grenade ) && !var_2 scripts\mp\gametypes\br_public.gsc::_id_125EC() && !var_2 scripts\mp\gametypes\br_public.gsc::_id_125F3() && var_2.team != var_0 )
                scripts\mp\utility\script::laststand_dogtags( "Player isn't eliminated and didn't win: " + var_2 getentitynumber() );
        }
    }
}

_id_14007()
{
    var_0 = self;
    var_1 = 0;
    var_2 = scripts\mp\gametypes\br_public.gsc::round_enemy_stuck_logic( var_0.team, var_0.squadindex );

    foreach ( var_4 in var_2 )
    {
        if ( istrue( var_4.delay_enter_combat_after_investigating_grenade ) )
            var_1 = var_1 | 1 << var_4.pers["squadMemberIndex"] - 1;
    }

    foreach ( var_4 in var_2 )
        var_4 setclientomnvar( "ui_br_eliminated", var_1 );

    if ( istrue( level.matchmakingmatch ) )
    {
        var_8 = var_0 getfireteammembers();

        if ( isdefined( var_8 ) && var_8.size > 0 )
        {
            var_9 = 2;

            foreach ( var_4 in var_8 )
            {
                if ( isdefined( var_4 ) && !istrue( var_4.delay_enter_combat_after_investigating_grenade ) )
                {
                    var_9 = 0;
                    break;
                }
            }

            var_0 setclientomnvar( "ui_br_squad_eliminated_active", var_9 );

            foreach ( var_4 in var_8 )
                var_4 setclientomnvar( "ui_br_squad_eliminated_active", var_9 );
        }
    }
}

incrementcleanupsstat()
{
    var_0 = self;

    if ( !isdefined( var_0.br_cleanups ) )
        var_0.br_cleanups = 0;

    var_0.br_cleanups++;
    var_0 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "cleanups", var_0.br_cleanups );
}

registercrateforcleanup( var_0 )
{
    level.br_pickups.crates[level.br_pickups.crates.size] = var_0;
}

dropshield( var_0 )
{

}

makeitemsfromcrate( var_0 )
{
    var_1 = self.data;

    if ( var_1.type == "personal" )
    {
        makepersonalweaponfromcrate( var_0 );
        return;
    }

    if ( var_1.type == "weapon" )
    {
        var_2 = randomintrange( 2, 4 );
        var_3 = 6 - var_2;
    }
    else
    {
        var_2 = randomintrange( 1, 2 );
        var_3 = 6 - var_2;
    }

    var_4 = 0;

    for ( var_5 = 0; var_5 < var_2 && var_4 < level.br_pickups.br_dropoffsets.size; var_5++ )
    {
        if ( isdefined( makeweaponfromcrate( var_4 ) ) )
            var_4++;
    }

    for ( var_5 = 0; var_5 < var_3 && var_4 < level.br_pickups.br_dropoffsets.size; var_5++ )
    {
        if ( isdefined( makeitemfromcrate( var_4 ) ) )
            var_4++;
    }
}

makeweaponfromcrate( var_0 )
{
    var_1 = scripts\engine\utility::random( level.br_pickups.br_crateguns );
    var_2 = scripts\mp\gametypes\br_pickups.gsc::relics_monitor_on_player( var_1 );

    if ( !isdefined( var_2 ) )
        return;

    var_3 = scripts\engine\utility::drop_to_ground( self.origin + level.br_pickups.br_dropoffsets[var_0], 50, -200, ( 0, 0, 1 ) ) + ( 0, 0, 24 );
    var_4 = scripts\mp\gametypes\br_weapons.gsc::createspawnweaponatpos( var_3, ( 0, 0, 90 ), var_2 );

    if ( isdefined( var_4 ) )
        var_4.isweaponfromcrate = 1;

    return var_4;
}

makeitemfromcrate( var_0 )
{
    var_1 = scripts\engine\utility::drop_to_ground( self.origin + level.br_pickups.br_dropoffsets[var_0], 50, -200, ( 0, 0, 1 ) ) + ( 0, 0, 12 );
    var_2 = scripts\engine\utility::random( level.br_pickups.br_crateitems );
    var_3 = var_2;
    var_4 = scripts\mp\gametypes\br_pickups.gsc::remove_roof_nodes( var_1, ( 0, 0, 90 ) );
    var_5 = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( var_3, var_4, 1 );
    return var_5;
}

_id_11AA0( var_0 )
{
    var_1 = scripts\engine\utility::drop_to_ground( self.origin + level.br_pickups.br_dropoffsets[0], 50, -200, ( 0, 0, 1 ) ) + ( 0, 0, 12 );
    var_2 = scripts\mp\gametypes\br_pickups.gsc::remove_roof_nodes( var_1, ( 0, 0, 90 ) );
    var_3 = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( var_0, var_2, 1 );
    return var_3;
}

makepersonalweaponfromcrate( var_0 )
{
    var_1 = self.data;
    var_2 = scripts\engine\utility::drop_to_ground( self.origin + ( 0, 0, 6 ), 50, -200, ( 0, 0, 1 ) ) + ( 0, 0, 24 );
    var_3 = scripts\mp\gametypes\br_weapons.gsc::createspawnweaponatposfromname( var_2, var_1.personalweaponfullname );

    if ( isdefined( var_3 ) )
    {
        var_3.isweaponfromcrate = 1;
        var_0 loadweaponsforplayer( [ var_1.personalweaponfullname ] );
    }

    return var_3;
}

iconvisall( var_0, var_1 )
{

}

objvisall( var_0 )
{
    scripts\mp\objidpoolmanager::objective_playermask_showtoall( var_0 );
}

initloot()
{
    level.br_weaponweights = [];
    level.br_weaponweights["iw8_ar_mike4"] = 20;
    level.br_weaponweights["iw8_sm_mpapa5"] = 40;
    level.br_weaponweights["iw8_sh_dpapa12"] = 40;
    level.br_weaponweights["iw8_la_gromeo"] = 30;
    level.br_weaponweights["iw8_lm_kilo121"] = 10;
    level.br_weaponweights["iw8_sn_alpha50"] = 10;
    level.br_weaponweights["iw8_knife"] = 5;
    level.br_weaponweights["iw8_pi_golf21"] = 50;
    level.br_weaponweights["iw8_ar_akilo47"] = 20;
    level.br_weaponweighttotal = 0;

    foreach ( var_2, var_1 in level.br_weaponweights )
        level.br_weaponweighttotal = level.br_weaponweighttotal + var_1;

    level.attachmentmap = [];
    level.attachmentmap["iw8_ar_mike4"] = [];
    level.attachmentmap["iw8_ar_akilo47"] = [];
    level.attachmentmap["iw8_sm_mpapa5"] = [];
    level.attachmentmap["iw8_lm_kilo121"] = [];
    level.attachmentmap["iw8_sn_alpha50"] = [];
    level.attachmentmap["iw8_pi_golf21"] = [];
    level.attachmentmap["iw8_ar_akilo47"] = [];
    level.baseraritymap = [];
    level.baseraritymap["iw8_ar_mike4"] = 1;
    level.baseraritymap["iw8_ar_akilo47"] = 1;
    level.baseraritymap["iw8_sm_mpapa5"] = 1;
    level.baseraritymap["iw8_sh_dpapa12"] = 1;
    level.baseraritymap["iw8_la_gromeo"] = 1;
    level.baseraritymap["iw8_lm_kilo121"] = 1;
    level.baseraritymap["iw8_sn_alpha50"] = 3;
    level.baseraritymap["iw8_knife"] = 0;
    level.baseraritymap["iw8_pi_golf21"] = 0;
    level.attachraritymap = [];
    level.attachraritymap["holo"] = 1;
    level.attachraritymap["silencer"] = 2;
    level.attachraritymap["gl"] = 2;
}

weaponlocallowed( var_0, var_1 )
{
    foreach ( var_3 in var_1 )
    {
        var_4 = var_3.origin[2] - 24;
        var_5 = var_3.origin[2] + 90 - 24;

        if ( scripts\engine\utility::distance_2d_squared( var_3.origin, var_0.origin ) < 147456 && var_0.origin[2] >= var_4 && var_0.origin[2] <= var_5 )
            return 0;
    }

    return 1;
}

startendgame( var_0 )
{
    if ( istrue( level.br_debugsolotest ) )
        return;

    scripts\mp\gamelogic::pausetimer();
    level.timepausestart = gettime();
    level.timelimitoverride = 1;
}

debugtestcirclevfx( var_0 )
{
    if ( isdefined( level.circleemitters ) )
        destroyemitters( level.circleemitters );

    level notify( "runDebugVFXCircleTest" );
    waitframe();

    switch ( var_0 )
    {
        case 1:
            level thread rundebugvfxcircletest( 1000, 0, 15, 2000 );
            break;
        case 2:
            level thread rundebugvfxcircletest( 2500, 1000, 20, 2000 );
            break;
        case 3:
            level thread rundebugvfxcircletest( 4500, 2500, 25, 2000 );
            break;
        case 4:
            level thread rundebugvfxcircletest( 7000, 4500, 40, 2000 );
            break;
        case 5:
            level thread rundebugvfxcircletest( 10500, 7000, 70, 2000 );
            break;
        case 6:
            level thread rundebugvfxcircletest( 15000, 10500, 80, 2000 );
            break;
        case 7:
            level thread rundebugvfxcircletest( 20000, 15000, 80, 2000 );
            break;
        case 8:
            level thread rundebugvfxcircletest( 50000, 20000, 80, 2000 );
            break;
    }
}

groundraycast( var_0 )
{
    var_1 = scripts\engine\trace::create_contents( 0, 1, 0, 0, 1, 1 );
    var_2 = var_0 + ( 0, 0, 10000 );
    var_3 = var_2 + ( 0, 0, -20000 );
    var_4 = physics_raycast( var_2, var_3, var_1, undefined, 0, "physicsquery_closest", 1 );

    if ( isdefined( var_4 ) && var_4.size > 0 )
        return var_4[0]["position"];

    return ( 0, 0, 0 );
}

debugplayercirclevfx()
{
    for (;;)
    {
        waitframe();

        if ( !isdefined( level.circledebugpos ) || !isdefined( level.circledebugradius ) )
            continue;

        var_0 = distance2d( self.origin, level.circledebugpos ) < level.circledebugradius;

        if ( istrue( self.debugcircleincircle ) )
        {
            if ( !var_0 && level.debugcircleplayerfx == 0 )
            {
                playfxontag( level._effect["vfx_gas_ring_player"], self, "tag_eye" );
                level.debugcircleplayerfx = 1;
                self.debugcircleincircle = 0;
            }

            continue;
        }

        if ( var_0 && !self.debugcircleincircle )
        {
            self.debugcircleincircle = 1;
            stopfxontag( level._effect["vfx_gas_ring_player"], self, "tag_eye" );
            level.debugcircleplayerfx = 0;
        }
    }
}

rundebugvfxcircletest( var_0, var_1, var_2, var_3 )
{
    level endon( "game_ended" );
    level endon( "runDebugVFXCircleTest" );

    if ( !istrue( level.debugcircleplayerfx ) )
        level.players[0] thread debugplayercirclevfx();

    var_4 = 5;
    var_5 = level.players[0] groundraycast( level.players[0].origin );
    level.circleemitters = spawnentsincircle( var_5, var_0, var_3 );
    level.circledebugpos = var_5;
    wait 0.1;
    spawnvfxincircle( level.circleemitters );
    var_6 = var_2;

    while ( var_2 > 0 )
    {
        var_7 = var_2 / var_6;
        var_8 = var_1 + ( var_0 - var_1 ) * var_7;

        if ( var_4 < 0 )
        {
            destroyemitters( level.circleemitters );

            if ( var_8 <= 0 )
                return;

            level.circledebugradius = var_8;
            var_4 = 5;
            level.circleemitters = spawnentsincircle( var_5, var_8, var_3 );
            wait 0.1;
            spawnvfxincircle( level.circleemitters );
        }
        else
            updateemitterpositions( var_5, var_8, level.circleemitters );

        var_2 = var_2 - level.framedurationseconds;
        var_4 = var_4 - level.framedurationseconds;
        waitframe();
    }
}

destroyemitters( var_0 )
{
    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
    {
        if ( isdefined( var_0[var_1] ) )
        {
            stopfxontag( level._effect["vfx_gas_ring_puffy"], var_0[var_1], "tag_origin" );
            var_0[var_1] delete();
        }
    }
}

updateemitterpositions( var_0, var_1, var_2 )
{
    var_3 = var_2.size;
    var_4 = 6.2831 * var_1;
    var_5 = 360 / var_3;

    for ( var_6 = 0; var_6 < var_3; var_6++ )
    {
        var_7 = var_5 * var_6;
        var_8 = sin( var_7 ) * var_1;
        var_9 = cos( var_7 ) * var_1;
        var_10 = groundraycast( var_0 + ( var_9, var_8, 0 ) );
        var_2[var_6].origin = var_10;
        var_2[var_6].angles = ( 0, var_7 + 180, 0 );
    }
}

spawnentsincircle( var_0, var_1, var_2 )
{
    var_3 = [];
    var_4 = 6.2831 * var_1;
    var_5 = var_4 / var_2;

    if ( var_5 < 200 )
        iprintlnbold( "Using " + int( var_5 ) + " emitters" );
    else
        iprintlnbold( "Can't use " + int( var_5 ) + " emitters, using 200 instead" );

    var_5 = min( var_5, 200 );
    var_6 = 360 / var_5;

    for ( var_7 = 0; var_7 < var_5; var_7++ )
    {
        var_8 = var_6 * var_7;
        var_9 = sin( var_8 ) * var_1;
        var_10 = cos( var_8 ) * var_1;
        var_11 = groundraycast( var_0 + ( var_10, var_9, 0 ) );
        var_3[var_7] = spawn( "script_model", var_11 );
        var_3[var_7] setmodel( "tag_origin" );
        var_3[var_7].origin = var_11;
        var_3[var_7].angles = ( 0, var_8 + 180, 0 );
    }

    return var_3;
}

spawnvfxincircle( var_0 )
{
    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
        playfxontag( level._effect["vfx_gas_ring_puffy"], var_0[var_1], "tag_origin" );
}

debuggiveperkpoints()
{
    var_0 = scripts\mp\utility\game::getlivingplayers();

    foreach ( var_2 in var_0 )
        var_2.br_perkpoints = var_2.br_perkpoints + 5;
}

ontimelimit()
{
    if ( isdefined( level.numendgame ) )
        level thread startendgame( 1 );

    level.numendgame = undefined;
}

onplayerjointeam( var_0 )
{
    if ( !isdefined( var_0.team ) )
        scripts\mp\utility\script::laststand_dogtags( "onPlayerJoinTeam: !IsDefined( player.team ) - " + var_0.name );

    if ( !scripts\mp\utility\teams::isgameplayteam( var_0.team ) )
        scripts\mp\utility\script::laststand_dogtags( "onPlayerJoinTeam: !isGameplayTeam( player.team ) - " + var_0.name + " " + var_0.team );

    thread _id_1206E( var_0 );
}

_id_1206E( var_0 )
{
    self endon( "disconnect" );
    waittillframeend;

    if ( level.teambased )
    {
        var_1 = [];

        for ( var_2 = 1; var_2 < scripts\mp\gametypes\br_public.gsc::replace_sat_piece_on_deathordisconnect() + 1; var_2++ )
            var_1[var_1.size] = var_2;

        var_3 = scripts\mp\gametypes\br_public.gsc::round_enemy_stuck_logic( var_0.team, var_0.squadindex );
        var_4 = 1;

        foreach ( var_6 in var_3 )
        {
            if ( istrue( var_6.unicornpoints ) )
                continue;

            if ( istrue( var_6.tutorial_usingparachute ) )
                var_4 = 0;

            if ( isdefined( var_6.pers["squadMemberIndex"] ) )
                var_1 = scripts\engine\utility::array_remove( var_1, var_6.pers["squadMemberIndex"] );
        }

        if ( var_1.size == 0 && !isdefined( var_0.pers["squadMemberIndex"] ) )
            scripts\mp\utility\script::laststand_dogtags( "No pers[\"squadMemberIndex\"] available, things are broken! - squadsize = " + scripts\mp\gametypes\br_public.gsc::replace_sat_piece_on_deathordisconnect() + ", team = " + var_0.team + ", squadIndex = " + var_0.squadindex + ", team size = " + var_3.size );
        else
        {
            var_8 = undefined;

            if ( isdefined( var_0.pers["squadMemberIndex"] ) )
                var_8 = var_0.pers["squadMemberIndex"];
            else
                var_8 = var_1[0];

            if ( !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "squadLeader" ) )
                var_0 _id_1319D( var_4 );

            var_0 _id_131A8( var_8 );
        }
    }
}

ondeadevent( var_0 )
{
    if ( istrue( level.br_debugsolotest ) || scripts\mp\utility\game::round_vehicle_logic() == "dmz" || scripts\mp\utility\game::round_vehicle_logic() == "rat_race" || scripts\mp\utility\game::round_vehicle_logic() == "risk" || scripts\mp\utility\game::round_vehicle_logic() == "kingslayer" || scripts\mp\utility\game::round_vehicle_logic() == "rumble" || scripts\mp\utility\game::round_vehicle_logic() == "gold_war" )
        return;

    if ( isdefined( var_0 ) && var_0 != "all" )
    {
        thread _id_1209A( var_0 );
        var_1 = [];

        foreach ( var_3 in scripts\mp\utility\teams::getenemyteams( var_0 ) )
        {
            if ( scripts\mp\utility\teams::getteamdata( var_3, "aliveCount" ) )
                var_1[var_1.size] = var_3;
        }

        var_5 = var_1.size + 1;

        foreach ( var_7 in scripts\mp\utility\teams::getteamdata( var_0, "players" ) )
        {
            var_7 scripts\cp_mp\utility\game_utility::_id_13168( var_5 );
            var_7 _id_138D6();
        }

        scripts\mp\gamelogic::default_ondeadevent( var_0 );
    }
}

_id_11F43( var_0 )
{
    var_1 = 0;
    var_2 = level.teamnamelist;

    foreach ( var_4 in var_2 )
    {
        if ( scripts\mp\utility\teams::getteamdata( var_4, "aliveCount" ) )
        {
            if ( var_0 )
            {
                var_1++;
                continue;
            }

            var_5 = 0;
            var_6 = scripts\mp\utility\teams::getteamdata( var_4, "players" );

            foreach ( var_8 in var_6 )
            {
                if ( isdefined( var_8 ) && !var_8 scripts\mp\gametypes\br_public.gsc::updateinstantclassswapallowedinternal() )
                {
                    var_5 = 1;
                    break;
                }
            }

            if ( var_5 )
                var_1++;
        }
    }

    return var_1;
}

_id_1209A( var_0 )
{
    var_1 = [];
    var_2 = 0;

    foreach ( var_4 in level.teamnamelist )
    {
        if ( var_4 == var_0 )
            continue;

        var_5 = scripts\mp\utility\teams::getteamdata( var_4, "aliveCount" );

        if ( var_5 )
        {
            var_1[var_1.size] = var_4;
            var_6 = var_5;

            if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "remainingPlayersAliveOnTeam" ) )
                var_6 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "remainingPlayersAliveOnTeam", var_4 );

            var_2 = var_2 + var_5;
        }
    }

    var_8 = var_1.size + 1;
    _id_1209B( var_0, var_8, var_2, 0 );
    wait 20;
    thread scripts\mp\gamelogic::setupelevatordoor();
}

_id_1209B( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    soundsettimescalefactorfromtable( var_0, var_1 );
    scripts\mp\gametypes\br_analytics.gsc::dialog_monitor_getoffground( var_0, var_1 );
    [var_7, var_8, var_9] = forceunsetdemeanor( var_1 );
    var_10 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

    foreach ( var_12 in var_10 )
    {
        if ( isdefined( var_12 ) )
        {
            var_12 scriptableusepart( var_7, undefined, "squadEliminated" );
            var_12._id_1287A = var_7;
            var_12.matchbonus = var_8;
            var_12._id_12394 = var_9;
        }
    }

    if ( !istrue( var_4 ) )
        wait 1.5;

    if ( !istrue( level.vehicle_collision_getleveldata ) )
    {
        if ( !istrue( var_3 ) && var_2 < 5 )
            scripts\mp\gametypes\br_public.gsc::brleaderdialog( "top_5_lose", 0, var_10, 1 );
        else if ( !istrue( var_3 ) && var_2 < 10 )
            scripts\mp\gametypes\br_public.gsc::brleaderdialog( "top_10_lose", 0, var_10, 1 );
        else if ( !istrue( var_3 ) && var_2 < 25 )
            scripts\mp\gametypes\br_public.gsc::brleaderdialog( "top_25_lose", 0, var_10, 1 );

        if ( !istrue( var_5 ) )
            scripts\mp\gametypes\br_public.gsc::brleaderdialog( "team_loss", 0, var_10, 1 );
    }

    foreach ( var_12 in var_10 )
    {
        if ( isdefined( var_12 ) )
        {
            var_12 thread setup_intel( var_1 );
            var_12 _id_1319A( var_1 );
            var_12 _id_138D6();
            scripts\mp\gamelogic::ammobox_onplayerholduse( var_12, var_1 );
            _id_13FCC( var_12 );
        }
    }

    _id_13120( var_0 );
}

setup_intel( var_0 )
{
    var_1 = self;
    var_1 endon( "disconnnect" );

    if ( var_0 < 4 )
        var_1 scripts\cp_mp\pet_watch::below_player_eye_allowance();

    var_2 = gettime();
    var_1 setclientomnvar( "ui_br_player_position", var_0 );

    if ( !istrue( var_1.br_spectatorinitialized ) && !var_1 scripts\mp\gametypes\br_public.gsc::_id_125F3() && !var_1 scripts\mp\gametypes\br_public.gsc::_id_125EC() )
        var_1 waittill( "br_spectatorInitialized" );

    var_1 setclientomnvar( "ui_br_squad_eliminated_active", 1 );
    var_1 setclientomnvar( "ui_round_end_title", game["round_end"]["defeat"] );
    var_1 setclientomnvar( "ui_round_end_reason", game["end_reason"]["br_eliminated"] );
    var_1 scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    var_1 notify( "br_team_fully_eliminated" );
}

_id_1319A( var_0 )
{
    var_1 = self;

    if ( !isdefined( var_1 ) || istrue( var_1._id_12396 ) )
        return;

    var_1._id_12396 = 1;
    var_1._id_13AB8 = var_0;

    if ( var_0 <= 25 )
    {
        var_1 scripts\mp\utility\stats::incpersstat( "topTwentyFive", 1 );

        if ( var_0 <= 10 )
        {
            var_1 scripts\mp\utility\stats::incpersstat( "topTen", 1 );

            if ( var_0 <= 5 )
            {
                var_1 scripts\mp\utility\stats::incpersstat( "topFive", 1 );

                if ( var_0 == 1 )
                    var_1 scripts\mp\utility\stats::incpersstat( "wins", 1 );
            }
        }

        var_1 scripts\mp\gamelogic::updateplayerleaderboardstats();
    }
}

forceunsetdemeanor( var_0 )
{
    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        return [ 0, 0, 0 ];

    if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "calculateBRBonusXP" ) )
        return scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "calculateBRBonusXP", var_0 );

    if ( usingtacmap() )
        return [ 0, 0, 0 ];

    if ( isdefined( level._id_133C0 ) && istrue( level._id_133C0 ) )
        return [ 0, 0, 0 ];

    var_1 = getdvarfloat( "scr_br_time_XP_milisecond", 0.0039 );

    if ( !isdefined( level._id_13864 ) || !isdefined( var_0 ) || !isdefined( level._id_14676 ) || ( level._id_13864 <= 0 || var_0 <= 0 || level._id_14676 <= 0 ) )
        return [ 0, 0, 0 ];

    var_2 = gettime() - level._id_13864;
    var_3 = int( var_1 * var_2 + 0.5 );
    var_4 = level._id_14676 * ( level._id_14678 - var_0 + 1 );
    var_5 = var_3 + var_4;
    return [ var_5, var_3, var_4 ];
}

usingtacmap()
{
    return getdvarint( "scr_subType_overrideRespawnTest", scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "oneLife" ) );
}

usingobject()
{
    return getdvarint( "scr_subType_overrideBigTeamTest", scripts\mp\menus::_id_13733() );
}

_id_12C6F()
{
    scripts\cp\vehicles\vehicle_compass_cp::_id_12C6E( "driving" );
    scripts\cp\vehicles\vehicle_compass_cp::_id_12C6E( "alive_in_gas" );
    scripts\cp\vehicles\vehicle_compass_cp::_id_12C6E( "alive_not_downed" );
}

_id_138D6()
{
    scripts\cp\vehicles\vehicle_compass_cp::_id_138D5( "driving" );
    scripts\cp\vehicles\vehicle_compass_cp::_id_138D5( "alive_in_gas" );
    scripts\cp\vehicles\vehicle_compass_cp::_id_138D5( "alive_not_downed" );
}

searchradiusmax( var_0, var_1, var_2 )
{
    var_3 = self;

    if ( isdefined( var_1 ) && var_1 _calloutmarkerping_handleluinotify_mappingdeletemarker::updateexpiredlootleader() )
    {
        if ( isdefined( var_3.team ) && isdefined( var_1.team ) && var_3.team != var_1.team )
        {
            if ( isdefined( var_2 ) && isdefined( var_2.basename ) && var_2.basename == "tur_gun_bt_mp" )
            {
                var_4 = var_1.vehicle.owner;

                if ( isdefined( var_4 ) && var_4 != var_1 )
                    var_4 thread scripts\mp\utility\points::sec_sys_struct_1( "br_bt_turret_assist" );
            }
        }
    }
}

scriptableusepart( var_0, var_1, var_2 )
{
    if ( !isdefined( self ) || isbot( self ) || initmaxspeedforpathlengthtable( self ) )
        return;

    if ( !game["timePassed"] )
        return;

    if ( !( scripts\mp\utility\game::matchmakinggame() || getdvarint( "OSPNSPSKL" ) ) )
        return;

    if ( !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee_params( "allowEndGameXPBonus" ) && ( usingtacmap() || usingobject() ) )
        return;

    if ( !getdvarint( "scr_rebirth_bonus_xp_allowed", 1 ) )
    {
        var_3 = scripts\mp\utility\game::round_vehicle_logic();

        if ( var_3 == "rebirth" || var_3 == "rebirth_reverse" || var_3 == "treasure_hunt" || var_3 == "rebirth_dbd" )
            return;
    }

    if ( isdefined( self.dialog_wait_ready ) && self.dialog_wait_ready == 0 )
        return;

    var_4 = 0;
    var_5 = 0;

    if ( !isdefined( var_2 ) )
        var_2 = "undefined";

    switch ( var_2 )
    {
        case "disconnect":
            var_4 = 1;
            var_5 = 1;
            break;
        case "squadEliminated":
            var_4 = 1;
            var_5 = 1;
            break;
        case "endGame":
        case "winner":
            var_4 = 1;
            var_5 = 1;
            break;
        case "undefined":
        default:
            var_4 = 0;
            var_5 = 1;
            break;
    }

    if ( isdefined( self._id_1287A ) )
        var_0 = var_0 - self._id_1287A;

    if ( var_0 > 0 )
    {
        scripts\mp\rank::giverankxp( "br_timeXPBonus", var_0, var_1, var_4, var_5 );
        scripts\mp\gametypes\br_analytics.gsc::deregisterscriptableinstance( var_0, var_2 );
    }

    self.dialog_wait_ready = 0;
}

_id_1319B()
{
    var_0 = 545000;
    var_1 = var_0;
    var_2 = max( 1, level.maxteamsize );
    var_3 = 0;

    foreach ( var_5 in level.teamnamelist )
    {
        if ( scripts\mp\utility\teams::getteamdata( var_5, "teamCount" ) )
            var_3++;
    }

    var_3 = max( 1, var_3 );
    var_7 = 200;
    var_8 = 25;
    var_9 = int( var_3 * ( var_3 + 1 ) / 2 );
    var_9 = max( var_9, 1 );
    var_10 = int( var_1 / ( var_9 * var_2 ) + 0.9 );
    var_10 = int( clamp( var_10, var_8, var_7 ) );
    var_11 = getdvarint( "scr_br_placement_XP_share", var_10 );
    level._id_14676 = var_11;
    level._id_14678 = var_3;
    level._id_13864 = gettime();
}

searchradiusidealmax( var_0 )
{
    if ( !isdefined( level._id_145A5 ) )
        level._id_145A5 = freight_lift_combat();

    var_1 = self.lastnormalweaponobj;
    var_2 = int( var_0 * level._id_145A5 );
    scriptableusestate( "", var_2, var_1, 1, 0 );
}

freight_lift_combat()
{
    var_0 = getdvarfloat( "scr_br_weapon_XP_milsecond" );

    if ( var_0 != 0.0 )
        return var_0;

    var_1 = 0.0031;
    return var_1;
}

scriptableusestate( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( var_2 ) || scripts\mp\utility\weapon::iskillstreakweapon( var_2 ) || scripts\mp\utility\weapon::isvehicleweapon( var_2 ) )
        return;

    if ( isdefined( self.owner ) && !isbot( self ) )
    {
        self.owner scriptableusestate( var_0, var_1, var_2 );
        return;
    }

    if ( isai( self ) || !isplayer( self ) )
        return;

    if ( !isdefined( var_1 ) || var_1 <= 0 )
        return;

    if ( !isdefined( var_3 ) )
        var_3 = 0;

    if ( !isdefined( var_4 ) )
        var_4 = 0;

    if ( !var_3 )
        scripts\mp\utility\points::displayscoreeventpoints( var_1, var_0 );

    if ( !level.playerxpenabled )
        return;

    thread _id_1435E( var_0, var_1, var_2, var_4 );
}

_id_1435E( var_0, var_1, var_2, var_3 )
{
    self endon( "disconnect" );

    if ( !isdefined( var_3 ) )
        var_3 = 0;

    if ( !var_3 )
    {
        waitframe();
        scripts\mp\utility\script::waittillslowprocessallowed();
    }

    var_4 = 0;

    if ( !isdefined( var_2 ) || !scripts\mp\weaponrank::weaponshouldgetxp( var_2.basename ) )
        return;

    var_4 = var_1;
    var_4 = var_4 * scripts\mp\weaponrank::getweaponrankxpmultipliertotal();
    var_4 = int( var_4 );
    scripts\mp\rank::incrankxp( 0, var_2, var_4, "brWeaponXp" );

    if ( level.playerxpenabled && !isai( self ) )
    {
        if ( isdefined( var_2 ) && ( scripts\mp\utility\weapon::iscacprimaryweapon( var_2 ) || scripts\mp\utility\weapon::iscacsecondaryweapon( var_2 ) ) )
        {
            if ( !scripts\mp\utility\weapon::ispickedupweapon( var_2 ) || scripts\mp\utility\game::getgametype() == "br" )
                scripts\common\utility::_id_13E0A( level._id_11B31, scripts\mp\utility\weapon::getweaponrootname( var_2 ), "xp_earned", var_4, -1, var_2 );
        }
    }
}

freeze_bomb_vest_timer( var_0 )
{
    var_1 = 100;
    var_2 = 1;

    if ( usingtacmap() )
        var_2 = 0.6;
    else
        var_2 = 20;

    var_3 = int( var_1 + var_0 * var_2 * ( 80 / ( 40 + var_0 ) ) );
    var_4 = 50;
    var_3 = var_3 - var_3 % var_4 + var_4;
    return var_3;
}

resetpostgamestateonjoinedspectators()
{
    self endon( "disconnect" );
    var_0 = gettime();

    if ( !istrue( self.br_spectatorinitialized ) )
        self waittill( "br_spectatorInitialized" );

    var_1 = 3;
    var_2 = ( gettime() - var_0 ) / 1000;

    if ( var_2 < var_1 )
        wait( var_1 - var_2 );

    self setclientomnvar( "post_game_state", 0 );
}

ononeleftevent( var_0 )
{
    if ( istrue( level.br_debugsolotest ) )
        return;

    if ( level.teambased )
    {
        var_1 = scripts\mp\utility\game::getlastlivingplayer( var_0 );

        if ( isdefined( var_1 ) )
        {
            if ( istrue( scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "disableLastManStandingDialog", var_1 ) ) )
                return;

            var_1 scripts\engine\utility::delaythread( 0.5, scripts\mp\gametypes\br_public.gsc::brleaderdialog, "last_man_standing", 0, [ var_1 ] );
            return;
        }
    }
    else
    {
        level.lastplayerwins = scripts\mp\utility\game::getlastlivingplayer();
        level thread scripts\mp\gamelogic::endgame( level.lastplayerwins, game["end_reason"]["enemies_eliminated"] );
    }
}

onsuicidedeath( var_0 )
{
    if ( !level.teambased )
    {
        var_1 = scripts\mp\utility\game::getlivingplayers();
        var_0.score = level.totalplayers - var_1.size;

        foreach ( var_3 in var_1 )
            var_3.score = var_0.score + 1;
    }

    if ( !isgamebattlematch() && istrue( var_0.elevator_manager ) )
    {
        if ( !isdefined( var_0.hostdamagepercenthigh ) )
            var_0.hostdamagepercenthigh = 1;
        else
            var_0.hostdamagepercenthigh++;

        if ( var_0.hostdamagepercenthigh >= getdvarint( "scr_br_kick_consecutive_suicides", 5 ) )
            level thread scripts\mp\teams::vehomn_controlsarefadedoutorhidden( var_0 );
    }
}

_id_11E38()
{
    if ( isdefined( level.forcedend ) )
        return scripts\mp\gametypes\br_public.gsc::tutorial_playsound() && level.forcedend;

    return 0;
}

brendgame( var_0, var_1, var_2, var_3 )
{
    if ( level.gameended )
        return;

    if ( isdefined( var_1 ) )
        logstring( "[KEY_MOMENT] BrEndGame " + var_1 );
    else
        logstring( "[KEY_MOMENT] BrEndGame" );

    if ( !istrue( var_3 ) )
        getglobalbattlepassxpmultiplier( var_0 );

    level.gameendtime = gettime();
    level.gameended = 1;
    level notify( "game_ended", var_0 );

    if ( scripts\mp\gametypes\br_public.gsc::uniquelootitemid() )
    {
        if ( var_1 == 25 )
        {
            level.defensefactormod = 0;

            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "DMZTut", "empty" ) )
            {
                var_4 = scripts\cp_mp\utility\script_utility::getsharedfunc( "DMZTut", "empty" );
                level.defenderflagreset = var_4;
            }
        }
        else if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "DMZTut", "endGameVO" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "DMZTut", "endGameVO" ) ]]();
    }

    scripts\mp\gametypes\br_gulag.gsc::shutdowngulag( "end_game", 0, 1 );

    if ( scripts\mp\gametypes\br_public.gsc::tutorial_playsound() )
        level.playerzombiethermalupdate = 1;

    if ( !isdefined( level.get_rid_of_minigun ) )
        scripts\mp\gametypes\br_vehicles.gsc::emptyallvehicles();

    thread scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "endGame", var_0 );

    if ( _id_11E38() )
    {
        scripts\mp\gamelogic::endgame_regularmp( var_0, var_1, game["end_reason"]["br_eliminated"] );
        return;
    }

    setomnvarforallclients( "ui_br_transition_type", 0 );
    var_5 = undefined;

    if ( isdefined( var_0 ) && var_0 != "tie" )
    {
        var_5 = scripts\mp\utility\teams::getteamdata( var_0, "players" );
        _id_145CB( var_5 );
        level scripts\engine\utility::delaythread( 1.0, scripts\mp\gametypes\br_challenges.gsc::_id_11B1D, var_0 );

        if ( !isdefined( var_2 ) )
            var_2 = 1;

        if ( scripts\mp\gametypes\br_public.gsc::uniquelootitemid() && scripts\engine\utility::is_equal( var_1, 25 ) )
            var_2 = 0;

        if ( isdefined( level.victorydialogvoiceoverride ) && var_2 )
            scripts\mp\gametypes\br_public.gsc::brleaderdialog( "team_victory", 0, var_5, undefined, undefined, undefined, level.victorydialogvoiceoverride );
        else if ( var_2 )
            scripts\mp\gametypes\br_public.gsc::brleaderdialog( "team_victory", 0, var_5 );

        [var_7, var_8, var_9] = forceunsetdemeanor( 1 );
        scripts\mp\gametypes\br_analytics.gsc::dialog_monitor_getoffground( var_0, 1 );
        scripts\mp\gametypes\br_ending.gsc::_id_13FBC( var_5 );

        foreach ( var_11 in var_5 )
        {
            if ( !isdefined( var_11 ) )
                continue;

            if ( istrue( var_11.inlaststand ) )
            {
                if ( var_11 scripts\mp\laststand::playanim_aibegindismountturret( "self_revive_on_kill_success", var_11 ) )
                    var_11 scripts\mp\laststand::onrevive( 1 );
            }

            var_11 scripts\mp\gametypes\br_pickups.gsc::hangar_doors_opening_quadrace();

            if ( istrue( var_11.tracking_max_health ) )
                var_11 notify( "br_try_armor_cancel" );

            var_11 scripts\mp\gametypes\br_gulag.gsc::gulagfadefromblack();
            var_11.spawnprotection = 1;
            var_11 setclientomnvar( "ui_br_player_position", 1 );
            var_11 scriptableusepart( var_7, undefined, "winner" );
            var_11.matchbonus = var_8;
            var_11._id_12394 = var_9;
            var_11 scripts\cp_mp\pet_watch::below_player_eye_allowance();
            scripts\mp\gametypes\br_analytics.gsc::destroyscorelaunchonly( var_11, "player_win" );
            var_11 _id_1319A( 1 );
            var_11 scripts\cp_mp\utility\game_utility::_id_13168( 1 );
            var_11 _id_138D6();
            scripts\mp\gamelogic::ammobox_onplayerholduse( var_11, 0 );
            var_11 scripts\mp\gamelogic::updateplayerleaderboardstats();
            _id_13FCC( var_11 );

            if ( var_11 ispcplayer() )
                var_11 setclientomnvar( "nVidiaHighlights_events", 23 );

            if ( scripts\mp\gametypes\br_public.gsc::tutorial_playsound() && !isbot( var_11 ) )
                var_11 thread [[ level.mover_init ]]();
        }

        _id_13120( var_0 );
    }
    else
    {
        var_13 = [];

        if ( isdefined( level._id_12D05 ) )
        {
            var_14 = getdvarint( "scr_br_reveal_placement_xp", 1984 );

            foreach ( var_16 in level.teamnamelist )
            {
                if ( scripts\mp\utility\teams::getteamdata( var_16, "teamCount" ) )
                    var_13[var_13.size] = var_16;
            }

            var_18 = var_13.size;
            [var_7, var_8, var_9] = forceunsetdemeanor( var_18 );

            foreach ( var_11 in level.players )
            {
                var_11 scriptableusepart( var_7, undefined, "endGame" );
                var_11._id_1287A = var_7;
                var_11.matchbonus = var_8;
                var_11._id_12394 = var_14;
                var_11 _id_138D6();
            }
        }
        else if ( istrue( level._id_14603 ) )
        {
            var_22 = getdvarint( "scr_br_x1_placement_xp", 5140 );

            foreach ( var_16 in level.teamnamelist )
            {
                if ( scripts\mp\utility\teams::getteamdata( var_16, "teamCount" ) )
                    var_13[var_13.size] = var_16;
            }

            var_18 = var_13.size;
            [var_7, var_8, var_9] = forceunsetdemeanor( var_18 );

            foreach ( var_11 in level.players )
            {
                var_11 scriptableusepart( var_7, undefined, "endGame" );
                var_11._id_1287A = var_7;
                var_11.matchbonus = var_8;
                var_11._id_12394 = var_22;
                var_11 _id_138D6();
            }
        }
        else
        {
            foreach ( var_16 in level.teamnamelist )
            {
                if ( scripts\mp\utility\teams::getteamdata( var_16, "aliveCount" ) )
                    var_13[var_13.size] = var_16;
            }

            var_18 = var_13.size;
            [var_7, var_8, var_9] = forceunsetdemeanor( var_18 );

            foreach ( var_11 in level.players )
            {
                if ( !isdefined( var_11 ) )
                    continue;

                if ( isbot( var_11 ) || initmaxspeedforpathlengthtable( var_11 ) )
                    continue;

                if ( !scripts\mp\utility\player::isreallyalive( var_11 ) )
                    continue;

                var_11 scriptableusepart( var_7, undefined, "endGame" );
                var_11 _id_138D6();
                var_11.spawnprotection = 1;
                var_11 setclientomnvar( "ui_br_player_position", 1 );
            }
        }

        foreach ( var_16 in var_13 )
            _id_13120( var_16 );
    }

    var_35 = undefined;

    if ( isdefined( var_5 ) )
        var_35 = scripts\mp\gametypes\br_ending.gsc::get_center_of_array( var_5 );

    var_36 = scripts\mp\gametypes\br_quest_util.gsc::getvalidplayersinarray( level.players, level.questinfo.defaultfilter );
    scripts\mp\gametypes\br_analytics.gsc::destroy_jammer_relocate( var_36 );
    level thread scripts\mp\gametypes\br_analytics.gsc::destroy_lmgs();
    scripts\mp\gametypes\br_ending.gsc::_id_13E00( var_5, var_35 );

    if ( isdefined( level.defend_spawn_crates ) )
        wait( level.defend_spawn_crates );

    if ( isdefined( level.defenderflagreset ) )
        level thread [[ level.defenderflagreset ]]( var_0 );
    else
    {
        level thread handleendgamesplash( var_0 );
        level thread setup_player_stealth( var_0 );

        if ( istrue( level._id_13364 ) )
            level thread setup_player_marks( var_0 );

        if ( isdefined( level.defensefactormod ) )
            wait( level.defensefactormod );

        level thread setup_player_stealth( var_0 );

        if ( istrue( level._id_13364 ) )
            level thread setup_player_marks( var_0 );
    }

    if ( isdefined( level.delete_players_black_screen ) )
        level [[ level.delete_players_black_screen ]]( var_0 );

    if ( scripts\mp\gametypes\br_public.gsc::uniquelootitemid() )
    {
        if ( isdefined( level.lootcontentsadjust_accesscardsred ) )
        {
            level thread [[ level.lootcontentsadjust_accesscardsred ]]( var_0, var_1, game["end_reason"]["br_eliminated"] );
            return;
        }
    }

    if ( isdefined( var_5 ) && isdefined( var_35 ) )
        scripts\mp\gametypes\br_ending.gsc::_id_123DE( var_5, var_35 );

    scripts\mp\gamelogic::endgame_regularmp( var_0, var_1, game["end_reason"]["br_eliminated"] );
}

_id_145CB( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    foreach ( var_2 in var_0 )
    {
        if ( !isdefined( var_2 ) || !isplayer( var_2 ) )
            continue;

        var_2 scripts\mp\gametypes\br_ending.gsc::namehud();
    }
}

handleendgamesplash( var_0 )
{
    var_1 = [];

    if ( isdefined( var_0 ) && var_0 != "tie" )
        var_1 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

    var_2 = scripts\mp\gamelogic::reinforcement_icon_objective_id();

    if ( scripts\mp\utility\game::round_vehicle_logic() == "dmz" || scripts\mp\utility\game::round_vehicle_logic() == "rat_race" || scripts\mp\utility\game::round_vehicle_logic() == "risk" || scripts\mp\utility\game::round_vehicle_logic() == "kingslayer" || scripts\mp\utility\game::round_vehicle_logic() == "rumble" || scripts\mp\utility\game::round_vehicle_logic() == "gold_war" )
        thread scripts\mp\music_and_dialog::_id_12789( var_1 );

    foreach ( var_4 in var_1 )
    {
        var_4 setclientomnvar( "post_game_state", var_2 );
        var_4 setclientomnvar( "ui_br_end_game_splash_type", 1 );
    }
}

setup_player_stealth( var_0 )
{
    if ( isdefined( var_0 ) && var_0 != "tie" )
    {
        var_1 = scripts\mp\gamelogic::reinforcement_icon_objective_id();

        foreach ( var_3 in level.players )
        {
            if ( isdefined( var_3._id_126CC ) && var_3._id_126CC.team == var_0 && var_3.team != var_0 && !isdefined( var_3.shoulddropbrprimary ) )
            {
                var_3 setclientomnvar( "post_game_state", var_1 );
                var_3 setclientomnvar( "ui_br_end_game_splash_type", 1 );
                var_3.shoulddropbrprimary = 1;
            }
        }
    }
}

setup_player_marks( var_0 )
{
    if ( isdefined( var_0 ) && var_0 != "tie" )
    {
        var_1 = scripts\mp\gamelogic::reinforcement_icon_objective_id();

        foreach ( var_3 in level.players )
        {
            if ( var_3.team != var_0 && !isdefined( var_3.shoulddropbrprimary ) )
            {
                var_3 setclientomnvar( "post_game_state", var_1 );
                var_3 setclientomnvar( "ui_br_end_game_splash_type", 1 );
                var_3.shoulddropbrprimary = 1;
            }
        }
    }
}

brdpadcallback( var_0, var_1 )
{
    if ( istrue( level.stop_end_breach_fx ) )
        return;

    if ( isdefined( var_0 ) )
    {
        switch ( var_0 )
        {
            case "dpad_slot_down":
                if ( scripts\mp\gametypes\br_public.gsc::uniquelootitemid() && var_1 == 0 )
                {
                    if ( isdefined( level.lootchopper_spawn ) )
                        self thread [[ level.lootchopper_spawn ]]( var_0, var_1 );

                    break;
                }

                thread scripts\mp\gametypes\br_pickups.gsc::_id_1298F( var_1 );
                break;
            case "dpad_slot_up":
                scripts\mp\gametypes\br_pickups.gsc::useitemfrominventory( var_1 );
                break;
            case "dpad_perk_buy":
                scripts\mp\gametypes\br_perks.gsc::buyperkinslot( var_1 );
                break;
            case "dpad_mayday":
                thread scripts\cp\vehicles\little_bird_mg_cp::fulton_hostage_vo();
                break;
            case "try_use_heal_slot":
                var_2 = var_1;
                scripts\mp\gametypes\br_pickups.gsc::_id_126E1( var_2 );
                break;
            case "br_drop_all":
                if ( scripts\mp\gametypes\br_public.gsc::uniquelootitemid() && var_1 == 0 )
                {
                    if ( isdefined( level.lootchopper_spawn ) )
                        self thread [[ level.lootchopper_spawn ]]( var_0, var_1 );

                    break;
                }

                scripts\mp\gametypes\br_pickups.gsc::_id_12988( var_1 );
                break;
            default:
                break;
        }
    }
}

get_int_or_0( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    return int( var_0 );
}

parachutecomplete()
{
    if ( disable_fulton_group_interactions() && !dialog_mount_nag_watcher() && !istrue( self.dropbagspawned ) && !istrue( level._id_1284C ) )
    {
        if ( scripts\mp\gametypes\br_public.gsc::updatedragonsbreath() )
        {
            thread scripts\mp\gametypes\br_rewards.gsc::spawndropbagonlanding();

            foreach ( var_1 in level.teamdata[self.team]["players"] )
                var_1.dropbagspawned = 1;
        }
    }

    if ( scripts\mp\flags::gameflag( "prematch_done" ) )
        thread scripts\mp\gametypes\br_armory_kiosk.gsc::_id_1334A( 5 );

    thread scripts\cp_mp\gestures::_id_13E1A();
}

spawnintermission( var_0, var_1 )
{
    scripts\mp\playerlogic::setspawnvariables();
    self freezecontrols( 1 );
    scripts\mp\utility\player::updatesessionstate( "intermission" );
    scripts\mp\utility\player::clearkillcamstate();
    self.friendlydamage = undefined;
    self spawn( var_0, var_1 );
    scripts\mp\utility\player::_id_12898( "playerlogic::spawnIntermission() !!!CODE SPAWN!!! @" + var_0 );
    scripts\mp\utility\player::setdof_spectator();
}

emp_drone_proximity_explode( var_0 )
{
    if ( !isdefined( self._id_1286F ) || self calloutmarkerping_getent() )
    {
        if ( !istrue( game["switchedsides"] ) )
            self setclientomnvar( "ui_br_extended_load_screen", 0 );

        return;
    }

    thread emp_drone_should_take_damage();

    if ( !isdefined( self.thrust_fx_model ) )
    {
        var_1 = self._id_1286F.origin;
        var_2 = scripts\mp\gametypes\br_public.gsc::_id_126B8( var_1 );
        var_3 = getdvarint( "scr_br_drop_prespawn_timeout_ms", 9000 );
        scripts\mp\gametypes\br_public.gsc::_id_126B9( var_2, var_3, 1 );

        if ( !istrue( level._id_14623 ) && !istrue( self._id_14623 ) )
        {
            ending_fade_in();
            self setclientomnvar( "ui_br_transition_type", 4 );
        }

        wait 0.5;
        spawnintermission( var_2, self._id_1286F.angles );
        scripts\mp\spectating::setdisabled();
    }
    else
        self.thrust_fx_model = undefined;

    scripts\mp\gametypes\br_public.gsc::_id_126ED();
    self freezecontrols( 0 );
}

emp_drone_should_take_damage()
{
    self endon( "disconnect" );
    self waittill( "brWaitAndSpawnClientComplete" );
    self clearpredictedstreampos();

    if ( !istrue( level._id_14623 ) )
        self setclientomnvar( "ui_br_transition_type", 0 );

    if ( !istrue( game["switchedsides"] ) )
        self setclientomnvar( "ui_br_extended_load_screen", 0 );
}

brprematchaddkill()
{
    self.kills++;
}

eliminate_drone_attack_max_cooldown( var_0 )
{
    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        self.pers["damage"] = self.pers["damage"] + var_0;
}

difficulty_think()
{
    foreach ( var_1 in level.players )
    {
        var_1.kills = 0;
        var_1.pers["kills"] = 0;
        var_1.score = 0;
        var_1.pers["score"] = 0;
        var_1.egress_landlord_vo = 0;
        var_1.pers["contracts"] = 0;
        var_1 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "missionsCompleted", 0 );
        var_1.pers["damage"] = 0;
        var_1 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "damageDealt", 0 );
    }
}

difficulty_update_time( var_0 )
{
    level endon( "game_ended" );
    var_1 = getentitylessscriptablearrayinradius( undefined, undefined, undefined, undefined, "door" );
    var_2 = 0;
    var_3 = isdefined( var_0 ) && isint( var_0 );

    foreach ( var_5 in var_1 )
    {
        if ( !var_5 scriptabledoorisclosed() )
        {
            var_5 vehicle_getinputvalue();

            if ( var_3 )
            {
                var_2++;

                if ( var_2 >= var_0 )
                {
                    var_2 = 0;
                    waitframe();
                }
            }
        }
    }
}

_id_126EB( var_0 )
{
    var_1 = spawnstruct();
    thread _id_143F1( var_1 );
    thread _id_143FC( var_1, var_0 );
    var_1 waittill( "waittill_proc" );
    return var_1.result;
}

_id_143F1( var_0 )
{
    var_0 endon( "waittill_proc" );
    self waittill( "luinotifyserver", var_1, var_2 );
    var_0.result = [ var_1, var_2 ];
    var_0 notify( "waittill_proc" );
}

_id_143FC( var_0, var_1 )
{
    var_0 endon( "waittill_proc" );
    wait( var_1 );
    var_0 notify( "waittill_proc" );
}

playerselectspawnclass()
{
    self endon( "death_or_disconnect" );
    self endon( "last_stand_start" );
    self endon( "halo_kick_c130" );
    level endon( "game_ended" );
    level endon( "end_spawn_selection" );

    if ( getdvarint( "scr_force_cac_sre_callstack", 0 ) == 1 && scripts\mp\utility\game::getgametype() == "br" && scripts\mp\utility\game::round_vehicle_logic() != "dmz" && scripts\mp\utility\game::round_vehicle_logic() != "rat_race" && scripts\mp\utility\game::round_vehicle_logic() != "risk" && scripts\mp\utility\game::round_vehicle_logic() != "rumble" && scripts\mp\utility\game::round_vehicle_logic() != "sandbox" && scripts\mp\utility\game::round_vehicle_logic() != "gold_war" )
    {
        var_0 = isdefined( level.allowclasschoicefunc ) && istrue( self [[ level.allowclasschoicefunc ]]() );
        scripts\mp\utility\script::laststand_dogtags( "playerSelectSpawnClass() " + self.name + " ui_options_menu = 2, allowClassChoiceFunc = " + var_0 );
    }

    self setclientomnvar( "ui_options_menu", 2 );
    var_1 = "custom1";
    self.pers["class"] = var_1;
    self.class = var_1;
    scripts\mp\class::preloadandqueueclass( var_1 );
    var_2 = getdvarfloat( "scr_dropbag_timeout", 10.0 );
    var_3 = 0.0;
    var_4 = var_2 > 0.0;

    for (;;)
    {
        var_5 = undefined;
        var_6 = undefined;

        if ( var_4 )
        {
            var_7 = _id_126EB( 1.0 );

            if ( !isdefined( var_7 ) )
            {
                var_3 = var_3 + 1.0;

                if ( var_3 > var_2 )
                {
                    self setclientomnvar( "ui_options_menu", 0 );
                    return 0;
                }

                self setclientomnvar( "ui_options_menu", 2 );
                continue;
            }

            var_5 = var_7[0];
            var_6 = var_7[1];
        }
        else
            self waittill( "luinotifyserver", var_5, var_6 );

        if ( var_5 == "exit_loadout_bag" )
            return 0;
        else if ( var_5 != "class_select" )
            continue;

        var_8 = 0;

        if ( var_6 >= 0 )
        {
            var_9 = scripts\mp\menus::getclasschoice( var_6 );
            self.pers["class"] = var_9;
            self.class = var_9;
            scripts\mp\class::preloadandqueueclass( var_9 );
            var_8 = 1;
        }

        self setclientomnvar( "ui_options_menu", 0 );
        return var_8;
    }
}

playerselectspawnsequence()
{
    var_0 = self;
    var_0.issquadleader = undefined;
    var_0.br_infilstarted = 0;
    var_0 endon( "disconnect" );
    scripts\mp\gametypes\br_vehicles.gsc::emptyallvehicles();
    var_1 = 1.0;
    var_2 = scripts\mp\gametypes\br_infils.gsc::getspawnselectionlockedtimer();
    var_3 = getdvarint( "scr_br_match_timer", 25 );
    var_4 = var_2 + 0.5 + var_3;
    var_0 thread scripts\mp\gametypes\br_infils.gsc::infilallfadetoblack( var_1, var_4, 1 );
    wait( var_1 );
    var_0 freezecontrols( 1 );
    var_0 thread monitorjumpmasterclaim();

    if ( disable_flag() )
        var_0 playerselectspawnclass();

    var_0 playerselectspawnlocation();
    var_0 setclientomnvar( "ui_options_menu", 0 );
    var_0 freezecontrols( 0 );
}

playerstartselectspawnclassnonexclusion()
{
    var_0 = self;
    var_0 endon( "disconnect" );
    var_0 freezecontrols( 1 );

    if ( disable_flag() )
        var_0 playerselectspawnclass();

    var_0 setclientomnvar( "ui_options_menu", 0 );
    var_0 freezecontrols( 0 );
}

playerselectspawnlocation()
{
    var_0 = self;
    var_0 beginlocationselection( 0, 0, 0, 0, 4 );

    while ( !scripts\mp\flags::gameflag( "end_spawn_selection" ) )
    {
        var_1 = waittill_confirm_or_cancel( "confirm_location_alt", "cancel_location" );

        if ( !isdefined( var_1 ) || var_1.string == "cancel_location" )
            continue;

        waittillframeend;
        scripts\mp\gametypes\br_infils.gsc::handleinfillocationselection( var_1 );
        waitframe();
    }

    var_0 endlocationselection();
}

monitorjumpmasterclaim()
{
    var_0 = self;
    var_0 endon( "disconnect" );
    var_0 thread listenforjumpmasterclaimluanotify();
    var_1 = 0;

    while ( !scripts\mp\flags::gameflag( "end_spawn_selection" ) )
    {
        var_2 = var_0 scripts\engine\utility::waittill_any_ents_return( var_0, "attempt_jumpmaster_claim", var_0, "squad_jumpmaster_claimed", level, "end_spawn_selection" );

        if ( var_2 == "attempt_jumpmaster_claim" )
        {
            if ( !var_1 )
            {
                var_0 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "jumpMasterState", 2 );
                var_0.issquadleader = 1;
                var_0 scripts\mp\utility\lower_message::setlowermessageomnvar( 48 );
                var_3 = scripts\mp\utility\teams::getfriendlyplayers( var_0.team, 0 );

                foreach ( var_5 in var_3 )
                {
                    if ( var_5 != var_0 )
                    {
                        var_5.issquadleader = 0;
                        var_5 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "jumpMasterState", 0 );
                        var_5 notify( "squad_jumpmaster_claimed" );
                        var_5 scripts\mp\utility\lower_message::setlowermessageomnvar( 49 );
                    }
                }
            }
            else
            {
                var_0 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "jumpMasterState", 1 );
                var_0 scripts\mp\utility\lower_message::setlowermessageomnvar( 53 );
            }

            continue;
        }

        if ( var_2 == "squad_jumpmaster_claimed" )
            var_1 = 1;
    }
}

listenforjumpmasterclaimluanotify()
{
    var_0 = self;
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 notify( "listenClaimJumpMaster" );
    var_0 endon( "listenClaimJumpMaster" );
    level endon( "end_spawn_selection" );

    for (;;)
    {
        var_0 waittill( "luinotifyserver", var_1 );

        if ( var_1 == "attempt_jumpmaster_claim" )
            var_0 notify( "attempt_jumpmaster_claim" );
    }
}

sendafksquadmembertogulag()
{
    var_0 = self;
    var_0.br_infilstarted = 1;
    var_0 setclientomnvar( "ui_br_infil_started", 1 );
    var_0 setclientomnvar( "ui_br_infiled", 1 );
    var_0 playershow( 1 );
    var_0 kill();
}

defend_wave_2()
{
    self endon( "disconnect" );
    self setclientomnvar( "ui_br_display_perk_info", 1 );
    wait 0.1;
    self setclientomnvar( "ui_br_display_perk_info", 0 );
}

delay_delete_reinforcement_called_icon( var_0, var_1, var_2 )
{
    var_0.gettingloadout = 1;
    var_3 = undefined;

    if ( isdefined( var_0.preloadedclassstruct ) )
    {
        var_3 = var_0.preloadedclassstruct;
        var_0.preloadedclassstruct = undefined;
    }
    else
    {
        var_3 = var_0 scripts\mp\class::loadout_getclassstruct();
        var_3 = var_0 scripts\mp\class::loadout_updateclass( var_3, var_0.class );
    }

    var_0.classstruct = var_3;
    var_4 = istrue( var_0.inlaststand );
    var_5 = defaultbreakeraction( var_0, var_1, var_2 );
    var_0.prevweaponobj = undefined;
    var_0 scripts\mp\class::loadout_clearperks( 1 );
    var_0 scripts\mp\class::loadout_updateplayerperks( var_3 );
    scriptednode( var_0 );

    if ( isdefined( var_0.classstruct.loadoutsecondaryobject ) )
        scripts\mp\gametypes\br_weapons.gsc::br_forcegivecustomweapon( var_0, var_0.classstruct.loadoutsecondaryobject, var_0.classstruct.loadoutsecondaryfullname, var_0.classstruct.loadoutsecondary );

    if ( isdefined( var_0.classstruct.loadoutprimaryobject ) )
        scripts\mp\gametypes\br_weapons.gsc::br_forcegivecustomweapon( var_0, var_0.classstruct.loadoutprimaryobject, var_0.classstruct.loadoutprimaryfullname, var_0.classstruct.loadoutprimary );

    var_6 = [];

    if ( isdefined( var_0.classstruct.loadoutequipmentprimary ) )
        var_6[var_6.size] = var_0.classstruct.loadoutequipmentprimary;

    if ( isdefined( var_0.classstruct.loadoutequipmentsecondary ) )
        var_6[var_6.size] = var_0.classstruct.loadoutequipmentsecondary;

    foreach ( var_8 in var_6 )
    {
        if ( isdefined( level.br_pickups.br_equipnametoscriptable[var_8] ) )
        {
            var_9 = level.br_pickups.br_equipnametoscriptable[var_8];
            scripts\mp\gametypes\br_pickups.gsc::br_forcegivecustompickupitem( var_0, var_9, 1 );

            if ( isdefined( var_5.nvgwatcher ) && var_5.nvgwatcher.type == var_9 )
                scripts\mp\gametypes\br_pickups.gsc::lootused( var_5.nvgwatcher, undefined, "visible", var_0, 1 );
            else if ( isdefined( var_5.nvidiaansel_allowduringcinematic ) && var_5.nvidiaansel_allowduringcinematic.type == var_9 )
                scripts\mp\gametypes\br_pickups.gsc::lootused( var_5.nvidiaansel_allowduringcinematic, undefined, "visible", var_0, 1 );
        }
    }

    var_0.gettingloadout = 0;
    var_0 notify( "giveLoadout" );
    var_0 thread defend_wave_2();

    if ( var_4 )
    {
        var_11 = var_0 getcurrentprimaryweapon();

        if ( !issameweapon( var_11 ) )
            var_11 = getcompleteweaponname( var_11 );

        self.laststandoldweaponobj = var_11;
        var_12 = var_0 brchooselaststandweapon();

        if ( !issameweapon( var_12 ) )
            var_12 = getcompleteweaponname( var_12 );

        var_0 scripts\mp\laststand::givelaststandweapon( var_12 );

        if ( !var_0 scripts\mp\utility\perk::_hasperk( "specialty_pistoldeath" ) )
            var_0 scripts\mp\utility\perk::giveperk( "specialty_pistoldeath" );
    }
}

defaultbreakeraction( var_0, var_1, var_2 )
{
    var_3 = spawnstruct();
    var_3.ml_p3_to_safehouse_transition = 0;
    var_3._id_14598 = [];
    var_3.nvgwatcher = undefined;
    var_3.nvidiaansel_allowduringcinematic = undefined;

    if ( istrue( var_2 ) )
    {
        var_3.ml_p3_to_safehouse_transition = int( 6.5 );

        if ( getdvarint( "scr_br_dropBehindDistant", 0 ) )
            var_3.ml_p3_to_safehouse_transition = var_3.ml_p3_to_safehouse_transition + 14;
    }

    foreach ( var_5 in var_0.equippedweapons )
    {
        var_6 = scripts\mp\utility\weapon::getweaponrootname( var_5.basename );

        if ( issameweapon( var_5 ) && var_5.inventorytype == "primary" )
        {
            if ( var_6 != "iw8_fists" && var_6 != "iw8_knifestab" )
            {
                var_7 = var_0 scripts\mp\gametypes\br_extract_quest.gsc::operatorsfxalias( var_5 );

                if ( istrue( var_1 ) && !var_7 )
                {
                    var_8 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_3, var_0.origin, var_0.angles, var_0 );
                    var_9 = scripts\mp\gametypes\br_weapons.gsc::weaponspawn( var_5, var_0, var_8, 0, 1 );

                    if ( isdefined( var_9 ) )
                    {
                        var_10 = var_0 getweaponammoclip( var_5 );
                        var_11 = var_0 getweaponammoclip( var_5, "left" );
                        var_12 = 0;

                        if ( var_5.hasalternate )
                        {
                            var_13 = var_5 getaltweapon();

                            if ( !scripts\mp\gametypes\br_weapons.gsc::debug_spawn_crate_on_train( var_5, var_13 ) )
                                var_12 = var_0 getweaponammoclip( var_13 );
                        }

                        scripts\mp\gametypes\br_pickups.gsc::_id_119F5( var_9, var_10, var_11, var_12 );
                        var_3._id_14598[var_3._id_14598.size] = var_9;
                    }
                }
            }

            var_0 scripts\cp_mp\utility\inventory_utility::_takeweapon( var_5 );
        }
    }

    if ( isdefined( var_0.equipment["primary"] ) )
    {
        if ( istrue( var_1 ) )
        {
            var_15 = var_0 scripts\mp\equipment::getequipmentslotammo( "primary" );
            var_16 = scripts\engine\utility::array_find( level.br_pickups.br_equipname, var_0.equipment["primary"] );

            if ( isdefined( var_16 ) && var_15 > 0 )
            {
                var_8 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_3, var_0.origin, var_0.angles, var_0 );
                var_9 = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( var_16, var_8, var_15, 1 );

                if ( isdefined( var_9 ) )
                    var_3.nvgwatcher = var_9;
            }
        }

        var_0 scripts\mp\equipment::takeequipment( "primary" );
    }

    if ( isdefined( var_0.equipment["secondary"] ) )
    {
        if ( istrue( var_1 ) )
        {
            var_15 = var_0 scripts\mp\equipment::getequipmentslotammo( "secondary" );
            var_16 = scripts\engine\utility::array_find( level.br_pickups.br_equipname, var_0.equipment["secondary"] );

            if ( isdefined( var_16 ) && var_15 > 0 )
            {
                var_8 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_3, var_0.origin, var_0.angles, var_0 );
                var_9 = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( var_16, var_8, var_15, 1 );

                if ( isdefined( var_9 ) )
                {
                    var_3.nvidiaansel_allowduringcinematic = var_9;
                    var_9 scripts\mp\gametypes\br_pickups.gsc::modeloadoutupdateammo( var_0, var_9.type );
                }
            }
        }

        var_0 scripts\mp\equipment::takeequipment( "secondary" );
    }

    var_0 giveweapon( getcompleteweaponname( "iw8_fists_mp" ) );
    return var_3;
}

deleteobjective()
{
    self endon( "disconnect" );
    self freezecontrols( 1 );
    self setclientomnvar( "ui_open_loadout_bag", 1 );
    var_0 = playerselectspawnclass();
    self setclientomnvar( "ui_options_menu", 0 );
    self setclientomnvar( "ui_open_loadout_bag", 0 );
    self freezecontrols( 0 );
    return var_0;
}

br_givedropbagloadout( var_0 )
{
    if ( istrue( self.tracking_max_health ) )
        var_0 notify( "br_try_armor_cancel" );

    var_1 = var_0 deleteobjective();

    if ( istrue( var_1 ) )
        scripts\cp_mp\killstreaks\airdrop::dropspecialistbonus( var_0 );
    else
        return;

    delay_delete_reinforcement_called_icon( var_0, 1, 1 );
    var_2 = scripts\engine\utility::ter_op( isstartstr( var_0.class, "custom" ), 1, 0 );
    var_0 scripts\cp\vehicles\vehicle_compass_cp::_id_12053( var_2 );

    if ( scripts\mp\utility\game::getgametype() == "br" )
    {
        var_3 = self.origin;
        var_0 endon( "disconnect" );
        wait 0.5;
        scripts\mp\gametypes\br_analytics.gsc::destroy_intro_tank( var_0, var_3, self );
        scripts\mp\gametypes\br_analytics.gsc::destroyscorelaunchonly( var_0, "dropbag_used" );

        if ( isdefined( var_0.primaryweaponobj ) )
            var_0.primaryweaponobj.customweaponname = createheadicon( var_0.primaryweaponobj );

        if ( isdefined( var_0.secondaryweaponobj ) )
            var_0.secondaryweaponobj.customweaponname = createheadicon( var_0.secondaryweaponobj );
    }
}

eliminate_drone_attack_min_cooldown( var_0 )
{
    level notify( "dropbag_kill_callout_" + self.origin );

    if ( scripts\mp\utility\game::getgametype() == "br" )
        scripts\mp\gametypes\br_analytics.gsc::destroy_bad_traversals( self.team, self.origin );
}

cleanupdropbagsoncircle()
{
    if ( !getdvarint( "scr_br_cleanup_drop_bags_on_first_circle", 0 ) )
        return;

    level waittill( "br_circle_started" );

    while ( level.br_pickups.crates.size > 0 )
    {
        var_0 = [];

        foreach ( var_2 in level.br_pickups.crates )
        {
            if ( isdefined( var_2 ) && ( !isdefined( var_2.curprogress ) || var_2.curprogress == 0 ) )
            {
                var_2 thread scripts\cp_mp\killstreaks\airdrop::destroycrate();
                continue;
            }

            var_0[var_0.size] = var_2;
        }

        level.br_pickups.crates = var_0;
        var_0 = undefined;
        wait 1.0;
    }
}

brchooselaststandweapon()
{
    var_0 = self;
    var_1 = var_0 scripts\mp\gametypes\br_public.gsc::_id_12570();

    if ( !isdefined( var_1 ) )
        var_1 = "iw8_gunless";

    return var_1;
}

_id_12551( var_0 )
{
    _calloutmarkerping_isvehicleoccupiedbyenemy::move_structs( "laststand" );
    scripts\mp\gametypes\br_gulag.gsc::_id_12551( var_0 );
}

_id_11C6F( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    var_9 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_1, self, var_2, var_4, var_3, var_0, undefined, var_5 );
    var_9.hitloc = var_6;

    if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "lastStandAllowed" ) && !scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "lastStandAllowed", var_9 ) )
        return 0;

    return 1;
}

vandalize_internal( var_0 )
{
    var_1 = var_0.attacker;

    if ( !isdefined( var_1 ) )
        return 0;

    if ( istrue( var_0.assistedsuicide ) )
        return 0;

    if ( scripts\mp\gametypes\br_public.gsc::tutorial_playsound() )
        return 0;

    return 1;
}

enemy_mines_init( var_0 )
{
    if ( !vandalize_internal( var_0 ) )
        var_0.dokillcam = 0;

    if ( !var_0.dokillcam )
        var_0.victim clearpredictedstreampos();

    if ( !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "teamSpectate" ) )
        scripts\mp\gametypes\br_spectate.gsc::_id_11BE2( var_0.victim, var_0.attacker, 1 );
}

tvstation_fastrope_init( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !isalive( var_0 ) )
        return 0;

    if ( istrue( var_0.gulag ) )
        return 0;

    if ( istrue( var_0.inlaststand ) )
        return 0;

    return 1;
}

rpg_think( var_0 )
{
    var_1 = [];
    var_2 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

    foreach ( var_4 in var_2 )
    {
        if ( tvstation_fastrope_init( var_4 ) )
            var_1[var_1.size] = var_4;
    }

    return var_1;
}

_id_12046( var_0, var_1 )
{
    var_2 = scripts\mp\gametypes\br_public.gsc::_id_12570();

    if ( tvstation_fastrope_init( var_1 ) && !isdefined( var_2 ) )
    {
        var_3 = rpg_think( var_1.team );

        if ( var_3.size < 2 && !istrue( level.watch_for_icbm_spawners ) )
        {
            if ( var_1 scripts\mp\utility\perk::_hasperk( "specialty_pistoldeath" ) )
                var_1 scripts\mp\utility\perk::removeperk( "specialty_pistoldeath" );
        }

        if ( !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "armor" ) )
            var_1 scripts\mp\gametypes\br_armor.gsc::disable_map_ammo_munitions();
    }
}

emp_drone_pick_up_use_think( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 )
{
    if ( isdefined( var_1 ) && var_1 != var_2 && var_3 >= var_2.health )
        _id_12046( var_1, var_2 );
}

disableallarmorykiosks( var_0 )
{
    switch ( var_0 )
    {
        case "nothing":
            return 0;
        case "noammo":
            return 1;
        case "limitedammo":
            return 2;
        case "standardammo":
            return 3;
        case "dropbag":
            return 4;
        case "dropbagtime":
            return 5;
        case "pistolarmordropbagtime":
            return 6;
        case "pistolarmor":
            return 7;
        case "altmodegoldengun":
            return 8;
        default:
            return 0;
    }
}

disabledfeatures()
{
    var_0 = "pistolarmordropbagtime";
    var_1 = getdvar( "scr_br_loadout_option", var_0 );
    var_2 = disableallarmorykiosks( var_1 );
    level.delay_put_players_in_black_screen = var_2;
}

disable_flag()
{
    return isdefined( level.delay_put_players_in_black_screen ) && ( level.delay_put_players_in_black_screen == 1 || level.delay_put_players_in_black_screen == 2 || level.delay_put_players_in_black_screen == 3 );
}

disable_fulton_group_interactions()
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "drogBagLoadout" ) )
        return 0;

    return isdefined( level.delay_put_players_in_black_screen ) && ( level.delay_put_players_in_black_screen == 4 || level.delay_put_players_in_black_screen == 5 || level.delay_put_players_in_black_screen == 6 );
}

dialog_mount_nag_watcher()
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "drogBagLoadout" ) )
        return 0;

    return isdefined( level.delay_put_players_in_black_screen ) && ( level.delay_put_players_in_black_screen == 5 || level.delay_put_players_in_black_screen == 6 );
}

disable_weapon_swap_until_swap_finished()
{
    var_0 = [];

    if ( !isdefined( level.br_level ) )
    {
        var_0[var_0.size] = 1;
        return var_0;
    }

    var_1 = scripts\mp\gametypes\br_gametypes.gsc::reinforcement_manager( "dropBagDelay" );

    if ( isdefined( var_1 ) )
    {
        var_0[var_0.size] = var_1;
        return var_0;
    }

    var_2 = -15;
    var_3 = scripts\mp\gametypes\br_circle.gsc::relic_amped_pick_random_valid_player( 0 );
    var_4 = max( 0, var_3 + var_2 );
    var_5 = getdvarfloat( "scr_br_dropbag_delay", var_4 );

    if ( var_5 < 0 )
        var_5 = var_4;

    var_0[var_0.size] = var_5;

    if ( getdvarint( "scr_br_dropbag2_enabled", 0 ) && !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee_params( "dropBagLoop" ) )
    {
        var_6 = 15;
        var_7 = scripts\mp\gametypes\br_gulag.gsc::run_hud_logic();
        var_8 = max( 0, var_7 + var_6 );
        var_9 = getdvarfloat( "scr_br_dropbag2_delay", var_8 );
        var_0[var_0.size] = var_9;
    }

    return var_0;
}

disable_collect_leads()
{
    return isdefined( level.delay_put_players_in_black_screen ) && ( level.delay_put_players_in_black_screen == 6 || level.delay_put_players_in_black_screen == 7 || level.delay_put_players_in_black_screen == 8 );
}

disablealltablets()
{
    switch ( level.delay_put_players_in_black_screen )
    {
        case 8:
        case 7:
        case 6:
            return 0;
        default:
    }
}

disable_cinematic_skip()
{
    return isdefined( level.delay_put_players_in_black_screen ) && ( level.delay_put_players_in_black_screen == 1 || level.delay_put_players_in_black_screen == 2 || level.delay_put_players_in_black_screen == 3 );
}

disable_usability_for_duration()
{
    if ( isdefined( level.delay_put_players_in_black_screen ) )
    {
        if ( level.delay_put_players_in_black_screen == 2 )
            return 0.5;
        else if ( level.delay_put_players_in_black_screen == 3 )
            return 1.0;
    }

    return 0.0;
}

disable_timer()
{
    if ( isdefined( level.delay_put_players_in_black_screen ) )
    {
        if ( level.delay_put_players_in_black_screen == 2 )
            return 20;
    }

    return;
}

_id_125FC()
{
    var_0 = spawnstruct();
    var_0._id_12889 = [];
    var_0.brtdm_config = [];
    var_0.brtruck_cleanupents = [];
    var_0.brtruck_ontimelimit = [];
    var_0.offhands = [];
    var_0.nvidiaansel_overridecollisionradius = [];
    var_1 = [];
    var_2 = self getweaponslistprimaries();

    foreach ( var_4 in var_2 )
    {
        if ( !scripts\mp\utility\weapon::update_health_bar_to_player( var_4 ) && !issubstr( var_4.basename, "iw8_fists_mp" ) && !scripts\mp\utility\weapon::unset_relic_mythic( var_4.basename ) )
            var_1[var_1.size] = var_4;
    }

    foreach ( var_7 in var_1 )
    {
        var_8 = createheadicon( var_7 );
        var_0.brtdm_config[var_8] = weaponclipsize( var_7 );
        var_0.brtruck_ontimelimit[var_8] = self getweaponammostock( var_7 );

        if ( scripts\mp\utility\weapon::turnexfiltoside( var_7 ) )
            var_0.brtruck_cleanupents[var_8] = self getweaponammoclip( var_7, "left" );

        if ( getsubstr( var_8, 0, 4 ) == "alt_" )
            continue;

        var_0._id_12889[var_0._id_12889.size] = var_7;
    }

    if ( self.lastcacweaponobj != getcompleteweaponname( "none" ) )
    {
        foreach ( var_4 in var_0._id_12889 )
        {
            if ( self.lastcacweaponobj == var_4 )
            {
                var_0.current = self.lastcacweaponobj;
                break;
            }
        }
    }

    var_12 = self getweaponslistoffhands();

    foreach ( var_14 in var_12 )
    {
        if ( var_14.basename == "bandage_br" )
            continue;

        var_15 = self getweaponammoclip( var_14 );

        if ( var_15 <= 0 )
            continue;

        var_0.offhands[var_0.offhands.size] = var_14;
        var_16 = createheadicon( var_14 );
        var_0.brtdm_config[var_16] = var_15;
    }

    foreach ( var_20, var_19 in self.equipment )
        var_0.nvidiaansel_overridecollisionradius[var_19] = var_20;

    var_0.super = undefined;

    if ( isdefined( self.super ) && !self.super.usepercent )
        var_0.super = self.equipment["super"];

    self._id_12EB0 = var_0;
}

_id_125FB()
{
    self takeallweapons( 0, 1 );
    scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
    self.equipment["primary"] = undefined;
    self.equipment["secondary"] = undefined;
    self.equipment["health"] = undefined;
    self.equipment["super"] = undefined;
    var_0 = getcompleteweaponname( "iw8_fists_mp" );

    if ( self._id_12EB0._id_12889.size < 2 )
        self giveweapon( var_0 );

    var_1 = 0;

    foreach ( var_3 in self._id_12EB0._id_12889 )
    {
        var_4 = createheadicon( var_3 );
        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_3 );

        if ( !var_1 )
        {
            self assignweaponprimaryslot( var_4 );
            scripts\cp_mp\utility\inventory_utility::_switchtoweapon( var_3 );
            var_1 = 1;
        }

        scripts\mp\weapons::fixupplayerweapons( self, var_4 );
    }

    foreach ( var_7 in self._id_12EB0.offhands )
    {
        var_8 = scripts\mp\equipment::getequipmentreffromweapon( var_7 );

        if ( !isdefined( var_8 ) )
            continue;

        var_9 = self._id_12EB0.nvidiaansel_overridecollisionradius[var_8];

        if ( !isdefined( var_9 ) )
            continue;

        scripts\mp\equipment::giveequipment( var_8, var_9 );
    }

    foreach ( var_4, var_12 in self._id_12EB0.brtruck_ontimelimit )
    {
        self setweaponammostock( var_4, var_12 );
        var_3 = getcompleteweaponname( getweaponbasename( var_4 ) );
        var_13 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_3 );

        if ( isdefined( var_13 ) )
        {
            self.br_ammo[var_13] = var_12;
            scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_hud_update_ammotype( var_13 );
        }
    }

    foreach ( var_4, var_12 in self._id_12EB0.brtdm_config )
        self setweaponammoclip( var_4, var_12 );

    foreach ( var_4, var_12 in self._id_12EB0.brtruck_cleanupents )
        self setweaponammoclip( var_4, var_12, "left" );

    waitframe();
    var_16 = var_0;

    if ( isdefined( self._id_12EB0.current ) )
        var_16 = self._id_12EB0.current;
    else if ( isdefined( self._id_12EB0._id_12889[0] ) )
        var_16 = self._id_12EB0._id_12889[0];

    self switchtoweaponimmediate( var_16 );

    if ( isdefined( self._id_12EB0.super ) )
    {
        var_17 = level.br_pickups.br_superreference[level.br_pickups.br_equipnametoscriptable[self._id_12EB0.super]];
        scripts\mp\gametypes\br_pickups.gsc::forcegivesuper( var_17, 0 );
    }

    thread scripts\cp_mp\gestures::_id_13E1A();
    self._id_12EB0 = undefined;
}

ending_player_disconnect_thread()
{
    foreach ( var_1 in level.players )
    {
        if ( isplayer( var_1 ) && var_1 scripts\mp\utility\player::isinkillcam() )
        {
            var_1 notify( "abort_killcam" );
            var_1.cancelkillcam = 1;
        }
    }
}

disabled_seats_for_vehicle( var_0 )
{
    var_1 = getdvarint( "scr_br_invulnerability_time", 30 );

    if ( var_1 > var_0 )
        var_1 = var_0;

    wait( var_0 - var_1 );
    level.allowprematchdamage = 0;
    wait( var_1 / 2.0 );
    ending_player_disconnect_thread();
    wait( var_1 / 2.0 );
}

_id_11B81()
{
    var_0 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "maySpawn" );

    if ( isdefined( var_0 ) )
        return var_0;

    return scripts\mp\playerlogic::mayspawn();
}

spawnclientbr( var_0 )
{
    self endon( "disconnect" );
    self._id_13B4F = undefined;

    if ( scripts\mp\gametypes\br_public.gsc::iswaitingtoentergulag( self ) )
    {
        self notify( "attempted_spawn" );
        scripts\mp\gametypes\br_gulag.gsc::entergulag( self );
        self.waitingtospawn = 0;
    }
    else if ( istrue( self.waitingtospawnamortize ) || scripts\mp\gametypes\br_public.gsc::use_csm( self ) || istrue( scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "spawnHandled", self ) ) )
    {
        self notify( "attempted_spawn" );
        self.waitingtospawn = 0;
    }
    else if ( !_id_11B81() )
    {
        waitframe();
        self notify( "attempted_spawn" );

        if ( istrue( level.stop_visited_once ) || istrue( level.snatchspawnalltoc130done ) || istrue( level.debugnextpropindex ) )
        {
            if ( isdefined( level.brlatespawnplayer ) )
                self thread [[ level.brlatespawnplayer ]]();

            return;
        }
    }
    else
    {
        if ( istrue( var_0 ) )
            level.snatchspawnalltoc130done = 0;

        if ( istrue( level.stop_visited_once ) || istrue( level.snatchspawnalltoc130done ) || istrue( level.debugnextpropindex ) )
        {
            if ( isdefined( level.brlatespawnplayer ) )
                self thread [[ level.brlatespawnplayer ]]();

            return;
        }

        if ( !istrue( level.debug_safehouse_regroup_start ) )
        {
            if ( isdefined( level.bypassclasschoicefunc ) )
                self.class = self [[ level.bypassclasschoicefunc ]]();
            else
                self.class = _id_12341();
        }

        if ( getdvarint( "scr_br_verify_prematch_loadouts", 0 ) == 1 )
            thread _id_14290();

        var_1 = getdvarint( "scr_br_drop_prespawn", 1 );
        var_2 = var_1 && _id_14070() && !isbot( self );

        if ( var_1 > 1 )
            var_2 = var_2 && !istrue( self.hasspawned );

        if ( var_2 )
            self._id_1286F = getspawnpoint( var_2 );

        scripts\mp\playerlogic::waitandspawnclient( var_0 );
        self freezecontrols( 1 );

        if ( _id_14070() )
            thread prematchdeployparachute();

        waitframe();
        self skydive_setdeploymentstatus( 0 );
        self skydive_setbasejumpingstatus( 0 );
        var_3 = !self calloutmarkerping_getent();
        var_4 = scripts\mp\teams::getcustomization()["body"];
        var_5 = gettime();

        if ( var_3 )
        {
            while ( isalive( self ) && isdefined( self.weaponlist ) && !self hasloadedcustomizationviewmodels( var_4 ) && !self hasloadedviewweapons( self.weaponlist ) )
            {
                if ( var_5 + 3000 < gettime() )
                    break;

                waitframe();
            }
        }

        self notify( "brWaitAndSpawnClientComplete" );
        self.waitingtospawn = 0;
        self freezecontrols( 0 );
    }
}

didgasmaskpipschange( var_0, var_1, var_2 )
{
    var_3 = 360 / var_0.size;
    var_4 = getdvarint( "scr_br_x1OpsFinalCircleRadiusOffset", 10000 );
    var_5 = scripts\mp\gametypes\br_circle.gsc::getdangercircleorigin();
    var_6 = 0;

    if ( isdefined( var_2 ) )
        var_6 = var_2;
    else
        var_6 = scripts\mp\gametypes\br_circle.gsc::getdangercircleradius() - var_4;

    for ( var_7 = 0; var_7 < var_0.size; var_7++ )
    {
        var_8 = var_6 * cos( var_3 * var_7 );
        var_9 = var_6 * sin( var_3 * var_7 );
        var_10 = var_5[0] + var_8;
        var_11 = var_5[1] + var_9;
        var_12 = 0;
        var_13 = ( var_10, var_11, var_12 );

        if ( var_1 )
        {
            foreach ( var_15 in var_0 )
                var_15.emp_target_list = var_13;

            continue;
        }

        var_0[var_7].emp_target_list = var_13;
    }
}

_id_1254D()
{
    if ( scripts\cp_mp\execution::hasexecution() )
    {
        self._id_12EAE = self.executionref;
        scripts\cp_mp\execution::_clearexecution();
        self disableexecutionattack();
    }
}

_id_1254E()
{
    if ( isdefined( self._id_12EAE ) )
    {
        scripts\cp_mp\execution::_giveexecution( self._id_12EAE );
        self enableexecutionattack();
        self._id_12EAE = undefined;
    }
}

_id_144AE()
{
    level endon( "game_ended" );
    self notify( "br_squad_leader_shift" );
    self endon( "br_squad_leader_shift" );
    var_0 = self;
    var_1 = var_0.team;
    var_2 = var_0.squadindex;
    var_3 = scripts\mp\utility\game::round_vehicle_logic();

    for (;;)
    {
        var_4 = "";

        if ( var_3 == "dmz" || var_3 == "rat_race" || var_3 == "sandbox" || var_3 == "risk" || var_3 == "rumble" || var_3 == "payload" || var_3 == "gold_war" )
            var_4 = var_0 scripts\engine\utility::_id_143B4( "disconnect", "br_pass_squad_leader" );
        else
            var_4 = var_0 scripts\engine\utility::_id_143B6( "death", "disconnect", "remove_from_alive_count", "br_pass_squad_leader" );

        if ( var_4 == "br_pass_squad_leader" )
        {
            if ( !_id_13AAE( var_1 ) )
            {
                var_0 playlocalsound( "br_pickup_deny" );
                continue;
            }
        }

        if ( var_4 != "disconnect" )
        {
            if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
                continue;

            if ( !istrue( var_0.br_infilstarted ) )
                continue;
        }

        if ( var_0 arenastpday( var_1, var_2 ) )
            return;
    }
}

_id_131A8( var_0 )
{
    var_1 = self;
    var_1.pers["squadMemberIndex"] = var_0;
    var_2 = var_1.game_extrainfo & 65528;
    var_2 = var_2 | var_0;
    var_1.game_extrainfo = var_2;
}

_id_1319D( var_0 )
{
    var_1 = self;

    if ( var_0 == var_1 scripts\mp\gametypes\br_public.gsc::updatedragonsbreath() )
        return;

    var_1.tutorial_usingparachute = var_0;

    if ( var_0 )
    {
        var_1.game_extrainfo = var_1.game_extrainfo | 64;
        var_1 thread _id_144AE();
    }
    else
        var_1.game_extrainfo = var_1.game_extrainfo & ~64;
}

arenastpday( var_0, var_1 )
{
    var_2 = self;

    if ( !isdefined( var_0 ) )
        var_0 = var_2.team;

    if ( !isdefined( var_1 ) )
        var_1 = var_2.squadindex;

    if ( isdefined( var_2 ) && !var_2 scripts\mp\gametypes\br_public.gsc::updatedragonsbreath() )
        return 0;

    if ( isdefined( var_2 ) )
        var_2.should_update_track_timer = 1;

    var_3 = scripts\mp\gametypes\br_public.gsc::round_enemy_stuck_logic( var_0, var_2.squadindex );
    var_4 = 0;
    var_5 = undefined;

    foreach ( var_7 in var_3 )
    {
        var_8 = _id_12512( var_7 );

        if ( var_8 > var_4 )
        {
            var_4 = var_8;
            var_5 = var_7;
        }
    }

    var_10 = 0;

    if ( isdefined( var_5 ) )
    {
        if ( isdefined( var_2 ) )
            var_2 _id_1319D( 0 );

        var_5 _id_1319D( 1 );
        var_10 = 1;

        if ( !istrue( level.debugnextpropindex ) )
            level scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "deploy_squad_leader", var_5, 1, 0 );
    }

    _id_1401E( var_0, var_1 );
    return var_10;
}

_id_13AAE( var_0, var_1 )
{
    var_2 = scripts\mp\gametypes\br_public.gsc::round_enemy_stuck_logic( var_0, var_1 );
    var_3 = 0;

    foreach ( var_5 in var_2 )
    {
        if ( !isdefined( var_5 ) || var_5 scripts\mp\gametypes\br_public.gsc::updatedragonsbreath() )
            continue;

        if ( !isalive( var_5 ) )
            continue;

        if ( var_5 ismlgspectator() || var_5 isspectatingplayer() )
            continue;

        if ( var_5 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
            continue;

        if ( !istrue( var_5.should_update_track_timer ) )
        {
            var_3 = 1;
            break;
        }
    }

    return var_3;
}

_id_1401E( var_0, var_1 )
{
    var_2 = scripts\mp\gametypes\br_public.gsc::round_enemy_stuck_logic( var_0, var_1 );
    var_3 = _id_13AAE( var_0, var_1 );

    foreach ( var_5 in var_2 )
        var_5 setclientomnvar( "ui_br_squad_leader_can_pass", var_3 );
}

_id_12512( var_0 )
{
    if ( !isdefined( var_0 ) || var_0 scripts\mp\gametypes\br_public.gsc::updatedragonsbreath() || var_0 ismlgspectator() || var_0 isspectatingplayer() || !isalive( var_0 ) )
        return 0;

    if ( var_0 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
        return 1;

    if ( istrue( var_0.inlaststand ) )
        return 2;

    if ( istrue( var_0.should_update_track_timer ) )
        return 3;

    return 4;
}

_id_13AC7( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\utility\teams::getteamdata( var_2, "players" );

    foreach ( var_6 in var_4 )
    {
        if ( !istrue( var_6.gulag ) )
            var_6 thread scripts\mp\hud_message::showsplash( var_0, var_3, var_1 );
    }
}

_id_131C8( var_0 )
{
    self.issuperdisabled = var_0;

    if ( !var_0 )
        new_agent_def_main();
    else
    {
        var_1 = scripts\mp\supers::getcurrentsuper();

        if ( isdefined( var_1 ) )
        {
            var_2 = var_1.staticdata.weapon;
            var_3 = self getweaponammoclip( var_2 );
            self.loadoutextraperksfromgamemode = var_3;
        }

        self notify( "super_disable_start" );
        thread scripts\mp\supers::watchsuperdisableplayer();
    }
}

new_agent_def_main()
{
    var_0 = "super_delay_mp";
    var_1 = scripts\mp\supers::getcurrentsuper();

    if ( isdefined( var_1 ) )
    {
        var_2 = var_1.staticdata.weapon;
        var_3 = 0;

        if ( isdefined( self.loadoutextraperksfromgamemode ) )
        {
            var_3 = self.loadoutextraperksfromgamemode;
            self.loadoutextraperksfromgamemode = undefined;
        }

        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_2 );
        self setweaponammoclip( var_2, var_3 );
        self assignweaponoffhandspecial( var_2 );
        scripts\cp_mp\utility\inventory_utility::_takeweapon( var_0 );
    }

    self notify( "super_disable_end" );
}

roundnumber()
{
    if ( !istrue( self.issuperdisabled ) )
        return 0;

    var_0 = 0;

    if ( isdefined( self.loadoutextraperksfromgamemode ) )
        var_0 = self.loadoutextraperksfromgamemode;

    return var_0;
}

_id_12099( var_0 )
{
    var_1 = var_0 getweaponslistprimaries();

    if ( var_0 scripts\mp\utility\killstreak::isjuggernaut() )
    {
        if ( !isdefined( var_1 ) || var_1.size == 0 )
        {
            var_2 = var_0 getcurrentweapon();
            var_3 = var_0 getcurrentweaponclipammo();
            var_4 = weaponclipsize( var_2 );

            if ( var_3 < var_4 )
            {
                var_0 setweaponammoclip( var_2, var_4 );
                var_0 scripts\mp\damagefeedback::hudicontype( "br_ammo" );
                var_0 playlocalsound( "iw8_support_box_use" );
                return 1;
            }
        }
    }

    foreach ( var_6 in var_1 )
    {
        var_7 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_6 );

        if ( var_6.isalternate && scripts\mp\utility\weapon::attachmentmap_tobase( var_6.underbarrel ) == "ubshtgn" )
        {
            var_8 = weaponclipsize( var_6 );
            var_9 = int( var_8 );
            var_0 setweaponammoclip( var_6, var_9 );
            var_6._id_12CC1 = 1;
            continue;
        }
        else if ( scripts\mp\utility\weapon::update_health_on_spawn( var_6 ) )
        {
            var_0 setweaponammoclip( var_6, var_6.clipsize );
            var_6._id_12CC1 = 1;
            continue;
        }
        else if ( !isdefined( var_7 ) )
            continue;

        var_10 = int( level.br_ammo_max[var_7] / level.br_ammo_clipsize[var_7] );
        var_0 scripts\mp\gametypes\br_weapons.gsc::delay_delete_alerted_icon( var_6, var_10 );
        var_6._id_12CC1 = 1;
    }

    if ( isdefined( var_0.equipment["primary"] ) )
        var_0 scripts\mp\equipment::incrementequipmentammo( var_0.equipment["primary"], 2 );

    if ( isdefined( var_0.equipment["secondary"] ) )
        var_0 scripts\mp\equipment::incrementequipmentammo( var_0.equipment["secondary"], 2 );

    var_0 scripts\mp\damagefeedback::hudicontype( "ammobox" );
    scripts\mp\equipment\support_box::_id_139AE( var_0 );
    thread scripts\mp\equipment\support_box::supportbox_onplayeruseanim();
    return 1;
}

_id_11FFE( var_0 )
{
    var_1 = var_0 scripts\mp\equipment::getequipmentmaxammo( "equip_armorplate" );

    if ( var_1 <= 0 )
        return 0;

    scripts\mp\gametypes\br_pickups.gsc::br_forcegivecustompickupitem( var_0, "brloot_armor_plate", 1, var_1, 0 );
    var_0 scripts\mp\damagefeedback::hudicontype( "br_armor" );
    scripts\mp\equipment\support_box::_id_139AE( var_0 );
    thread scripts\mp\equipment\support_box::supportbox_onplayeruseanim();
    return 1;
}

airdrop_registercrateforcleanup( var_0 )
{
    registercrateforcleanup( var_0 );
}

br_ammorestock_playeruse( var_0 )
{
    dropshield( var_0 );
}

airdrop_makeweaponfromcrate()
{
    makeweaponfromcrate();
}

airdrop_makeitemfromcrate()
{
    makeitemfromcrate();
}

airdrop_makeitemsfromcrate( var_0 )
{
    makeitemsfromcrate( var_0 );
}

airdrop_br_givedropbagloadout( var_0 )
{
    br_givedropbagloadout( var_0 );
}

br_armor_repair_end( var_0 )
{
    eliminate_drone_attack_min_cooldown( var_0 );
}

br_armor_plate_used( var_0 )
{
    scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "initCrateData", var_0 );
}

_id_12082( var_0 )
{
    var_1 = var_0 getcurrentprimaryweapon();
    var_0 scripts\mp\gametypes\br_weapons.gsc::delay_delete_alerted_icon( var_1 );
    var_0 scripts\mp\gametypes\br_plunder.gsc::_id_12627( level.scavengerplunderamount );
}

_id_1205C( var_0, var_1 )
{
    var_0 scripts\mp\gametypes\br_pickups.gsc::setup_train_array( var_1, "primary" );
}

_id_1203B( var_0, var_1 )
{
    switch ( var_0 )
    {
        case "iw8_fulton_bag_mp":
            thread _debug_rooftopobjstart::playerwager( var_1 );
            break;
        case "slinger_br":
            thread scripts\mp\equipment\slinger.gsc::slinger_used( var_1 );
            break;
        case "rock_mp":
            thread scripts\mp\gametypes\br_gulag.gsc::rock_used( var_1 );
            break;
        case "coal_mp":
            var_1 thread scripts\mp\gametypes\br_alt_mode_hh.gsc::airstrike_watchgameend();
            break;
        default:
            break;
    }

    if ( var_0 == "rock_mp" && istrue( self._id_13B4F ) )
    {
        var_1 delete();
        self._id_13B4F = undefined;
    }
}

_id_120B0( var_0 )
{
    scripts\mp\gametypes\br_weapons.gsc::takeweaponpickup( var_0 );
}

_id_120AF( var_0 )
{
    scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );
}

_id_12691()
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "playerShouldRespawn" ) )
        return scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "playerShouldRespawn" );

    if ( !istrue( level.br_prematchstarted ) )
        return 1;

    if ( scripts\mp\gametypes\br_public.gsc::iswaitingtoentergulag( self ) )
        return 1;

    if ( scripts\mp\gametypes\br_public.gsc::use_csm( self ) )
        return 1;

    return 0;
}

emp_drone_damage_monitor( var_0, var_1 )
{
    var_2 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "playerKilledSpawn", var_0, var_1 );

    if ( isdefined( var_2 ) )
        return var_2;
    else if ( scripts\mp\utility\game::round_vehicle_logic() == "dmz" || scripts\mp\utility\game::round_vehicle_logic() == "rat_race" || scripts\mp\utility\game::round_vehicle_logic() == "risk" || scripts\mp\utility\game::round_vehicle_logic() == "kingslayer" || scripts\mp\utility\game::round_vehicle_logic() == "rumble" || scripts\mp\utility\game::round_vehicle_logic() == "gold_war" )
    {
        if ( getdvarint( "scr_bmo_use_spawn_fix", 1 ) == 1 )
        {
            if ( scripts\mp\utility\game::updatehistoryhud( self ) )
                return 1;

            if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
                return 0;

            if ( istrue( var_0.victim.hasrespawntoken ) || istrue( level._id_14062 ) )
            {
                if ( scripts\mp\gametypes\br_public.gsc::uniquelootitemid() )
                {
                    if ( isbot( var_0.victim ) )
                        return 1;
                }

                if ( scripts\mp\utility\game::round_vehicle_logic() == "rat_race" )
                    var_0.victim thread scripts\mp\gametypes\br_gametype_rat_race.gsc::playerrespawn();
                else
                    var_0.victim thread scripts\mp\gametypes\br_gametype_dmz.gsc::playerrespawn();

                var_3 = scripts\mp\utility\teams::getteamdata( var_0.victim.team, "teamCount" );

                if ( var_3 > 1 )
                    var_0.victim thread scripts\mp\gametypes\br_spectate.gsc::spawnspectator( var_0, var_1, 1 );

                return 1;
            }
        }
        else
        {
            if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
                return 0;

            if ( istrue( var_0.victim.hasrespawntoken ) || istrue( level._id_14062 ) )
            {
                if ( scripts\mp\gametypes\br_public.gsc::uniquelootitemid() )
                {
                    if ( isbot( var_0.victim ) )
                        return 1;
                }
                else if ( !scripts\mp\gametypes\br_public.gsc::uniquelootitemid() )
                    var_0.victim thread scripts\mp\playerlogic::respawn_asspectator( var_0.victim.origin + ( 0, 0, 60 ), var_0.victim.angles );

                var_0.victim thread scripts\mp\gametypes\br_gametype_dmz.gsc::playerrespawn();
                return 1;
            }
        }
    }
    else if ( !_id_12691() )
    {
        if ( !scripts\mp\utility\damage::playershoulddofauxdeath( 0 ) )
            var_0.victim thread scripts\mp\gametypes\br_spectate.gsc::spawnspectator( var_0, var_1 );

        return 1;
    }

    return 0;
}

dyn_door( var_0 )
{
    var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "mayConsiderPlayerDead", var_0 );

    if ( isdefined( var_1 ) )
        return var_1;

    return dynamic_door( var_0 );
}

dynamic_door( var_0 )
{
    var_1 = var_0 scripts\mp\gametypes\br_gulag.gsc::trygulagspawn();

    if ( scripts\mp\flags::gameflag( "prematch_done" ) && !var_1 )
        _id_11B15( var_0, "considerPlayerDead" );

    return !var_1;
}

_id_13F24()
{

}

_id_11D22()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    var_0 = gettime();

    for (;;)
    {
        self waittill( "weapon_change" );
        var_1 = gettime();
        var_2 = var_1 - var_0;
        var_0 = var_1;

        if ( _id_13301() && var_2 > 3000 )
            thread searchradiusidealmax( var_2 );

        var_3 = self.lastnormalweaponobj;

        if ( isdefined( var_3 ) )
        {
            var_4 = int( var_2 / 1000 );
            var_5 = getweaponvariantindex( var_3 );
            var_6 = var_3.basename;

            if ( getsubstr( var_6, 0, 4 ) == "iw8_" || getsubstr( var_6, 0, 3 ) == "s4_" )
                var_6 = scripts\mp\utility\weapon::getweaponrootname( var_3 );

            scripts\common\utility::_id_13E0A( level._id_11B31, var_6, "time_used_s", var_4, var_5, var_3 );
        }
    }
}

_id_13301()
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "weaponXpOverTime" ) )
        return 0;

    if ( scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee_params( "weaponXpOverTime" ) )
        return 1;

    if ( scripts\mp\gametypes\br_public.gsc::validtousesticker() || scripts\mp\gametypes\br_public.gsc::uniquelootitemid() || scripts\mp\utility\game::updatex1stashhud() )
        return 0;

    return 1;
}

weaponshouldgetxp( var_0 )
{
    var_1 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    return weaponhasranks( var_1 );
}

weaponhasranks( var_0 )
{
    if ( !isdefined( level.weaponranktable.maxweaponranks[var_0] ) )
        return 0;

    var_1 = level.weaponranktable.maxweaponranks[var_0] > 0;
    return var_1;
}

bush_zones()
{
    var_0 = scripts\mp\utility\game::round_vehicle_logic() == "dmz" || scripts\mp\utility\game::round_vehicle_logic() == "rat_race" || scripts\mp\utility\game::round_vehicle_logic() == "risk" || scripts\mp\utility\game::round_vehicle_logic() == "kingslayer" || scripts\mp\utility\game::round_vehicle_logic() == "gold_war" || istrue( level.vehicle_collision_getleveldata ) || isdefined( level._id_12D05 ) || isdefined( level._id_12CE8 );

    if ( var_0 )
        return;

    if ( scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "playerCountLandmarks" ) )
        return;

    level endon( "game_ended" );
    level waittill( "prematch_started" );
    var_1 = scripts\mp\utility\game::round_vehicle_logic() == "rebirth_reverse";
    level _id_1269D( 50, var_1 );
    level _id_1269D( 25, var_1 );
    level _id_1269D( 10, var_1 );
    level _id_1269D( 5, var_1 );
}

_id_1269D( var_0, var_1 )
{
    level endon( "game_ended" );
    var_2 = reinforcement_type();

    while ( var_2.size > var_0 )
    {
        level scripts\engine\utility::waittill_either( "br_player_eliminated", "players_remaining_changed" );
        var_2 = reinforcement_type();

        if ( var_2.size <= var_0 )
        {
            var_3 = !istrue( level.usegulag ) || istrue( level.gulag.shutdown );

            if ( var_1 || var_3 )
                scripts\mp\gametypes\br_public.gsc::brleaderdialog( "top_" + var_0, 0, undefined, 1 );

            break;
        }
    }
}

reinforcement_type()
{
    var_0 = [];

    foreach ( var_2 in level.players )
    {
        if ( istrue( var_2.delay_enter_combat_after_investigating_grenade ) )
            continue;

        if ( var_2 scripts\mp\gametypes\br_public.gsc::_id_125F3() )
            continue;

        if ( var_2 scripts\mp\gametypes\br_public.gsc::_id_125EC() )
            continue;

        if ( level.codcasterenabled )
        {
            if ( var_2 ismlgspectator() )
                continue;
        }

        var_0[var_0.size] = var_2;
    }

    return var_0;
}

_id_12C6A( var_0 )
{
    if ( isdefined( var_0.gulaguses ) && var_0.gulaguses > 0 )
        return;

    if ( istrue( var_0.play_cinderblock_broken_fx ) && !istrue( level._id_133BF ) )
        return;

    var_1 = var_0 scripts\mp\persistence::statgetchildbuffered( "round", "timePlayed", 0 );
    var_0.pers["afkResetTime"] = var_1;
    var_0.pers["distTrackingPassed"] = undefined;
    var_0.pers["totalDistTraveledAFK"] = undefined;
    var_0 thread scripts\mp\playerlogic::totaldisttracking( var_0.origin, 1 );
}

_id_12036( var_0 )
{
    _id_12C6A( var_0 );

    if ( isalive( var_0 ) && !istrue( var_0.inlaststand ) )
        var_0.elevator_manager = undefined;

    var_0 scripts\cp_mp\vehicles\vehicle_compass::fulton_initanims();
}

_id_1401F( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( var_0.pers["squadMemberIndex"] ) )
    {
        if ( !isdefined( level.deletescriptableinstance ) )
            level.deletescriptableinstance = [];

        var_4 = get_int_or_0( level.deletescriptableinstance[var_0.team] );

        if ( !isalive( var_0 ) )
        {
            var_3 = 1;
            var_2 = 0;
        }

        var_5 = var_0 == var_1;
        var_6 = var_0.pers["squadMemberIndex"];
        var_7 = int( ceil( clamp( var_2, 0, 1 ) * 128 ) );
        var_8 = var_7;

        if ( istrue( var_3 ) )
            var_0 scripts\mp\gametypes\br_public.gsc::_id_131A6( 0 );
        else if ( var_5 )
            var_0 scripts\mp\gametypes\br_public.gsc::_id_131A6( 1 );

        var_9 = var_6 * 8;
        var_10 = ( var_8 & 255 ) << var_9;
        var_11 = ~( 255 << var_9 );
        var_12 = var_4 & var_11;
        var_13 = var_12 + var_10;
        level.deletescriptableinstance[var_0.team] = var_13;
        var_14 = scripts\mp\gametypes\br_public.gsc::round_enemy_stuck_logic( var_0.team, var_0.squadindex );

        if ( isdefined( var_14 ) && var_14.size > 0 )
        {
            foreach ( var_16 in var_14 )
                var_16 setclientomnvar( "ui_br_squad_revive_status", var_13 );
        }
    }
}

forest_barrel_damage_watch( var_0 )
{
    var_1 = [ 0, 0, 0, 0 ];

    if ( isdefined( var_0 ) && isdefined( var_0.ejectplayerfromturret ) )
    {
        var_2 = 0;

        foreach ( var_7, var_4 in var_0.ejectplayerfromturret )
        {
            var_5 = scripts\mp\gametypes\br_quest_util.gsc::getquesttableindex( var_7 );
            var_6 = int( clamp( var_4, 0, 15 ) ) << 4;
            var_1[var_2] = var_6 + var_5;
            var_2++;

            if ( var_2 >= 4 )
                break;
        }
    }

    var_8 = [];
    var_8[0] = ( var_1[0] << 8 ) + var_1[1];
    var_8[1] = ( var_1[2] << 8 ) + var_1[3];
    var_8[2] = get_int_or_0( var_0.defaultclassindex );
    var_9 = int( clamp( get_int_or_0( var_0.pers["squadMemberIndex"] ) - 1, 0, 3 ) );
    var_8[3] = var_9 << 14;
    var_8[3] = var_8[3] + get_int_or_0( var_0.pers["damage"] );
    return var_8;
}

_id_12065()
{
    if ( !isdefined( self.sessionteam ) || self.sessionteam == "spectator" || self.sessionteam == "none" || isdefined( self.thrust_fx_model ) || self calloutmarkerping_getent() )
        return 0;

    if ( scripts\mp\menus::shouldmodesetsquads() && !isdefined( self.squadindex ) )
        return 0;

    if ( scripts\mp\gametypes\br_public.gsc::tutorial_playsound() && !isbot( self ) )
    {
        self setclientomnvar( "ui_br_extended_load_screen", 1 );
        return 0;
    }

    if ( !_id_14070() )
        return 1;

    var_0 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "onConnectSpawnPoint" );

    if ( !isdefined( var_0 ) )
        var_0 = getspawnpoint();

    self.thrust_fx_model = var_0;
    var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "initialPrespawnZOffset" );

    if ( isdefined( var_1 ) )
        self.thrust_fx_model.origin = self.thrust_fx_model.origin + ( 0, 0, var_1 );

    if ( istrue( game["switchedsides"] ) )
        setomnvar( "ui_current_round", 1 );

    self setclientomnvar( "ui_br_extended_load_screen", 1 );
    var_2 = scripts\mp\gametypes\br_public.gsc::_id_126B8( var_0.origin );
    spawnintermission( var_2, var_0.angles );
    var_3 = getdvarint( "scr_br_initial_stream_timeout_ms", 15000 );
    scripts\mp\gametypes\br_public.gsc::_id_126B9( var_2, var_3, 1, 1 );
    return 0;
}

_id_125F1()
{
    return self.sessionstate == "intermission" && isdefined( self.thrust_fx_model );
}

waittillmatch_wait()
{
    var_0 = -1;

    if ( isdefined( self.lastdroppableweaponobj ) )
        var_0 = getaltbunkerindexforname( self.lastdroppableweaponobj );

    self setclientomnvar( "ui_br_last_droppable_weapon", var_0 );
}

endgame_luidecisionreceived( var_0 )
{
    var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "regenHealthAdd", var_0 );

    if ( isdefined( var_1 ) )
        return var_1;
    else
        return var_0;
}

endgame_finitewaves_vo( var_0 )
{
    var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "regenDelaySpeed", var_0 );

    if ( isdefined( var_1 ) )
        return var_1;
    else
        return var_0;
}

elements_hidden( var_0, var_1, var_2 )
{
    scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "addToTeamLives", var_0, var_1 );
    var_0 _id_1263F( 1, var_1, var_2 );
}

elevator_doors_open( var_0, var_1, var_2 )
{
    scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "removeFromTeamLives", var_0, var_1 );
    var_0 _id_1263F( 0, var_1, var_2 );
}

_id_14006()
{
    level notify( "updatePlayerAndTeamCountUI" );
    level endon( "updatePlayerAndTeamCountUI" );
    waittillframeend;
    var_0 = level.players.size;
    var_1 = 0;
    var_2 = 0;
    var_3 = [];
    var_4 = [];

    for ( var_5 = 0; var_5 < var_0; var_5++ )
    {
        var_6 = level.players[var_5];

        if ( !istrue( var_6.delay_enter_combat_after_investigating_grenade ) )
        {
            if ( istrue( var_6.iszombie ) || istrue( var_6.unset_relic_gun_game ) )
                var_2++;
            else
            {
                var_1++;
                var_3[var_6.team] = 1;
                var_4[var_6.team] = var_6.team;
            }
        }

        if ( !scripts\engine\utility::array_contains_key( var_3, var_6.team ) )
        {
            var_7 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "isTeamEliminated", var_6.team );

            if ( isdefined( var_7 ) )
            {
                if ( !var_7 )
                {
                    var_3[var_6.team] = 1;
                    var_4[var_6.team] = var_6.team;
                }
            }
        }
    }

    var_9 = ( var_2 << 16 ) + ( var_3.size << 8 ) + var_1;
    setomnvar( "ui_br_match_stats", var_9 );
}

demo_debug_nuke()
{
    var_0 = 0;
    level.teamswithplayers = [];
    var_1 = 0;

    foreach ( var_3 in level.teamnamelist )
    {
        var_4 = scripts\mp\utility\teams::getteamdata( var_3, "teamCount" );

        if ( var_4 )
        {
            var_0 = var_0 + var_4;
            var_1++;
            level.teamswithplayers[level.teamswithplayers.size] = var_3;

            if ( var_1 > 1 )
                break;
        }
    }

    if ( scripts\mp\utility\game::matchmakinggame() && !level.ingraceperiod && ( !isdefined( level.disableforfeit ) || !level.disableforfeit ) && !scripts\mp\menus::brking_updateteamscore() )
    {
        if ( level.teambased )
        {
            if ( level.teamswithplayers.size == 1 && game["state"] == "playing" )
            {
                thread scripts\mp\gamelogic::onforfeit( level.teamswithplayers[0] );
                return;
            }

            if ( level.teamswithplayers.size > 1 )
            {
                level.forfeitinprogress = undefined;
                level notify( "abort_forfeit" );
            }
        }
        else
        {
            if ( var_0 == 1 && level.maxplayercount > 1 )
            {
                thread scripts\mp\gamelogic::onforfeit();
                return;
            }

            if ( var_0 > 1 )
            {
                level.forfeitinprogress = undefined;
                level notify( "abort_forfeit" );
            }
        }
    }

    if ( level.teamswithplayers.size == 1 && istrue( level.br_debugsolotest ) )
        return;

    if ( !scripts\mp\utility\game::getgametypenumlives() && ( !isdefined( level.disablespawning ) || !level.disablespawning ) )
        return;

    if ( !scripts\mp\utility\game::gamehasstarted() )
        return;

    if ( level.ingraceperiod && !isdefined( level.overrideingraceperiod ) )
        return;

    debugprintvipstates();
    debugthink();

    if ( level.teambased )
    {
        var_6 = [];
        var_7 = 0;
        var_8 = 0;
        var_9 = [];
        var_10 = [];

        foreach ( var_12 in level.teamnamelist )
        {
            var_6[var_12] = 0;

            if ( !istrue( level.disablespawning ) )
            {
                foreach ( var_14 in scripts\mp\utility\teams::getteamdata( var_12, "players" ) )
                {
                    if ( !istrue( var_14.hasspawned ) || var_14.team == "spectator" || var_14.team == "follower" || var_14.team == "free" )
                        continue;

                    if ( var_14.pers["lives"] )
                    {
                        var_6[var_12] = var_6[var_12] + var_14.pers["lives"];
                        var_7 = 1;
                    }
                }
            }

            var_16 = scripts\mp\utility\teams::getteamdata( var_12, "aliveCount" );

            if ( !var_8 && var_16 > 0 )
                var_8 = 1;

            var_17 = 1;
            var_18 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "isTeamEliminated", var_12 );

            if ( isdefined( var_18 ) )
            {
                if ( !var_18 )
                    var_17 = 0;
            }

            if ( var_17 && scripts\mp\utility\teams::getteamdata( var_12, "hasSpawned" ) && var_16 <= 0 && !var_6[var_12] && !scripts\mp\utility\teams::getteamdata( var_12, "deathEvent" ) )
            {
                var_9[var_9.size] = var_12;
                continue;
            }

            if ( var_16 == 2 && !scripts\mp\utility\teams::getteamdata( var_12, "twoLeft" ) )
            {
                if ( scripts\mp\utility\game::round_vehicle_logic() != "brdov" && scripts\mp\utility\game::round_vehicle_logic() != "dmz" && scripts\mp\utility\game::round_vehicle_logic() != "rat_race" && scripts\mp\utility\game::round_vehicle_logic() != "risk" && scripts\mp\utility\game::round_vehicle_logic() != "kingslayer" && scripts\mp\utility\game::round_vehicle_logic() != "rumble" && scripts\mp\utility\game::round_vehicle_logic() != "gold_war" )
                {
                    var_19 = scripts\mp\utility\teams::getteamdata( var_12, "alivePlayers" );
                    var_20 = scripts\engine\utility::random( var_19 );
                    level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_20, "inform_last_two" );
                }

                scripts\mp\utility\teams::setteamdata( var_12, "twoLeft", 1 );
                continue;
            }

            if ( var_16 == 1 )
            {
                if ( gettime() > scripts\mp\utility\teams::getteamdata( var_12, "oneLeftTime" ) + 5000 && !scripts\mp\utility\teams::getteamdata( var_12, "oneLeft" ) )
                {
                    var_21 = 0;
                    var_19 = scripts\mp\utility\teams::getteamdata( var_12, "players" );

                    foreach ( var_14 in var_19 )
                    {
                        if ( !isalive( var_14 ) )
                            var_21 = var_21 + var_14.pers["lives"];
                    }

                    if ( var_21 == 0 )
                    {
                        scripts\mp\utility\teams::setteamdata( var_12, "oneLeftTime", gettime() );
                        scripts\mp\utility\teams::setteamdata( var_12, "oneLeft", 1 );

                        if ( var_19.size > 1 )
                            [[ level.ononeleftevent ]]( var_12 );
                    }
                }

                continue;
            }

            scripts\mp\utility\teams::setteamdata( var_12, "oneLeft", 0 );
        }

        if ( !var_8 && !var_7 )
        {
            if ( istrue( level.postgameexfil ) && level.gameended )
                level notify( "exfil_continue_game_end" );

            if ( istrue( level.nukeincoming ) )
                return;

            return [[ level.ondeadevent ]]( "all" );
        }

        if ( istrue( level.postgameexfil ) && level.gameended )
            level notify( "exfil_continue_game_end" );

        if ( !istrue( level.skipondeadevent ) && !istrue( level.nukeincoming ) )
        {
            foreach ( var_12 in var_9 )
            {
                if ( level.multiteambased )
                {
                    scripts\mp\utility\teams::setteamdata( var_12, "deathEvent", 1 );
                    [[ level.ondeadevent ]]( var_12 );
                    continue;
                }

                return [[ level.ondeadevent ]]( var_12 );
            }
        }
    }
    else
    {
        var_6 = 0;

        foreach ( var_14 in level.players )
        {
            if ( var_14.team == "spectator" || var_14.team == "follower" )
                continue;

            var_6 = var_6 + var_14.pers["lives"];
        }

        var_29 = 0;

        foreach ( var_12 in level.teamnamelist )
            var_29 = var_29 + scripts\mp\utility\teams::getteamdata( var_12, "aliveCount" );

        if ( !var_29 && !var_6 )
        {
            if ( istrue( level.nukeincoming ) )
                return;

            return [[ level.ondeadevent ]]( "all" );
        }

        var_32 = scripts\mp\utility\game::getpotentiallivingplayers();

        if ( var_32.size == 1 )
            return [[ level.ononeleftevent ]]( "all" );
    }

    scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "postUpdateGameEvents" );
}

_id_11A5C()
{
    return istrue( level._id_11A5D ) && getdvarint( "br_lowpop_allow_tweaks", 1 );
}

delay_loading_screen_omnvar( var_0 )
{
    var_1 = istrue( var_0 ) && scripts\mp\gametypes\br_gulag.gsc::checkgulagusecount();
    return istrue( self.inlaststand ) && !istrue( self.shouldgetnewspawnpoint ) && !var_1;
}

delay_delete_tv_station_boss_icon()
{
    var_0 = [];
    var_1 = [];
    var_2 = isdefined( level.gulag ) && !istrue( level.gulag.shutdown );

    if ( level.teambased )
    {
        foreach ( var_4 in level.teamnamelist )
        {
            var_5 = 0;

            foreach ( var_7 in level.teamdata[var_4]["alivePlayers"] )
            {
                if ( var_7 delay_loading_screen_omnvar( var_2 ) )
                    continue;

                var_5 = 1;
                break;
            }

            if ( var_5 )
            {
                foreach ( var_7 in level.teamdata[var_4]["alivePlayers"] )
                {
                    if ( var_7 delay_loading_screen_omnvar( var_2 ) )
                        continue;

                    var_0[var_0.size] = var_7;
                }

                continue;
            }

            foreach ( var_7 in level.teamdata[var_4]["alivePlayers"] )
            {
                if ( var_7 delay_loading_screen_omnvar( var_2 ) )
                    var_1[var_1.size] = var_7;
            }
        }
    }
    else
    {
        foreach ( var_7 in level.players )
        {
            if ( var_7 delay_loading_screen_omnvar( var_2 ) )
            {
                var_1[var_1.size] = var_7;
                continue;
            }

            if ( isalive( var_7 ) )
                var_0[var_0.size] = var_7;
        }
    }

    if ( !scripts\mp\gametypes\br_public.gsc::validtousesticker() )
    {
        scripts\mp\gametypes\br_public.gsc::brleaderdialog( "finish_calls", 0, var_0 );

        foreach ( var_7 in var_0 )
        {
            var_7 setclientomnvar( "ui_br_end_game_splash_type", 19 );
            var_7 playsoundtoplayer( "br_finish_them_splash", var_7 );
        }

        foreach ( var_7 in var_1 )
            var_7 hudoutlineenable( "outline_nodepth_red" );
    }
}

debugprintvipstates()
{
    if ( !getdvarint( "scr_br_laststandfinisher", 0 ) )
        return;

    if ( istrue( level.watch_for_flash_detonation ) )
        return;

    if ( scripts\mp\utility\game::round_vehicle_logic() == "dmz" || scripts\mp\utility\game::round_vehicle_logic() == "rat_race" || scripts\mp\utility\game::round_vehicle_logic() == "risk" || scripts\mp\utility\game::round_vehicle_logic() == "kingslayer" || scripts\mp\utility\game::round_vehicle_logic() == "rumble" || scripts\mp\utility\game::round_vehicle_logic() == "gold_war" )
        return;

    var_0 = isdefined( level.gulag ) && !istrue( level.gulag.shutdown );
    var_1 = 0;
    var_2 = 0;

    if ( level.teambased )
    {
        foreach ( var_4 in level.teamnamelist )
        {
            var_5 = 0;

            foreach ( var_7 in level.teamdata[var_4]["alivePlayers"] )
            {
                if ( var_7 delay_loading_screen_omnvar( var_0 ) )
                {
                    var_2 = 1;
                    continue;
                }

                var_5 = 1;
                break;
            }

            if ( var_5 )
            {
                var_1++;

                if ( var_1 > 1 )
                    return;
            }
        }
    }
    else
    {
        foreach ( var_7 in level.players )
        {
            if ( !isalive( var_7 ) )
                continue;

            if ( var_7 delay_loading_screen_omnvar( var_0 ) )
            {
                var_2 = 1;
                continue;
            }

            var_1++;

            if ( var_1 > 1 )
                return;
        }
    }

    if ( var_1 == 0 || !var_2 )
        return;

    level.watch_for_flash_detonation = 1;
    delay_delete_tv_station_boss_icon();
}

debugthink( var_0, var_1 )
{
    if ( !istrue( level.delay_makeuseable ) )
        return 0;

    if ( istrue( scripts\mp\gametypes\br_public.gsc::tutorial_playsound() ) )
        return 0;

    if ( isdefined( level.start_escape_silo ) )
        return 0;

    level.start_escape_silo = 1;
    var_2 = scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee_params( "ignoreZombiesLastStandWipe" );
    var_3 = scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee_params( "ignoreGhostsLastStandWipe" );
    var_4 = isdefined( level.gulag ) && !istrue( level.gulag.shutdown );
    var_5 = [];
    var_6 = 0;
    var_7 = [];

    foreach ( var_9 in level.teamnamelist )
    {
        var_10 = 1;
        var_5 = [];
        var_11 = 0;
        var_12 = scripts\mp\gametypes\br_public.gsc::round_enemies_fallback_logic( var_9 );

        for ( var_13 = 0; var_13 < var_12.size; var_13++ )
        {
            var_14 = var_12[var_13];
            var_15 = scripts\mp\gametypes\br_public.gsc::rotationrefsbyseatandweapon( var_9, var_14 );

            foreach ( var_17 in var_15 )
            {
                var_18 = istrue( var_4 ) && var_17 scripts\mp\gametypes\br_public.gsc::updateinstantclassswapallowedinternal();

                if ( var_18 )
                    continue;

                if ( var_2 && var_17 scripts\mp\gametypes\br_public.gsc::_id_125F3() )
                    continue;

                if ( var_3 && var_17 scripts\mp\gametypes\br_public.gsc::_id_125EC() )
                    continue;

                if ( istrue( var_1 ) && ( isdefined( var_0 ) && var_0 == var_17 ) )
                {
                    var_11 = 1;
                    continue;
                }

                var_19 = istrue( var_17.inlaststand ) || isdefined( var_0 ) && var_0 == var_17;

                if ( var_19 && !istrue( var_17.shouldgetnewspawnpoint ) && !var_17 scripts\mp\gametypes\br_public.gsc::_id_125F3() && !var_17 scripts\mp\gametypes\br_public.gsc::_id_125EC() )
                {
                    var_5[var_5.size] = var_17;
                    continue;
                }

                var_10 = 0;
                break;
            }
        }

        if ( var_10 && ( var_5.size > 0 || istrue( var_1 ) && var_11 ) )
        {
            var_21 = [];

            foreach ( var_17 in var_5 )
            {
                if ( isdefined( self.watch_for_attack ) && !scripts\engine\utility::array_contains( var_21, self.watch_for_attack ) )
                {
                    self.watch_for_attack._id_145D0 = self.watch_for_player_enter_puddle_trigger;
                    var_21[var_21.size] = self.watch_for_attack;
                }

                if ( isdefined( var_0 ) && var_0 == var_17 )
                    var_6 = 1;

                var_17 notify( "squad_wipe_death" );
                var_17._id_13749 = 1;
                var_17 scripts\mp\utility\damage::_suicide( 0 );
            }

            if ( istrue( var_1 ) && isdefined( var_0 ) && isdefined( var_0.watch_for_attack ) && !scripts\engine\utility::array_contains( var_21, var_0.watch_for_attack ) )
            {
                if ( scripts\mp\gametypes\br_gametypes.gsc::tutorial_showtext( "assignLastStandAttacker" ) )
                    var_0 scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "assignLastStandAttacker", var_21 );
                else
                    var_21[var_21.size] = var_0.watch_for_attack;
            }

            foreach ( var_25 in var_21 )
            {
                var_25 thread scripts\mp\events::killeventtextpopup( "team_wiped", 0 );
                var_25 thread scripts\mp\utility\points::giveunifiedpoints( "team_wiped", var_25._id_145D0 );
                var_25._id_145D0 = undefined;
                var_25 thread _id_13AD0( var_0, var_25, self.watch_for_player_enter_puddle_trigger );

                if ( !isdefined( var_7[var_25.team] ) )
                {
                    var_7[var_25.team] = 1;
                    var_25 playsoundtoteam( "ui_team_wipe_splash", var_25.team );
                }
            }
        }
    }

    level.start_escape_silo = undefined;
    return var_6;
}

_id_13AD0( var_0, var_1, var_2 )
{
    waitframe();

    if ( getdvarint( "scr_disable_br_teamwiped_message", 1 ) )
    {
        if ( isdefined( var_0 ) )
            obituary( var_0, var_1, var_2, "MOD_TEAM_WIPED", scripts\mp\gametypes\br_public.gsc::rotationrefsbyseatandweapon( var_1.team, var_1.squadindex ) );
    }
}

disable_all_turrets_permanently( var_0 )
{
    if ( disablebunker11cachelocations( var_0 ) )
        return 0;

    if ( isagent( var_0 ) )
        return 0;

    return 1;
}

threat_sight_monitor( var_0 )
{
    if ( var_0 scripts\mp\utility\game::rankingenabled() && var_0 hasplayerdata() )
    {
        var_0 setplayerdata( "mp", "aarValue", 0, 0 );
        var_0 setplayerdata( "mp", "aarValue", 1, 0 );
        var_0 setplayerdata( "mp", "aarValue", 2, 0 );
        var_0 setplayerdata( "mp", "aarValue", 3, 0 );
        var_0 setplayerdata( "mp", "aarValue", 4, 0 );
        var_0 setplayerdata( "mp", "aarValue", 5, 0 );
        var_1 = var_0 getplayerdata( "common", "mpProgression", "playerLevel", "xp" );
        var_0 setplayerdata( "mp", "aarValue", 6, var_1 );
        var_0 setplayerdata( "mp", "aarValue", 7, var_1 );
    }
}

_id_13120( var_0 )
{
    var_1 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

    foreach ( var_3 in var_1 )
    {
        if ( !var_3 scripts\mp\utility\game::rankingenabled() || !var_3 hasplayerdata() )
            continue;

        var_4 = var_3.pers["combatXP"];

        if ( !isdefined( var_4 ) )
            var_4 = 0;

        var_3 setplayerdata( "mp", "aarValue", 0, var_4 );
        var_5 = var_3.pers["missionXP"];

        if ( !isdefined( var_5 ) )
            var_5 = 0;

        var_3 setplayerdata( "mp", "aarValue", 1, var_5 );
        var_6 = var_3.pers["lootingXP"];

        if ( !isdefined( var_6 ) )
            var_6 = 0;

        var_3 setplayerdata( "mp", "aarValue", 2, var_6 );
        var_7 = 0;

        if ( isdefined( var_3.matchbonus ) )
            var_7 = int( var_3.matchbonus );

        var_3 setplayerdata( "mp", "aarValue", 4, var_7 );
        var_8 = 0;

        if ( isdefined( var_3._id_12394 ) )
            var_8 = int( var_3._id_12394 );

        var_3 setplayerdata( "mp", "aarValue", 5, var_8 );
        var_9 = var_3 getplayerdata( "mp", "aarValue", 6 );
        var_10 = var_9 + var_3.pers["summary"]["xp"];
        var_3 setplayerdata( "mp", "aarValue", 7, var_10 );
    }
}

disabledvehicles( var_0, var_1 )
{
    if ( isdefined( self.vehicle ) )
    {
        var_2 = var_0.streakname;

        if ( var_2 == "manual_turret" )
            return 0;
    }

    return 1;
}

display_hint_single( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = var_0.owner;

    if ( !isdefined( var_1 ) )
        return 0;

    if ( !istrue( var_0._id_133CE ) && !var_1 scripts\mp\gametypes\br_pickups.gsc::make_chair_ai_spawner( var_0 ) )
        return 0;

    var_2 = scripts\mp\gametypes\br_gametypes.gsc::_id_12E05( "onKillstreakBeginUseFunc", var_0 );

    if ( isdefined( var_2 ) )
        return var_2;

    return scripts\mp\killstreaks\killstreaks::streakglobals_onkillstreakbeginuse( var_0 );
}

elevator_init( var_0 )
{
    return var_0 == 1;
}

votes()
{
    var_0 = self.currentprimaryweapon;

    if ( isdefined( var_0 ) && isdefined( var_0.basename ) && ( var_0.basename == "iw8_spotter_scope_mp" || var_0.basename == "iw8_spotter_scope_mp_ch3" ) )
        self setweaponammoclip( var_0, self getcurrentweaponclipammo() + 1 );
}

ending_viewing_players_setup( var_0 )
{
    if ( !isdefined( var_0.operatorcustomization ) || !isdefined( var_0.operatorcustomization.voice ) || var_0 scripts\mp\gametypes\br_public.gsc::_id_125F3() || var_0 scripts\mp\gametypes\br_public.gsc::_id_125EC() )
        return 1;

    return 0;
}

ending_fade_in( var_0, var_1, var_2 )
{
    if ( isdefined( var_0 ) && isdefined( var_1 ) && isdefined( var_2 ) )
    {
        _calloutmarkerping_handleluinotify_added::_id_13133( "ui_compass_tacopsmap_cursor_pos_override_x", var_0 );
        _calloutmarkerping_handleluinotify_added::_id_13133( "ui_compass_tacopsmap_cursor_pos_override_y", var_1 );
        _calloutmarkerping_handleluinotify_added::_id_13133( "ui_compass_tacopsmap_size_override", var_2 );
    }
    else if ( isdefined( level.br_circle ) && isdefined( level.br_circle.dangercircleent ) )
    {
        _calloutmarkerping_handleluinotify_added::_id_13133( "ui_compass_tacopsmap_cursor_pos_override_x", level.br_circle.dangercircleent.origin[0] );
        _calloutmarkerping_handleluinotify_added::_id_13133( "ui_compass_tacopsmap_cursor_pos_override_y", level.br_circle.dangercircleent.origin[1] );
        _calloutmarkerping_handleluinotify_added::_id_13133( "ui_compass_tacopsmap_size_override", level.br_circle.dangercircleent.origin[2] );
    }
    else
    {
        _calloutmarkerping_handleluinotify_added::_id_13133( "ui_compass_tacopsmap_cursor_pos_override_x", 0 );
        _calloutmarkerping_handleluinotify_added::_id_13133( "ui_compass_tacopsmap_cursor_pos_override_y", 0 );
        _calloutmarkerping_handleluinotify_added::_id_13133( "ui_compass_tacopsmap_size_override", 0 );
    }
}

prematchperiod()
{
    if ( istrue( game["switchedsides"] ) )
    {
        level.connectingplayers = getdvarint( "NKSQNMMRRQ" );

        if ( getdvarint( "scr_live_lobby", 0 ) == 1 && !istrue( level._id_133E0 ) )
        {
            game["inLiveLobby"] = 0;
            game["liveLobbyCompleted"] = 1;
            level.allowprematchdamage = 1;

            if ( !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee_params( "allowLateJoiners" ) )
            {
                setnojipscore( 1, 1 );
                setnojiptime( 1, 1 );
                level.nojip = 1;
            }

            level scripts\mp\gamelogic::livelobbymatchstarttimer( "match_starting_in", 15 );
            level notify( "start_prematch" );
            level.prematchperiod = 0;
        }
        else if ( !istrue( level._id_133E0 ) )
        {
            level.allowprematchdamage = 1;
            level scripts\mp\gamelogic::livelobbymatchstarttimer( "match_starting_in", 15 );
        }

        if ( istrue( level._id_133E0 ) )
        {
            while ( !level.players.size )
                waitframe();
        }

        level notify( "prematch_started" );
        physics_raycastents( scripts\mp\gamelogic::gettimeremaining(), 2 );
        level.prematchstarted = 1;
        level.prematchperiodend = 0;
        scripts\mp\gamelogic::matchstarttimerskip();
        physics_raycastents( scripts\mp\gamelogic::gettimeremaining(), 0 );
        return 1;
    }

    return 0;
}

risk_flagspawncountchange()
{
    if ( isdefined( level.defend_main ) )
        return level.defend_main;

    var_0 = [ "iw8_me_t9loadout", "iw8_me_t9mace", "iw8_me_t9etool", "iw8_me_t9machete", "iw8_me_t9mace", "iw8_me_t9bat", "iw8_me_t9sledgehammer", "iw8_me_t9sai", "iw8_me_t9battleaxe" ];
    var_1 = randomint( var_0.size );
    var_2 = var_0[var_1];
    level.defend_main = var_2;
    return var_2;
}

risktokencount()
{
    if ( isdefined( level.delete_undeployed_subway_cars ) )
        return level.delete_undeployed_subway_cars;

    var_0 = [ "s4_me_knife", "s4_me_katana", "s4_me_leiomano" ];
    var_1 = randomint( var_0.size );
    var_2 = var_0[var_1];
    level.delete_undeployed_subway_cars = var_2;
    return var_2;
}

riskspawn_initialset()
{
    if ( isdefined( level.demoforcesre ) )
        return level.demoforcesre;

    var_0 = [ "s4_mg_bromeo37", "s4_mg_dpapa27", "s4_mg_mgolf42", "s4_mg_tyankee11" ];
    var_1 = randomint( var_0.size );
    var_2 = var_0[var_1];
    level.demoforcesre = var_2;
    return var_2;
}

risktokencountondeath()
{
    if ( isdefined( level.demotehvt ) )
        return level.demotehvt;

    var_0 = [ "s4_sh_becho", "s4_sh_bromeo5", "s4_sh_lindia98", "s4_sh_mike97" ];
    var_1 = randomint( var_0.size );
    var_2 = var_0[var_1];
    level.demotehvt = var_2;
    return var_2;
}

ending_fade_out()
{
    var_0 = getdvarint( "scr_br_recheckAFK", 0 );
    return var_0;
}

guard_shack_mantle( var_0, var_1 )
{
    if ( !isdefined( var_1._id_125E4 ) )
        return var_0;

    var_2 = var_0;
    var_3 = ( gettime() - var_1._id_125E4 ) * 0.001;

    if ( var_3 >= level.decoy_clearaithreatbiasgroup && var_3 < level.decoy_giveassistpoint )
    {
        var_2 = var_2 * level.decoy_aicanseeanyplayer;
        return var_2;
    }
    else if ( var_3 >= level.decoy_giveassistpoint && var_3 < level.decoy_delaystoptrackingassist )
    {
        var_2 = var_2 * level.decoy_canseeplayer;
        return var_2;
    }
    else if ( var_3 >= level.decoy_delaystoptrackingassist )
    {
        var_2 = var_2 * level.decoy_aiseenplayerrecently;
        return var_2;
    }
    else
        return var_2;
}
