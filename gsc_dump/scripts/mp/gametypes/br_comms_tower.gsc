// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level endon( "game_ended" );
    level._effect["vfx_esc4_tower_button"] = loadfx( "vfx/iw8_br/mp_escape4/vfx_esc4_tower_button.vfx" );
    level._effect["vfx_esc4_tower_red_blink_light"] = loadfx( "vfx/iw8_br/mp_escape4/vfx_esc4_infil_container_smk.vfx" );
    game["dialog"]["comm_tower_activated_nearby"] = "public_events_comm_tower_brdcst";
    game["dialog"]["comm_tower_activated_team"] = "public_events_comm_tower_sweep";
    waitframe();
    scripts\mp\flags::gameflagwait( "prematch_fade_done" );
    level thread initcommstowers();
}

initcommstowers()
{
    if ( getdvarint( "scr_br_comms_tower_enabled", 1 ) == 0 )
        return;

    scripts\mp\gametypes\br_plunder.gsc::registerpostplundercallback( ::towerpostplunder );
    level.commstowersinfo = spawnstruct();
    level.commstowersinfo.commstowers = [];
    level.commstowersinfo._id_13671 = gettowersspawnlocation();
    level.commstowersinfo.commstowersprice = getdvarint( "scr_br_comms_tower_price", 1500 );
    level.commstowersinfo.usecooldown = getdvarint( "scr_br_comms_tower_cd", 45 );
    level.commstowersinfo.scanradius = getdvarint( "scr_br_comms_tower_radius", 2500 );
    level.commstowersinfo.scansweeptime = getdvarint( "scr_br_comms_tower_sweeptime", 3000 );
    spawntowers();
    level thread watchfiresaleevent();
    level thread disabletowersingas();
}

playdialog( var_0 )
{
    level thread scripts\mp\gametypes\br_public.gsc::dmztut_luicallback( "comm_tower_activated_team", var_0.team, 1 );
    var_1 = scripts\mp\utility\teams::getfriendlyplayers( var_0.team, 1 );
    var_2 = scripts\mp\utility\player::getplayersinradius( var_0.origin, 2500, undefined, var_1 );

    if ( var_2.size > 0 )
        level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "comm_tower_activated_nearby", 1, var_2 );
}

gettowersspawnlocation()
{
    var_0 = [];

    switch ( getdvar( "mapname" ) )
    {
        case "mp_wz_island":
            break;
        case "mp_sm_island_1":
            var_0[var_0.size] = [ ( 3280, -4426.5, 1258 ), ( 3271, -4392, 1251 ), ( 0, 285, 0 ) ];
            break;
        case "mp_br_mechanics":
            var_0[var_0.size] = [ ( 2048, -2649, 50.25 ), ( 2048, -2688, 0 ), ( 0, 0, 0 ) ];
            break;
        case "mp_escape4_s5":
        case "mp_escape4":
            var_0[var_0.size] = [ ( -2924.25, -10759, 584.75 ), ( -2952.25, -10732, 533.75 ), ( 0, 45, 0 ) ];
            var_0[var_0.size] = [ ( -802.75, -5367, 740 ), ( -738.75, -5312.25, 769.25 ), ( 0, 45, 0 ) ];
            var_0[var_0.size] = [ ( 368.672, -2753.04, 2560.82 ), ( 368.5, -2680.25, 2641.75 ), ( 0, 0, 0 ) ];
            var_0[var_0.size] = [ ( -3306, -3533.25, 1235.75 ), ( -3157.25, -3529.25, 1511.75 ), ( 0, 93, 0 ) ];
            var_0[var_0.size] = [ ( -1093.5, -36.5, 1812.75 ), ( -1129.75, -37, 1754 ), ( 0, 91, 0 ) ];
            var_0[var_0.size] = [ ( 3445, -1815, 1058 ), ( 3419.5, -1820.25, 953.5 ), ( 0, 101, 0 ) ];
            var_0[var_0.size] = [ ( 1197.75, 8941.75, 1056 ), ( 1235.75, 8953, 1004.75 ), ( 0, 105, 0 ) ];
            var_0[var_0.size] = [ ( -2678.75, 10770, 1195 ), ( -2685.25, 10809.3, 1143.25 ), ( 0, 98, 0 ) ];
            break;
    }

    return var_0;
}

spawntowers()
{
    var_0 = 0;

    foreach ( var_2 in level.commstowersinfo._id_13671 )
    {
        var_3 = spawn( "script_model", var_2[0] );
        var_3 setmodel( "tag_origin" );
        var_4 = easepower( "comms_tower_ee", var_2[0] );
        var_5 = spawn( "script_model", var_2[1] );
        var_5.angles = var_2[2];
        var_5 setmodel( "comms_tower_indicator" );
        var_3.useprompt = scripts\mp\gameobjects::createhintobject( var_3.origin, "HINT_BUTTON", undefined, &"WZ_MP_ESCAPE_TU_WZ325/PURCHASE_COMMS_TOWER_ENABLED", undefined, undefined, undefined, 0, 0, 65, 90 );
        var_3.useprompt.redprompt = scripts\mp\gameobjects::createhintobject( var_3.origin, "HINT_BUTTON", undefined, &"WZ_MP_ESCAPE_TU_WZ325/PURCHASE_COMMS_TOWER_DISABLED", undefined, undefined, undefined, 0, 0, 65, 90 );
        var_3.useprompt.inuse = 0;
        level.commstowersinfo.commstowers[level.commstowersinfo.commstowers.size] = var_3.useprompt;
        var_3.id = var_0;
        var_0++;
        var_3.useprompt sethintstringparams( level.commstowersinfo.commstowersprice );
        var_3.useprompt.redprompt sethintstringparams( level.commstowersinfo.commstowersprice );
        var_3 thread managetowerpromptinteraction( var_3.useprompt, var_4, var_5 );
        var_3 thread manageredpromptinteraction( var_3.useprompt.redprompt );
    }

    foreach ( var_8 in level.players )
        var_8 thread _id_126E0();
}

managetowerpromptinteraction( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    waitframe();
    var_1 setscriptablepartstate( "light", "button_on" );
    var_2 setscriptablepartstate( "light", "indicator_off" );
    var_3 = 15.0;

    for (;;)
    {
        var_0 waittill( "trigger", var_4 );

        if ( var_0 _id_1392A( var_4 ) )
        {
            thread doscan( var_4 );
            level thread playdialog( var_4 );
            var_4 commstowersanalytics( self.id );
            var_4 thread scripts\mp\utility\points::giveunifiedpoints( "br_comm_tower_activated" );
            var_0.inuse = 1;
            disabletowerpromptuse( var_0 );

            if ( !scripts\mp\gametypes\br_publicevents.gsc::upload_station_interact_used_think( 2 ) )
            {
                var_5 = int( level.commstowersinfo.commstowersprice / 100 );
                var_4 scripts\mp\gametypes\br_plunder.gsc::playersetplundercount( var_4.plundercount - var_5 );
            }

            var_1 setscriptablepartstate( "light", "button_off" );
            var_2 setscriptablepartstate( "light", "indicator_on" );
            wait( var_3 );
            var_2 setscriptablepartstate( "light", "indicator_off" );
            wait( level.commstowersinfo.usecooldown );
            var_1 setscriptablepartstate( "light", "button_on" );
            var_0.inuse = 0;
            enabletowerpromptuse( var_0 );
        }
    }
}

manageredpromptinteraction( var_0 )
{
    level endon( "game_ended" );

    for (;;)
    {
        var_0 waittill( "trigger", var_1 );
        self playsoundtoplayer( "ui_screen_edge_deny", var_1 );
    }
}

doscan( var_0 )
{
    for ( var_1 = 0; var_1 < 5; var_1++ )
    {
        triggerportableradarpingteam( self.origin, var_0.team, level.commstowersinfo.scanradius, level.commstowersinfo.scansweeptime );
        wait 3.0;
    }
}

towerpostplunder( var_0 )
{
    if ( !scripts\mp\gametypes\br_publicevents.gsc::upload_station_interact_used_think( 2 ) )
    {
        if ( playerplunderupdate( var_0 ) )
            thread _id_126E0();
    }
}

playerplunderupdate( var_0 )
{
    var_1 = int( level.commstowersinfo.commstowersprice / 100 );

    if ( !isdefined( var_0 ) || !isdefined( var_0.player ) )
        return 1;
    else if ( var_0.player.plundercount >= var_1 && var_0.player.plundercount - var_0._id_127B4 >= var_1 )
        return 0;
    else if ( var_0.player.plundercount < var_1 && var_0.player.plundercount - var_0._id_127B4 < var_1 )
        return 0;
    else
        return 1;
}

_id_126E0()
{
    foreach ( var_1 in level.commstowersinfo.commstowers )
        _id_126DF( var_1 );
}

playersupdatestructures()
{
    foreach ( var_1 in level.players )
        var_1 thread _id_126E0();
}

disabletowerpromptuse( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( isdefined( var_2 ) )
        {
            var_0 disableplayeruse( var_2 );
            var_0.redprompt disableplayeruse( var_2 );
        }
    }
}

enabletowerpromptuse( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( isdefined( var_2 ) )
            var_2 _id_126DF( var_0 );
    }
}

_id_126DF( var_0 )
{
    if ( var_0.inuse )
        return;

    if ( istrue( self.iszombie ) )
    {
        var_0 disableplayeruse( self );
        var_0.redprompt disableplayeruse( self );
    }
    else
    {
        var_1 = int( level.commstowersinfo.commstowersprice / 100 );

        if ( isdefined( self.plundercount ) && self.plundercount >= var_1 || scripts\mp\gametypes\br_publicevents.gsc::upload_station_interact_used_think( 2 ) )
        {
            var_0 enableplayeruse( self );
            var_0.redprompt disableplayeruse( self );
            return;
        }

        if ( !isdefined( self.plundercount ) || self.plundercount < var_1 )
        {
            var_0 disableplayeruse( self );
            var_0.redprompt enableplayeruse( self );
        }
    }
}

_id_1392A( var_0 )
{
    if ( scripts\mp\gametypes\br_publicevents.gsc::upload_station_interact_used_think( 2 ) )
        return 1;

    var_1 = int( level.commstowersinfo.commstowersprice / 100 );

    if ( var_0.plundercount < var_1 )
        return 0;

    return 1;
}

watchfiresaleevent()
{
    for (;;)
    {
        level waittill( "public_event_firesale_start" );

        foreach ( var_1 in level.commstowersinfo.commstowers )
            var_1 sethintstringparams( 0 );

        thread playersupdatestructures();
        level waittill( "public_event_firesale_end" );

        foreach ( var_1 in level.commstowersinfo.commstowers )
            var_1 sethintstringparams( level.commstowersinfo.commstowersprice );

        thread playersupdatestructures();
    }
}

disabletowersingas()
{
    for (;;)
    {
        level waittill( "br_circle_set", var_0 );

        foreach ( var_2 in level.commstowersinfo.commstowers )
        {
            if ( !scripts\mp\gametypes\br_circle.gsc::updateprestreamrespawn( var_2.origin ) )
            {
                var_2 istacmapactive();
                var_2.redprompt istacmapactive();
                level.commstowersinfo.commstowers = scripts\engine\utility::array_remove( level.commstowersinfo.commstowers, var_2 );
            }
        }
    }
}

commstowersanalytics( var_0 )
{
    var_1 = self;

    if ( !isdefined( var_1 ) )
        return;

    var_2 = [];
    var_3 = var_0;
    var_2[var_2.size] = "comms_towers_id";
    var_2[var_2.size] = var_3;

    if ( isdefined( level.br_circle ) )
    {
        var_4 = scripts\mp\gametypes\br_quest_util.gsc::relic_mythic_modifyplayerdamage();
        var_2[var_2.size] = "comms_towers_circle_index";
        var_2[var_2.size] = var_4;
    }

    var_5 = scripts\mp\matchdata::gettimefrommatchstart( gettime() );
    var_2[var_2.size] = "time_msfrommatchstart";
    var_2[var_2.size] = var_5;
    var_1 dlog_recordplayerevent( "dlog_event_comms_towers", var_2 );
}
