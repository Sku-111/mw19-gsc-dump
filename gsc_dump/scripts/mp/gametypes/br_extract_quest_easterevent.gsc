// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( "blueprintextract_easterevent", 1 );

    if ( !var_0 )
        return;

    scripts\mp\gametypes\br_quest_util.gsc::_id_12B3D( "blueprintextract_easterevent", ::overtimebuiltintomatchtimer );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "blueprintextract_easterevent", ::overridefieldupgrade1 );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestlocale( "blueprintextract_easterevent_locale" );
    scripts\mp\gametypes\br_quest_util.gsc::registercreatequestlocale( "blueprintextract_easterevent_locale", ::outofboundstimebr );
    scripts\mp\gametypes\br_quest_util.gsc::registercheckiflocaleisavailable( "blueprintextract_easterevent_locale", ::outline_ents );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "blueprintextract_easterevent_locale", ::outputfunc );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestcircletick( "blueprintextract_easterevent_locale", ::outline_grenade_box );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12B2D( "blueprintextract_easterevent_locale", ::outofboundstriggersspawned );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12B30( "blueprintextract_easterevent_locale", ::outofboundswatcher );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "blueprintextract_easterevent_locale" ).nextid = 0;
    scripts\mp\gametypes\br_quest_util.gsc::_id_1297C( "blueprintextract_easterevent", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12B31( "blueprintextract_easterevent", ::optional_params );

    if ( !istrue( level.br_plunder_enabled ) )
    {
        scripts\mp\gametypes\br_plunder.gsc::thermite_linktostuck();
        scripts\mp\gametypes\br_plunder.gsc::thermite_watchglstuck();
        level._effect["vfx_extract_smoke"] = loadfx( "vfx/iw8_br/gameplay/vfx_br_adv_supply_drop_marker" );
        scripts\mp\gametypes\br_plunder.gsc::_id_1278E();
        scripts\mp\gametypes\br_plunder.gsc::thermite_watchstucktoterrain();
    }

    if ( !scripts\mp\gametypes\br_plunder.gsc::updateplayerspawninputtype() )
        scripts\engine\scriptable::scriptable_addusedcallback( scripts\mp\gametypes\br_plunder.gsc::plundersiteused );

    var_1 = getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "rat_race" || getdvar( "scr_br_gametype", "" ) == "risk";
    level.outro_enemy_spawning = scripts\engine\utility::ter_op( var_1, "brloot_quest_extract_site_plunder", "brloot_quest_extract_site_br" );
    level.outro_dialogue_logic = scripts\engine\utility::ter_op( var_1, "brloot_quest_extract_site_model_plunder", "brloot_quest_extract_site_model_br" );

    if ( !isdefined( level._id_127C7.data["extractHelipadPlunder"]._id_1287B ) )
    {
        level._id_127C7.data["extractHelipadPlunder"]._id_1287B = level._id_127C7.data["extractHelipadPlunder"]._id_14068;
        level._id_127C7.data["extractHelipadPlunder"]._id_14068 = ::originalloc;
    }

    if ( !isdefined( level._id_127C7.data["extractHelipadBR"]._id_1287B ) )
    {
        level._id_127C7.data["extractHelipadBR"]._id_1287B = level._id_127C7.data["extractHelipadBR"]._id_14068;
        level._id_127C7.data["extractHelipadBR"]._id_14068 = ::originalloc;
    }

    game["dialog"]["mission_extract_accept"] = "bm_exfil_arrived";
    game["dialog"]["mission_extract_success"] = "contract_misc_success";
}

originalloc( var_0, var_1, var_2 )
{
    var_1.warningbits = var_0.index;
    var_1 notify( "heliDeposit" );

    if ( var_2 > 0 && istrue( level.br_plunder_enabled ) && ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "rat_race" || getdvar( "scr_br_gametype", "" ) == "risk" ) )
        [[ level._id_127C7.data["extractHelipadPlunder"]._id_1287B ]]( var_0, var_1, var_2 );
}

overridefieldupgrade1()
{
    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
    scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehidefromteam( self.team );
    overwatch_tank_backup( 0, undefined );

    if ( isdefined( self.get_track_controller_struct ) )
        self.get_track_controller_struct _id_13F71();

    self._id_1393B thread ow_current_scrambler_count();
}

outputfunc()
{
    foreach ( var_1 in self.subscribedinstances )
        var_1 thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();

    scripts\mp\gametypes\br_quest_util.gsc::lastdropedtime();
    self.soldier_agent_lwfn8 thread _id_12C02();
}

overtimebuiltintomatchtimer()
{
    var_0 = rocket_missile( self );
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::play_train_speaker_vo( "blueprintextract_easterevent", var_0 );

    if ( !isdefined( var_1 ) )
        return 0;

    self._id_12C4A = var_1;
    return 1;
}

outofboundstimebr( var_0 )
{
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "blueprintextract_easterevent_locale" ).nextid++;
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createlocaleinstance( "blueprintextract_easterevent_locale", "blueprintextract_easterevent", "ExtractPoint:" + scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "blueprintextract_easterevent_locale" ).nextid );

    if ( !isdefined( var_0 ) )
    {
        var_1.curorigin = ( 0, 0, 0 );
        var_1.enabled = 0;
        return var_1;
    }

    var_2 = "activeCurrent";

    if ( scripts\cp_mp\utility\game_utility::getmapname() == "mp_kstenod" || scripts\cp_mp\utility\game_utility::turretlightsonstate() )
        var_2 = "activeCurrentNight";

    var_1.playerlist = scripts\mp\utility\teams::getteamdata( self.team, "players" );
    var_1.soldier_agent_lwfn1 = spawn( "script_model", var_0.origin );
    var_1.soldier_agent_lwfn1 setmodel( level.outro_dialogue_logic );
    var_3 = var_1.playerlist[0];
    var_1.soldier_agent_lwfn1 setotherent( var_3 );
    var_1.soldier_agent_lwfn1 setscriptablepartstate( level.outro_enemy_spawning, var_2 );
    var_1.soldier_agent_lwfn1.playermaxheath = 1;
    var_1.soldier_agent_lwfn8 = var_1.soldier_agent_lwfn1 getlinkedscriptableinstance();
    var_1.soldier_agent_lwfn8.audio_shf_kill_hangar_lights = "active";
    var_1.soldier_agent_lwfn8.audio_jugg_spawn = "activeCurrent";
    var_1.soldier_agent_lwfn8.load_relics_from_playlistdvars = "hidden";
    var_1.soldier_agent_lwfn8.little_bird_onexitheavydamagestate = "hidden";
    var_1.soldier_agent_lwfn8._id_1296D = 0;
    var_1.soldier_agent_lwfn8.playerplunderbankdepositcallback = 1;
    var_1._id_11985 = var_0;
    var_1 scripts\mp\gametypes\br_quest_util.gsc::init_tape_machine_animations( "ui_mp_br_mapmenu_icon_extraction_objective", "current", var_0.origin );
    var_1.lastcircletick = -1;
    var_1.curorigin = var_0.origin;
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "blueprintextract_easterevent_locale", var_1 );
    return var_1;
}

outofboundstriggersplanetrace( var_0 )
{
    var_1 = spawnstruct();
    var_1.origin = var_0;
    var_2 = scripts\mp\gametypes\br_extract_quest.gsc::rocket_missile( var_1 );
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::play_train_speaker_vo( "blueprintextract_easterevent", var_2 );
    return isdefined( var_3 );
}

_id_12C02()
{
    if ( getdvar( "scr_br_gametype", "" ) != "dmz" && getdvar( "scr_br_gametype", "" ) != "rat_race" && getdvar( "scr_br_gametype", "" ) != "risk" )
        self setscriptablepartstate( level.outro_enemy_spawning, "hidden" );

    if ( isdefined( self.heli ) )
        self waittill( "heli_left" );

    self getscriptablelinkedentity() delete();
}

outline_ents( var_0 )
{

}

outline_grenade_box( var_0, var_1 )
{
    if ( !isdefined( self.soldier_agent_lwfn1 ) )
        return;

    var_2 = gettime();

    if ( self.lastcircletick == var_2 )
        return;

    self.lastcircletick = var_2;
    var_3 = distance2d( self.curorigin, var_0 );

    if ( var_3 > var_1 )
    {
        foreach ( var_5 in self.subscribedinstances )
        {
            scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_5.team, "br_blueprint_extract_quest_circle_failure_easterevent" );
            level thread scripts\mp\gametypes\br_public.gsc::dmztut_luicallback( "mission_obj_circle_fail", var_5.team, 1 );
            var_5.result = "circle";
        }

        scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
    }
}

outofboundstriggersspawned( var_0 )
{
    originalsubtype( var_0 );
}

outofboundswatcher( var_0 )
{
    if ( var_0.team == self.subscribedinstances[0].team )
        overridepointsneeded( var_0 );
}

overwatchent()
{
    objective_showtoplayersinmask( self.objectiveiconid );
    objective_removeallfrommask( self.objectiveiconid );

    foreach ( var_1 in self.subscribedinstances )
    {
        foreach ( var_3 in scripts\mp\utility\teams::getteamdata( var_1.team, "players" ) )
        {
            if ( !var_3 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
                objective_addclienttomask( self.objectiveiconid, var_3 );
        }
    }
}

originalsubtype( var_0 )
{
    objective_removeclientfrommask( self.objectiveiconid, var_0 );
}

overridepointsneeded( var_0 )
{
    objective_addclienttomask( self.objectiveiconid, var_0 );
}

ow_current_scrambler_count()
{
    self endon( "removed" );
    waittillframeend;
    overwatchent();
}

overwatch_tank_backup( var_0, var_1 )
{
    var_2 = 0;
    var_3 = -1;

    if ( var_0 )
    {
        var_2 = var_1 getentitynumber();
        var_3 = self.overwatch_soldiers_05_bombers;
    }

    foreach ( var_5 in scripts\mp\utility\teams::getteamdata( self.team, "players" ) )
    {
        var_5 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivesetparameter( var_2 );
        var_5 scripts\mp\gametypes\br_quest_util.gsc::_id_13EFD( var_3 );
        var_6 = isdefined( var_1 ) && var_5 == var_1;
        var_7 = var_0 && var_6;
        var_5 setclientomnvar( "ui_br_has_extract_bag", var_7 );
    }
}

takequestitem( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::register_vehicle_spawners( self.team );

    if ( isdefined( var_1 ) && var_1.size > 0 )
    {
        foreach ( var_3 in var_1 )
            var_3.tracknonoobplayerlocation scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
    }

    var_5 = scripts\mp\gametypes\br_quest_util.gsc::createquestinstance( "blueprintextract_easterevent", self.team, var_0.index, var_0 );
    var_5 scripts\mp\gametypes\br_quest_util.gsc::registerteamonquest( self.team, self );
    var_5.team = self.team;
    var_5.tablet = var_0;
    var_5.overwatch_soldiers_05_bombers = var_0.overwatch_soldiers_05_bombers;
    var_6 = getdvarint( "scr_br_blueprintextract_easterevent_questTime", 240 );
    var_5 scripts\mp\gametypes\br_quest_util.gsc::_id_1297D( var_6, 4 );
    var_7 = rocket_missile( var_0 );
    var_8 = var_5 scripts\mp\gametypes\br_quest_util.gsc::requestquestlocale( "blueprintextract_easterevent_locale", var_7, 1 );

    if ( !var_8.enabled )
    {
        var_5.result = "no_locale";
        var_5 scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
        return;
    }

    var_8 overwatchent();
    scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshowtoteam( "blueprintextract_easterevent", self.team );
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "blueprintextract_easterevent", var_5 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_13879( "blueprintextract_easterevent", self, self.team );

    if ( !level.br_plunder_enabled )
    {
        foreach ( var_10 in scripts\mp\utility\teams::getteamdata( self.team, "players" ) )
            var_10.plundercount = 0;
    }

    var_12 = spawnstruct();
    var_12.excludedplayers = [];
    var_12.excludedplayers[0] = self;
    var_12._id_127D5 = scripts\mp\gametypes\br_quest_util.gsc::rewardmodifier( "blueprintextract_easterevent", scripts\mp\gametypes\br_quest_util.gsc::ringing( self.team ) );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_blueprint_extract_quest_start_team_easterevent", var_12 );
    scripts\mp\gametypes\br_quest_util.gsc::displayplayersplash( self, "br_blueprint_extract_quest_start_tablet_finder_easterevent", var_12 );
    scripts\mp\gametypes\br_quest_util.gsc::lookforvehicles( var_5.team, self, 6, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "blueprintextract_easterevent" ) );
    level thread scripts\mp\gametypes\br_public.gsc::dmztut_luicallback( "mission_extract_accept", var_5.team, 1 );
    _id_1328B( var_8, var_0.overwatch_soldiers_05_bombers );
    var_5.get_track_controller_struct = self;

    foreach ( var_10 in level.players )
    {
        if ( var_10 != self )
            var_8.soldier_agent_lwfn8 disablescriptablepartplayeruse( level.outro_enemy_spawning, var_10 );
    }

    var_5 overwatch_tank_backup( 1, self );
    var_5 thread _id_14507( self );
    var_5 thread _id_144B6( self );
}

_id_1328B( var_0, var_1 )
{
    self.overheatreductiontime = 1;
    self.override_minimap_hide = var_0.soldier_agent_lwfn8.index;
    self.override_supply_drop_vfx = "brloot_blueprintextract_tablet";
    self.overridefieldupgrade2 = var_1;
}

_id_13F71()
{
    self.overheatreductiontime = undefined;
    self.override_minimap_hide = undefined;
    self.override_supply_drop_vfx = undefined;
    self.overridefieldupgrade2 = undefined;
}

order_path_data( var_0 )
{
    if ( self hasweapon( var_0.weapon ) )
    {
        var_1 = getcompleteweaponname( "iw8_fists_mp" );
        var_2 = scripts\cp_mp\utility\inventory_utility::iscurrentweapon( var_0.weapon );
        scripts\cp_mp\utility\inventory_utility::_takeweapon( var_0.weapon );
        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_1, undefined, undefined, 1 );

        if ( var_2 )
            scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( var_1 );
    }
}

operatorsfxalias( var_0 )
{
    if ( !isdefined( self.overridecountdownmusic ) )
        return 0;

    return self.overridecountdownmusic == var_0;
}

_id_14508( var_0 )
{
    self endon( "removed" );

    for (;;)
    {
        var_0 waittill( "weapon_change" );

        if ( isdefined( var_0 ) && !var_0 hasweapon( self.weapon ) )
        {
            var_1 = scripts\mp\gametypes\br_pickups.gsc::test_ai_anim();
            var_2 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_1, var_0.origin, var_0.angles, var_0 );
            var_3 = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( "brloot_blueprintextract_tablet", var_2 );
            var_3._id_12C4A = self._id_1393B._id_11985;
            level thread scripts\mp\gametypes\br_public.gsc::dmztut_luicallback( "br_blueprint_extract_quest_failure", var_0.team, 1, 1 );
            scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_0.team, "br_blueprint_extract_quest_failure_easterevent" );
            var_0 _id_13F71();
            self.result = "fail";
            thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
            return;
        }
    }
}

_id_14507( var_0 )
{
    self endon( "removed" );
    var_1 = var_0.team;

    for (;;)
    {
        var_0 waittill( "death_or_disconnect" );
        level thread scripts\mp\gametypes\br_public.gsc::dmztut_luicallback( "br_blueprint_extract_quest_failure", var_1, 1, 1 );
        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_1, "br_blueprint_extract_quest_failure_easterevent" );

        if ( isdefined( var_0 ) )
            var_0 _id_13F71();

        self.result = "fail";
        thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        return;
    }
}

_id_144B6( var_0 )
{
    self endon( "removed" );

    for (;;)
    {
        var_0 waittill( "heliDeposit" );

        if ( var_0.warningbits == self._id_1393B.soldier_agent_lwfn8.index )
        {
            var_1 = "blueprint_unlock_" + self.overwatch_soldiers_05_bombers;
            var_2 = scripts\mp\gametypes\br_quest_util.gsc::riotshield_init_cp( self.overwatch_soldiers_05_bombers );

            foreach ( var_4 in scripts\mp\utility\teams::getteamdata( self.team, "players" ) )
            {
                var_4 scripts\cp\vehicles\vehicle_compass_cp::_id_120A4( var_1 );

                if ( var_2 > 0 )
                    var_4 thread scripts\mp\hud_message::showsplash( "br_unlockable_weapon_splash", var_2 );
            }

            self._id_1393B.soldier_agent_lwfn8._id_1296D = 1;
            logtrophysuccesful( var_0 );
            var_6 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "blueprintextract_easterevent" );
            scripts\mp\gametypes\br_quest_util.gsc::lookforvehicles( self.team, var_0, 8, var_6 );
            level thread scripts\mp\gametypes\br_public.gsc::dmztut_luicallback( "mission_extract_success", self.team, 1, 1 );
            self._id_12D2E = self._id_1393B.soldier_agent_lwfn1.origin;
            self._id_12D2B = self._id_1393B.soldier_agent_lwfn1.angles;
            self.result = "success";
            thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
            return;
        }
    }
}

logtrophysuccesful( var_0 )
{
    level endon( "game_ended" );
    var_1 = self.team;
    var_2 = spawnstruct();
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::ringing( var_0.team );
    var_4 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "blueprintextract_easterevent" );
    var_5 = scripts\mp\gametypes\br_quest_util.gsc::rewardtovalue( scripts\mp\gametypes\br_quest_util.gsc::rewardtotype( "blueprintextract_easterevent" ) );
    var_6 = scripts\mp\gametypes\br_quest_util.gsc::riotshield_init_cp( self.overwatch_soldiers_05_bombers );
    var_2._id_121B5 = scripts\mp\gametypes\br_quest_util.gsc::_id_121B9( var_4, var_3, var_5, var_6 );
    waitframe();
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_1, "br_blueprint_extract_quest_complete_easterevent", var_2 );
}

rocket_missile( var_0 )
{
    var_1 = spawnstruct();
    var_1._id_12FA3 = "getInactiveHelipads";
    var_1._id_12F9F = ( var_0.origin[0], var_0.origin[1], 0 );
    var_1._id_12FA6 = 30000;
    var_1._id_12FA7 = 0;
    var_1._id_12FA4 = getdvarint( "scr_br_blueprintextract_idealMaxRange", 20000 );
    var_1._id_12FA5 = getdvarint( "scr_br_blueprintextract_idealMinRange", 15000 );
    var_1._id_12FA1 = 1;
    var_1._id_12C4A = var_0._id_12C4A;
    return var_1;
}

optional_params()
{
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_blueprint_extract_quest_timer_expired_easterevent" );
    level thread scripts\mp\gametypes\br_public.gsc::dmztut_luicallback( "mission_gen_fail", self.team, 1 );
}
