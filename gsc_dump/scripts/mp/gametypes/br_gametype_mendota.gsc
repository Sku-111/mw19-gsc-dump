// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

activate_punchcard()
{

}

activate_gas_trap()
{

}

init()
{
    scripts\mp\gametypes\br_alt_mode_mxp.gsc::init();
    level thread scripts\mp\gametypes\br_gametype_rebirth.gsc::enabledskiplaststand();
    level thread scripts\mp\gametypes\br_gametype_rebirth.gsc::enable_traversals_for_bombers();
    level thread scripts\mp\gametypes\obj_dogtag.gsc::init();
    test_anim_ai();
    level thread time_reduction_bonus();
    level thread testaccessoryvfx();
    level thread teamstarttime();
    level thread toggleusbstickinhand();
    level thread subtract_from_spawn_count_from_group();
    level thread init_locations();
    level._id_13364 = 1;
    level._id_133D7 = 1;
    level.disable_back_light = 1;
    level.littlebird_overrideoobseconds = level._id_11BCE.littlebird_overrideoobseconds;
    level._id_142D1 = "mp_wz_island_mendota";
    level.visionsetoverrideplanes = "mp_wz_island_ap_mendota";
    level.train_hurt_damage_watcher = [];
}

test_anim_ai()
{
    level._id_11BCE = spawnstruct();
    level._id_11BCE.juggernaut_setupexecute = getdvarint( "scr_mendota_default_respawn_height" );

    if ( isdefined( level._id_11BCE.juggernaut_setupexecute ) && level._id_11BCE.juggernaut_setupexecute > 0 )
        level._id_12CA7 = level._id_11BCE.juggernaut_setupexecute;

    level._id_11BCE._id_127B6 = getdvarfloat( "scr_mendota_plunderDropPercent", 0.3 );
    level._id_11BCE._id_127B5 = getdvarfloat( "scr_mendota_plunderDropAmount", 0 );
    level._id_11BCE._id_127BE = getdvarfloat( "scr_mendota_plunderKeepPercent", 0.6 );
    level._id_11BCE._id_12C9A = getdvarfloat( "scr_mendota_respawn_time_default", 5 );
    level._id_11BCE._id_12C99 = getdvarfloat( "scr_mendota_respawn_time_add_per_circle", 2 );
    level._id_11BCE._id_1385A = getdvarint( "scr_mendota_starting_respawn_token_count", 0 );
    level._id_11BCE._id_13857 = getdvar( "scr_mendota_starting_loadout_weapon_1", "iw8_fists_mp" );
    level._id_11BCE._id_13858 = getdvar( "scr_mendota_starting_loadout_weapon_2", "iw8_sm_t9handling" );
    level._id_11BCE._id_13856 = getdvar( "scr_mendota_starting_loadout_lethal", "frag_grenade_mp" );
    level._id_11BCE.triage_glass_break = getdvarint( "scr_mendota_intel_see_friendly_drops", 0 );
    level._id_11BCE.on_intel_pickup_xp = getdvarint( "scr_mendota_on_intel_pickup_xp", 25 );
    level._id_11BCE._id_11FE8 = getdvarint( "scr_mendota_on_intel_pickup_health_refill", 1 );
    level._id_11BCE._id_11FE7 = getdvarint( "scr_mendota_on_intel_pickup_armor_refill", 1 );
    level._id_11BCE._id_11FE6 = getdvarint( "scr_mendota_on_intel_pickup_ammo_refill", 1 );
    level._id_11BCE._id_11FEA = getdvarint( "scr_mendota_on_intel_pickup_speed_increase", 1 );
    level._id_11BCE._id_11FE9 = getdvarfloat( "scr_mendota_on_intel_pickup_overdrive_duration", 6 );
    level._id_11BCE._id_14199 = getdvarvector( "scr_mendota_vehicle_impulse_vector", ( 0, 0, 0.5 ) );
    level._id_11BCE._id_14198 = getdvarfloat( "scr_mendota_vehicle_impulse_magnitude", 150.0 );
    level._id_11BCE.train_lootcrates_save_offsets = getdvarint( "scr_mendota_intel_event", 1 );
    level._id_11BCE._id_11BEA = getdvarint( "scr_mendota_min_intel_circle_index", 2 );
    level._id_11BCE._id_11B48 = getdvarint( "scr_mendota_max_intel_circle_index", 6 );
    level._id_11BCE.infil_light_dvars = getdvarint( "scr_mendota_crate_intel_count", 30 );
    level._id_11BCE._id_11BEB = getdvarint( "scr_mendota_intel_event_min", 20 );
    level._id_11BCE._id_11B49 = getdvarint( "scr_mendota_intel_event_max", 30 );
    level._id_11BCE._id_11F1E = getdvarint( "scr_mendota_intel_event_pairs", 1 );
    level._id_11BCE.train_get_num_of_anim_ents = [];
    level._id_11BCE.train_get_num_of_anim_ents["k"] = getdvarint( "scr_mendota_k_intel_crate_dist", 2000 );
    level._id_11BCE.train_get_num_of_anim_ents["g"] = getdvarint( "scr_mendota_g_intel_crate_dist", 6000 );
    level._id_11BCE.trial_fetch_mission_table = getdvarfloat( "scr_br_mxp_crate_min_time", 60 );
    level._id_11BCE.trial_explosive_clear = getdvarfloat( "scr_br_mxp_crate_max_time", 90 );
    level._id_11BCE.inteldialogcooldown = getdvarfloat( "scr_mxp_intel_dialog_cooldown", 30.0 );
    level._id_11BCE.intelmax = getdvarint( "scr_mxp_intel_max", 150 );
    level._id_11BCE.intelreset = getdvarfloat( "scr_mxp_intel_reset", 3 );
    level._id_11BCE.vo_while_reviving = getdvarint( "scr_mendota_killstreak_disable_circle", 8 );
    level._id_11BCE.littlebird_overrideoobseconds = getdvarint( "scr_mendota_littlebird_overrideOOBSeconts", 30 );
    level._id_11BCE.finalcircledistfromfresno = getdvarint( "scr_final_cir_dist_from_fresno_pt", 6000 );
    level._id_11BCE.firstcirclemaxdistfromcenter = getdvarint( "scr_first_cir_max_dist_from_center", 30000 );

    switch ( getdvarint( "scr_mendota_circle_speed", 1 ) )
    {
        case 0:
            level._id_11BCE.groundentity = [ 0, 120, 90, 75, 60, 45, 30, 0 ];
            level._id_11BCE.ground_spawners = [ 1, 150, 120, 120, 105, 105, 150, 10 ];
            break;
        case 2:
            level._id_11BCE.groundentity = [ 0, 120, 90, 60, 45, 45, 30, 0 ];
            level._id_11BCE.ground_spawners = [ 1, 150, 120, 90, 90, 90, 150, 10 ];
            break;
        case 3:
            level._id_11BCE.groundentity = [ 0, 30, 10, 10, 10, 10, 30, 0 ];
            level._id_11BCE.ground_spawners = [ 1, 20, 10, 10, 10, 10, 10, 10 ];
            break;
        case 4:
            level._id_11BCE.groundentity = [ 0, 90, 75, 60, 45, 30, 0 ];
            level._id_11BCE.ground_spawners = [ 1, 120, 120, 105, 90, 150, 10 ];
            break;
        case 5:
            level._id_11BCE.groundentity = [ 0, 30, 10, 10, 10, 30, 0 ];
            level._id_11BCE.ground_spawners = [ 1, 20, 10, 10, 10, 150, 10 ];
            break;
        case 1:
        default:
            level._id_11BCE.groundentity = [ 0, 120, 90, 75, 60, 45, 45, 0 ];
            level._id_11BCE.ground_spawners = [ 1, 150, 135, 135, 120, 105, 105, 10 ];
            break;
    }

    if ( getdvarint( "scr_mendota_heavyWeaponCrate_ultraLoot", 0 ) )
        level.delaystreamtomovingplane = 1;

    if ( getdvarint( "scr_mendota_dangerNotifyCustomization", 1 ) )
    {
        level.isbotpracticematch = getdvarfloat( "scr_mendota_dangerNotifyCooldown", 20 );
        level.isbrgametypefuncdefined = [];
    }

    setdvar( "scr_br_ending_enabled", 1 );
}

time_reduction_bonus()
{
    level.tread_sfx = [];
    level.tread_sfx[level.tread_sfx.size] = tree_think( getdvarint( "scr_br_mxp_reward_mask", 20 ), ::translate_and_rotate_from_level_overrides );
    level.tread_sfx[level.tread_sfx.size] = tree_think( getdvarint( "scr_br_mxp_reward_satchel", 40 ), ::transitionac130tomovinganim );
    level.tread_sfx[level.tread_sfx.size] = tree_think( getdvarint( "scr_br_mxp_reward_heavy", 60 ), ::trap_room_ents );
    level.tread_sfx[level.tread_sfx.size] = tree_think( getdvarint( "scr_br_mxp_reward_loadout", 80 ), ::trap_timer_running );
    level.tread_sfx[level.tread_sfx.size] = tree_think( getdvarint( "scr_br_mxp_reward_strike", 100 ), ::trap_door_nvg_reset );
}

teamstarttime()
{
    scripts\mp\gametypes\br_gametypes.gsc::_id_13F25( "circleTimer" );
    scripts\mp\gametypes\br_gametypes.gsc::_id_13F25( "dropOnPlayerDeath" );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "circleTimer", ::circletimer );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "playerWelcomeSplashes", ::_id_126F1 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "mapCenterFinalCircle", ::_id_12181 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "getFinalCircleCenter", ::_id_12181 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "playerGulagAutoWinWait", ::_id_125BD );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "assignSpectatorToSpectatePlayer", ::assignspectatortospectateplayer );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "markPlayerAsEliminatedOnKilled", ::_id_11B16 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "dropOnPlayerDeath", ::droponplayerdeath );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "playerDropPlunderOnDeath", ::playerdropplunderondeath );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "pickupModifyCount", ::_id_12356 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "onUseCompleted", ::onusecompleted );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "canTakePickupLoot", ::get_chopper_minigun_start_node );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "skipPickupFeedback", ::skippickupfeedback );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "takePickup", ::_id_13A36 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "initCrateData", ::initcratedata );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "playerRebirthDisable", ::_id_12646 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "rebirthDisable", ::_id_12A7C );

    if ( getdvarint( "scr_br_mxp_normal_circle", 0 ) == 0 )
    {
        scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "createC130PathStruct", ::init_relic_aggressive_melee );
        scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "addToC130Infil", ::being_hacked );
    }

    scripts\mp\utility\disconnect_event_aggregator::registerondisconnecteventcallback( ::onplayerdisconnect );
    level thread _id_14148();
}

_id_126F1( var_0 )
{
    self endon( "disconnect" );
    self waittill( "spawned_player" );
    wait 1;

    if ( !istrue( level.br_infils_disabled ) )
        self waittill( "joining_Infil" );
    else
        level waittill( "prematch_done" );

    scripts\mp\hud_message::showsplash( "br_gametype_mendota_welcome" );
    scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "gametype", self, 0 );
    scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "primary_objective", self, 0 );

    if ( istrue( self.tutorial_usingparachute ) )
        level scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "deploy_squad_leader", self, 1, 0, 4.5 );

    if ( !istrue( level.br_infils_disabled ) )
    {
        self waittill( "br_jump" );

        if ( isdefined( game["dialog"]["match_desc"] ) )
            scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "match_desc", self, 0 );

        while ( !self isonground() )
            waitframe();
    }
    else
        level waittill( "prematch_done" );

    scripts\mp\gametypes\br_analytics.gsc::detachriotshield( self );
    wait 1;
    scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "secondary_objective", self, 0 );
}

iscarriablescriptable()
{
    self waittill( "game_ended" );

    foreach ( var_1 in level.players )
    {
        if ( isdefined( var_1 ) )
            onplayerdisconnect( var_1 );
    }

    foreach ( var_4 in level._id_13748 )
    {
        if ( isdefined( level._id_13457 ) )
        {
            [[ level._id_13457._id_13738 ]]( var_4.total, var_4.bridge_tank_move_sfx, var_4.nextplayertospectate );
            [[ level._id_13457._id_1373B ]]( var_4._id_12D24 );
        }
    }

    if ( istrue( level._id_145C1 ) && isdefined( level._id_13457 ) )
        [[ level._id_13457._id_145C1 ]]();
}

onplayerdisconnect( var_0 )
{

}

init_relic_gas_martyr( var_0, var_1 )
{
    var_2 = init_relic_grounded( var_1 );
    var_2 init_relic_gun_game( var_0 );
    var_2 init_relic_headbullets( var_0 );
    return var_2;
}

init_relic_grounded( var_0 )
{
    if ( isdefined( var_0 ) )
        return var_0;

    var_1 = spawnstruct();
    var_1.total = 0;
    var_1.set_flag_after_vo = 0;
    var_1.bridge_tank_move_sfx = 0;
    var_1.nextplayertospectate = 0;
    var_1._id_12D24 = 0;
    var_1._id_122EF = 0;
    var_1.openrightblimadoor = 0;
    return var_1;
}

init_relic_gun_game( var_0 )
{
    self.total = var_0 train_play_anim();
    self.set_flag_after_vo = var_0 train_move_test_train_car_thread();
    self.bridge_tank_move_sfx = var_0 train_minimap_icon_attach();
    self.nextplayertospectate = var_0 train_minimap_icon_detach();
    self._id_12D24 = var_0 trap_consoles();
}

init_relic_headbullets( var_0 )
{
    if ( !isdefined( var_0.spectatetestonprematchfadedone ) )
        self._id_122EF = 1;
    else
        self._id_122EF = var_0.spectatetestonprematchfadedone;

    if ( !isdefined( var_0.spawntimestamp ) )
        self.openrightblimadoor = 0;
    else
        self.openrightblimadoor = var_0.spawntimestamp;
}

init_relic_healthpacks( var_0, var_1 )
{
    var_2 = init_relic_landlocked( var_1 );
    var_2 init_relic_hideobjicons( var_0 );
    return var_2;
}

init_relic_landlocked( var_0 )
{
    if ( isdefined( var_0 ) )
        return var_0;

    var_1 = spawnstruct();
    var_1.total = 0;
    var_1.set_flag_after_vo = 0;
    var_1.bridge_tank_move_sfx = 0;
    var_1.nextplayertospectate = 0;
    var_1._id_12D24 = 0;
    return var_1;
}

init_relic_hideobjicons( var_0 )
{
    self.total = self.total + var_0.total;
    self.set_flag_after_vo = self.set_flag_after_vo + var_0.set_flag_after_vo;
    self.bridge_tank_move_sfx = self.bridge_tank_move_sfx + var_0.bridge_tank_move_sfx;
    self.nextplayertospectate = self.nextplayertospectate + var_0.nextplayertospectate;

    if ( var_0._id_12D24 > self._id_12D24 )
        self._id_12D24 = var_0._id_12D24;
}

setupkeybindings( var_0, var_1 )
{
    if ( isdefined( level._id_13457 ) )
    {
        [[ level._id_13457._id_12540 ]]( var_0, var_1.total, var_1.bridge_tank_move_sfx, var_1.nextplayertospectate );
        [[ level._id_13457._id_12650 ]]( var_0, var_1._id_12D24 );
        [[ level._id_13457._id_125D1 ]]( var_0, var_1._id_122EF );
        [[ level._id_13457._id_12556 ]]( var_0, var_1.openrightblimadoor );
    }
}

_id_11BCF( var_0, var_1 )
{
    switch ( var_0.type )
    {
        case "br_mendota_intel":
        case "brloot_mendota_intel_icon":
        case "brloot_mendota_intel":
            var_0 trainent( var_1 );
            return 1;
    }

    return 0;
}

testaccessoryvfx()
{
    if ( getdvarint( "scr_mendota_playtest", 0 ) )
        scripts\mp\gametypes\br_gametypes.gsc::move_molotov_mortar( "allowLateJoiners" );

    level.decoyassists = ::groundz;
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "useTokenToReviveTeammate" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "gulagWinnerRestoreLoadoutUseGulag" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "drogBagLoadout" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "match_start_VO" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "firstCircleVo" );

    if ( getdvarint( "scr_br_mxp_rebirth_only", 1 ) == 1 )
        scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "gulag" );

    if ( getdvarint( "scr_br_mxp_normal_circle", 0 ) == 0 )
    {
        scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "randomizeCircleCenter" );
        scripts\mp\gametypes\br_gametypes.gsc::move_molotov_mortar( "planeUseCircleRadius" );
        scripts\mp\gametypes\br_gametypes.gsc::move_molotov_mortar( "circleEarlyStart" );
    }
}

toggleusbstickinhand()
{
    waittillframeend;
    level thread superterrainlightbakelodoverride();
    level thread _id_127F7();
    scripts\mp\utility\spawn_event_aggregator::registeronplayerspawncallback( ::onplayerspawned );
    scripts\mp\gametypes\br_pickups.gsc::_id_12B33( "brloot_mendota_intel", ::trial_gethitmarkerpriority );
}

_id_127F7()
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "prematch_fade_done" );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "preOnPlayerKilled", ::onplayerkilled );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "dangerCircleTick", ::dangercircletick );
    level thread scripts\mp\gametypes\br_heavy_weapon_drop.gsc::init();
    level._id_126C2 = [];
    level._id_13748 = [];

    foreach ( var_1 in level.players )
    {
        var_1 trial_dogtags();
        var_2 = var_1 getentitynumber();
        level._id_126C2[var_2] = init_relic_grounded();
        level._id_13748[var_1.team] = init_relic_landlocked( level._id_13748[var_1.team] );
        var_1 _id_12604();
    }

    level thread iscarriablescriptable();
}

subtract_from_spawn_count_from_group()
{
    wait 1;
    game["dialog"]["gametype"] = "gametype_titan";
    game["dialog"]["primary_objective"] = "gametype_desc_titan";
    game["dialog"]["secondary_objective"] = "oshkosh_intel_available";
    game["dialog"]["circles_resurgence"] = "oshkosh_circle_close_titan";
    game["dialog"]["circles_final"] = "oshkosh_circle_close_laststand";
    game["dialog"]["collected_monarch_intel"] = "oshkosh_intel_acquired";
}

achievementtrackerforkills()
{

}

dangercircletick( var_0, var_1 )
{
    var_2 = var_0;
    var_3 = var_1;
    isbotmedicrole( var_2, var_3, level.dogtags, ::train_associate_models_with_brushes );
    isbotmedicrole( var_2, var_3, level.train_hurt_damage_watcher, ::train_get_anim_ents_index );
    isbotmedicrole( var_2, var_3, level.shutdownattractionicontrigger, scripts\mp\gametypes\br_heavy_weapon_drop.gsc::shut_down_laser_trap );
}

isbotmedicrole( var_0, var_1, var_2, var_3 )
{
    var_4 = var_1 * var_1;

    foreach ( var_6 in var_2 )
    {
        if ( isdefined( var_6 ) && distance2dsquared( var_6.origin, var_0 ) > var_4 )
            var_6 [[ var_3 ]]();
    }
}

_id_11B16()
{
    return 0;
}

_id_125BD( var_0, var_1 )
{
    self endon( "disconnect" );

    if ( !isdefined( var_0 ) )
    {
        if ( level._id_11BCE._id_12C9A )
        {
            self.chopper_boss_combat_actions = 1;
            var_2 = level._id_11BCE._id_12C9A;
            wait 3;

            while ( istrue( self.killcam ) )
                waitframe();

            thread _id_1336E( var_2 );
            thread scripts\mp\gametypes\br_spectate.gsc::spawnspectator( self, 0, 1 );
            wait( var_2 );
            self.chopper_boss_combat_actions = undefined;
            return 1;
        }
    }

    return 0;
}

_id_13DCB( var_0 )
{
    return 1;
}

assignspectatortospectateplayer( var_0, var_1 )
{
    var_0 notify( "assignSpectatorToSpectatePlayerWaitForTeam" );

    if ( istrue( level.endmatchcameratransitions ) )
        return 0;

    if ( !isdefined( var_1 ) || !isplayer( var_1 ) || !isalive( var_1 ) && !isdefined( var_1._id_1391A ) )
        return 0;

    if ( var_0.team == var_1.team )
        return 0;

    if ( !scripts\mp\utility\teams::getteamdata( var_0.team, "aliveCount" ) )
        return 0;

    var_2 = scripts\mp\utility\teams::getfriendlyplayers( var_0.team, 1 );

    if ( var_2.size == 0 )
        return 0;

    thread cargo_truck_mg_mp_init( var_0 );
    return 1;
}

cargo_truck_mg_mp_init( var_0 )
{
    level endon( "brSpawnPlayersEnding" );
    var_0 endon( "assignSpectatorToSpectatePlayerWaitForTeam" );
    var_0 endon( "death_or_disconnect" );
    var_0 scripts\mp\gametypes\br_spectate.gsc::_id_126AB();
    var_0 setclientomnvar( "ui_show_spectateHud", var_0 getentitynumber() );
    wait 1.0;
    var_1 = scripts\mp\gametypes\br_spectate.gsc::regive_killstreak_after_use( var_0 );
    thread scripts\mp\gametypes\br_spectate.gsc::assignspectatortospectateplayer( var_0, var_1 );
}

onplayerspawned()
{
    if ( isdefined( level._id_142D1 ) )
        self visionsetnakedforplayer( level._id_142D1, 0 );

    thread _id_14012();
    trial_dogtags();
}

onplayerkilled( var_0 )
{
    if ( !istrue( level.disable_super_in_turret._id_12CA4 ) )
        thread juggerbear();

    var_1 = var_0.inflictor;
    var_2 = var_0.attacker;

    if ( isdefined( var_2 ) && ( !isdefined( var_1 ) || var_1.classname != "trigger_multiple" && var_1.classname != "trigger_hurt" ) )
    {
        var_3 = getdvarint( "scr_br_mxp_intel_dropped_on_death", 5 );
        level thread train_initcollision( self, var_2, var_3 );
    }

    if ( getdvarint( "scr_br_mxp_rebirth_only", 1 ) == 0 && !istrue( level.disable_super_in_turret._id_12CA4 ) )
        scripts\mp\gametypes\br_gulag.gsc::trygulagspawn();

    if ( istrue( level.disable_super_in_turret.brlootchoppercratedestroycallback ) )
        scripts\mp\gametypes\br_alt_mode_mxp.gsc::playertransfertomahanger( var_2, self );
}

_id_14148()
{
    while ( !isdefined( level.vehicles ) || !isdefined( level.vehicles.damagecallbacks ) )
        wait 0.1;

    scripts\mp\vehicles\damage::set_post_mod_damage_callback( "atv", ::_id_14202 );
    scripts\mp\vehicles\damage::set_post_mod_damage_callback( "cargo_truck", ::_id_14202 );
    scripts\mp\vehicles\damage::set_post_mod_damage_callback( "jeep", ::_id_14202 );
    scripts\mp\vehicles\damage::set_post_mod_damage_callback( "tac_rover", ::_id_14202 );
    scripts\mp\vehicles\damage::set_post_mod_damage_callback( "little_bird", ::_id_14202 );
}

_id_14202( var_0 )
{
    if ( isdefined( var_0.direction_vec ) && isdefined( var_0.meansofdeath ) && isexplosivedamagemod( var_0.meansofdeath ) )
    {
        var_1 = level._id_11BCE._id_14199;
        var_2 = level._id_11BCE._id_14198;
        self _meth_87C1( var_0.direction_vec + var_1, var_2 );
    }

    return 1;
}

_id_12604()
{
    if ( !isdefined( self._id_12EB0 ) )
    {
        var_0 = getcompleteweaponname( level._id_11BCE._id_13857 );
        var_1 = scripts\mp\class::fixcollision( level._id_11BCE._id_13858, "camo_01b", undefined, -1 );
        var_2 = getcompleteweaponname( level._id_11BCE._id_13856 );
        var_3 = scripts\mp\equipment::getequipmentreffromweapon( var_2 );
        self giveweapon( var_0 );
        self giveweapon( var_1 );
        self switchtoweaponimmediate( var_1 );
        self assignweaponprimaryslot( var_1 );
        scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
        scripts\mp\gametypes\br_weapons.gsc::br_ammo_give_type( self, "brloot_ammo_919", var_1.clipsize * 2 );
        scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );
        self notify( "ammo_update" );
        scripts\mp\equipment::giveequipment( var_3, "primary" );
        scripts\mp\weapons::fixupplayerweapons( self, var_1 );
    }
    else
        _id_125FB();

    scripts\mp\gametypes\br_armor.gsc::scriptablescurid( 150 );
}

trial_active_fob( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_3 ) )
        var_3 = 1;

    if ( var_3 == 0 )
        return;

    if ( isdefined( var_0 ) && isdefined( var_1 ) )
        return trial_alternate_progression( var_0, var_1, var_3 );

    if ( isdefined( var_2 ) )
        return trial_ai_spawn_far( var_2, var_0, var_3 );
}

trial_alternate_progression( var_0, var_1, var_2 )
{
    if ( !train_array( var_0 ) )
        return;

    var_3 = trial_ai_spawn_far( var_0.origin, var_0, var_2 );
    var_3 trial_callback_ai_damage( var_0, var_1 );
    return var_3;
}

train_array( var_0 )
{
    if ( isagent( var_0 ) )
        return 0;

    return 1;
}

trial_combo( var_0 )
{
    if ( level._id_11BCE.triage_glass_break >= 1 )
        return;

    if ( !isdefined( var_0 ) )
        return;

    var_1 = scripts\mp\gametypes\br_public.gsc::round_enemy_stuck_logic( var_0.team, var_0.squadindex );

    foreach ( var_3 in var_1 )
        self disablescriptableplayeruse( var_3 );
}

trial_callback_ai_damage( var_0, var_1 )
{
    var_1 = train_sfx_init( var_1 );
    self.team = var_0.team;
    self.victim = var_0;
    self.victimteam = var_0.team;
    self.attacker = var_1;
    self.attackerteam = var_1.team;
    self.owner = var_0;
    self.ownerteam = var_0.team;
}

trial_ai_spawn_far( var_0, var_1, var_2 )
{
    var_3 = trial_active_ring( var_0, var_1, var_2 );
    var_3 trial_celebration_flares( var_2 );
    var_3 trial_dlog_clear( var_2 );
    var_3 trial_combo( var_1 );
    var_3 trial_dlog_lava( var_1 );
    return var_3;
}

trial_gethitmarkerpriority()
{
    self.spawntime = gettime();
    var_0 = train_elements_enable( self.count );
    trial_celebration_flares( var_0 );
}

trial_active_ring( var_0, var_1, var_2 )
{
    var_0 = var_0 + trial_callback_ai_killed( var_1 );
    var_3 = trial_ai( var_0, var_1, var_2 );
    var_3.spawntime = gettime();
    return var_3;
}

trial_ai( var_0, var_1, var_2 )
{
    var_3 = undefined;

    switch ( var_2 )
    {
        case 10:
        case 9:
        case 8:
        case 7:
        case 6:
            var_3 = trial_dlog_arm_course( var_0, var_1 );
            break;
        case 5:
        case 4:
        case 3:
        case 2:
        case 1:
        default:
            var_3 = trial_ai_jugg( var_0 );
            break;
    }

    return var_3;
}

trial_dlog_arm_course( var_0, var_1 )
{
    var_2 = undefined;

    if ( isdefined( var_1 ) )
        var_2 = var_1 getentitynumber();

    var_3 = easepower( "brloot_mendota_intel_icon", var_0, undefined, undefined, var_2 );
    scripts\mp\gametypes\br_pickups.gsc::_id_12B3A( var_3 );
    return var_3;
}

trial_ai_jugg( var_0 )
{
    var_1 = spawn( "script_model", var_0 );
    var_1 setmodel( "military_intel_br_mendota" );
    return var_1;
}

trial_callback_ai_killed( var_0 )
{
    if ( !isdefined( var_0 ) )
        return ( 0, 0, 14 );

    var_1 = ( 0, 0, 0 );
    var_2 = var_0.angles;

    if ( var_0 scripts\mp\gameobjects::touchingarbitraryuptrigger() )
    {
        var_2 = self getworldupreferenceangles();
        var_1 = anglestoup( var_2 );

        if ( var_1[2] < 0 )
            return ( 0, 0, -14 );
    }

    return ( 0, 0, 14 );
}

trial_celebration_flares( var_0 )
{
    trial_dlog_race( var_0 );
    trial_civilians_killed();
    trial_delete_out_of_bounds();
}

trial_dlog_race( var_0 )
{
    var_1 = undefined;

    if ( train_wzcircle_override() )
        var_1 = "" + self getentitynumber();
    else
        var_1 = self.index;

    self.start_reach_wind_room = var_1;
    level.dogtags[var_1] = self;
    trial_dlog_sniper( var_0 );
}

trial_dlog_sniper( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 1;

    self.count = trial_dogtag_setup( var_0 );
}

trial_dlog_clear( var_0 )
{
    if ( train_wzcircle_override() )
        trial_dlog_func( var_0 );
    else
        trial_dlog_gun( var_0 );
}

trial_dlog_func( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 1;

    switch ( var_0 )
    {
        case 2:
            self hudoutlineenable( "outline_depth_green" );
            break;
        case 3:
            self hudoutlineenable( "outline_depth_cyan" );
            break;
        case 4:
            self hudoutlineenable( "outline_depth_purple" );
            break;
        case 5:
            self hudoutlineenable( "outline_depth_orange" );
            break;
        case 1:
        default:
            self hudoutlineenable( "outline_depth_white" );
            break;
    }
}

trial_dlog_gun( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 6;

    switch ( var_0 )
    {
        case 7:
            self setscriptablepartstate( "brloot_mendota_intel", "green" );
            break;
        case 8:
            self setscriptablepartstate( "brloot_mendota_intel", "cyan" );
            break;
        case 9:
            self setscriptablepartstate( "brloot_mendota_intel", "orange" );
            break;
        case 10:
            self setscriptablepartstate( "brloot_mendota_intel", "red" );
            break;
        case 6:
        default:
            self setscriptablepartstate( "brloot_mendota_intel", "white" );
            break;
    }
}

trial_civilians_killed()
{
    if ( level.dogtags.size > level._id_11BCE.intelmax )
        level.dogtags = scripts\engine\utility::array_removeundefined( level.dogtags );

    if ( level.dogtags.size > level._id_11BCE.intelmax )
    {
        var_0 = undefined;

        foreach ( var_2 in level.dogtags )
        {
            if ( !isdefined( var_0 ) || var_2.spawntime < var_0.spawntime )
                var_0 = var_2;
        }

        var_0 train_associate_models_with_brushes();
    }
}

trial_delete_out_of_bounds()
{
    if ( !train_wzcircle_override() )
        return;

    self setasgametypeobjective();
    trial_dlog_jugg();
}

trial_dlog_jugg()
{
    var_0 = train_play_anim_init();

    if ( isdefined( level.dogtags[var_0].objidnum ) )
    {
        if ( level.dogtags[var_0].objidnum != -1 )
        {
            var_1 = level.dogtags[var_0].objidnum;
            scripts\mp\objidpoolmanager::update_objective_state( var_1, "current" );
            scripts\mp\objidpoolmanager::update_objective_onentity( var_1, level.dogtags[var_0] );
            scripts\mp\objidpoolmanager::update_objective_setzoffset( var_1, 22 );
            scripts\mp\objidpoolmanager::update_objective_setbackground( var_1, 1 );
            scripts\mp\objidpoolmanager::objective_set_play_intro( level.dogtags[var_0].objidnum, 0 );
            scripts\mp\objidpoolmanager::objective_set_play_outro( level.dogtags[var_0].objidnum, 0 );
            level.dogtags[var_0] scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_dogtags_friendly", "waypoint_dogtags" );
            level.dogtags[var_0] scripts\mp\gameobjects::setvisibleteam( "any" );
            getbnetigrbattlepassxpmultiplier( var_1, 8858, 9843 );
            getscriptcachecontents( var_1, 0.5, 1.0 );
        }
    }
}

trial_dlog_lava( var_0, var_1 )
{
    if ( !train_wzcircle_override() )
        return;

    thread trial_dlog_pitcher( var_0, var_1 );
}

trial_dlog_pitcher( var_0, var_1 )
{
    self endon( "death" );

    if ( !isdefined( var_1 ) )
        var_1 = scripts\mp\gametypes\br_pickups.gsc::test_ai_anim();

    var_2 = self.origin;
    var_3 = self.angles;

    if ( isdefined( var_0 ) )
    {
        var_2 = var_0.origin;
        var_3 = var_0.angles;
    }

    var_4 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_1, var_2, var_3, var_0, undefined, undefined, undefined, 1 );
    var_5 = var_4.origin;
    var_6 = abs( self.origin[2] - var_5[2] );
    var_7 = getdvarint( "NPOQPMP", 800 );
    var_8 = sqrt( 2 * var_6 / var_7 ) + 0.5;
    var_9 = trajectorycalculateinitialvelocity( self.origin, var_5, ( 0, 0, -1 * var_7 ), var_8 );
    self movegravity( var_9, var_8 );
    wait( var_8 );
    self.origin = var_5;

    if ( isdefined( var_4.set_force_aitype_armored ) )
    {
        self linkto( var_4.set_force_aitype_armored );
        self.set_force_aitype_armored = var_4.set_force_aitype_armored;
    }
}

trial_dlog_gunslinger()
{
    self.offset3d = ( 0, 0, 16 );
    self.curorigin = self.origin;
    scripts\mp\gameobjects::requestid( 1, 1 );
    self.type = "useObject";
    self.numtouching["axis"] = 0;
    self.numtouching["allies"] = 0;
}

train_initcollision( var_0, var_1, var_2 )
{
    if ( !isdefined( var_2 ) )
        var_2 = 1;

    var_2 = int( var_2 );

    while ( var_2 > 0 )
    {
        var_3 = train_elements_enable( var_2 );
        trial_active_fob( var_0, var_1, undefined, var_3 );
        var_2 = var_2 - trial_dogtag_setup( var_3 );
        waitframe();
    }
}

trainent( var_0 )
{
    var_0 = train_sfx_init( var_0 );

    if ( intel_cancollect( var_0 ) )
    {
        var_1 = train_scriptable_attach_delay();
        var_2 = intel_onuse_internal( var_0, var_1, "ground" );
        self.count = var_2;

        if ( var_2 <= 0 )
            train_associate_models_with_brushes( var_0 );
    }
}

intel_collectedmisc( var_0, var_1, var_2 )
{
    if ( intel_cancollect( var_0 ) )
        var_0 intel_onuse_internal( var_0, var_1, var_2 );
}

intel_cancollect( var_0 )
{
    var_1 = var_0 train_mover_test();
    var_2 = var_0 traincylestolink();
    return var_1 < var_2;
}

intel_onuse_internal( var_0, var_1, var_2 )
{
    traintracefails( var_0, var_1 );
    traintracesuccesses( var_0 );
    traintracerelpos( var_0 );
    intel_onuse_handledialog( var_0 );
    var_3 = var_0 train_stopper( var_1 );
    transition_parachutestate( var_0 );
    var_0 playlocalsound( "mxp_intel_pickup" );
    scripts\mp\gametypes\br_analytics.gsc::branalytics_modespecificscore( var_0, var_1, var_2 );

    if ( level._id_11BCE.intelreset >= 0 )
    {
        var_4 = var_0 train_mover_test();
        var_5 = var_0 traincylestolink();

        if ( var_4 >= var_5 )
            level thread intel_reset( var_0, level._id_11BCE.intelreset );
    }

    return var_3;
}

train_sfx_init( var_0 )
{
    if ( isdefined( var_0.owner ) )
        return var_0.owner;

    return var_0;
}

intel_onuse_handledialog( var_0 )
{
    if ( !isdefined( var_0.b_mxp_intel_dialog_on_cooldown ) || !var_0.b_mxp_intel_dialog_on_cooldown )
        var_0 thread intel_pickupdialog();
}

intel_pickupdialog()
{
    self.b_mxp_intel_dialog_on_cooldown = 1;
    level thread scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "collected_monarch_intel", self );
    thread intel_dialogcooldown();
}

intel_dialogcooldown()
{
    self endon( "disconnect" );
    self endon( "team_eliminated" );
    wait( level._id_11BCE.inteldialogcooldown );
    self.b_mxp_intel_dialog_on_cooldown = 0;
}

traintracefails( var_0, var_1 )
{
    var_0 scripts\cp\vehicles\vehicle_compass_cp::_id_1301E( "mv_event_intel_3", var_1 );

    if ( !train_vfx_init( var_0 ) )
        var_0 scripts\cp\vehicles\vehicle_compass_cp::_id_12003();
}

trainmove()
{
    transient_world_autolod_enabled( "mxp_intel_pickup" );
}

transient_world_autolod_enabled( var_0 )
{
    var_1 = self.origin;
    playsoundatpos( var_1, var_0 );
}

traintracesuccesses( var_0 )
{
    transient_prefab_group( var_0 );
    trainwaittime( var_0 );
}

transient_prefab_group( var_0 )
{
    if ( train_vfx_init( var_0 ) )
    {
        var_0 scripts\mp\utility\stats::incpersstat( "confirmed", 1 );
        var_0 scripts\mp\persistence::statsetchild( "round", "confirmed", var_0.pers["confirmed"] );
    }
    else if ( train_wzcircle_time_subtractfrom() )
    {
        var_0 scripts\mp\utility\stats::incpersstat( "denied", 1 );
        var_0 scripts\mp\persistence::statsetchild( "round", "denied", var_0.pers["denied"] );
    }
}

trainwaittime( var_0 )
{
    if ( train_vfx_init( var_0 ) )
        scripts\mp\gametypes\obj_dogtag.gsc::allyonuse( var_0 );
    else if ( train_wzcircle_time_subtractfrom() )
        scripts\mp\gametypes\obj_dogtag.gsc::enemyonuse( var_0 );
}

traintracerelpos( var_0 )
{
    var_0 thread scripts\mp\rank::scoreeventpopup( "br_mendota_intel" );

    if ( train_vfx_init( var_0 ) )
    {
        if ( isdefined( level.dogtagallyonusecb ) && !level.gameended )
            self thread [[ level.dogtagallyonusecb ]]( var_0 );
    }
    else if ( isdefined( level.dogtagenemyonusecb ) && !level.gameended )
        self thread [[ level.dogtagenemyonusecb ]]( var_0 );
}

intel_isintel()
{
    var_0 = self.scriptablename;

    if ( !isdefined( var_0 ) && isdefined( self.tracknonoobplayerlocation ) )
        var_0 = self.tracknonoobplayerlocation.type;

    if ( !isdefined( var_0 ) )
        return 0;

    if ( var_0 == "brloot_mendota_intel_icon" || var_0 == "brloot_mendota_intel" || var_0 == "br_mendota_intel" )
        return 1;

    return 0;
}

train_wzcircle_time_subtractfrom()
{
    return isdefined( self.victim );
}

train_vfx_init( var_0 )
{
    if ( !train_wzcircle_time_subtractfrom() )
        return 0;

    return var_0.pers["team"] == self.victimteam;
}

traincar_hurt( var_0 )
{
    if ( !train_wzcircle_time_subtractfrom() )
        return 0;

    return var_0 == self.victim;
}

train_wzcircle_override()
{
    if ( isent( self ) )
        return 1;

    return 0;
}

train_play_anim_init()
{
    if ( isdefined( self.entity ) )
        return self.entity.start_reach_wind_room;

    return self.start_reach_wind_room;
}

train_scriptable_attach_delay()
{
    if ( isdefined( self.entity ) )
    {
        if ( !isdefined( self.entity.count ) )
            return 1;

        return self.entity.count;
    }

    if ( !isdefined( self.count ) )
        return 1;

    return self.count;
}

train_elements_enable( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( var_0 >= 20 )
        return 10;
    else if ( var_0 >= 10 )
        return 9;
    else if ( var_0 >= 5 )
        return 8;
    else if ( var_0 >= 3 )
        return 7;
    else if ( var_0 >= 1 )
        return 6;

    return 0;
}

trial_dogtag_setup( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = 0;

    switch ( var_0 )
    {
        case 7:
        case 2:
            var_1 = 3;
            break;
        case 8:
        case 3:
            var_1 = 5;
            break;
        case 9:
        case 4:
            var_1 = 10;
            break;
        case 10:
        case 5:
            var_1 = 20;
            break;
        case 6:
        case 1:
        default:
            var_1 = 1;
            break;
    }

    return var_1;
}

train_associate_models_with_brushes( var_0 )
{
    thread train_attach_useable_ammorestocklocation( var_0 );
}

train_attach_useable_ammorestocklocation( var_0 )
{
    train_attach_models_to_assembly( var_0 );
    train_car_audio();
    waitframe();

    if ( isdefined( self ) )
    {
        self notify( "death" );
        train_attach_brushes_to_models();
        train_attach_player_hurts();
    }
}

train_attach_models_to_assembly( var_0 )
{
    if ( train_wzcircle_time_subtractfrom() )
    {
        thread scripts\mp\gametypes\obj_dogtag.gsc::removetags( self.victim.guid, undefined, var_0 );
        train_collision_item_valid();
    }
}

train_collision_item_valid()
{
    self.victim notify( "tag_removed" );
}

train_car_audio()
{
    playfx( level.conf_fx["vanish"], self.origin );
    self notify( "reset" );
}

train_attach_brushes_to_models()
{
    var_0 = train_play_anim_init();

    if ( isdefined( var_0 ) && isdefined( level.dogtags[var_0] ) )
    {
        if ( !isdefined( level.dogtags[var_0].skipminimapids ) )
        {
            level.dogtags[var_0] scripts\mp\gameobjects::releaseid();
            self notify( "deleted" );
        }

        level.dogtags[var_0] = undefined;
    }
}

train_attach_player_hurts()
{
    if ( isdefined( self.entity ) )
        self.entity delete();
    else
    {
        if ( train_wzcircle_override() )
        {
            self delete();
            return;
        }

        self freescriptable();
    }
}

tree_think( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.spotlight_sweep_to_loc_safe = var_0;
    var_2.playerwaittillstreamhintcomplete = var_1;
    return var_2;
}

intel_reset( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 scripts\engine\utility::waittill_notify_or_timeout( "death", var_1 );
    var_0.spawnvector = 0;
    var_0.spawnselectionmarker = 0;
    var_0.spawnpoint_setspawnpoint = 0;
    var_0.spawntvfix = 0;
    var_0.splashtime_helis = 0;
    var_0 trial_dogtags();
}

transition_parachutestate( var_0 )
{
    thread trap_toggle_logic( var_0 );

    if ( !train_vfx_init( var_0 ) )
        trap_door_nvg_reset_catch( var_0 );
}

trap_toggle_logic( var_0 )
{
    trenchdebug( var_0 );
    triage_door_clip( var_0 );
    traversenotvalid( var_0 );
    traversal_disabled_by_management( var_0 );
    var_0 thread _id_124EF();
}

trap_door_nvg_reset_catch( var_0 )
{
    for ( var_1 = 0; var_1 <= level.tread_sfx.size; var_1++ )
    {
        if ( trap_room_dogtag_revive( var_0, var_1 ) )
        {
            var_0 [[ level.tread_sfx[var_1].playerwaittillstreamhintcomplete ]]();
            var_0 trap_room_turret_init();
        }
    }
}

trap_room_dogtag_revive( var_0, var_1 )
{
    var_2 = var_0 train_mover_test();
    var_3 = var_0 trap_consoles();

    if ( !isdefined( level.tread_sfx[var_3] ) )
        return 0;

    var_4 = var_2 >= level.tread_sfx[var_3].spotlight_sweep_to_loc_safe;
    var_5 = var_1 == var_3;
    return var_4 && var_5;
}

trenchdebug( var_0 )
{
    if ( isdefined( var_0.vehicle ) )
        return;

    if ( level._id_11BCE._id_11FEA == 1 )
        var_0 thread _id_124EE();
}

triage_door_clip( var_0 )
{
    var_1 = self.count;

    if ( !isdefined( var_1 ) )
        var_1 = 1;

    if ( train_vfx_init( var_0 ) )
        var_0 scripts\mp\rank::giverankxp( "tag_denied", level._id_11BCE.on_intel_pickup_xp * var_1 );
    else
        var_0 scripts\mp\rank::giverankxp( "tag_collected", level._id_11BCE.on_intel_pickup_xp * var_1 );
}

travelspeed( var_0 )
{
    if ( level._id_11BCE._id_11FE6 == 1 )
        var_0 thread transition_to_airfield();
}

traversenotvalid( var_0 )
{
    if ( level._id_11BCE._id_11FE8 == 1 )
        self.health = self.maxhealth;
}

traversal_disabled_by_management( var_0 )
{
    if ( level._id_11BCE._id_11FE7 == 1 )
    {
        var_0.br_armorhealth = var_0.br_maxarmorhealth;
        var_0 setclientomnvar( "ui_br_armor_damage", 1 );
        var_0 scripts\mp\equipment\armor_plate::debug_state( var_0.br_armorhealth );
    }
}

transition_to_airfield()
{
    self endon( "death_or_disconnect" );
    thread scripts\mp\equipment::givescavengerammo();
    scripts\mp\weapons::scavengergiveammo( self );
    waitframe();
    scripts\mp\weapons::scavengergiveammo( self );
}

triage_ai_campers()
{
    trap_room_wave_settings( "uav" );
}

trap_toggle_fx_logic()
{
    scripts\mp\gametypes\br_pickups.gsc::forcegivesuper( "super_ammo_drop", 1, 0, 0 );
    thread scripts\mp\hud_message::showsplash( "br_field_upgrade_purchased" );
}

intel_reward_selfrevive()
{
    intel_reward_item( "brloot_self_revive", "br_gametype_mendota_intel_self_revive" );
}

trap_room_ents()
{
    intel_reward_item( "brloot_offhand_advancedlootdrop", "br_gametype_mendota_intel_heavy_weapons" );
}

transition_to_next_section()
{
    scripts\mp\gametypes\br_pickups.gsc::forcegivesuper( "super_armor_drop", 1, 0, 0 );
    thread scripts\mp\hud_message::showsplash( "br_field_upgrade_purchased" );
}

transitionplayersoutofac130cinematic()
{
    trap_room_wave_settings( "toma_strike" );
}

translate_and_rotate_from_level_overrides()
{
    intel_reward_item( "brloot_equip_gasmask", "br_gametype_mendota_intel_gas_mask" );
}

transitionac130tomovinganim()
{
    thread scripts\mp\hud_message::showsplash( "br_gametype_mendota_intel_satchel" );

    if ( getdvarint( "scr_mendota_refill_armor", 1 ) )
    {
        var_0 = scripts\mp\gametypes\br_pickups.gsc::br_createcustompickupitem( self, "brloot_plate_pouch" );
        var_1 = scripts\mp\gametypes\br_pickups.gsc::cantakepickup( var_0 );

        if ( var_1 == 1 )
        {
            scripts\mp\gametypes\br_pickups.gsc::onusecompleted( var_0, 1 );
            return;
        }

        if ( var_1 == 15 )
        {
            var_2 = scripts\engine\utility::ter_op( isdefined( self.equipment["health"] ), scripts\mp\equipment::getequipmentslotammo( "health" ), 0 );
            var_3 = scripts\mp\equipment::getequipmentmaxammo( level.br_pickups.br_equipname["brloot_armor_plate"] );

            if ( var_2 < var_3 )
            {
                scripts\mp\equipment::setequipmentslotammo( "health", var_3 );
                return;
            }

            return;
        }

        return;
    }
    else
        intel_reward_item( "brloot_plate_pouch", undefined );
}

trap_trigger_logic()
{
    intel_reward_item( "brloot_offhand_kioskdrop", undefined );
}

traps_disabled()
{
    trap_room_wave_settings( "precision_airstrike" );
}

transitionplayerstoac130cinematic()
{
    thread scripts\mp\hud_message::showsplash( "br_body_count_rewarded_extra_life" );
    start_mine_caves();
}

trap_timer_running()
{
    intel_reward_item( "brloot_offhand_advancedsupplydrop", "br_gametype_mendota_intel_loadout_drop" );
}

treerootnodesizebitcount()
{
    thread scripts\mp\hud_message::showsplash( "br_body_count_rewarded_specialist" );
    scripts\mp\perks\perks::bears();
}

transition_snd_org()
{
    trap_room_wave_settings( "directional_uav" );
    level thread scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "intel_reward", self, undefined, undefined, 1 );
}

trap_door_nvg_reset()
{
    thread scripts\mp\hud_message::showsplash( "br_gametype_mendota_intel_oshkosh" );
    var_0 = isdefined( self.streakdata.streaks[1] );
    scripts\mp\gametypes\br_pickups.gsc::playerpackdataintogulagomnvar( "greenbay_strike", var_0, 1 );
}

intel_reward_item( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) )
        return;

    scripts\mp\gametypes\br_pickups.gsc::br_forcegivecustomreward( self, var_0, 1, var_2 );

    if ( isdefined( var_1 ) )
        thread scripts\mp\hud_message::showsplash( var_1 );
}

trap_room_wave_settings( var_0 )
{
    var_1 = isdefined( self.streakdata.streaks[1] );
    scripts\mp\gametypes\br_pickups.gsc::playerpackdataintogulagomnvar( var_0, var_1, 1 );

    if ( !level.gameended )
        thread scripts\mp\hud_message::showkillstreaksplash( var_0 );
}

train_play_anim()
{
    var_0 = 0;
    var_0 = var_0 + train_move_test_train_car_thread();
    var_0 = var_0 + train_minimap_icon_attach();
    var_0 = var_0 + train_minimap_icon_detach();
    return var_0;
}

train_mover_test()
{
    if ( !isdefined( self.splashtime_helis ) )
        self.splashtime_helis = 0;

    return self.splashtime_helis;
}

train_move_test_train_car_thread()
{
    if ( !isdefined( self.spawntvfix ) )
        self.spawntvfix = 0;

    return self.spawntvfix;
}

train_minimap_icon_attach()
{
    if ( !isdefined( self.spawnpoint_setspawnpoint ) )
        self.spawnpoint_setspawnpoint = 0;

    return self.spawnpoint_setspawnpoint;
}

train_minimap_icon_detach()
{
    if ( !isdefined( self.spawnselectionmarker ) )
        self.spawnselectionmarker = 0;

    return self.spawnselectionmarker;
}

train_stopper( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 1;

    var_0 = int( var_0 );
    var_1 = train_mover_test();
    var_2 = traincylestolink();
    var_3 = 0;

    if ( var_1 + var_0 > var_2 )
    {
        var_4 = var_2 - var_1;
        var_3 = var_0 - var_4;
        var_0 = var_4;
    }

    if ( train_wzcircle_time_subtractfrom() )
    {
        if ( train_vfx_init( self ) )
            train_stop( var_0 );
        else
            train_tag_array( var_0 );
    }
    else
        train_tagoffset_array( var_0 );

    trial_dogtags();
    return var_3;
}

traincylestolink()
{
    var_0 = level.tread_sfx[level.tread_sfx.size - 1];
    return var_0.spotlight_sweep_to_loc_safe;
}

train_track_velocity( var_0 )
{
    self.splashtime_helis = train_mover_test();

    if ( isdefined( var_0 ) )
        self.splashtime_helis = self.splashtime_helis + var_0;
    else
        self.splashtime_helis++;
}

train_tagoffset_array( var_0 )
{
    self.spawntvfix = train_move_test_train_car_thread();

    if ( isdefined( var_0 ) )
        self.spawntvfix = self.spawntvfix + var_0;
    else
        self.spawntvfix++;

    train_track_velocity( var_0 );
}

train_stop( var_0 )
{
    self.spawnpoint_setspawnpoint = train_minimap_icon_attach();

    if ( isdefined( var_0 ) )
        self.spawnpoint_setspawnpoint = self.spawnpoint_setspawnpoint + var_0;
    else
        self.spawnpoint_setspawnpoint++;
}

train_tag_array( var_0 )
{
    self.spawnselectionmarker = train_minimap_icon_detach();

    if ( isdefined( var_0 ) )
        self.spawnselectionmarker = self.spawnselectionmarker + var_0;
    else
        self.spawnselectionmarker++;

    train_track_velocity( var_0 );
}

train_init_as_vehicle( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 1;

    var_0 = int( var_0 );

    for ( var_1 = 0; var_1 < var_0; var_1++ )
        train_init_lootcrates_on_train();

    trial_dogtags();
}

train_init_lootcrates_on_train()
{
    self.splashtime_helis = train_mover_test();
    self.splashtime_helis--;

    if ( self.splashtime_helis < 0 )
        self.splashtime_helis = 0;
}

trial_dogtags()
{
    var_0 = train_mover_test();
    var_1 = trap_consoles();
    var_2 = trap_array();
    var_3 = propremovefromcircle();
    var_4 = 0;
    var_4 = var_4 + var_0 * 100000;
    var_4 = var_4 + var_1 * 1000;
    var_4 = var_4 + int( floor( var_2 * 100 ) ) * 10;
    var_4 = var_4 + var_3;
    self setclientomnvar( "ui_br_bodycount_reward_data", var_4 );
}

trap_room_turret_init()
{
    self.spawnvector = trap_consoles();
    self.spawnvector++;
    trial_dogtags();
}

trap_consoles()
{
    if ( !isdefined( self.spawnvector ) )
        self.spawnvector = 0;

    return self.spawnvector;
}

trap_array()
{
    var_0 = train_mover_test();
    var_1 = 0;

    for ( var_2 = 0; var_2 < level.tread_sfx.size; var_2++ )
    {
        var_3 = level.tread_sfx[var_2].spotlight_sweep_to_loc_safe;

        if ( var_0 > var_1 && var_0 < var_3 )
            return ( var_0 - var_1 ) / ( var_3 - var_1 );

        var_1 = var_3;
    }

    return 0.0;
}

init_locations()
{
    if ( isdefined( level._id_11E18.seq3_tanksettings ) )
    {
        var_0 = 0;
        var_1 = "gf";

        foreach ( var_3 in level._id_11E18.seq3_tanksettings )
        {
            var_4 = var_1 + scripts\engine\utility::string( var_0 );
            _id_12AEA( var_4, 1, var_3 );
            var_0++;
        }
    }

    if ( !isdefined( level._id_11BCE.area_structs ) || level._id_11BCE.area_structs.size <= 0 )
        _id_12AEA( "default", 1, ( 0, 0, 0 ) );
}

_id_12AEA( var_0, var_1, var_2 )
{
    if ( !isdefined( level._id_11BCE.area_structs ) )
        level._id_11BCE.area_structs = [];

    var_1 = getdvarint( "scr_mendota_location_weight_" + var_0, var_1 );

    if ( var_1 <= 0 )
        return;

    var_2._id_13902 = var_0;
    var_2.spotlights = var_1;
    var_2._id_140B7 = var_2.origin;
    level._id_11BCE.area_structs[var_0] = var_2;
}

groundz()
{
    _id_12FDC();
    level thread bindingpc();

    if ( getdvarint( "scr_br_mxp_normal_circle", 0 ) == 0 )
    {
        if ( istrue( level._id_11BCE._id_1409D ) )
            level.grouptorewards = ( 0, 0, 0 );

        level.br_level.br_circledelaytimes = level._id_11BCE.groundentity;
        level.br_level.br_circleclosetimes = level._id_11BCE.ground_spawners;

        if ( scripts\cp_mp\utility\game_utility::turretdisabled() )
        {
            level.br_level.br_circleradii = [ 16000, 16000, 12500, 9500, 6500, 2000, 300, 0 ];
            level.br_level.br_circleminimapradii = [ 9000, 9000, 7750, 6500, 4500, 3500, 2500 ];
            level.br_level.default_player_connect_black_screen = [ 0, 0, 0, 0, 0, 0, 0 ];
            level.br_level.default_suicidebomber_combat = [ 0, 0, 0, 0, 0, 0, 0 ];
        }
        else
        {
            level.br_level.br_circleradii = [ 72500, 72500, 50000, 32500, 20000, 11500, 7000, 2000, 0 ];
            level.br_level.br_circleminimapradii = [ 10500, 10500, 10500, 9000, 8000, 6500, 5500, 5500 ];
            level.br_level.default_player_connect_black_screen = [ 0, 0, 0, 0, 0, 0, 0, 0 ];
            level.br_level.default_suicidebomber_combat = [ 0, 0, 0, 0, 0, 0, 0, 0 ];
        }
    }
}

_id_12FDC()
{
    level._id_11BCE._id_12E2C = _id_12D7F();
    var_0 = level._id_11BCE._id_12E2C._id_140B7;
    level.grouptorewards = move_point_by_set_distance( var_0, get_closest_k_fresno_point( var_0 ), level._id_11BCE.finalcircledistfromfresno );
}

_id_12D7F()
{
    if ( isdefined( level._id_11BCE._id_13903 ) && level._id_11BCE._id_13903 != "random" )
    {
        foreach ( var_2, var_1 in level._id_11BCE.area_structs )
        {
            if ( level._id_11BCE._id_13903 == var_2 )
                return var_1;
        }
    }

    if ( level._id_11BCE.area_structs.size == 1 )
    {
        foreach ( var_4 in level._id_11BCE.area_structs )
            return var_4;
    }

    var_6 = 0;

    foreach ( var_1 in level._id_11BCE.area_structs )
        var_6 = var_6 + var_1.spotlights;

    var_9 = randomintrange( 0, var_6 );

    foreach ( var_1 in level._id_11BCE.area_structs )
    {
        if ( var_9 < var_1.spotlights )
            return var_1;

        var_9 = var_9 - var_1.spotlights;
    }

    level._id_11BCE.area_structs = scripts\engine\utility::array_randomize( level._id_11BCE.area_structs );
    return level._id_11BCE.area_structs[0];
}

bindingpc()
{
    level endon( "game_ended" );
    level waittill( "calc_circle_centers" );
    var_0 = ( 0, 0, 0 );

    foreach ( var_2 in level._id_11E18.wait_for_player_eliminated )
        var_0 = var_0 + var_2;

    var_0 = var_0 / level._id_11E18.wait_for_player_eliminated.size;
    var_4 = level._id_11BCE.firstcirclemaxdistfromcenter;
    level.br_level.default_class_chosen[1] = check_dist_from_point_move_if_needed( level.br_level.default_class_chosen[1], var_0, var_4 );
    level.br_level.default_class_chosen[0] = level.br_level.default_class_chosen[1];
    level.br_level.default_class_chosen[2] = check_dist_from_point_move_if_needed( level.br_level.default_class_chosen[2], var_0, var_4 );
    check_fresno_points_move_if_needed( 3, 1, 1 );
    check_fresno_points_move_if_needed( 4, 1, 0 );
    check_fresno_points_move_if_needed( 5, 1, 0 );
    level.br_level.default_class_chosen[6] = level.br_level.default_class_chosen[8];
    level.br_level.default_class_chosen[6] = move_point_by_set_distance( level.br_level.default_class_chosen[6], level._id_11BCE._id_12E2C._id_140B7, 500 );
    level.br_level.default_class_chosen[7] = level.br_level.default_class_chosen[8];

    for ( var_5 = 9; var_5 < level.br_level.default_class_chosen.size; var_5++ )
    {
        if ( !scripts\mp\gametypes\br_circle.gsc::vandalize_minigun_speed( level.br_level.default_class_chosen[var_5], 1 ) )
        {
            var_6 = distance2d( level.br_level.default_class_chosen[var_5], level.grouptorewards );
            level.br_level.default_class_chosen[var_5] = move_point_by_set_distance( level.br_level.default_class_chosen[var_5], level.grouptorewards, var_6 / 2 );
        }
    }
}

check_fresno_points_move_if_needed( var_0, var_1, var_2 )
{
    var_3 = level.br_level.default_class_chosen[var_0];
    var_4 = level.br_level.br_circleradii[var_0];
    var_5 = check_fresno_points_in_circle( var_0 );
    var_6 = var_5["greenbay"];
    var_7 = var_5["kenosha"];

    if ( var_1 && var_2 )
    {
        if ( var_6 && var_7 )
            return;
    }

    if ( var_1 && !var_6 )
    {
        var_8 = distance2d( var_3, level._id_11BCE._id_12E2C._id_140B7 ) - var_4;
        level.br_level.default_class_chosen[var_0] = move_point_by_set_distance( var_3, level._id_11BCE._id_12E2C._id_140B7, var_8 + 5000 );
    }

    if ( var_2 && !var_7 )
    {
        var_8 = distance2d( var_3, level._id_11BCE._id_12E2C._id_140B7 ) - var_4;
        level.br_level.default_class_chosen[var_0] = move_point_by_set_distance( var_3, level._id_11BCE._id_12E2C._id_140B7, var_8 + 5000 );
    }
}

check_fresno_points_in_circle( var_0 )
{
    var_1 = [];
    var_2 = 0;
    var_3 = 0;
    var_4 = level.br_level.default_class_chosen[var_0];
    var_5 = level.br_level.br_circleradii[var_0];

    foreach ( var_7 in level._id_11E18.seq3_tanksettings )
    {
        if ( scripts\engine\utility::updatescrapassistdata( var_7.origin, var_4, var_5 ) )
            var_2++;
    }

    foreach ( var_10 in level._id_11E18.wait_for_player_eliminated )
    {
        if ( scripts\engine\utility::updatescrapassistdata( var_10, var_4, var_5 ) )
            var_3++;
    }

    var_1["greenbay"] = var_2;
    var_1["kenosha"] = var_3;
    return var_1;
}

check_dist_from_point_move_if_needed( var_0, var_1, var_2 )
{
    var_3 = distance2d( var_0, var_1 );

    if ( var_3 > var_2 )
    {
        var_4 = var_3 - var_2;
        return move_point_by_set_distance( var_0, var_1, var_4 );
    }

    return var_0;
}

_id_12181()
{
    var_0 = getdvarvector( "br_final_circle_override", level.grouptorewards );
    return var_0;
}

init_relic_aggressive_melee()
{
    var_0 = ( level.br_level.default_class_chosen[1][0], level.br_level.default_class_chosen[1][1], 0 );
    var_1 = level.br_level.br_circleradii[1];
    var_2 = scripts\mp\gametypes\br_c130.gsc::createtestc130path( var_0, var_1 );
    return var_2;
}

being_hacked()
{
    thread vehomn_getleveldata();
}

vehomn_getleveldata()
{
    level endon( "game_ended" );
    self endon( "death" );
    var_0 = distance( self._id_12205.startpt, self._id_12205.neurotoxin_damage_monitor );
    var_1 = var_0 / scripts\mp\gametypes\br_c130.gsc::getc130speed() - 5;
    wait( var_1 );

    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_3 ) && isdefined( var_3.br_infil_type ) && var_3.br_infil_type == "c130" && !isdefined( var_3.jumptype ) )
        {
            var_3.jumptype = "outOfBounds";
            var_3 notify( "halo_kick_c130" );
        }
    }
}

superterrainlightbakelodoverride()
{
    var_0 = scripts\cp_mp\killstreaks\airdrop::getleveldata( "intel_crate" );
    var_0.capturestring = &"MP/GENERIC_LOOT_CRATE_CAPTURE";
    var_0.dummymodel = "military_carepackage_02_br_s3";
    var_0.friendlymodel = undefined;
    var_0.enemymodel = undefined;
    var_0.mountmantlemodel = undefined;
    var_0.supportsownercapture = 0;
    var_0.headicon = undefined;
    var_0.minimapicon = undefined;
    var_0.usepriority = -1;
    var_0.usefov = 180;
    var_0.timeout = undefined;
    var_0.friendlyuseonly = 0;
    var_0.ownerusetime = 0.5;
    var_0.otherusetime = 0.5;
    var_0.activatecallback = ::trial_enemy_dont_drop_weapon;
    var_0.capturecallback = ::trial_enemy_quota;
    var_0.destroyoncapture = 1;
}

train_handle_collide_crate_br( var_0 )
{
    level notify( "intel_crate_event_check" );
    level endon( "intel_crate_event_check" );

    if ( scripts\mp\gametypes\br_publicevent_fresno.gsc::isfresnoactive() )
    {
        var_1 = scripts\mp\gametypes\br_publicevent_fresno.gsc::getfresnotimeremaining();
        wait( var_1 );
    }

    level thread _id_13571();
}

_id_13571( var_0 )
{
    if ( !level._id_11BCE.train_lootcrates_save_offsets )
        return;

    if ( !istrue( var_0 ) )
        wait( randomintrange( level._id_11BCE._id_11BEB, level._id_11BCE._id_11B49 ) );

    var_1 = [];
    [level._id_11E18.score_event_headshot, var_3] = scripts\mp\gametypes\br_alt_mode_mxp.gsc::sappliedstages();

    if ( isdefined( var_3 ) )
    {
        var_4 = spawnstruct();
        var_4.origin = var_3;
        var_4.index = level._id_11E18.score_event_headshot;
        var_4.type = "g";
        var_1[var_1.size] = var_4;
    }

    [level._id_11E18.wait_and_destroy, var_3] = scripts\mp\gametypes\br_alt_mode_mxp.gsc::vehicletrail();

    if ( isdefined( var_3 ) )
    {
        var_4 = spawnstruct();
        var_4.origin = var_3;
        var_4.index = level._id_11E18.wait_and_destroy;
        var_4.type = "k";
        var_1[var_1.size] = var_4;
    }

    if ( var_1.size > 0 )
    {
        foreach ( var_7 in level.players )
            var_7 scripts\mp\hud_message::showsplash( "br_gametype_mendota_crate_event" );
    }

    for ( var_9 = 0; var_9 < var_1.size; var_9++ )
    {
        var_10 = randomint( 360 );

        for ( var_11 = 0; var_11 < level._id_11BCE._id_11F1E; var_11++ )
        {
            var_12 = var_10 + 90;
            var_13 = 0;
            var_14 = undefined;

            for ( var_15 = 0; var_15 < 360; var_15 = var_15 + 10 )
            {
                var_16 = ( 0, var_12 + var_15, 0 );
                var_17 = anglestoforward( var_16 );
                var_4 = var_1[var_9];
                var_14 = var_4.origin + var_17 * level._id_11BCE.train_get_num_of_anim_ents[var_4.type];

                if ( !scripts\mp\gametypes\br_circle.gsc::vandalize_minigun_speed( var_14 ) || updatesquadleaderpassstateforteam( var_14 ) )
                    continue;

                if ( !isdefined( level.br_circle.dangercircleent ) || scripts\mp\gametypes\br_circle.gsc::updateprestreamrespawn( var_14 ) )
                {
                    var_13 = 1;
                    break;
                }
                else
                {

                }
            }

            if ( !var_13 )
                break;

            var_10 = var_12;
            var_18 = scripts\mp\gametypes\br_public.gsc::modifyplayer_damage( var_14 );
            var_18 = var_18 + ( 0, 0, 2000 );
            var_19 = scripts\cp_mp\killstreaks\airdrop::dropcrate( undefined, undefined, "intel_crate", var_18, ( 0, randomint( 360 ), 0 ) );
            var_19.trial_flares = var_1[var_9];
            var_20 = randomfloatrange( level._id_11BCE.trial_fetch_mission_table, level._id_11BCE.trial_explosive_clear ) * 1000;
            var_19.trial_flares.expiretime = gettime() + var_20;
            level.train_hurt_damage_watcher[level.train_hurt_damage_watcher.size] = var_19;
            var_19 thread train_handle_collide_mines();
            var_19 thread train_horn_sfx();
        }
    }
}

updatesquadleaderpassstateforteam( var_0 )
{
    var_1 = getentarray( "trigger_hurt", "classname" );

    foreach ( var_3 in var_1 )
    {
        if ( ispointinvolume( var_0, var_3 ) )
            return 1;
    }

    if ( isdefined( level.outofboundstriggers ) )
    {
        foreach ( var_3 in level.outofboundstriggers )
        {
            if ( ispointinvolume( var_0, var_3 ) )
                return 1;
        }
    }

    return 0;
}

trial_enemy_dont_drop_weapon( var_0 )
{
    if ( istrue( var_0 ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "registerCrateForCleanup" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "registerCrateForCleanup" ) ]]( self );
    }
}

trial_enemy_quota( var_0 )
{
    thread trial_flare_destruct_missile( self );
    self notify( "captured" );
    var_1 = train_elements_enable( level._id_11BCE.infil_light_dvars );
    var_2 = trial_ai_spawn_far( self.origin + ( 0, 0, 16 ), undefined, var_1 );

    if ( isdefined( self.objectiveiconid ) )
        objective_delete( self.objectiveiconid );

    playfx( level.conf_fx["vanish"], self.molotov_delete_oldest_trigger.origin );
    self.molotov_delete_oldest_trigger delete();
}

trial_flare_destruct_missile( var_0 )
{
    var_1 = var_0.trial_flares;
    level.train_hurt_damage_watcher = scripts\engine\utility::array_remove( level.train_hurt_damage_watcher, var_0 );
    var_2 = 0;

    foreach ( var_4 in level.train_hurt_damage_watcher )
    {
        if ( isdefined( var_4 ) && var_4.trial_flares.type == var_1.type && var_4.trial_flares.index == var_1.index )
        {
            var_2 = 1;
            break;
        }
    }

    if ( !var_2 )
    {
        if ( var_1.type == "k" )
            level._id_11E18.wait_and_destroy = undefined;
        else
            level._id_11E18.score_event_headshot = undefined;
    }
}

train_handle_collide_mines()
{
    var_0 = scripts\mp\gametypes\br_public.gsc::modifyplayer_damage( self.origin, 50, -3000 );
    self.molotov_delete_oldest_trigger = spawn( "script_model", var_0 + ( 0, 0, 3 ) );
    self.molotov_delete_oldest_trigger setmodel( "scr_smoke_grenade" );
    wait 1.0;
    self.molotov_delete_oldest_trigger playloopsound( "mp_flare_burn_lp" );
    self.molotov_delete_oldest_trigger setscriptablepartstate( "smoke", "on" );
}

train_horn_sfx()
{
    self setscriptablepartstate( "objective", "intel" );
}

train_get_anim_ents_index()
{
    if ( isdefined( self ) && !istrue( self.isdestroyed ) )
        thread train_get_anim_to_play();
}

train_get_anim_to_play()
{
    self.molotov_delete_oldest_trigger delete();
    playfx( level.conf_fx["vanish"], self.origin );
    trial_flare_destruct_missile( self );
    scripts\cp_mp\killstreaks\airdrop::lastactivateinstruct();
}

circletimer( var_0 )
{
    if ( istrue( level.disable_super_in_turret._id_12CA4 ) )
    {
        var_1 = scripts\mp\gametypes\br_gametype_rebirth.gsc::rocket_attack_min_cooldown();

        if ( var_0 >= var_1 )
            scripts\mp\gametypes\br_gametype_rebirth.gsc::loadoutcustomperkdiscount();
    }

    if ( var_0 >= 2 )
        level._id_11BCE._id_12C9A = level._id_11BCE._id_12C9A + level._id_11BCE._id_12C99;

    if ( var_0 == level._id_11BCE.vo_while_reviving )
    {
        _getrandomlocations::vehicle_spawn_abandonedtimeoutcallback( 1 );
        _getrandomlocations::sequence_progression( 1 );
    }

    if ( var_0 >= level._id_11BCE._id_11BEA && var_0 <= level._id_11BCE._id_11B48 )
        thread train_handle_collide_crate_br( var_0 );

    return 0;
}

lb_dmg_factor_tail_stabilizer()
{
    foreach ( var_1 in level.train_hurt_damage_watcher )
        var_1 train_get_anim_ents_index();
}

initcratedata( var_0 )
{
    scripts\mp\gametypes\fresno\fresno_screamer.gsc::initcratedata( var_0 );
}

active_fob_think()
{

}

move_point_by_set_percent( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1 ) )
        var_1 = ( 0, 0, 0 );

    var_3 = var_1 - var_0;
    return var_0 + var_3 * var_2;
}

move_point_by_set_distance( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1 ) )
        var_1 = ( 0, 0, 0 );

    var_3 = vectornormalize( var_1 - var_0 );
    return var_0 + var_3 * var_2;
}

get_closest_k_fresno_point( var_0 )
{
    var_1 = undefined;
    var_2 = undefined;

    foreach ( var_4 in level._id_11E18.wait_for_player_eliminated )
    {
        var_5 = distance2dsquared( var_0, var_4 );

        if ( !isdefined( var_2 ) || var_5 < var_2 )
        {
            var_2 = var_5;
            var_1 = var_4;
        }
    }

    return var_1;
}

_id_124EE()
{
    if ( !isdefined( self.operatorcustomization ) || !isdefined( self.operatorcustomization.suit ) )
        return;

    if ( self.operatorcustomization.suit == "actionhero_mp" )
    {
        thread _id_1247E();
        return;
    }

    self._id_12147 = self.operatorcustomization.suit;
    self.operatorcustomization.suit = "actionhero_mp";
    scripts\mp\utility\player::_setsuit( "actionhero_mp" );
    thread _id_1247E();
}

_id_1247E()
{
    self notify( "custom_suit_start" );
    self endon( "custom_suit_start" );
    self endon( "disconnect" );
    scripts\engine\utility::_id_143B9( level._id_11BCE._id_11FE9, "death" );

    if ( isdefined( self._id_12147 ) && self.operatorcustomization.suit != self._id_12147 )
    {
        self.operatorcustomization.suit = self._id_12147;
        scripts\mp\utility\player::_setsuit( self._id_12147 );
        self._id_12147 = undefined;
    }
}

_id_124EF()
{
    self notify( "player_set_infinate_super_sprint" );
    self endon( "player_set_infinate_super_sprint" );
    self endon( "death_or_disconnect" );
    self refreshsprinttime();
    var_0 = 0;
    thread transient_world_proxy_collision_distance();
    self.movespeedscaler = 1.2;
    scripts\mp\weapons::updatemovespeedscale();
    self lerpfovbypreset( "zombiedefault" );

    if ( !scripts\mp\gametypes\br_public.gsc::shouldlink() )
    {
        scripts\mp\utility\perk::giveperk( "specialty_sprintmelee" );
        scripts\mp\utility\perk::giveperk( "specialty_sprintads" );
        scripts\mp\utility\perk::giveperk( "specialty_marathon" );
    }

    while ( var_0 < level._id_11BCE._id_11FE9 )
    {
        if ( self issupersprinting() )
            self refreshsprinttime();

        wait 0.1;
        var_0 = var_0 + 0.1;
    }

    if ( !scripts\mp\gametypes\br_public.gsc::shouldlink() )
    {
        if ( isdefined( self.perks["specialty_sprintmelee"] ) )
            scripts\mp\utility\perk::removeperk( "specialty_sprintmelee" );

        if ( isdefined( self.perks["specialty_sprintads"] ) )
            scripts\mp\utility\perk::removeperk( "specialty_sprintads" );

        if ( isdefined( self.perks["specialty_marathon"] ) )
            scripts\mp\utility\perk::removeperk( "specialty_marathon" );
    }

    self.movespeedscaler = 1;
    scripts\mp\weapons::updatemovespeedscale();
    self lerpfovbypreset( "default_2seconds" );
}

transient_world_proxy_collision_distance()
{
    self notify( "reset_timer" );
    waitframe();
    self setclientomnvar( "ui_privateevent_timer_type", 4 );
    var_0 = level._id_11BCE._id_11FE9;
    var_1 = gettime() + var_0 * 1000;
    self setclientomnvar( "ui_privateevent_timer", var_1 );
    scripts\engine\utility::_id_143BA( level._id_11BCE._id_11FE9, "reset_timer", "death" );
    self setclientomnvar( "ui_privateevent_timer_type", 0 );
}

_id_12646()
{
    if ( isalive( self ) )
    {
        _id_14012();
        trial_dogtags();
    }
}

_id_12A7C()
{
    scripts\mp\gametypes\br_gametypes.gsc::_id_13F25( "mayConsiderPlayerDead" );
}

_id_14012()
{
    if ( !istrue( level.disable_super_in_turret._id_12CA4 ) && scripts\mp\flags::gameflag( "prematch_done" ) )
    {
        if ( propremovefromcircle() )
        {
            if ( !scripts\mp\gametypes\br_public.gsc::hasrespawntoken() )
                scripts\mp\gametypes\br_pickups.gsc::addrespawntoken( 1 );
        }
        else if ( scripts\mp\gametypes\br_public.gsc::hasrespawntoken() )
            scripts\mp\gametypes\br_pickups.gsc::removerespawntoken();
    }
}

_id_1336E( var_0 )
{
    waittillframeend;
    scripts\mp\utility\lower_message::setlowermessageomnvar( 9, int( gettime() + var_0 * 1000 ) );
    scripts\mp\gametypes\br_gulag.gsc::_id_131A2( 1 );
    thread spawn_drones( var_0 );
}

spawn_drones( var_0 )
{
    self endon( "disconnect" );

    if ( isdefined( var_0 ) )
        wait( var_0 );

    scripts\mp\gametypes\br_gulag.gsc::_id_131A2( 0 );
    scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
}

propremovefromcircle()
{
    if ( !isdefined( self.spawnsystem_init ) )
        self.spawnsystem_init = level._id_11BCE._id_1385A;

    return self.spawnsystem_init;
}

start_mine_caves()
{
    self.spawnsystem_init = propremovefromcircle();
    self.spawnsystem_init++;

    if ( !isdefined( self.spectatetestonprematchfadedone ) )
        self.spectatetestonprematchfadedone = self.spawnsystem_init;
    else if ( self.spawnsystem_init > self.spectatetestonprematchfadedone )
        self.spectatetestonprematchfadedone = self.spawnsystem_init;

    _id_14012();
    trial_dogtags();
}

juggerbear()
{
    self.spawnsystem_init = propremovefromcircle();
    self.spawnsystem_init--;

    if ( !isdefined( self.spawntimestamp ) )
        self.spawntimestamp = 1;
    else
        self.spawntimestamp++;

    if ( self.spawnsystem_init < 0 )
        self.spawnsystem_init = 0;
}

_id_125FC()
{
    var_0 = spawnstruct();
    var_0._id_12889 = [];
    var_0.brtdm_config = [];
    var_0.brtruck_cleanupents = [];
    var_0.brtruck_ontimelimit = [];
    var_0.offhands = [];
    var_0.nvidiaansel_overridecollisionradius = [];
    var_0.should_use_velo_forward = self.should_use_velo_forward;
    var_0.callprecisionairstrikeonlocation = scripts\mp\equipment::getequipmentslotammo( "health" );
    var_1 = [];
    var_2 = self getweaponslistprimaries();

    foreach ( var_4 in var_2 )
    {
        if ( !scripts\mp\utility\weapon::update_health_bar_to_player( var_4 ) && !issubstr( var_4.basename, "iw8_fists_mp" ) && !scripts\mp\utility\weapon::unset_relic_mythic( var_4.basename ) )
            var_1[var_1.size] = var_4;
    }

    foreach ( var_7 in var_1 )
    {
        var_8 = createheadicon( var_7 );

        if ( var_7.basename == "iw8_lm_dblmg_mp" || var_7.basename == "iw8_la_mike32_mp" )
        {
            var_0.brtdm_config[var_8] = self getweaponammoclip( var_7 );
            var_0.brtruck_ontimelimit[var_8] = self getweaponammostock( var_7 );
        }
        else
        {
            var_0.brtdm_config[var_8] = weaponclipsize( var_7 );
            var_0.brtruck_ontimelimit[var_8] = int( max( self getweaponammostock( var_7 ), weaponclipsize( var_7 ) ) );
        }

        if ( scripts\mp\utility\weapon::turnexfiltoside( var_7 ) )
            var_0.brtruck_cleanupents[var_8] = weaponclipsize( var_7 );

        if ( getsubstr( var_8, 0, 4 ) == "alt_" )
            continue;

        var_0._id_12889[var_0._id_12889.size] = var_7;
    }

    var_10 = self getweaponslistoffhands();

    foreach ( var_12 in var_10 )
    {
        if ( var_12.basename == "bandage_br" )
            continue;

        var_13 = self getweaponammoclip( var_12 );

        if ( var_13 <= 0 )
            continue;

        var_0.offhands[var_0.offhands.size] = var_12;
        var_14 = createheadicon( var_12 );
        var_0.brtdm_config[var_14] = var_13;
    }

    foreach ( var_18, var_17 in self.equipment )
        var_0.nvidiaansel_overridecollisionradius[var_17] = var_18;

    var_0.super = undefined;

    if ( isdefined( self.super ) && !self.super.usepercent )
        var_0.super = self.equipment["super"];

    if ( isdefined( self.streakdata.streaks[1] ) )
        var_0.vo_one_remain = self.streakdata.streaks[1].streakname;

    if ( scripts\cp_mp\gasmask::hasgasmask( self ) )
    {
        var_0.gasmaskhealth = self.gasmaskhealth;
        var_0.plunderpads = self.plunderpads;
        var_0.plundersilentcountdownendtime = self.plundersilentcountdownendtime;
    }

    self._id_12EB0 = var_0;
}

_id_125FB()
{
    _unlinkcorpsefromvehicle::_id_125FB();
    thread _id_13FAB();
    thread _id_12CC3();
}

_id_13FAB()
{
    self endon( "death" );
    wait 1;
    trial_dogtags();
    self.spawnsystem_init = propremovefromcircle();

    if ( self.spawnsystem_init == 0 )
        level thread scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "no_respawns", self );
}

_id_12CC3()
{
    var_0 = train_mover_test();

    if ( var_0 >= 80 )
        scripts\mp\perks\perks::bears();
}

droponplayerdeath( var_0 )
{
    _id_125FC();
    var_1 = scripts\mp\gametypes\br_pickups.gsc::test_ai_anim();
    scripts\mp\gametypes\br_pickups.gsc::minplunderextractions( var_1 );
    scripts\mp\gametypes\br_pickups.gsc::missiontime( var_1 );
    scripts\mp\gametypes\br_pickups.gsc::mintokensdropondeath( var_1 );
    scripts\mp\gametypes\br_pickups.gsc::missedinfilplayerhandler( var_1 );
    scripts\mp\gametypes\br_pickups.gsc::hangar_doors_opening_quadrace();
    return 1;
}

playerdropplunderondeath( var_0, var_1 )
{
    if ( scripts\mp\utility\game::updatehistoryhud( self ) )
        return 1;

    if ( istrue( level.gameended ) )
        return 1;

    if ( isdefined( self.plundercount ) && self.plundercount > 0 )
        var_2 = self.plundercount;
    else
        var_2 = 0;

    if ( istrue( self.unicornpoints ) )
    {
        var_3 = 0;
        var_4 = level.endgametutorial_func._id_127B5;
    }
    else
    {
        var_3 = int( var_2 * level._id_11BCE._id_127BE + 0.5 );
        var_4 = int( level._id_11BCE._id_127B5 + var_2 * level._id_11BCE._id_127B6 + 0.5 );
    }

    scripts\mp\gametypes\br_plunder.gsc::playersetplundercount( var_3 );

    if ( var_4 <= 0 )
        return;

    scripts\mp\gametypes\br_plunder.gsc::ml_p3_func( var_4, var_0 );
    return 1;
}

_id_12356( var_0, var_1, var_2, var_3 )
{
    if ( var_0 != "brloot_mendota_intel" )
        return var_2;

    if ( istrue( var_3.playersetattractiontype ) )
        return getdvarint( "scr_br_mxp_intel_quest_count", 10 );
    else if ( istrue( var_3.fromrewardcrate ) )
        return getdvarint( "scr_br_mxp_intel_fresno_count", 10 );
    else
        return getdvarint( "scr_br_mxp_intel_cache_count", 1 );
}

onusecompleted( var_0 )
{
    if ( !isdefined( var_0.tracknonoobplayerlocation ) )
        return 0;

    return _id_11BCF( var_0.tracknonoobplayerlocation, self );
}

_id_13A36( var_0 )
{
    var_0.count = var_0.tracknonoobplayerlocation.count;
    return var_0.tracknonoobplayerlocation.count;
}

get_chopper_minigun_start_node( var_0 )
{
    var_1 = self;

    if ( scripts\mp\gametypes\br_pickups.gsc::isinteltype( var_0.scriptablename ) || var_0 intel_isintel() )
    {
        if ( intel_cancollect( var_1 ) )
            return 1;
        else
            return 2;
    }
}

skippickupfeedback( var_0, var_1, var_2, var_3 )
{
    if ( ( scripts\mp\gametypes\br_pickups.gsc::isinteltype( var_0.scriptablename ) || var_0 intel_isintel() ) && istrue( var_1 ) )
        return 1;
}
