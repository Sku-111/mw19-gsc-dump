// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level._id_12D05 = getdvarint( "scr_br_reveal_event_type", 1 );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "gulag" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "teamSpectate" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "oneLife" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "match_start_VO" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "kiosk" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "movingCircle" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "drogBagLoadout" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "randomizeCircleCenter" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "plunderSites" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "planeSnapToOOB" );
    scripts\mp\gametypes\br_gametypes.gsc::move_molotov_mortar( "prematchBlueprints" );
    scripts\mp\gametypes\br_gametypes.gsc::move_molotov_mortar( "allowLateJoiners" );
    scripts\mp\gametypes\br_gametypes.gsc::move_molotov_mortar( "circleEarlyStart" );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "onPlayerKilled", ::onplayerkilled );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "playerDropPlunderOnDeath", ::playerdropplunderondeath );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "restartCircleElimination", ::_id_12CBD );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "lootUsedIgnore", ::_id_11A48 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "getFinalCircleCenter", ::_id_12CF4 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "mapCenterFinalCircle", ::_id_12CF4 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "markPlayerAsEliminatedOnKilled", ::_id_11B16 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "playerNakedDropLoadout", ::_id_12CEA );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "createC130PathStruct", ::_id_12CEE );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "addToC130Infil", ::_id_12CEC );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "mayConsiderPlayerDead", ::_id_11B80 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "modifyPlayerDamage", ::modifyplayerdamage );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "modifyVehicleDamage", ::_id_11CA1 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "allowMeleeVehicleDamage", ::brking_cleanupents );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "playerGetZombieSpawnLocation", ::_id_12582 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "spawnHandled", scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_1365D );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "regenHealthAdd", scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_1264B );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "regenDelaySpeed", scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_1264A );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "postUpdateGameEvents", scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_12810 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "lastStandAllowed", scripts\mp\gametypes\br_alt_mode_zxp.gsc::watch_flight_collision );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "kioskRevivePlayer", scripts\mp\gametypes\br_alt_mode_zxp.gsc::wait_for_chopper_boss_finish_turning );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "onPlayerDamaged", scripts\mp\gametypes\br_alt_mode_zxp.gsc::onplayerdamaged );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "shouldLastStandDamageScale", scripts\mp\gametypes\br_gametype_zxp.gsc::_id_13308 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "ignoreVehicleExplosiveDamage", scripts\mp\gametypes\br_alt_mode_zxp.gsc::standard_health );
    level._id_133E0 = 0;
    level.scriptedphysicaldofenabled = 1;
    level.disable_super_in_turret._id_12CA1 = getdvarint( "scr_br_reveal_respawnDelay", 0 );
    level.disable_super_in_turret.timelimit = getdvarint( "scr_br_timelimit", 900 );
    level.disable_super_in_turret.player_equip_secondary = relic_third_person();
    level.parachuterestoreweaponscb = ::blankfunc;
    level.disableforfeit = 1;
    level.debug_safehouse_gunshop_start = 1;
    level.skipprematchdropspawn = 0;
    level._id_13B75 = getdvarint( "scr_br_timedSection1Duration", 420 );
    level._id_13B77 = getdvarint( "scr_br_timedSection2Duration", 70 );
    level._id_13B79 = getdvarint( "scr_br_timedSection3Duration", 19 );
    level._id_12CFA = [ "shipwreck", "prison", "hospital", "stadium", "tvstation", "superstore", "dam", "trainstation", "storagetown", "quarry", "promwest", "promeast", "downtown", "farms", "lumber", "port", "park", "hills", "boneyard", "airport", "milbase" ];
    level._id_12D08 = undefined;
    level._id_12CF6 = [];
    level._id_12D02 = undefined;
    level._id_11E96 = 1;
    level._effect["smoke_exfil"] = loadfx( "vfx/iw8_br/gameplay/vfx_br_crate_smoke_signal.vfx" );

    if ( level.script == "mp_br_mechanics" )
        level.grouptorewards = ( 475, -1956, 0 );
    else
        level.grouptorewards = ( -20830, 46010, -654 );

    game["dialog"]["plague_intro"] = "plague_intro";
    game["dialog"]["op2_dov1_infil_3"] = "op2_dov1_infil_3_10";
    game["dialog"]["plague_overrun"] = "plague_overrun";
    game["dialog"]["ebr_alert_phase4_80"] = "ebr_alert_phase4_80";
    game["dialog"]["ebr_alert_missile_20"] = "ebr_alert_missile_20";
    game["dialog"]["dx_bra_cp1_plague_zone_chopper_inbound"] = "dx_bra_cp1_plague_zone_chopper_inbound";
    game["dialog"]["plague_exfil"] = "plague_exfil";
    game["dialog"]["op1_dov1_infil_1_10"] = "op1_dov1_infil_1_10";
    game["dialog"]["plague_no_exfil"] = "plague_no_exfil";
    game["dialog"]["op1_dov1_infil_2"] = "op1_dov1_infil_2_10";
    game["dialog"]["ebr_alert_phase4_70"] = "ebr_alert_phase4_70";
    game["dialog"]["op2_dov1_infil_10"] = "op2_dov1_infil_1_10";
    game["dialog"]["op2_dov1_infil_2_10"] = "op2_dov1_infil_2_10";
    game["dialog"]["ebr_alert_phase4_90"] = "ebr_alert_phase4_90";
    level.playerzombieupdatetagobjectives = [ "apc_russian", "atv", "big_bird", "cargo_truck", "cargo_truck_mg", "cop_car", "hoopty", "hoopty_truck", "jeep", "large_transport", "light_tank", "little_bird", "little_bird_mg", "medium_transport", "pickup_truck", "tac_rover", "technical", "van" ];
    thread toggleusbstickinhand();
}

toggleusbstickinhand()
{
    waittillframeend;
    _id_12D07();
    scripts\mp\flags::gameflaginit( "reveal_timed_section_1", 0 );
    scripts\mp\flags::gameflaginit( "reveal_timed_section_2", 0 );
    level.disable_back_light = 1;
    level._id_12888 = ::emp_drone_proximity_explode;
    level thread _id_12D09();
    level thread playernakeddroploadout();

    if ( getdvarint( "scr_br_reveal_give_xp_to_humans", 0 ) )
        level thread searchradiusmin();

    level thread deploy_balloon_nags();
    level thread _id_12CFC();
}

blankfunc()
{

}

_id_12D09()
{
    level endon( "game_ended" );
    level endon( "forceFinalRunToExfil" );
    scripts\mp\flags::gameflagwait( "prematch_fade_done" );
    setomnvar( "ui_br_zm_marked_area", 255 );
    level waittill( "infils_ready" );
    wait 5;
    setomnvar( "ui_br_circle_state", 0 );
    _id_12CFB();
    thread _id_13B74();
    _id_12D0A( level._id_13B75 );
    thread _id_13B76();
    _id_12D0A( level._id_13B77 );
    thread _id_13B78();
    level notify( "watchFinalRunToExfil" );
    _id_12D0A( level._id_13B79 );
    _id_12CF3( 1 );
    thread _id_12CF0();
}

_id_13B74()
{
    level endon( "endRevealTimeHandler" );
    scripts\mp\flags::gameflagset( "reveal_timed_section_1" );
    thread _id_12CED( 660 );
    thread _id_12D0F( 6, 4, 0, 1 );
    thread toggle_switch_model();

    foreach ( var_1 in level.players )
    {
        var_1 scripts\mp\hud_message::showsplash( "br_dov_survive" );

        if ( scripts\mp\utility\player::isreallyalive( var_1 ) && !var_1 scripts\mp\gametypes\br_public.gsc::_id_125F3() )
            var_1 setclientomnvar( "ui_br_reveal_state", 1 );
    }

    level thread _id_12CF2();

    if ( level._id_13B75 <= 45 )
        var_3 = 5;
    else
        var_3 = 45;

    wait( var_3 - 6 );

    foreach ( var_1 in level.players )
        var_1 _id_12D0D( "op2_dov1_infil_3" );

    scripts\mp\gametypes\br_containmentprotocol.gsc::elevatordoors( 5 );
    wait 6;
    thread _id_12E02();
    scripts\mp\gametypes\br_publicevent_juggernaut.gsc::attackerswaittime();
    wait 10;
    level notify( "dov_1_broadcast" );
    wait 33;
    level notify( "zombie_outbreak_1_start" );
    wait 50;
    level notify( "zombie_outbreak_2_start" );
    wait( level._id_13B75 - var_3 - 93 - 70 );
    level notify( "zombie_outbreak_3_start" );
    wait 60;
    level notify( "zombie_outbreak_4_start" );
    wait 10;
}

_id_13B76()
{
    level endon( "endRevealTimeHandler" );
    level notify( "end_containment_fx" );
    scripts\mp\flags::gameflagset( "reveal_timed_section_2" );
    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "plague_overrun", 0, level.players );

    foreach ( var_1 in level.players )
        var_1 _id_12D0D( "ebr_alert_phase4_80" );

    setomnvar( "scriptable_loot_hide", 1 );
    var_3 = getarraykeys( level.teamdata );

    foreach ( var_5 in var_3 )
    {
        setteamradar( var_5, 0 );
        setteamradarstrength( var_5, 0 );
    }

    foreach ( var_1 in level.players )
    {
        if ( scripts\mp\utility\player::isreallyalive( var_1 ) && !var_1 scripts\mp\gametypes\br_public.gsc::_id_125F3() )
            var_1 setclientomnvar( "ui_br_reveal_state", 2 );
    }

    setmusicstate( "dovp1_exfil_gameplay" );
    _id_12CF1();
    wait 6;

    foreach ( var_1 in level.players )
        var_1 _id_12D0D( "op2_dov1_infil_2_10" );

    scripts\mp\gametypes\br_containmentprotocol.gsc::elevatordoors( 4 );
    wait 6;

    if ( getdvarint( "scr_br_reveal_bombardement_enabled", 1 ) )
    {
        level _hidesafecircleui::changetimertoovertimetimer( level.grouptorewards, undefined, 8, 7000 );
        wait 4;

        foreach ( var_1 in level.players )
            var_1 _id_12D0D( "ebr_alert_missile_20" );

        wait 11;
    }
    else
        wait 15;

    if ( getdvarint( "scr_br_reveal_exfil_helicopter", 1 ) )
    {
        level notify( "reveal_exfil_heli_incoming" );

        foreach ( var_1 in level.players )
            var_1 _id_12D0D( "dx_bra_cp1_plague_zone_chopper_inbound", 1 );
    }

    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "plague_exfil", 0, level.players );
    wait 15;

    foreach ( var_1 in level.players )
        var_1 thread _id_12D0D( "op1_dov1_infil_1_10" );

    scripts\mp\gametypes\br_containmentprotocol.gsc::elevatordoors( 3.5 );
}

_id_13B78()
{
    level endon( "endRevealTimeHandler" );
    level notify( "revealTimedSection3" );
    level notify( "end_containment_fx" );
    level._id_12D08 = scripts\engine\utility::play_loopsound_in_space( "iw8_nuke_alarm_lp", level.grouptorewards + ( 0, 0, 500 ) );
    setmusicstate( "dovp1_nuke_countdown" );

    foreach ( var_1 in level.players )
        var_1 setsoundsubmix( "mp_br_event_dovp1_nuke", 6 );

    _id_13365( level._id_13B79 );
    level._id_11F0F = 1;
    wait 1;

    foreach ( var_1 in level.players )
    {
        if ( !var_1 scripts\mp\gametypes\br_public.gsc::_id_125F3() )
            scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "plague_no_exfil", var_1, 0 );
    }

    setomnvarforallclients( "ui_br_reveal_state", 3 );
    setomnvarforallclients( "ui_hide_minimap", 1 );
    wait 1;
    level notify( "revealTimedSection3_after_initial_VO" );

    foreach ( var_1 in level.players )
        var_1 _id_12D0D( "op1_dov1_infil_2" );

    scripts\mp\gametypes\br_containmentprotocol.gsc::elevatordoors( 14 );
    wait 6;

    foreach ( var_1 in level.players )
        var_1 _id_12D0D( "ebr_alert_phase4_70" );

    wait 1;
    infil_chopper_dialogue();

    foreach ( var_1 in level.players )
        var_1 _id_12D0D( "op2_dov1_infil_10" );

    wait 4;

    foreach ( var_1 in level.players )
    {
        var_1 _id_12D0D( "ebr_alert_phase4_90" );
        var_1 setsoundsubmix( "mp_br_event_dovp1_outro", 5 );
    }

    wait 3;

    foreach ( var_1 in level.players )
        var_1.plotarmor = 1;

    scripts\mp\gametypes\br_containmentprotocol.gsc::elevator_trigger_wait_for_spawn();
}

searchradiusmin()
{
    level endon( "watchFinalRunToExfil" );
    level endon( "forceFinalRunToExfil" );
    level waittill( "infils_ready" );

    for (;;)
    {
        wait 20;

        foreach ( var_1 in level.players )
        {
            if ( !var_1 scripts\mp\gametypes\br_public.gsc::_id_125F3() )
            {
                var_1 thread scripts\mp\rank::giverankxp( "br_reveal_surviving", 50 );
                var_1 thread scripts\mp\rank::scoreeventpopup( "br_reveal_surviving" );
            }
        }
    }
}

playernakeddroploadout()
{
    level endon( "watchFinalRunToExfil" );

    if ( getdvarint( "scr_br_reveal_force_final_run_disabled", 0 ) )
        return;

    level waittill( "infils_ready" );
    var_0 = 1;

    while ( var_0 )
    {
        wait 3;
        var_0 = 0;
        var_1 = getarraykeys( level.teamdata );

        foreach ( var_3 in var_1 )
        {
            if ( scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_12BBA( var_3 ) > 0 )
            {
                var_0 = 1;
                break;
            }
        }

        if ( !var_0 )
        {
            level notify( "forceFinalRunToExfil" );
            thread _id_13B78();
            _id_12D0A( level._id_13B79 );
            _id_12CF3( 1 );
            _id_12CF0();
        }
    }
}

_id_12CF4()
{
    var_0 = getdvarvector( "br_final_circle_override", level.grouptorewards );
    return var_0;
}

_id_12CF5()
{
    level endon( "game_ended" );

    foreach ( var_1 in level.players )
        scripts\mp\gametypes\br.gsc::scriptednode( var_1 );
}

_id_12D0A( var_0 )
{
    level endon( "endRevealTimeHandler" );
    wait( var_0 );
}

_id_12CF7()
{
    if ( !isdefined( level._id_12D05 ) )
        return;

    level endon( "game_ended" );
    self endon( "disconnect" );
    scripts\mp\gametypes\br_armor.gsc::searchcirclesize();
    level waittill( "infils_ready" );
    scripts\mp\gametypes\br_armor.gsc::searchcirclesize();
}

_id_12CEB()
{
    foreach ( var_1 in level.players )
    {
        var_1 scripts\cp\vehicles\vehicle_compass_cp::_id_120A4( "event_dov_completed" );
        waitframe();
        scripts\mp\gametypes\br.gsc::_id_13FCC( var_1 );
        waitframe();
    }
}

_id_12D0F( var_0, var_1, var_2, var_3 )
{
    level endon( "endRevealTimeHandler" );
    level endon( "forceFinalRunToExfil" );

    for ( var_4 = 1; var_4 <= 4; var_4++ )
    {
        switch ( var_4 )
        {
            case 1:
                level waittill( "zombie_outbreak_1_start" );
                break;
            case 2:
                level waittill( "zombie_outbreak_2_start" );
                break;
            case 3:
                level waittill( "zombie_outbreak_3_start" );
                break;
            case 4:
                level waittill( "zombie_outbreak_4_start" );
                break;
        }

        _id_12D00( "mp_run_" + var_4, var_3, 4 );
        _id_12CFE( "mp_run_" + var_4, var_3, "zombie_outbreak" );
        _id_12D0E( var_0 );
    }
}

_id_12CF3( var_0 )
{
    var_1 = "mp_final_run";
    var_2 = 45;

    if ( isdefined( level._id_12D08 ) )
        level._id_12D08 delete();

    thread scripts\mp\gametypes\br_vehicles.gsc::emptyallvehicles();

    if ( isdefined( level._id_12CF6 ) )
    {
        foreach ( var_4 in level._id_12CF6 )
            var_4 destroy();

        level._id_12CF6 = [];
    }

    foreach ( var_7 in level.players )
    {
        if ( var_7 scripts\mp\gametypes\br_public.gsc::_id_125F3() )
            var_7 notify( "zombie_unset" );

        var_7 scripts\mp\utility\player::_freezecontrols( 1 );
        var_7 scripts\mp\gametypes\br_gulag.gsc::gulagfadetoblack();
    }

    wait 2;
    thread scripts\mp\gametypes\br_vehicles.gsc::deleteextantvehicles();
    level thread _id_12CEB();
    _id_12D00( var_1, var_0, 9 );
    level notify( "end_containment_fx" );
    _id_12CFE( var_1, var_0, "final_nuke" );
    wait( var_2 - 2 );
}

_id_12D00( var_0, var_1, var_2 )
{
    foreach ( var_4 in level.players )
    {
        if ( !isalive( var_4 ) )
            continue;

        var_4 skydive_cutparachuteon( var_0, 0, var_1 );
        var_4 setclientomnvar( "ui_br_bink_overlay_state", var_2 );
    }
}

_id_12CFE( var_0, var_1, var_2 )
{
    if ( !isdefined( var_2 ) )
        var_2 = "";

    switch ( var_2 )
    {
        case "zombie_outbreak":
            break;
        case "final_nuke":
            setmusicstate( "" );

            foreach ( var_4 in level.players )
            {
                if ( !isalive( var_4 ) )
                    continue;

                var_4 clearsoundsubmix( "fade_to_black_all_except_music", 0.5 );
                var_4 setsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 0.5 );
            }

            break;
    }

    foreach ( var_4 in level.players )
    {
        if ( !isalive( var_4 ) )
            continue;

        var_4 preloadcinematicforplayer( var_0, 1, var_1 );
    }
}

_id_12D0E( var_0 )
{
    wait( var_0 );

    foreach ( var_2 in level.players )
    {
        var_2 setclientomnvar( "ui_br_bink_overlay_state", 0 );
        var_2 clearsoundsubmix( "mp_br_event_dovp1_nuke", 0.5 );
        var_2 clearsoundsubmix( "mp_br_event_dovp1_outro", 0.5 );
    }
}

_id_12CEA()
{
    var_0 = self;

    if ( var_0 scripts\mp\gametypes\br_public.gsc::_id_125F3() )
        return;

    level.deletescriptableinstanceaftertime = _id_12CE9();
    var_0 scripts\mp\class::loadout_emptycacheofloadout( "gamemode" );
    var_0 scripts\mp\gametypes\br.gsc::searchcircleorigin( 0, 1, 0 );
    scripts\mp\gametypes\br_pickups.gsc::br_forcegivecustompickupitem( var_0, "brloot_equip_gasmask", 1 );
    var_0 scripts\mp\gametypes\br_weapons.gsc::debug_spawncover_badnodetest();
    var_0 scripts\mp\gametypes\br_pickups.gsc::_id_12C81();
    var_0 scripts\mp\gametypes\br_pickups.gsc::forcegivesuper( "super_ammo_drop", 0 );
    var_0 scripts\mp\gametypes\br.gsc::scriptednode( var_0 );
    var_0 scripts\mp\gametypes\br_armor.gsc::searchcirclesize();
}

_id_13268()
{
    level endon( "game_ended" );
    var_0 = 20;
    scripts\mp\flags::gameflagwait( "prematch_done" );

    foreach ( var_2 in level.players )
    {
        var_2 setclientomnvar( "ui_br_bink_overlay_state", 4 );
        var_2 preloadcinematicforplayer( "mp_connor", 1, 1 );
    }
}

_id_12CFC()
{
    wait 1;
    level.vehicle_isneutraltoplayer = [];
    var_0 = spawnstruct();
    var_0.id = 1;
    var_0.occupied = 0;
    var_0.origin = ( -4903, 25796, -394 );
    level.vehicle_isneutraltoplayer[level.vehicle_isneutraltoplayer.size] = var_0;
    var_1 = spawnstruct();
    var_1.id = 1;
    var_1.occupied = 0;
    var_1.origin = ( -28977, 23076, -390 );
    level.vehicle_isneutraltoplayer[level.vehicle_isneutraltoplayer.size] = var_1;
    var_2 = spawnstruct();
    var_2.id = 1;
    var_2.occupied = 0;
    var_2.origin = ( 2693, 41717, 1607 );
    level.vehicle_isneutraltoplayer[level.vehicle_isneutraltoplayer.size] = var_2;
}

_id_12CED( var_0 )
{
    level endon( "game_ended" );
    setomnvar( "ui_br_circle_state", 6 );
    setomnvar( "ui_hardpoint_timer", gettime() + int( var_0 * 1000 ) );
}

_id_12CEF( var_0 )
{
    level endon( "game_ended" );
    wait( var_0 );
    level._id_12888 = scripts\mp\gametypes\br.gsc::emp_drone_proximity_explode;
    level._id_11C76 = scripts\mp\gametypes\br.gsc::dyn_door;
    level.modeonspawnplayer = scripts\mp\gametypes\br.gsc::onspawnplayer;
    level.disable_super_in_turret.funcs["spawnHandled"] = undefined;
    level.disable_super_in_turret.funcs["playerKilledSpawn"] = undefined;
}

_id_12CF0()
{
    level thread scripts\mp\gamelogic::forceend();
    level waittill( "game_cleanup" );
    scripts\mp\gametypes\br_alt_mode_zxp.gsc::spawnangle();
}

_id_12CFB()
{
    thread _id_12CF5();
    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "plague_intro", 0, level.players );
    scripts\mp\gametypes\br_circle.gsc::all_players_are_in_trap_room_entrance();
    setomnvar( "ui_br_circle0_start_entity", undefined );
}

_id_11A48( var_0 )
{
    return 0;
}

_id_12CE9()
{
    var_0 = [];
    var_0["loadoutArchetype"] = "archetype_assault";
    var_0["loadoutPrimary"] = "iw8_sh_aalpha12";
    var_0["loadoutPrimaryAttachment"] = "none";
    var_0["loadoutPrimaryAttachment2"] = "none";
    var_0["loadoutPrimaryCamo"] = "none";
    var_0["loadoutPrimaryReticle"] = "none";
    var_0["loadoutSecondary"] = "iw8_fists";
    var_0["loadoutSecondaryAttachment"] = "none";
    var_0["loadoutSecondaryAttachment2"] = "none";
    var_0["loadoutSecondaryCamo"] = "none";
    var_0["loadoutSecondaryReticle"] = "none";
    var_0["loadoutMeleeSlot"] = "none";
    var_0["loadoutEquipmentPrimary"] = "none";
    var_0["loadoutEquipmentSecondary"] = "none";
    var_0["loadoutStreakType"] = "assault";
    var_0["loadoutKillstreak1"] = "none";
    var_0["loadoutKillstreak2"] = "none";
    var_0["loadoutKillstreak3"] = "none";
    var_0["loadoutSuper"] = "none";
    var_0["loadoutPerks"] = [ "specialty_null" ];
    var_0["loadoutGesture"] = "playerData";
    var_0["loadoutExecution"] = "none";
    return var_0;
}

relic_third_person()
{
    var_0 = [];
    var_0["loadoutArchetype"] = "archetype_assault";
    var_0["loadoutPrimary"] = "iw8_fists";
    var_0["loadoutPrimaryAttachment"] = "none";
    var_0["loadoutPrimaryAttachment2"] = "none";
    var_0["loadoutPrimaryCamo"] = "none";
    var_0["loadoutPrimaryReticle"] = "none";
    var_0["loadoutSecondary"] = "none";
    var_0["loadoutSecondaryAttachment"] = "none";
    var_0["loadoutSecondaryAttachment2"] = "none";
    var_0["loadoutSecondaryCamo"] = "none";
    var_0["loadoutSecondaryReticle"] = "none";
    var_0["loadoutMeleeSlot"] = "iw8_fists_mp";
    var_0["loadoutEquipmentPrimary"] = "none";
    var_0["loadoutEquipmentSecondary"] = "none";
    var_0["loadoutStreakType"] = "assault";
    var_0["loadoutKillstreak1"] = "none";
    var_0["loadoutKillstreak2"] = "none";
    var_0["loadoutKillstreak3"] = "none";
    var_0["loadoutSuper"] = "none";
    var_0["loadoutPerks"] = [ "specialty_null" ];
    var_0["loadoutGesture"] = "playerData";
    var_0["loadoutExecution"] = "none";
    return var_0;
}

scripted_fov()
{
    var_0 = self;
    var_0 scripts\mp\class::loadout_emptycacheofloadout( "gamemode" );
    var_0 scripts\mp\gametypes\br_pickups.gsc::_id_12C81();
    var_0.pers["gamemodeLoadout"] = level.disable_super_in_turret.player_equip_secondary;
    var_0.class = "gamemode";
}

_id_13365( var_0 )
{
    var_1 = gettime();
    var_2 = var_0 * 1000 + var_1;
    _calloutmarkerping_handleluinotify_added::_id_13191( "ui_nuke_data", 9, 2, 3 );
    _calloutmarkerping_handleluinotify_added::_id_13191( "ui_nuke_data", 0, 9, var_0 );
    _calloutmarkerping_handleluinotify_added::_id_13191( "ui_nuke_data", 11, 1, 1 );
    setomnvar( "ui_nuke_end_milliseconds", var_2 );
}

spawn_cypher_monitor_model()
{
    _calloutmarkerping_handleluinotify_added::_id_13191( "ui_nuke_data", 11, 1, 0 );
}

_id_12CF1()
{
    var_0 = spawn( "script_model", level.grouptorewards - ( 0, 0, 200 ) );
    var_0 setmodel( "risk_dom_plate" );
    var_0 setscriptablepartstate( "risk_dom_beacon", "on", 0 );

    foreach ( var_2 in level.players )
    {
        if ( var_2 scripts\mp\gametypes\br_public.gsc::_id_125F3() )
        {
            var_2 scripts\mp\hud_message::showsplash( "br_dov_stop_exfil" );
            continue;
        }

        var_2 scripts\mp\hud_message::showsplash( "br_dov_exfil" );
    }

    _id_12D02();
    var_4 = spawnfx( level._effect["smoke_exfil"], level.grouptorewards );
    triggerfx( var_4 );
}

_id_12D02()
{
    var_0 = scripts\mp\objidpoolmanager::requestobjectiveid( 1 );

    if ( var_0 != -1 )
    {
        scripts\mp\objidpoolmanager::objective_add_objective( var_0, "current", level.grouptorewards + ( 0, 0, 600 ), "ui_mp_br_mapmenu_icon_dov_1_objective" );
        scripts\mp\objidpoolmanager::update_objective_setbackground( var_0, 1 );
        objective_removeallfrommask( var_0 );

        foreach ( var_2 in level.players )
        {
            if ( var_2 scripts\mp\gametypes\br_public.gsc::_id_125F3() )
                continue;

            objective_addclienttomask( var_0, var_2 );
        }

        objective_showtoplayersinmask( var_0 );
        level._id_12D02 = var_0;
    }
    else
    {

    }
}

_id_12D03()
{
    level endon( "game_ended" );

    if ( !isdefined( level._id_12D02 ) )
        return;

    scripts\mp\objidpoolmanager::objective_playermask_hidefrom( level._id_12D02, self );
}

_id_12D0D( var_0, var_1 )
{
    var_2 = self;

    if ( istrue( var_1 ) )
        var_3 = var_0;
    else
    {
        var_3 = "dx_brm_" + game["dialog"][var_0];
        var_3 = tolower( var_3 );
    }

    if ( soundexists( var_3 ) )
        var_4 = lookupsoundlength( var_3, 1 ) / 1000;
    else
        var_4 = 3;

    var_4 = var_4 + 0.5;
    var_2 queuedialogforplayer( var_3, var_0, var_4 );
}

onspawnplayer()
{
    self notify( "br_spawned" );

    if ( isagent( self ) )
        return;

    var_0 = istrue( self.gulag );
    scripts\mp\gametypes\br_pickups.gsc::initplayer( var_0 );
    scripts\mp\gametypes\br_functional_poi.gsc::initplayer();
    scripts\mp\gametypes\br_armor.gsc::teamfriendlyto();
    self.oldprimarygun = undefined;
    self.newprimarygun = undefined;
    self.healthregendisabled = 0;
    self.br_lastscenecheck = gettime();
    self.needtoplayintro = undefined;
    self.gunnlessweapon = undefined;
    level.superdelay = 0;
    level.superpointsmod = 1;
    self.br_perks = [ 0, 0, 0, 0, 0 ];
    self.br_perkpoints = 0;

    if ( level._id_121C8 )
        self getclientomnvar();
    else
        self weaponswitchbuttonpressed();

    if ( level._id_121C9 )
        self skydive_cutautodeployon();
    else
        self skydive_cutautodeployoff();

    thread _id_12CF7();
}

_id_11B80( var_0 )
{
    var_1 = 1;

    if ( !scripts\mp\gametypes\br_public.gsc::_id_125F3() )
        _id_12D03();

    return scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_11B80( var_0, var_1 );
}

_id_11B16()
{
    return scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_11B16();
}

emp_drone_proximity_explode( var_0 )
{
    var_1 = 0.5;

    if ( !isdefined( self._id_1286F ) || self calloutmarkerping_getent() )
    {
        self setclientomnvar( "ui_br_extended_load_screen", 0 );
        return;
    }

    thread scripts\mp\gametypes\br.gsc::emp_drone_should_take_damage();

    if ( !isdefined( self.thrust_fx_model ) && !( isdefined( level._id_12D05 ) && level._id_12D05 == 2 ) )
    {
        var_2 = level.disable_super_in_turret._id_12CA1 > 0;
        var_3 = undefined;

        if ( var_2 )
        {
            var_3 = level.disable_super_in_turret._id_12CA1 * 1000;
            scripts\mp\gametypes\br.gsc::spawnintermission( self.origin + ( 0, 0, 100 ), self.angles );
            scripts\mp\spectating::setdisabled();
        }

        var_4 = scripts\mp\gametypes\br_public.gsc::_id_126B8( self._id_1286F.origin, self._id_1286F.height );
        var_5 = getdvarint( "scr_br_drop_prespawn_timeout_ms", 9000 );
        scripts\mp\gametypes\br_public.gsc::_id_126B9( var_4, var_5, 1, 0, var_3 );

        if ( var_2 )
        {
            var_6 = 4.0;
            var_7 = 1.0;
            var_8 = 0.25;
            var_9 = var_7 - var_8;
            self setclientomnvar( "ui_show_spectateHud", self getentitynumber() );
            scripts\mp\utility\lower_message::setlowermessageomnvar( 9, int( gettime() + var_3 ) );
            var_10 = max( level.disable_super_in_turret._id_12CA1 - var_6, 0 );
            wait( var_10 );
            thread scripts\mp\gametypes\br_gulag.gsc::fadeoutin( var_7 );
            wait( var_9 );
            scripts\mp\gametypes\br.gsc::spawnintermission( var_4, self._id_1286F.angles );
            scripts\mp\gametypes\br.gsc::ending_fade_in();
            self setclientomnvar( "ui_br_transition_type", 2 );
            wait( var_8 );
            var_11 = max( level.disable_super_in_turret._id_12CA1 - var_10 - var_7, 0 );
            wait( var_11 );
            scripts\mp\gametypes\br_public.gsc::_id_1252B();
            self setclientomnvar( "ui_show_spectateHud", -1 );
        }
        else
        {
            if ( !istrue( level._id_14623 ) )
            {
                scripts\mp\gametypes\br.gsc::ending_fade_in();
                self setclientomnvar( "ui_br_transition_type", 4 );
            }

            wait( var_1 );
            scripts\mp\gametypes\br.gsc::spawnintermission( var_4, self._id_1286F.angles );
            scripts\mp\spectating::setdisabled();
            scripts\mp\gametypes\br_public.gsc::_id_126ED();
        }
    }
    else
    {
        self.thrust_fx_model = undefined;
        scripts\mp\gametypes\br_public.gsc::_id_126ED();
    }

    self freezecontrols( 0 );
}

_id_12582()
{
    [var_1, var_2] = _id_12583();

    if ( !isdefined( var_1 ) )
        [var_1, var_2] = _id_12584();

    if ( isdefined( var_1 ) )
        return [ var_1, var_2 ];
    else
        return scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_12582();
}

_id_12583()
{
    var_0 = undefined;
    var_1 = undefined;

    if ( !getdvarint( "scr_br_reveal_override_zombie_spawns_near_team", 1 ) )
        return [ var_0, var_1 ];

    var_2 = getdvarfloat( "scr_br_reveal_override_zombie_spawns_near_team_disable_time", -1 );

    if ( var_2 > 0 && isdefined( level.starttime ) )
    {
        var_3 = ( gettime() - level.starttime ) / 1000;

        if ( var_3 > var_2 )
            return [ var_0, var_1 ];
    }

    [var_0, var_1] = scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_1270E();
    return [ var_0, var_1 ];
}

_id_12584()
{
    var_0 = undefined;
    var_1 = undefined;
    var_2 = 50;
    var_3 = 10000;

    if ( !getdvarint( "scr_br_reveal_override_zombie_spawns_random", 1 ) )
        return [ var_0, var_1 ];

    if ( !isdefined( level.br_circle ) || !isdefined( level.br_circle.dangercircleent ) || istrue( level.disable_super_in_turret._id_146FB ) )
        return [ var_0, var_1 ];

    var_4 = scripts\mp\gametypes\br_circle.gsc::getdangercircleradius();
    var_5 = scripts\mp\gametypes\br_circle.gsc::getdangercircleorigin();
    var_6 = var_4 + var_2;
    var_7 = getdvarfloat( "scr_br_reveal_override_zombie_spawns_min_angle", 210.0 );
    var_8 = getdvarfloat( "scr_br_reveal_override_zombie_spawns_max_angle", 390.0 );
    var_9 = getdvarint( "scr_br_reveal_override_zombie_spawns_attempts", 5 );
    var_10 = var_8 - var_7;
    var_11 = var_10 / var_9;
    var_12 = randomfloat( var_11 );
    var_13 = [];

    for ( var_14 = 0; var_14 < var_9; var_14++ )
        var_13[var_14] = var_7 + var_14 * var_11 + var_12;

    var_13 = scripts\engine\utility::array_randomize( var_13 );

    for ( var_14 = 0; var_14 < var_13.size; var_14++ )
    {
        var_15 = anglestoforward( ( 0, var_13[var_14], 0 ) );
        [var_0, var_1] = scripts\mp\gametypes\br_alt_mode_zxp.gsc::run_track_enemy_patrollers( var_5, var_15, var_6 );

        if ( isdefined( var_0 ) )
        {
            var_0 = scripts\mp\gametypes\br_public.gsc::modifyplayer_damage( var_0, var_3 );
            break;
        }
    }

    return [ var_0, var_1 ];
}

_id_1327A()
{
    level endon( "game_ended" );
    var_0 = getdvarint( "scr_br_sandbox_time_warning", 120 );
    scripts\mp\flags::gameflagwait( "prematch_done" );
    setomnvar( "ui_br_circle_state", 5 );

    if ( level.disable_super_in_turret.timelimit <= 0 )
        return;

    setomnvar( "ui_hardpoint_timer", gettime() + int( level.disable_super_in_turret.timelimit * 1000 ) );
    var_1 = max( level.disable_super_in_turret.timelimit - var_0, 0 );
    wait( var_1 );
    setomnvar( "ui_br_circle_state", 6 );
}

ontimelimit()
{
    if ( istrue( level.gameended ) )
        return;

    setupmapquadrantcornersandgrid();
    thread scripts\mp\gametypes\br.gsc::brendgame( level.disable_super_in_turret.player_enemy_cooldown, game["end_reason"]["objective_completed"] );
}

onplayerkilled( var_0 )
{
    if ( !istrue( level.br_prematchstarted ) )
        return;

    if ( level.gameended )
        return;

    if ( isdefined( var_0.victim ) && isplayer( var_0.victim ) && !istrue( level._id_11F0F ) )
    {
        var_0.victim setclientomnvar( "ui_br_reveal_state", 4 );
        var_0.victim scripts\mp\gametypes\br_containmentprotocol.gsc::elim_hud();
    }

    if ( !isdefined( var_0.attacker ) || !isplayer( var_0.attacker ) || !isdefined( var_0.victim ) || var_0.attacker == var_0.victim )
        return;

    var_1 = var_0.attacker.team;

    if ( !isdefined( level.teamdata[var_1]["kills"] ) )
        level.teamdata[var_1]["kills"] = 0;

    level.teamdata[var_1]["kills"]++;

    if ( isdefined( level._id_12D05 ) )
    {
        if ( !istrue( level.br_prematchstarted ) )
            return;

        if ( level.gameended )
            return;

        var_2 = var_0.victim;
        var_3 = var_0.attacker;

        if ( !isdefined( var_3 ) || !isplayer( var_3 ) || !isdefined( var_2 ) )
            return;

        return;
    }
}

playerdropplunderondeath( var_0, var_1 )
{
    var_2 = int( self.plundercount * 0.5 );
    var_3 = self.plundercount - var_2;

    if ( var_3 <= 0 )
        var_3 = 1;

    self.plundercountondeath = var_2;
    scripts\mp\gametypes\br_plunder.gsc::playersetplundercount( var_2 );
    scripts\mp\gametypes\br_plunder.gsc::dropplunderbyrarity( var_3, var_0 );
    return 1;
}

setupmapquadrantcornersandgrid()
{

}

_id_12CBD( var_0, var_1 )
{
    level endon( "game_ended" );
    level.ontimelimit = scripts\mp\gametypes\br.gsc::ontimelimit;
    var_2 = "scr_" + scripts\mp\utility\game::getgametype() + "_timelimit";
    level.watchdvars[var_2].value = 0;
    level.overridewatchdvars[var_2] = 0;
    wait( var_1 );
    level._id_12888 = scripts\mp\gametypes\br.gsc::emp_drone_proximity_explode;
    level._id_11C76 = scripts\mp\gametypes\br.gsc::dyn_door;
    level.modeonspawnplayer = scripts\mp\gametypes\br.gsc::onspawnplayer;
    level.disable_super_in_turret.gulagfixuparena = 1;
    level notify( "closeSandboxMenu" );

    foreach ( var_4 in level.players )
    {
        if ( isdefined( var_4.spawndangertriggers ) )
            var_4.spawndangertriggers destroy();
    }

    level.disable_super_in_turret.funcs["spawnHandled"] = undefined;
    level.disable_super_in_turret.funcs["playerKilledSpawn"] = undefined;
}

_id_12CEE()
{
    var_0 = ( 10895, -10916, 292 );
    var_1 = level.br_level.br_circleradii[1] - 42000;
    var_2 = scripts\mp\gametypes\br_c130.gsc::createtestc130path( var_0, var_1 );
    return var_2;
}

_id_12CEC()
{
    thread _id_12CF9();
}

_id_12CF9()
{
    level endon( "game_ended" );
    self endon( "death" );
    var_0 = distance( self._id_12205.startpt, self._id_12205.neurotoxin_damage_monitor );
    var_1 = var_0 / scripts\mp\gametypes\br_c130.gsc::getc130speed() - 5;
    wait( var_1 );

    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_3 ) && isdefined( var_3.br_infil_type ) && var_3.br_infil_type == "c130" && !isdefined( var_3.jumptype ) )
        {
            var_3.jumptype = "outOfBounds";
            var_3 notify( "halo_kick_c130" );
        }
    }
}

_id_12D07()
{
    level.br_level.br_circledelaytimes[1] = level.br_level.br_circledelaytimes[0];
    level.br_level.br_circledelaytimes[0] = 1;
    level.br_level.br_circleclosetimes[0] = 1;
    level.br_level.default_player_connect_black_screen[0] = 1;
}

deploy_balloon_nags()
{
    wait 5.0;
    scripts\mp\utility\sound::besttime( "br_zmb_dov_sfx" );
}

toggle_switch_model()
{
    if ( level.script == "mp_br_mechanics" )
    {
        scripts\mp\gametypes\br_zones.gsc::swap_access_card( "a", ( 0, 0, 0 ), 500, 20, 0, 2 );
        scripts\mp\gametypes\br_zones.gsc::swap_access_card( "b", ( 1000, 1000, 0 ), 500, 20, 0, 2 );
        scripts\mp\gametypes\br_zones.gsc::swap_access_card( "c", ( 1000, -1000, 0 ), 500, 20, 0, 2 );
        var_0 = "a,b,c";
    }
    else
        var_0 = "dam,stadium,hospital,super,tv,quarry,bank";

    scripts\mp\gametypes\br_zones.gsc::swaphelifordrivable( "scr_br_reveal_plague_zone_locations", var_0 );
    thread _id_123BB();
}

_id_123BB()
{
    scripts\mp\flags::gameflagwait( "reveal_timed_section_2" );
    var_0 = getdvarfloat( "scr_br_reveal_plague_zone_delete_time", 10.0 );

    foreach ( var_2 in level.deployingplayer.zones )
    {
        if ( var_2.type == "plague" )
            var_2 thread scripts\mp\gametypes\br_zones.gsc::_id_1471B( undefined, 50.0, var_0 );
    }

    wait( var_0 );

    foreach ( var_2 in level.deployingplayer.zones )
    {
        if ( var_2.type == "plague" )
            var_2 scripts\mp\gametypes\br_zones.gsc::_id_14714();
    }
}

_id_12CF2()
{
    level endon( "game_ended" );

    if ( !getdvarint( "scr_br_reveal_exfil_helicopter", 1 ) )
        return;

    level waittill( "reveal_exfil_heli_incoming" );
    var_0 = [ level.grouptorewards + ( 500, 0, 0 ), level.grouptorewards - ( 500, 0, 0 ), level.grouptorewards + ( 350, 0, 500 ) - ( 0, 650, 0 ) ];

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
        level thread ai_is_juggernaut( var_0[var_1] );
}

ai_is_juggernaut( var_0 )
{
    while ( istrue( level.create_agent_definition ) )
        wait 1;

    var_1 = level.players[randomint( level.players.size )];
    var_2 = var_1 _id_126A7( var_0 );

    if ( isdefined( var_2 ) )
    {
        var_3 = spawnstruct();
        var_3.origin = var_0;
        var_3.angles = var_2.angles;
        var_3.spawntype = "GAME_MODE";
        var_4 = spawnstruct();
        var_5 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "little_bird", var_3, var_4 );

        if ( isdefined( var_5 ) )
        {
            var_2.snapshot_grenade_applysnapshot = var_5;
            var_5 hide();
            var_2 helicreateextractvfx( var_0 );
            thread onkillstreakend( var_2 );
            return;
        }
    }
}

onkillstreakend( var_0 )
{
    var_0 endon( "death" );
    var_0 endon( "leaving" );
    var_0 setvehgoalpos( var_0.pathgoal, 1 );
    var_0 settargetyaw( var_0.select_mountain_two_spawners );
    var_1 = var_0 tracegroundheight( var_0.pathgoal + ( 0, 0, 400 ) );
    var_1 = var_1 + getdvarfloat( "scr_br_reveal_exfil_heli_z_offset", 300 );
    var_1 = var_1 + randomfloat( getdvarfloat( "scr_br_reveal_exfil_heli_z_offset_random", 300 ) );
    var_2 = var_0.pathgoal[2] - var_1;
    var_0.player_weapon_fired_monitor = frag_crate_player_at_max_ammo( var_2 );
    var_0 waittill( "goal" );
    var_0 thread sound_ent();
    var_0 thread snapshot_crate_spawn();
    var_0 helidescend( var_0.endpoint, var_1 );
    var_0 helicleanupextract( 0 );
}

tracegroundheight( var_0 )
{
    var_1 = 125;
    var_2 = tracegroundpoint( var_0, 100, [ self ] );
    var_3 = var_2[2];
    var_4 = var_3 + var_1;
    return var_4;
}

tracegroundpoint( var_0, var_1, var_2 )
{
    var_3 = -99999;
    var_4 = ( var_0[0], var_0[1], var_3 );
    var_5 = scripts\engine\trace::create_world_contents();
    var_6 = undefined;

    if ( isdefined( var_1 ) )
        var_6 = scripts\engine\trace::sphere_trace( var_0, var_4, var_1, var_2, var_5 );
    else
        var_6 = scripts\engine\trace::ray_trace( var_0, var_4, var_2, var_5 );

    return var_6["position"];
}

sound_ent()
{
    self endon( "death" );
    level waittill( "revealTimedSection3_after_initial_VO" );
    wait 3;
    sol_3_4_pool();
}

frag_crate_player_at_max_ammo( var_0 )
{
    var_1 = frag_crate_spawn( 30000, 150, 100 );
    var_2 = frag_crate_spawn( var_0, 37.5, 25.0 );
    var_3 = var_1 + var_2;
    return var_3;
}

frag_crate_spawn( var_0, var_1, var_2 )
{
    var_3 = var_0 * 0.0000157828;
    var_4 = 0.5 * var_2;
    var_5 = var_1;
    var_6 = -1 * var_3;
    var_7 = ( -1 * var_5 + sqrt( var_5 * var_5 - 4 * var_4 * var_6 ) ) / ( 2 * var_4 );
    var_7 = var_7 * 3600;
    var_7 = var_7 + 1.5;
    return var_7;
}

sol_3_4_pool()
{
    self endon( "death" );
    self show();
    self notify( "leaving" );
    self.leaving = 1;
    self setvehgoalpos( self.pathgoal, 1 );
    self settargetyaw( self.select_mountain_two_spawners );
    sortplayerplunderscores( 3, self.player_weapon_fired_monitor );
    self waittill( "goal" );
    self vehicle_setspeed( self.speed, self.accel );
    self setvehgoalpos( self._id_121FF, 1 );
    self settargetyaw( self.select_mountain_two_spawners );
    self waittill( "goal" );
    self stoploopsound();
    sortplayerplunderscores( 0, 0 );
    self notify( "heli_gone" );
    scripts\cp_mp\vehicles\vehicle_tracking::_deletevehicle( self );
}

sortplayerplunderscores( var_0, var_1 )
{
    var_2 = gettime() + int( var_1 * 1000 );
    var_3 = level.teamdata[self.team]["alivePlayers"];

    foreach ( var_5 in var_3 )
    {
        var_5 setclientomnvar( "ui_br_plunder_extract_state", var_0 );
        var_5 setclientomnvar( "ui_br_plunder_extract_end_time", var_2 );
    }
}

helidescend( var_0, var_1 )
{
    self endon( "death" );
    var_2 = var_0[0];
    var_3 = var_0[1];
    var_4 = ( var_2, var_3, var_1 );
    self setvehgoalpos( var_4, 1 );
    self settargetyaw( self.select_mountain_two_spawners );
    self vehicle_setspeed( 37.5, 25.0 );
    thread snapplayertotoppos();
    thread snappointtooutofboundstriggertrace();
    self waittill( "goal" );
    self sethoverparams( 1, 1 );
    wait 1;
    self sethoverparams( 25, 20, 10 );
}

snapshot_crate_spawn()
{
    self endon( "death" );

    if ( !isdefined( self.vfxent ) )
        return;

    wait 5;
    self.vfxent endon( "death" );
    self.vfxent setscriptablepartstate( "smoke", "dissipate" );
    self.vfxent playsound( "smoke_canister_tail_dissipate" );
    wait 1;
    self.vfxent stoploopsound();
    wait 4.5;
    self.vfxent delete();
}

_id_126A7( var_0 )
{
    var_1 = self;
    var_2 = var_0;
    var_3 = getent( "airstrikeheight", "targetname" );
    var_4 = var_3.origin[2] - 300;
    var_5 = ( var_2[0], var_2[1], var_4 );
    var_6 = ( 0, randomfloat( 360 ), 0 );
    var_7 = var_5 + -1 * anglestoforward( var_6 ) * 30000;
    var_8 = var_5 + anglestoforward( var_6 ) * 30000;
    var_9 = var_1 spawnheli( var_1, var_7, var_5, var_8 );
    return var_9;
}

helicleanupextract( var_0 )
{
    if ( isdefined( self.vfxent ) )
    {
        self.vfxent stoploopsound();
        self.vfxent delete();
    }

    if ( istrue( var_0 ) && isdefined( self.site ) )
        self.site setscriptablepartstate( self.site.type, self.site.audio_shf_kill_hangar_lights );
}

snapplayertotoppos()
{
    self endon( "leaving" );
    self endon( "death" );

    for (;;)
    {
        self waittill( "touch", var_0 );

        if ( isdefined( var_0 ) && var_0 nuke_vault_suicidebomber_internal() )
            var_0 dodamage( var_0.health, self.origin, var_0, var_0, "MOD_CRUSH" );
    }
}

spawnheli( var_0, var_1, var_2, var_3 )
{
    var_4 = vectortoangles( var_2 - var_1 );
    var_5 = 1;
    var_6 = scripts\cp_mp\vehicles\vehicle_tracking::_spawnhelicopter( var_0, var_1, var_4, "veh_apache_plunder_mp", "veh8_mil_air_lbravo_personnel_mp_flyable" );

    if ( !isdefined( var_6 ) )
        return;

    var_7 = var_2 * ( 1, 1, 0 );
    var_6.damagecallback = ::callback_vehicledamage;
    var_6.speed = 150;
    var_6.accel = 100;
    var_6.health = 1000;
    var_6.maxhealth = var_6.health;
    var_6.team = var_0.team;
    var_6.owner = var_0;
    var_6.defendloc = var_2;
    var_6.lifeid = 0;
    var_6.flaresreservecount = var_5;
    var_6.pathgoal = var_2;
    var_6._id_121FF = var_3;
    var_6.endpoint = var_7;
    var_6.select_mountain_two_spawners = var_4[1];
    var_6.vehiclename = "magma_plunder_chopper";
    var_6 setcandamage( 1 );
    var_6 setmaxpitchroll( 10, 25 );
    var_6 vehicle_setspeed( var_6.speed, var_6.accel );
    var_6 sethoverparams( 50, 100, 50 );
    var_6 setturningability( 0.05 );
    var_6 setyawspeed( 45, 25, 25, 0.5 );
    var_6 setotherent( var_0 );
    var_6 thread scripts\mp\killstreaks\flares::flares_handleincomingstinger( undefined, undefined );
    var_6 thread handledestroydamage();
    var_6 thread smuggler_post_tele_kill();
    return var_6;
}

smuggler_post_tele_kill()
{
    self endon( "heli_gone" );
    self endon( "swapped" );
    var_0 = self.owner;
    var_1 = self.team;
    self waittill( "death", var_2, var_3, var_4, var_5 );
    smoke_enemy_think();

    if ( !isdefined( self ) )
        return;

    if ( !isdefined( self.largeprojectiledamage ) && !istrue( self.isdepot ) )
    {
        self vehicle_setspeed( 25, 5 );
        thread smokesignal( 75 );
        scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( 2.7 );
    }

    snowballfighthint( var_2 );
}

snowballfighthint( var_0 )
{
    var_1 = self gettagorigin( "tag_origin" ) + ( 0, 0, 40 );
    self radiusdamage( var_1, 256, 140, 70, var_0, "MOD_EXPLOSIVE" );
    playfx( scripts\engine\utility::getfx( "little_bird_explode" ), var_1, anglestoforward( self.angles ), anglestoup( self.angles ) );
    playsoundatpos( var_1, "veh_chopper_support_crash" );
    earthquake( 0.4, 800, var_1, 0.7 );
    playrumbleonposition( "grenade_rumble", var_1 );
    physicsexplosionsphere( var_1, 500, 200, 1 );
    self notify( "explode" );
    wait 0.35;
    smoke_screen( 1 );
    scripts\cp_mp\vehicles\vehicle_tracking::_deletevehicle( self );
}

snappointtooutofboundstriggertrace()
{
    self endon( "leaving" );
    self endon( "death" );
    var_0 = 70;
    var_1 = -80;
    var_2 = 150;
    var_3 = 25;
    var_4 = -100;

    for (;;)
    {
        var_5 = getentarrayinradius( "script_vehicle", "classname", self.origin, getdvarfloat( "test_radius", 400 ) );

        if ( var_5.size <= 1 )
        {
            wait 0.5;
            continue;
        }

        var_6 = scripts\engine\trace::create_vehicle_contents();
        var_7 = anglestoforward( self.angles );
        var_8 = self.origin + var_7 * getdvarfloat( "test_f", var_2 ) + ( 0, 0, getdvarfloat( "test_d", var_1 ) );
        var_9 = scripts\engine\trace::sphere_trace( var_8, var_8 + ( 0, 0, 1 ), var_0, self, var_6 );
        var_10 = var_9["entity"];

        if ( isdefined( var_10 ) && var_10 nuke_vault_suicidebomber_internal() )
        {
            var_10 dodamage( var_10.health, self.origin, var_10, var_10, "MOD_CRUSH" );
            waitframe();
            continue;
        }

        var_8 = self.origin + var_7 * getdvarfloat( "test_m", var_3 ) + ( 0, 0, getdvarfloat( "test_d", var_1 ) );
        var_9 = scripts\engine\trace::sphere_trace( var_8, var_8 + ( 0, 0, 1 ), var_0, self, var_6 );
        var_10 = var_9["entity"];

        if ( isdefined( var_10 ) && var_10 nuke_vault_suicidebomber_internal() )
        {
            var_10 dodamage( var_10.health, self.origin, var_10, var_10, "MOD_CRUSH" );
            waitframe();
            continue;
        }

        var_8 = self.origin + var_7 * getdvarfloat( "test_b", var_4 ) + ( 0, 0, getdvarfloat( "test_d", var_1 ) );
        var_9 = scripts\engine\trace::sphere_trace( var_8, var_8 + ( 0, 0, 1 ), var_0, self, var_6 );
        var_10 = var_9["entity"];

        if ( isdefined( var_10 ) && var_10 nuke_vault_suicidebomber_internal() )
        {
            var_10 dodamage( var_10.health, self.origin, var_10, var_10, "MOD_CRUSH" );
            waitframe();
            continue;
        }

        waitframe();
    }
}

nuke_vault_suicidebomber_internal()
{
    return isalive( self ) && ( scripts\common\vehicle::isvehicle() || isdefined( self.classname ) && self.classname == "script_vehicle" );
}

smoke_screen( var_0 )
{
    if ( isdefined( self.vfxent ) )
    {
        self.vfxent stoploopsound();
        self.vfxent delete();
    }
}

smokesignal( var_0 )
{
    self endon( "explode" );
    self notify( "heli_crashing" );
    self setvehgoalpos( self.origin + ( 0, 0, 100 ), 1 );
    scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( 1.5 );
    self setyawspeed( var_0, var_0, var_0 );
    self settargetyaw( self.angles[1] + var_0 * 2.5 );
}

smoke_enemy_think()
{
    if ( isdefined( self.rope ) )
        self.rope delete();

    if ( isdefined( self.crate ) )
        self.crate delete();
}

handledestroydamage()
{
    self endon( "death" );
    self endon( "leaving" );
    self endon( "swapped" );

    for (;;)
    {
        self waittill( "damage", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 );
        var_9 = scripts\mp\utility\weapon::mapweapon( var_9, var_13 );

        if ( ( var_9.basename == "aamissile_projectile_mp" || var_9.basename == "nuke_mp" ) && var_4 == "MOD_EXPLOSIVE" && var_0 >= self.health )
        {
            callback_vehicledamage( var_1, var_1, 9001, 0, var_4, var_9, var_3, var_2, var_3, 0, 0, var_7 );
            smoke_screen( 1 );
        }
    }
}

callback_vehicledamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 )
{
    scripts\mp\killstreaks\killstreaks::killstreakhit( var_1, var_5, self, var_4, var_2 );
    var_1 scripts\mp\damagefeedback::updatedamagefeedback( "" );
    var_2 = 0;
    self.smoking = 1;
}

helicreateextractvfx( var_0 )
{
    self.vfxent = spawn( "script_model", var_0 );
    self.vfxent setmodel( "scr_smoke_grenade" );
    self.vfxent.angles = ( 0, 90, 90 );
    self.vfxent playloopsound( "smoke_carepackage_smoke_lp" );
    self.vfxent setscriptablepartstate( "smoke", "on" );
}

modifyplayerdamage( var_0 )
{
    if ( isplayer( var_0.victim ) )
    {
        var_1 = var_0.victim scripts\mp\gametypes\br_public.gsc::_id_125F3();
        var_2 = ui_damage_num_next_index( var_0 );

        if ( !var_1 && var_2 )
            var_0.damage = 0;
    }

    return scripts\mp\gametypes\br_alt_mode_zxp.gsc::modifyplayerdamage( var_0 );
}

_id_11CA1( var_0 )
{
    if ( ui_damage_num_next_index( var_0 ) && isdefined( self.occupants ) && self.occupants.size )
        var_0.damage = 0;

    return scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_11CA1( var_0 );
}

brking_cleanupents( var_0 )
{
    var_1 = isplayer( var_0.attacker ) && var_0.attacker scripts\mp\gametypes\br_public.gsc::_id_125F3();
    return var_1;
}

ui_damage_num_next_index( var_0 )
{
    return isdefined( var_0.objweapon ) && var_0.objweapon.basename == "chopper_support_turret_mp";
}

_id_12E02()
{
    if ( !getdvarint( "scr_br_reveal_attack_helis_enabled", 1 ) )
        return;

    var_0 = [ level.grouptorewards, ( -4903, 25796, -394 ), ( -28977, 23076, -390 ), ( 2693, 41717, 1607 ) ];
    var_1 = ( 0, 0, 0 );
    var_2 = 0;

    for (;;)
    {
        var_3 = var_1;

        if ( var_2 < var_0.size )
            var_3 = var_0[var_2];

        var_4 = getdvarvector( "scr_br_reveal_attack_heli_" + ( var_2 + 1 ) + "_origin", var_3 );

        if ( var_4 == var_1 )
            break;

        var_5 = getdvarfloat( "scr_br_reveal_attack_heli_" + ( var_2 + 1 ) + "_delay", 20.0 );
        thread battle_tracks_getsfxalias( var_4, var_5 );
        wait 0.1;
        var_2++;
    }
}

infil_chopper_dialogue()
{
    if ( !isdefined( level._id_119E7 ) )
        return;

    foreach ( var_1 in level._id_119E7 )
        var_1 challenges_init( undefined );
}

battle_tracks_getsfxalias( var_0, var_1 )
{
    if ( isdefined( var_1 ) && var_1 > 0.0 )
        wait( var_1 );

    if ( !isdefined( level._id_119E7 ) )
        scripts\mp\gametypes\br_lootchopper.gsc::init();

    var_2 = _id_1360E( var_0 );
}

_id_1360E( var_0 )
{
    var_1 = getdvarfloat( "scr_br_reveal_attack_heli_patrol_radius", 4000 );
    var_0 = scripts\mp\gametypes\br.gsc::resetcircuitbreakers( var_0, ( 0, 0, 10000 ) );
    var_2 = scripts\cp_mp\killstreaks\chopper_support::getpathstart( var_0 );
    var_3 = vectortoangles( var_0 - var_2 );
    var_4 = "veh_chopper_support_pe_mp";
    var_5 = scripts\cp_mp\vehicles\vehicle_tracking::_spawnhelicopter( level.players[randomint( level.players.size )], var_2, var_3, var_4, "veh8_mil_air_palfa_east" );

    if ( !isdefined( var_5 ) )
        return;

    var_5.speed = getdvarint( "scr_br_reveal_attack_heli_speed", 100 );
    var_5.accel = getdvarint( "scr_br_reveal_attack_heli_accel", 50 );
    var_5.lifetime = getdvarint( "scr_br_reveal_attack_heli_lifetime", 9999 );
    var_5.team = "neutral";
    var_5.angles = var_3;
    var_5.flaresreservecount = 0;
    var_5.currentdamagestate = 0;
    var_5.pathstart = var_2;
    var_5.pathgoal = var_0;
    var_5.currentaction = "patrol";
    var_5.currenttarget = undefined;
    var_5.heightoffset = ( 0, 0, getdvarint( "scr_br_reveal_attack_heli_height_offset", 1500 ) );
    var_5._id_1220D = var_0;
    var_5._id_1220F = var_1;
    var_5._id_13766 = getdvarint( "scr_br_reveal_attack_heli_stage_1_acc", 60 );
    var_5._id_11C43 = getdvarint( "scr_br_reveal_attack_heli_stage_2_shots", 10 );
    var_5._id_13767 = getdvarint( "scr_br_reveal_attack_heli_stage_2_acc", 40 );
    var_5._id_11C44 = getdvarint( "scr_br_reveal_attack_heli_stage_3_shots", 20 );
    var_5._id_13768 = getdvarint( "scr_br_reveal_attack_heli_stage_3_acc", 20 );

    if ( var_5._id_13768 <= 0 )
        var_5._id_13768 = undefined;

    var_5.infil_complete = var_5.heightoffset[2] - 250;
    var_5 setmaxpitchroll( 15, 15 );
    var_5 vehicle_setspeed( var_5.speed, var_5.accel );
    var_5 sethoverparams( 50, 5, 2.5 );
    var_5 setturningability( 0.5 );
    var_5 setyawspeed( 100, 25, 25, 0.1 );
    var_5 setcandamage( 0 );
    var_5 setneargoalnotifydist( 768 );
    var_5 setvehicleteam( var_5.team );
    var_5.health = 5000;
    var_5.maxhealth = 9999;
    var_5 scripts\mp\sentientpoolmanager::registersentient( "Level_Vehicle", var_5.team );
    var_5 carriable_weapon_change_watch();
    var_5 setscriptablepartstate( "blinking_lights", "on", 0 );
    var_5 setscriptablepartstate( "engine", "on", 0 );
    var_5.frontturret = spawnturret( "misc_turret", var_5 gettagorigin( "tag_turret_front" ), "chopper_support_turret_mp" );
    var_5.frontturret setmodel( "veh8_mil_air_ahotel64_turret_wm_east" );
    var_5.frontturret.team = var_5.team;
    var_5.frontturret.angles = var_5.angles;
    var_5.frontturret.turreton = 1;
    var_5.frontturret.name = "front_turret";
    var_5.frontturret.attackingtarget = undefined;
    var_5.frontturret._id_14258 = "loot_chopper";
    var_5.frontturret linkto( var_5 );
    var_5.frontturret setturretteam( var_5.team );
    var_5.frontturret setturretmodechangewait( 0 );
    var_5.frontturret setmode( "manual" );
    var_5.frontturret setdefaultdroppitch( 45 );
    var_5.frontturret.groundtargetent = spawn( "script_model", var_5.origin );
    var_5.frontturret.groundtargetent setmodel( "tag_origin" );
    var_5.frontturret.groundtargetent dontinterpolate();
    var_5.rearturret = spawnturret( "misc_turret", var_5 gettagorigin( "tag_turret_rear" ), "chopper_support_turret_mp" );
    var_5.rearturret setmodel( "veh8_mil_air_ahotel64_turret_wm_east" );
    var_5.rearturret.team = var_5.team;
    var_5.rearturret.angles = var_5.angles;
    var_5.rearturret.turreton = 1;
    var_5.rearturret.name = "rear_turret";
    var_5.rearturret.attackingtarget = undefined;
    var_5.rearturret._id_14258 = "loot_chopper";
    var_5.rearturret linkto( var_5 );
    var_5.rearturret setturretteam( var_5.team );
    var_5.rearturret setturretmodechangewait( 0 );
    var_5.rearturret setmode( "manual" );
    var_5.rearturret setdefaultdroppitch( 45 );
    var_5.rearturret.groundtargetent = spawn( "script_model", var_5.origin );
    var_5.rearturret.groundtargetent setmodel( "tag_origin" );
    var_5.rearturret.groundtargetent dontinterpolate();
    level._id_119E7[level._id_119E7.size] = var_5;
    var_5._id_1220C = scripts\mp\gametypes\br_lootchopper.gsc::_id_11A12;
    var_5.has_ammo_drain_passive = scripts\mp\gametypes\br_lootchopper.gsc::_id_11A03;
    var_5.va_standard_spawnpoint_valid = ::va_standard_spawnpoint_valid;

    if ( getdvarint( "scr_br_reveal_attack_objective", 0 ) )
        var_5 scripts\mp\gametypes\br_lootchopper.gsc::_id_11A04();

    var_5 thread scripts\cp_mp\killstreaks\chopper_support::choppersupport_neargoalsettings();
    var_5 thread scripts\cp_mp\killstreaks\chopper_support::debugtimedelta( var_5.pathgoal, 1 );
    return var_5;
}

va_standard_spawnpoint_valid( var_0 )
{
    return var_0 scripts\mp\gametypes\br_public.gsc::_id_125F3();
}

carriable_weapon_change_watch()
{
    self.vehiclename = "loot_chopper";
    scripts\mp\vehicles\damage::set_pre_mod_damage_callback( self.vehiclename, ::challengestarttime );
    scripts\mp\vehicles\damage::set_post_mod_damage_callback( self.vehiclename, ::challengesdisabled );
    scripts\mp\vehicles\damage::set_death_callback( self.vehiclename, ::challenges_init );
    scripts\cp_mp\vehicles\vehicle_tracking::vehicle_tracking_registerinstance( self );
}

challengestarttime( var_0 )
{
    return 0;
}

challengesdisabled( var_0 )
{
    scripts\cp_mp\killstreaks\chopper_support::choppersupport_modifydamage( var_0 );
    return 1;
}

challenges_init( var_0 )
{
    if ( isdefined( var_0 ) )
        scripts\cp_mp\killstreaks\chopper_support::choppersupport_handledeathdamage( var_0 );
    else
        self.killedbyweapon = "none";

    self notify( "death" );
    return 1;
}
