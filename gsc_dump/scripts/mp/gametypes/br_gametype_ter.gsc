// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.deletetimedrunhud = spawnstruct();
    level.deletetimedrunhud.autotarget = 0;
    level.deletetimedrunhud.waittillplayerlanded = -1;
    level.deletetimedrunhud.watchflashgrenadeexplode = [];
    level.deletetimedrunhud.teams = [ "allies", "axis" ];
    level.deletetimedrunhud._id_12169 = getdvarint( "scr_br_ter_outpost_sequential", 1 );
    level.deletetimedrunhud._id_12C45 = getdvarint( "scr_br_ter_require_all_outpost", 1 );
    level.deletetimedrunhud.brjugg_watchgasdamage = getdvarfloat( "scr_br_ter_allow_repair", 1 );
    level.deletetimedrunhud.is_main_pilot = getdvarint( "scr_br_ter_damageable_repair_plunder", 2 );
    level.deletetimedrunhud.is_greater_than_equal_to = getdvarint( "scr_br_ter_damageable_destroy_plunder", 2 );
    level.deletetimedrunhud.is_in_kill_zone_or_under_bridge_zone = getdvarint( "scr_br_ter_damageable_destroy_spawns", 4 );
    level.deletetimedrunhud.is_inflictor_a_carepackage = getdvarint( "scr_br_ter_damageable_destroy_spawns_max", 6 );
    level.deletetimedrunhud.is_in_gas = getdvarint( "scr_br_ter_damageable_destroy_spawn_plunder", 3 );
    level.deletetimedrunhud.is_helicopter_player_occupied = getdvarint( "scr_br_ter_damageable_destroy_spawn_ammo", 4 );
    level.deletetimedrunhud.is_hostage_oob = getdvarint( "scr_br_ter_damageable_destroy_spawn_armor", 1 );
    level.deletetimedrunhud.is_killstreak_valid_for_swat = [ "brloot_plunder_cash_common_1", "brloot_plunder_cash_uncommon_1", "brloot_plunder_cash_uncommon_2" ];
    level.deletetimedrunhud.is_kidnapping_player = [ "brloot_armor_plate" ];
    level.deletetimedrunhud.is_instant_use_munition = [ "brloot_ammo_12g", "brloot_ammo_50cal", "brloot_ammo_762", "brloot_ammo_919", "brloot_ammo_rocket" ];
    level.deletetimedrunhud._id_141C4 = [ "veh_a10fd", "cargo_truck", "jeep", "tac_rover", "atv", "motorcycle" ];
    level.deletetimedrunhud._id_1420A = getdvarfloat( "scr_br_ter_vehicle_respawn_delay", 5 );
    level.deletetimedrunhud.types = [];
    level.phonesringing_code = getdvarint( "scr_br_ter_fd_disable_alt_turret", 1 );
    level.phonesringing_singlemorse = getdvarint( "scr_br_ter_fd_disable_hud", 1 );
    teleport_to_track_start();
    teleport_to_silo_airlock();
    timeoutradialunfill();
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "circle" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "gulag" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "oneLife" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "waitLoadoutDone" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "drogBagLoadout" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "playerCountLandmarks" );
    scripts\mp\gametypes\br_gametypes.gsc::load_sequence_3_vfx( "placedKiosks" );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "spawnInitialVehicles", ::spawninitialvehicles );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "infilSequence", ::manage_fakebody_hides );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "skipInfilSequence", ::_id_133D6 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "playerKilledSpawn", ::playerrespawn );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "onPlayerKilled", ::onplayerkilled );
    level.dialog_wait_ready_civ = 6;
    br_circleradiizero();
    br_circleshowdelaydanger();
    level thread testclient_run_funcs();
}

testclient_run_funcs()
{
    waittillframeend;
    scripts\mp\flags::gameflaginit( "ter_vehicle_spawn", 0 );
    scripts\mp\flags::gameflaginit( "ter_agent_spawn", 0 );
    scripts\mp\flags::gameflaginit( "ter_layout_spawned", 0 );
    scripts\mp\flags::gameflaginit( "infil_complete", 0 );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_spawn", "gameModeSupportsRespawn", ::vehicle_spawn_mp_gamemodesupportsrespawn );
    level._id_12888 = ::emp_drone_proximity_explode;
    level._id_11C76 = ::dyn_door;
    scripts\engine\scriptable::_id_12F5B( "ter_damageable", ::is_riding_heli );
    level.spawnprotectiontimer = getdvarfloat( "scr_br_ter_spawnProtectionTimer", 5 );
    level.deletetimedrunhud._id_12CA1 = getdvarint( "scr_br_ter_spawn_delay", 0 );
    thread _id_1452D( "allies" );
    thread _id_1452D( "axis" );
    tracegroundheightexfil();
    initstructs();
    timed_laser_trap_trigger_array();
    scripts\mp\flags::gameflagwait( "prematch_done" );
    var_0 = getdvar( "scr_br_ter_layout_name", "default" );
    var_1 = level.deletetimedrunhud.watchflashgrenadeexplode[var_0];
    var_1 watchfor_pain_or_nearby();
    scripts\mp\flags::gameflagset( "ter_layout_spawned" );
    scripts\mp\flags::gameflagset( "ter_agent_spawn" );
    var_1 watchdumpsterplayerexit();
}

tracegroundheightexfil()
{
    level.deletetimedrunhud.vo = spawnstruct();
    level.deletetimedrunhud.vo._id_13B72 = [];

    foreach ( var_1 in level.deletetimedrunhud.teams )
        level.deletetimedrunhud.vo._id_13B7D[var_1] = [];

    var_3 = getdvarint( "scr_br_ter_dialog_all_debounce_losing", 5000 );
    var_4 = getdvarint( "scr_br_ter_dialog_all_debounce_securing", 5000 );
    traceresultisvalid( "objective", "boost_groundwar" );
    traceresultisvalid( "securing_default", "flag_securing", var_4 );
    traceresultisvalid( "securing_base", "hq_securing", var_4 );
    traceresultisvalid( "securing_a", "securing_a", var_4 );
    traceresultisvalid( "securing_b", "securing_b", var_4 );
    traceresultisvalid( "securing_c", "securing_c", var_4 );
    traceresultisvalid( "securing_d", "securing_d", var_4 );
    traceresultisvalid( "securing_e", "securing_e", var_4 );
    traceresultisvalid( "secured_default", "flag_secured" );
    traceresultisvalid( "secured_base", "hq_secured" );
    traceresultisvalid( "secured_a", "secured_a" );
    traceresultisvalid( "secured_b", "secured_b" );
    traceresultisvalid( "secured_c", "secured_c" );
    traceresultisvalid( "secured_d", "secured_d" );
    traceresultisvalid( "secured_e", "secured_e" );
    traceresultisvalid( "losing_default", "flag_losing", var_3 );
    traceresultisvalid( "losing_base", "hq_capturing_enemy", var_3 );
    traceresultisvalid( "losing_a", "losing_a", var_3 );
    traceresultisvalid( "losing_b", "losing_b", var_3 );
    traceresultisvalid( "losing_c", "losing_c", var_3 );
    traceresultisvalid( "losing_d", "losing_d", var_3 );
    traceresultisvalid( "losing_e", "losing_e", var_3 );
    traceresultisvalid( "lost_default", "flag_lost" );
    traceresultisvalid( "lost_base", "hq_disabled" );
    traceresultisvalid( "lost_a", "lost_a" );
    traceresultisvalid( "lost_b", "lost_b" );
    traceresultisvalid( "lost_c", "lost_c" );
    traceresultisvalid( "lost_d", "lost_d" );
    traceresultisvalid( "lost_e", "lost_e" );
}

traceresultisvalid( var_0, var_1, var_2 )
{
    game["dialog"][var_0] = var_1;

    if ( isdefined( var_2 ) )
        _id_13286( var_0, var_2 );
}

teleport_to_track_start()
{
    level.deletetimedrunhud.is_goal_crowded = [];
    level.deletetimedrunhud.is_lower = [ "br_ter_damageable_server", "generator", "oil_drum", "server", "tape_server", "ac_unit", "propane_tank_large", "jugg_agent", "aa_turret" ];
    level.deletetimedrunhud.is_goal_crowded[level.deletetimedrunhud.is_lower[0]] = init_relic_focus_fire( "scriptable" );
    level.deletetimedrunhud.is_goal_crowded[level.deletetimedrunhud.is_lower[1]] = init_relic_focus_fire( "script_model", "br_ter_ent_damageable_generator", 525, "br_ter_ent_damageable_generator_destroyed", 90 );
    level.deletetimedrunhud.is_goal_crowded[level.deletetimedrunhud.is_lower[2]] = init_relic_focus_fire( "script_model", "br_ter_ent_damageable_oil_drum", 375, "br_ter_ent_damageable_oil_drum_destroyed" );
    level.deletetimedrunhud.is_goal_crowded[level.deletetimedrunhud.is_lower[3]] = init_relic_focus_fire( "script_model", "br_ter_ent_damageable_server", 675, "br_ter_ent_damageable_server_destroyed", 0, ( 12, 12, 0 ) );
    level.deletetimedrunhud.is_goal_crowded[level.deletetimedrunhud.is_lower[4]] = init_relic_focus_fire( "script_model", "br_ter_ent_damageable_tape_server", 600, "br_ter_ent_damageable_tape_server_destroyed", 180 );
    level.deletetimedrunhud.is_goal_crowded[level.deletetimedrunhud.is_lower[5]] = init_relic_focus_fire( "script_model", "br_ter_ent_damageable_ac_unit", 450, "br_ter_ent_damageable_ac_unit_destroyed", -90, ( 12, 0, 0 ) );
    level.deletetimedrunhud.is_goal_crowded[level.deletetimedrunhud.is_lower[6]] = init_relic_focus_fire( "script_model", "br_ter_ent_propane_tank_large", 2200, "br_ter_ent_propane_tank_large_destroyed" );
    level.deletetimedrunhud.is_goal_crowded[level.deletetimedrunhud.is_lower[7]] = init_relic_focus_fire( "jugg_agent" );
    level.deletetimedrunhud.is_goal_crowded[level.deletetimedrunhud.is_lower[8]] = init_relic_focus_fire( "aa_turret" );
}

init_relic_focus_fire( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = spawnstruct();
    var_6.is_minimap_forcedisabled = var_0;

    if ( var_0 == "script_model" )
    {
        if ( !isdefined( var_4 ) )
            var_4 = 0;

        if ( !isdefined( var_5 ) )
            var_5 = ( 0, 0, 0 );

        var_6.model = var_1;
        var_6.health = var_2;
        var_6.modeldestroyed = var_3;
        var_6._id_11A49 = var_4;
        var_6._id_11A3F = var_5;
    }
    else if ( var_0 == "jugg_agent" || var_0 == "aa_turret" )
    {
        if ( !isdefined( var_4 ) )
            var_4 = 0;

        if ( !isdefined( var_5 ) )
            var_5 = ( 0, 0, 0 );

        var_6._id_11A49 = var_4;
        var_6._id_11A3F = var_5;
    }

    var_6._id_12C46 = !( var_0 == "aa_turret" && !getdvarint( "scr_br_ter_aa_guns_required", 1 ) );
    return var_6;
}

teleport_to_silo_airlock()
{
    var_0 = [ "means_of_death", "weapon_type", "weapon_class_name", "weapon_base_name" ];

    foreach ( var_2 in var_0 )
    {
        level.deletetimedrunhud.is_position_open[var_2] = [];
        level.deletetimedrunhud.is_raid_gamemode[var_2] = [];
    }

    level.deletetimedrunhud.is_raid_gamemode["means_of_death"]["mod_melee"] = 0.1;
    level.deletetimedrunhud.is_raid_gamemode["weapon_class_name"]["spread"] = 0.25;
    level.deletetimedrunhud.is_same_combat_action = getdvarint( "scr_br_damageable_vehicle_damage", 50 );
    level.deletetimedrunhud.is_scriptable_healthy = getdvarint( "scr_br_damageable_vehicle_damage_debounce_ms", 500 );
    level.deletetimedrunhud.is_so_stars_enabled = getdvarfloat( "scr_br_damageable_vehicle_min_speed", 5.0 );
}

timeoutradialunfill()
{
    level.deletetimedrunhud._id_1196C = [];
    level.deletetimedrunhud._id_1196C["default"] = init_server( "ui_mp_br_mapmenu_icon_tower", "ui_icon_br_ter_default", &"BR_TER/LOC_NAME_DEFAULT", "default" );
    level.deletetimedrunhud._id_1196C["a"] = init_server( "icon_waypoint_dom_a", "ui_icon_br_ter_a", &"BR_TER/LOC_NAME_A", "a" );
    level.deletetimedrunhud._id_1196C["b"] = init_server( "icon_waypoint_dom_b", "ui_icon_br_ter_b", &"BR_TER/LOC_NAME_B", "b" );
    level.deletetimedrunhud._id_1196C["c"] = init_server( "icon_waypoint_dom_c", "ui_icon_br_ter_c", &"BR_TER/LOC_NAME_C", "c" );
    level.deletetimedrunhud._id_1196C["d"] = init_server( "icon_waypoint_dom_d", "ui_icon_br_ter_d", &"BR_TER/LOC_NAME_D", "d" );
    level.deletetimedrunhud._id_1196C["e"] = init_server( "icon_waypoint_dom_e", "ui_icon_br_ter_e", &"BR_TER/LOC_NAME_E", "e" );

    foreach ( var_1 in level.deletetimedrunhud.teams )
        level.deletetimedrunhud._id_1196C[var_1] = init_server( "ui_mp_br_mapmenu_icon_obstacle", "ui_icon_br_ter_base", &"BR_TER/LOC_NAME_BASE", "base" );
}

init_server( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_4._id_11F89 = var_0;
    var_4.hudicon = var_1;
    var_4.locname = var_2;
    var_4._id_14308 = "_" + var_3;
    return var_4;
}

initstructs()
{
    if ( isdefined( level.tower_ground_mortar ) )
        [[ level.tower_ground_mortar ]]();
}

timed_laser_trap_trigger_array()
{
    var_0 = scripts\engine\utility::getstructarray( "ter_layout", "targetname" );

    foreach ( var_2 in var_0 )
    {
        var_2._id_13A8F = "layout";
        var_2.name = var_2.script_noteworthy;
        var_2.script_noteworthy = undefined;
        level.deletetimedrunhud.watchflashgrenadeexplode[var_2.name] = var_2;
    }

    foreach ( var_2 in level.deletetimedrunhud.watchflashgrenadeexplode )
        var_2 _id_13A83();
}

_id_13A83()
{
    self.targets = [];

    if ( !isdefined( self.target ) )
        return;

    var_0 = scripts\engine\utility::getstructarray( self.target, "targetname" );
    self.target = undefined;

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
    {
        var_2 = var_0[var_1];

        if ( isdefined( var_2.script_noteworthy ) && var_2.script_noteworthy == "pass" && isdefined( var_2.target ) )
        {
            var_3 = scripts\engine\utility::getstructarray( var_2.target, "targetname" );

            foreach ( var_5 in var_3 )
                var_0[var_0.size] = var_5;
        }
    }

    foreach ( var_2 in var_0 )
    {
        if ( isdefined( var_2.script_noteworthy ) && var_2.script_noteworthy == "pass" )
            continue;

        if ( !_id_13A90( var_2.script_noteworthy ) || !is_riding_hel( var_2.script_parameters ) || !_id_14270( var_2.script_parameters ) )
            continue;

        if ( !istrue( var_2._id_128A9 ) )
        {
            var_2._id_13A8F = var_2.script_noteworthy;
            var_2.script_noteworthy = undefined;
            var_2.name = var_2.script_parameters;
            var_2.script_parameters = undefined;

            if ( !isdefined( var_2.angles ) )
                var_2.angles = ( 0, 0, 0 );

            var_2._id_128A9 = 1;
            var_2 _id_13A83();
        }

        if ( !isdefined( self.targets[var_2._id_13A8F] ) )
            self.targets[var_2._id_13A8F] = [];

        var_8 = self.targets[var_2._id_13A8F].size;
        self.targets[var_2._id_13A8F][var_8] = var_2;

        if ( !isdefined( var_2._id_13A82 ) )
            var_2._id_13A82 = [];

        var_2._id_13A82[var_2._id_13A82.size] = self;
    }
}

watchfor_pain_or_nearby()
{
    allow_br_loot_to_br_marked();

    if ( getdvarint( "scr_br_auto_gen_plane_start_spawns", 0 ) )
    {
        foreach ( var_1 in level.deletetimedrunhud.types["base"] )
            var_1 chuckerlogic();
    }

    level.deletetimedrunhud.types["location"] = scripts\engine\utility::array_combine( level.deletetimedrunhud.types["base"], level.deletetimedrunhud.types["outpost"] );
}

chuckerlogic()
{
    var_0 = undefined;

    foreach ( var_2 in self.targets["outpost"] )
    {
        var_0 = var_2;
        break;
    }

    if ( !isdefined( var_0 ) )
        return;

    self.targets["spawn_start_plane"] = [];

    if ( !isdefined( level.deletetimedrunhud.types["spawn_start_plane"] ) )
        level.deletetimedrunhud.types["spawn_start_plane"] = [];

    var_4 = var_0.origin - self.origin;
    var_4 = ( var_4[0], var_4[1], 0 );
    var_4 = vectornormalize( var_4 );
    var_5 = vectortoangles( var_4 );
    var_6 = getdvarfloat( "scr_br_auto_gen_plane_start_spawns_height", 6000 );
    var_7 = getdvarfloat( "scr_br_auto_gen_plane_start_spawns_forward", -2000 );
    var_8 = getdvarfloat( "scr_br_auto_gen_plane_start_spawns_spacing", 800 );
    var_9 = getdvarint( "scr_br_auto_gen_plane_start_spawns_count", 20 );
    var_10 = vectorcross( var_4, ( 0, 0, 1 ) );
    var_11 = var_10 * ( var_9 / 2 ) * var_8 + self.origin + ( 0, 0, var_6 ) + var_4 * var_7;

    for ( var_12 = 0; var_12 < var_9; var_12++ )
    {
        var_13 = spawnstruct();
        var_13.origin = var_11 - var_10 * ( var_12 * var_8 );
        var_13.angles = var_5;
        var_13._id_13A8F = "spawn_start_plane";
        var_13.targets = [];
        var_14 = self.targets["spawn_start_plane"].size;
        self.targets["spawn_start_plane"][var_14] = var_13;
        var_14 = level.deletetimedrunhud.types["spawn_start_plane"].size;
        level.deletetimedrunhud.types["spawn_start_plane"][var_14] = var_13;
    }
}

allow_br_loot_to_br_marked()
{
    if ( istrue( self.spawned ) )
        return;

    self.spawned = 1;
    var_0 = self._id_13A8F;

    if ( !isdefined( level.deletetimedrunhud.types[var_0] ) )
        level.deletetimedrunhud.types[var_0] = [];

    var_1 = level.deletetimedrunhud.types[var_0].size;
    level.deletetimedrunhud.types[var_0][var_1] = self;

    foreach ( var_0, var_3 in self.targets )
    {
        foreach ( var_6, var_5 in var_3 )
        {
            var_5 _id_13A8B();
            var_5 allow_br_loot_to_br_marked();
        }
    }
}

_id_13A8B()
{
    switch ( self._id_13A8F )
    {
        case "damageable":
            self.team = self._id_13A82[0].team;
            thread is_relic_swat_active();
            break;
        case "agent":
            self.team = self._id_13A82[0].team;
            thread bintheplane();
            break;
        case "vehicle_current":
        case "vehicle_not_destroyed":
        case "vehicle_destroyed":
        case "vehicle":
            thread _id_14262();
            break;
        case "base":
            self.team = self.name;
            target_in_range_and_fov( "outpost" );
            break;
        case "outpost":
            self.team = self._id_13A82[0].team;

            if ( !isdefined( self.name ) )
                self.name = "default";

            target_in_range_and_fov( "outpost" );
            break;
        case "kiosk":
            thread wait_for_garage_open();
            break;
        default:
            break;
    }
}

_id_13A90( var_0 )
{
    var_1 = "scr_br_ter_disable_";

    if ( !isdefined( var_0 ) )
        return 1;

    switch ( var_0 )
    {
        case "agent":
            var_1 = var_1 + "agent";
            break;
        case "vehicle_current":
        case "vehicle_not_destroyed":
        case "vehicle_destroyed":
        case "vehicle":
            var_1 = var_1 + "vehicle";
            break;
        case "kiosk":
            var_1 = var_1 + "kiosk";
            break;
        default:
            return 1;
    }

    if ( var_1 == "scr_br_ter_disable_" )
        return 1;

    if ( getdvarint( var_1, 0 ) != 0 )
        return 0;

    return 1;
}

is_relic_swat_active()
{
    var_0 = undefined;
    var_1 = level.deletetimedrunhud.is_goal_crowded[self.name];

    switch ( var_1.is_minimap_forcedisabled )
    {
        case "scriptable":
            var_0 = easepower( self.name, self.origin, self.angles );
            break;
        case "script_model":
            var_0 = spawn( "script_model", self.origin );
            var_0.angles = self.angles;
            var_0 setmodel( var_1.model );
            var_0 solid();
            break;
        case "aa_turret":
            if ( isdefined( level.arenaflag_setenabled ) )
                var_0 = self [[ level.arenaflag_setenabled ]]();

            break;
        default:
            break;
    }

    self.is_minimap_forcedisabled = var_1.is_minimap_forcedisabled;
    self._id_12C46 = var_1._id_12C46;
    self.ent = var_0;
    self.ent._id_13A85 = self;
}

is_riding_hel( var_0 )
{
    var_1 = "scr_br_ter_disable_";

    if ( !isdefined( var_0 ) )
        return 1;

    if ( var_0 == "aa_turret" && !getdvarint( "aa_turrets_enabled", 0 ) )
        return 0;

    foreach ( var_3 in level.deletetimedrunhud.is_lower )
    {
        if ( var_0 == var_3 )
        {
            var_1 = var_1 + var_3;
            break;
        }
    }

    if ( var_1 == "scr_br_ter_disable_" )
        return 1;

    if ( getdvarint( var_1, 0 ) != 0 )
        return 0;

    return 1;
}

bintheplane()
{
    self.state = "init";
    var_0 = level.deletetimedrunhud.is_goal_crowded[self.name];
    self.is_minimap_forcedisabled = var_0.is_minimap_forcedisabled;
}

_id_14262()
{
    self.state = "init";
}

_id_14270( var_0 )
{
    var_1 = "scr_br_ter_disable_";

    if ( !isdefined( var_0 ) )
        return 1;

    foreach ( var_3 in level.deletetimedrunhud._id_141C4 )
    {
        if ( var_0 == var_3 )
        {
            var_1 = var_1 + var_3;
            break;
        }
    }

    if ( var_1 == "scr_br_ter_disable_" )
        return 1;

    if ( getdvarint( var_1, 0 ) != 0 )
        return 0;

    return 1;
}

watchdumpsterplayerexit()
{
    watchdangerresetaction();

    foreach ( var_1 in self.targets["base"] )
    {
        var_1 circle();
        var_1 thread _id_11987( var_1 );
    }

    self waittillmatch( "child_changed_state", "destroyed" );
    var_3 = [];

    foreach ( var_1 in self.targets["base"] )
    {
        if ( var_1.state == "destroyed" )
            var_3[var_3.size] = var_1.team;
    }

    if ( var_3.size == 1 )
        var_6 = var_3[0];
    else
        var_6 = scripts\engine\utility::random( level.deletetimedrunhud.teams );

    var_7 = respawn_flare_used( var_6 );
    var_8 = "objective_completed";
    thread scripts\mp\gametypes\br.gsc::_id_1209B( var_6, 2, undefined, 1, 1, 1 );
    thread scripts\mp\gametypes\br.gsc::brendgame( var_7, game["end_reason"][var_8], 0 );
}

_id_11987( var_0 )
{
    if ( isdefined( self.state ) )
        return;

    self endon( "destroyed" );
    _id_11981( var_0 );

    foreach ( var_2 in self.targets["outpost"] )
        var_2 thread _id_11987( var_0 );

    thread _id_11988();

    if ( level.deletetimedrunhud._id_12169 )
        _id_1198B( "protected" );
    else
        _id_1198B( "active" );

    if ( level.deletetimedrunhud._id_12C45 )
        _id_11998();
    else
        _id_11999();

    _id_1198B( "current" );
}

_id_11988()
{
    self endon( "destroyed" );
    _id_11997();
    thread _id_1198B( "destroyed" );
}

circle()
{

}

_id_11981( var_0 )
{
    foreach ( var_2 in self.targets["damageable"] )
        var_2 sub_civtarget();

    self.state = "";
    _id_11982( var_0 );
    _id_1198B( "hidden" );
    var_4 = [ "spawn_def", "spawn_att", "spawn_start", "spawn_plane", "spawn_start_plane" ];

    foreach ( var_6 in var_4 )
    {
        if ( !isdefined( self.targets[var_6] ) )
            continue;

        self._id_11E85[var_6] = 0;
        self.targets[var_6] = scripts\engine\utility::array_randomize( self.targets[var_6] );
    }
}

sub_civtarget()
{
    self.state = "";
    is_relic_collat_dmg_active( "protected" );
}

_id_1198B( var_0, var_1 )
{
    if ( self.state == var_0 )
        return;

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    self.state = var_0;

    switch ( self.state )
    {
        case "hidden":
            _id_11989( 0 );
            _id_1198A( "done", 1, 0, 0 );
            _id_11990( 0.0 );
            break;
        case "protected":
            _id_11989( 0 );
            _id_1198A( "active", 1, 1, 0 );
            _id_11990( 0.5 );
            _id_11971( "vehicle" );
            _id_11971( "vehicle_not_destroyed" );
            break;
        case "active":
            _id_11989( 1 );
            _id_1198A( "active", 1, 0, 0 );
            _id_11990( 1.0 );
            _id_11971( "vehicle" );
            _id_11971( "vehicle_not_destroyed" );
            break;
        case "current":
            _id_11989( 1 );
            _id_1198A( "current", 4, 0, 1 );
            _id_11990( 1.0 );
            _id_11971( "vehicle_not_destroyed" );
            _id_11971( "vehicle_current" );
            _id_1196F( "agent" );
            break;
        case "destroyed":
            foreach ( var_3 in self.targets["outpost"] )
                var_3 _id_1198B( "destroyed", 1 );

            _id_11989( 0 );
            _id_1198A( "done", 1, 0, 0 );
            _id_11993();
            _id_11971( "vehicle_destroyed" );
            _id_11979( "vehicle_not_destroyed" );
            _id_11979( "vehicle_current" );
            _id_11978( "agent" );

            if ( !var_1 )
            {
                level thread scripts\mp\hud_message::notifyteam( "br_ter_outpost_lost", "br_ter_outpost_captured", self.team );
                dmztutendgame( _id_1197E(), respawn_flare_used( self.team ) );
                dmztutendgame( _id_1197D(), self.team );
            }

            break;
        default:
            break;
    }

    self notify( self.state );

    foreach ( var_6 in self._id_13A82 )
        var_6 notify( "child_changed_state", self.state );
}

_id_11982( var_0 )
{
    self.objidnum = scripts\mp\objidpoolmanager::requestobjectiveid();

    if ( self.objidnum != -1 )
    {
        var_1 = _id_1197A();
        scripts\mp\objidpoolmanager::objective_add_objective( self.objidnum, "invisible", self.origin );
        scripts\mp\objidpoolmanager::update_objective_setbackground( self.objidnum, 1 );
        scripts\mp\objidpoolmanager::objective_set_play_intro( self.objidnum, 0 );
        scripts\mp\objidpoolmanager::objective_set_play_outro( self.objidnum, 0 );
        scripts\mp\objidpoolmanager::update_objective_icon( self.objidnum, var_1._id_11F89 );
        scripts\mp\objidpoolmanager::update_objective_ownerteam( self.objidnum, var_0.team );
        objective_setfriendlylabel( self.objidnum, "BR_TER/OBJ_DEFEND" );
        objective_setenemylabel( self.objidnum, "BR_TER/OBJ_DESTROY" );
        _func_421( self.objidnum, 1 );
    }
}

brc130airdropcratecapturecallback( var_0, var_1, var_2 )
{
    var_0 = scripts\engine\utility::drop_to_ground( var_0, 128 );
    var_3 = scripts\mp\mp_agent::spawnnewagentaitype( "enemy_lw_br_juggernaut_ter", var_0, var_1 );

    if ( !isdefined( var_3 ) )
        return undefined;

    var_3.team = var_2;

    if ( isdefined( level.teamnamelist ) && !scripts\engine\utility::array_contains( level.teamnamelist, var_3.team ) )
        level.teamnamelist = scripts\engine\utility::array_add( level.teamnamelist, var_3.team );

    var_4 = getdvarint( "scr_br_ter_jugg_health", 3500 );
    var_3.loadout_giveweaponobj = 1;
    var_3.maxhealth = var_4;
    var_3.health = var_4;
    var_3.agentdamagefeedback = 0;
    var_3.eliminate_drone_minigun_speed = 10000;
    var_3.eliminate_drone_internal = 2;
    return var_3;
}

bot_custom_classes_allowed()
{
    if ( isdefined( self ) )
        self kill();
}

br_circleshowdelaydanger()
{
    level.agent_funcs["actor_enemy_lw_br_juggernaut_ter"]["on_damaged"] = ::frontend5lobby;
    level.agent_funcs["actor_enemy_lw_br_juggernaut_ter"]["gametype_on_damage_finished"] = scripts\mp\subway\fast_travel_subway_station::callbacksoldieragentgametypedamagefinished;
    level.agent_funcs["actor_enemy_lw_br_juggernaut_ter"]["gametype_on_killed"] = scripts\mp\subway\fast_travel_subway_station::callbacksoldieragentgametypekilled;
}

br_circleradiizero()
{
    scripts\mp\mp_agent::init_agent( "mp/iw8_default_agent_definition.csv" );
    scripts\engine\scriptable::scriptable_setinitcallback( ::brc130airdropcrateactivatecallback );
}

brc130airdropcrateactivatecallback()
{
    if ( !scripts\engine\utility::flag_exist( "scriptables_ready" ) )
        scripts\engine\utility::flag_init( "scriptables_ready" );

    scripts\engine\utility::flag_set( "scriptables_ready" );
}

frontend5lobby( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 )
{
    if ( getdvarint( "scr_br_ter_one_shot_kill", 0 ) )
        var_2 = 99999;

    scripts\mp\subway\fast_travel_subway_station::callbacksoldieragentdamaged( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 );
}

spawninitialvehicles()
{
    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        scripts\mp\gametypes\br_vehicles.gsc::spawninitialvehicles();
    else
        scripts\mp\flags::gameflagset( "ter_vehicle_spawn" );
}

vehicle_spawn_mp_gamemodesupportsrespawn()
{
    return 0;
}

onplayerkilled( var_0 )
{
    var_1 = var_0.victim;

    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        return;

    if ( isdefined( var_1 ) )
    {
        if ( !istrue( var_1.br_infilstarted ) )
            return;

        var_1 _id_126D9();
    }
}

_id_126D9( var_0 )
{
    if ( !istrue( var_0 ) )
    {
        if ( isdefined( self._id_136A6 ) )
        {
            var_1 = getdvarfloat( "scr_br_ter_player_spawn_type_min_sec", 8.0 );
            var_2 = var_1 * 1000;
            var_3 = gettime() - self._id_136A6;

            if ( var_3 < var_2 )
                return;
        }
    }

    var_4 = undefined;
    var_5 = undefined;

    foreach ( var_7 in level.deletetimedrunhud.types["location"] )
    {
        if ( var_7.state == "current" )
        {
            var_8 = distance( var_7.origin, self.origin );

            if ( !isdefined( var_5 ) || var_8 < var_5 )
            {
                var_5 = var_8;
                var_4 = var_7;
            }
        }
    }

    if ( isdefined( var_4 ) )
    {
        var_10 = 1;
        var_11 = _id_1257D();

        if ( var_11 == "base" )
        {
            var_12 = _id_12565();
            var_13 = distance( var_12.origin, self.origin );

            if ( var_13 < var_5 )
                var_10 = 0;
        }

        if ( var_10 )
        {
            if ( var_4.team == self.team )
                _id_12678( var_4 );
            else
                _id_1266E( var_4 );
        }
    }
}

manage_fakebody_hides( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 0;

    if ( !scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "oneLife" ) )
    {
        level.disablespawning = 1;
        setdynamicdvar( "scr_" + scripts\mp\utility\game::getgametype() + "_numLives", 1 );
    }

    _id_143F7();

    for ( var_1 = 0; var_1 < level.players.size; var_1++ )
    {
        var_2 = level.players[var_1];

        if ( !isdefined( var_2 ) )
            continue;

        if ( !isalive( var_2 ) )
            var_2 scripts\mp\playerlogic::spawnplayer( 0 );

        if ( istrue( var_2.delay_enter_combat_after_investigating_grenade ) )
            scripts\mp\gametypes\br.gsc::_id_13F21( var_2 );

        var_2 setclientomnvar( "ui_br_infil_started", 1 );
        var_2 setclientomnvar( "ui_br_infiled", 1 );
        var_2.br_infilstarted = 1;

        if ( !var_0 )
            var_2 scripts\mp\gametypes\br_gulag.gsc::gulagfadetoblack();

        var_2 thread _id_1255F();
    }

    if ( !var_0 )
        wait 2.0;

    level.disable_super_in_turret._id_13916 = 0;

    foreach ( var_2 in level.players )
    {
        if ( !isdefined( var_2 ) )
            continue;

        var_2 thread _id_1255C();
    }

    scripts\mp\flags::gameflagset( "prematch_fade_done" );
    _id_143F8( 10 );

    if ( !var_0 )
    {
        foreach ( var_2 in level.players )
        {
            if ( isdefined( var_2 ) )
                var_2 scripts\mp\gametypes\br_gulag.gsc::gulagfadefromblack();
        }
    }

    waitframe();

    foreach ( var_2 in level.players )
        var_2 _id_1255E();

    scripts\mp\flags::gameflagset( "infil_complete" );
    dmzwincost( "objective" );
}

_id_143F7()
{
    var_0 = gettime() + 10000;

    while ( gettime() < var_0 && getactiveclientcount() != level.players.size )
        waitframe();
}

_id_133D6()
{
    manage_fakebody_hides( 1 );
}

_id_1255F()
{
    _id_1268B( "base" );
    self.player_enemy = _id_1257C();
    scripts\mp\gametypes\br_gulag.gsc::_id_1263E( self.player_enemy );
}

_id_1255C()
{
    self endon( "disconnect" );
    scripts\mp\gametypes\br_public.gsc::_id_1264C();
    self.forcespawnorigin = self.player_enemy.origin;
    self.forcespawnangles = self.player_enemy.angles;
    self._id_12CA8 = 1;
    self.plotarmor = 1;
    scripts\mp\playerlogic::spawnplayer();

    if ( istrue( self.delay_enter_combat_after_investigating_grenade ) )
        scripts\mp\gametypes\br.gsc::_id_13F21( self );

    waitframe();
    self.player_enemy = undefined;
    self.plotarmor = undefined;
    self._id_12CA8 = undefined;
    self.thrust_fx_model = undefined;
    self freezecontrols( 1 );
    self playerhide();
    scripts\mp\gametypes\br_public.gsc::_id_126ED();

    if ( _id_13875() )
        _id_12613();

    level.disable_super_in_turret._id_13916++;
}

_id_1255E()
{
    self cameraunlink();
    self freezecontrols( 0 );
    self playershow();
    _id_1255B();
}

_id_143F8( var_0 )
{
    var_1 = gettime() + var_0 * 1000;

    while ( gettime() < var_1 && level.disable_super_in_turret._id_13916 < level.players.size )
        waitframe();
}

dyn_door( var_0 )
{
    return 1;
}

playerrespawn( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( !scripts\mp\flags::gameflag( "prematch_done" ) || !istrue( self.br_infilstarted ) )
        return 0;

    thread _id_126A4( var_0 );
    return 1;
}

_id_126A4( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    level endon( "sudden_death_started" );

    if ( !istrue( level.debug_safehouse_regroup_start ) )
        self.class = scripts\mp\gametypes\br.gsc::_id_1234A();

    var_1 = level.teamdata[self.team]["nextRespawn"];
    var_2 = scripts\mp\utility\teams::getteamdata( self.team, "teamCount" );

    if ( var_2 > 1 )
        thread scripts\mp\gametypes\br_spectate.gsc::spawnspectator( var_0, undefined, 1 );

    self.waitingtospawn = 1;
    emp_drone_proximity_explode( 0, var_1 );
    self.waitingtospawn = 0;
    thread scripts\mp\playerlogic::spawnplayer( undefined, 0 );
    self freezecontrols( 1 );

    while ( !isalive( self ) )
        waitframe();

    waitframe();

    if ( getdvarint( "scr_br_ter_spawn_attack_dauntless", 0 ) == 1 && _id_1257D() == "attacker" )
        _id_12613();

    _id_1255B();
    var_3 = !self calloutmarkerping_getent();
    var_4 = gettime();

    if ( var_3 )
    {
        while ( isalive( self ) && isdefined( self.weaponlist ) && !self hasloadedviewweapons( self.weaponlist ) )
        {
            if ( var_4 + 3000 < gettime() )
                break;

            waitframe();
        }
    }

    self notify( "brWaitAndSpawnClientComplete" );
    self.waitingtospawn = 0;
    self freezecontrols( 0 );
    scripts\mp\gametypes\br.gsc::_id_13F21( self );
}

_id_1255B()
{
    if ( getdvarint( "scr_br_ter_last_stand", 0 ) != 0 )
        scripts\mp\gametypes\br.gsc::scriptednode( self );

    scripts\mp\gametypes\br_armor.gsc::searchcirclesize( 1 );
    var_0 = getdvarint( "scr_br_ter_start_ammo", 1 );

    if ( var_0 == -2 )
    {
        foreach ( var_2 in [ self.primaryweapon, self.secondaryweapon ] )
        {
            if ( isdefined( var_2 ) )
            {
                var_3 = weaponclipsize( var_2 );
                self setweaponammoclip( var_2, var_3 );
                self givemaxammo( var_2 );
            }
        }

        scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );
    }
    else if ( var_0 == -1 )
        scripts\mp\gametypes\br_weapons.gsc::debug_spawncover_badnodetest();
    else if ( var_0 > 0 )
    {
        foreach ( var_6 in [ self.primaryweapon, self.secondaryweapon ] )
        {
            if ( isdefined( var_6 ) )
            {
                var_3 = weaponclipsize( var_6 );
                self setweaponammoclip( var_6, var_3 );
                var_2 = asmdevgetallstates( var_6 );
                var_7 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_2 );

                if ( isdefined( var_7 ) )
                    scripts\mp\gametypes\br_weapons.gsc::br_ammo_give_type( self, var_7, var_3 * var_0 );
            }
        }

        scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );
    }

    thread scripts\mp\gametypes\br.gsc::defend_wave_2();
}

_id_12613()
{
    self skydive_interrupt();
    scripts\cp_mp\utility\player_utility::_freezecontrols( 1 );
    self.br_contractxpearned = spawn( "script_model", self.origin );
    self.br_contractxpearned setmodel( "tag_origin" );
    self.br_contractxpearned unmarkkeyframedmover( 1 );
    self playerlinkto( self.br_contractxpearned );
    self playerlinkedoffsetenable();
    allowvipdamage();
    self.br_contractxpearned delete();
    scripts\cp_mp\utility\player_utility::_freezecontrols( 0, 1 );
}

allowvipdamage()
{
    self endon( "disconnect" );
    wait 1;
    var_0 = self.origin;
    var_1 = spawnstruct();
    var_1.origin = self.origin;
    var_1.angles = self.angles;
    var_1.owner = self;
    var_1.spawntype = "GAME_MODE";
    var_1.cannotbesuspended = 1;
    var_1.modelname = "veh_s4_mil_air_dalpha_wz";
    var_1.vehicletype = "a10_warthog_fd";
    var_2 = spawnstruct();
    var_3 = _calloutmarkerping_isvehicleoccupiedbyenemy::bot_gametype_set_role( var_1, var_2 );

    if ( isdefined( var_3 ) )
    {
        wait 2;

        while ( !isdefined( var_3.vehiclename ) )
        {
            var_3 endon( "death" );
            waitframe();
        }

        self unlink();
        var_4 = "pilot";
        scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_enter( var_3, var_4, self );
    }
}

emp_drone_proximity_explode( var_0, var_1 )
{
    var_2 = 4.0;
    var_3 = 3.0;
    var_4 = var_2 + var_3;

    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
    {
        scripts\mp\gametypes\br.gsc::emp_drone_proximity_explode( var_0 );
        return;
    }

    if ( self calloutmarkerping_getent() )
    {
        self setclientomnvar( "ui_br_extended_load_screen", 0 );
        return;
    }

    foreach ( var_6 in level.players )
        var_6 clearsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 1 );

    thread scripts\mp\gametypes\br.gsc::emp_drone_should_take_damage();

    if ( !isdefined( self.thrust_fx_model ) )
    {
        var_8 = runkilltriger( self.team, var_1 );
        var_9 = var_8 > 0;
        var_10 = undefined;
        var_11 = max( var_8 - var_4, 0 );

        if ( var_9 )
        {
            var_10 = ai_spawn_intel_extras( var_8 );
            var_12 = scripts\mp\utility\teams::getteamdata( self.team, "teamCount" );

            if ( var_12 == 1 )
            {
                self setclientomnvar( "ui_show_spectateHud", self getentitynumber() );
                scripts\mp\gametypes\br_spectate.gsc::_id_1252A();
                scripts\mp\gametypes\br.gsc::spawnintermission( self.origin + ( 0, 0, 100 ), self.angles );
                scripts\mp\spectating::setdisabled();
                scripts\mp\utility\lower_message::setlowermessageomnvar( 9, int( gettime() + var_10 ) );
            }

            scripts\mp\utility\lower_message::setlowermessageomnvar( 9, int( gettime() + var_10 ) );
            var_13 = _id_12669( var_10 );

            if ( isdefined( var_13 ) && var_13 == "select_defender" )
                _id_12561( "defender" );
            else if ( isdefined( var_13 ) && var_13 == "select_attacker" )
                _id_12561( "attacker" );
        }

        self._id_1286F = _id_1257C();

        if ( isdefined( self._id_1286F ) )
            self._id_1286F.index = -1;

        var_14 = scripts\mp\gametypes\br_public.gsc::_id_126B8( self._id_1286F.origin, self._id_1286F.height );
        var_15 = getdvarint( "scr_br_drop_prespawn_timeout_ms", 9000 );
        scripts\mp\gametypes\br_public.gsc::_id_126B9( var_14, var_15, 1, 0, var_10 );

        if ( var_9 )
        {
            var_16 = 1.0;
            var_17 = 0.25;
            var_18 = var_16 - var_17;
            thread scripts\mp\gametypes\br_gulag.gsc::fadeoutin( var_16 );
            wait( var_18 );
            scripts\mp\gametypes\br_spectate.gsc::_id_1252A();
            scripts\mp\gametypes\br.gsc::spawnintermission( var_14, self._id_1286F.angles );
            scripts\mp\spectating::setdisabled();
            scripts\mp\gametypes\br.gsc::ending_fade_in( var_14[0], var_14[1], level.juggheli_spawner_jammer5_3 );
            self setclientomnvar( "ui_br_transition_type", 2 );
            wait( var_17 );
            var_19 = max( var_8 - var_11 - var_16, 0 );
            wait( var_19 );
            scripts\mp\gametypes\br_public.gsc::_id_1252B();
            self setclientomnvar( "ui_show_spectateHud", -1 );
        }
        else
        {
            var_20 = 0.5;
            scripts\mp\gametypes\br.gsc::ending_fade_in( var_14[0], var_14[1], level.juggheli_spawner_jammer5_3 );
            self setclientomnvar( "ui_br_transition_type", 4 );
            wait( var_20 );
            scripts\mp\gametypes\br.gsc::spawnintermission( var_14, self._id_1286F.angles );
            scripts\mp\spectating::setdisabled();
            scripts\mp\gametypes\br_public.gsc::_id_126ED();
        }
    }
    else
    {
        self.thrust_fx_model = undefined;
        scripts\mp\gametypes\br_public.gsc::_id_126ED();
    }

    scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    self freezecontrols( 0 );
}

ai_spawn_intel_extras( var_0 )
{
    if ( getdvarint( "scr_br_ter_enable_wave_respawn", 1 ) != 0 )
        return var_0 * 1000;
    else
        return level.deletetimedrunhud._id_12CA1 * 1000;
}

_id_12669( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( getdvarint( "scr_br_ter_enable_respawn_skip", 0 ) == 1 )
    {
        self._id_14391 = scripts\mp\hud_util::createfontstring( "default", 1.5 );
        self._id_14391 scripts\mp\hud_util::setpoint( "center", "middle", 0, 50 );
        self._id_14391.label = &"BR_TER/RESPAWN";
        var_1 = gettime() + var_0;
        var_2 = gettime();

        while ( gettime() < var_1 )
        {
            var_3 = 1000;
            var_4 = gettime() - var_2;

            if ( self usebuttonpressed() && var_4 > var_3 )
            {
                self._id_14391 destroy();
                return "select_defender";
            }

            waitframe();
        }

        if ( getdvarint( "scr_br_ter_wait_to_attack", 0 ) == 1 )
        {
            self._id_14391 destroy();
            return "select_attacker";
        }

        self._id_14391 destroy();
    }
    else
        wait( var_0 / 1000 );

    return "timeout";
}

_id_1257C( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 0;

    var_1 = self.team;
    var_2 = _id_1257D();
    var_3 = [];

    if ( var_2 != "base" )
    {
        foreach ( var_5 in level.deletetimedrunhud.types["location"] )
        {
            var_6 = var_2 == "defender" && var_5.team == self.team || var_2 == "attacker" && var_5.team != self.team;

            if ( var_6 && var_5.state == "current" )
                var_3[var_3.size] = var_5;
        }
    }

    if ( !var_3.size )
    {
        foreach ( var_9 in level.deletetimedrunhud.types["base"] )
        {
            if ( var_9.team == self.team )
                var_3[var_3.size] = var_9;
        }
    }

    var_5 = undefined;
    var_11 = undefined;

    if ( usestartspawns() )
    {
        var_9 = _id_12565();

        if ( isdefined( var_9.targets["spawn_start"] ) )
        {
            var_11 = "spawn_start";
            var_5 = var_9;
        }

        if ( _id_13875() )
        {
            if ( isdefined( var_5.targets["spawn_start_plane"] ) )
                var_11 = "spawn_start_plane";
            else
                var_11 = "spawn_plane";
        }
    }

    if ( !isdefined( var_11 ) )
    {
        if ( var_2 == "attacker" )
            var_11 = "spawn_att";
        else
            var_11 = "spawn_def";

        if ( canspawnvehicle() && getdvarint( "scr_br_ter_spawn_attack_dauntless", 0 ) == 1 && var_2 == "attacker" )
            var_11 = "spawn_plane";

        if ( isdefined( self._id_1366E ) )
        {
            foreach ( var_13 in var_3 )
            {
                if ( self._id_1366E == var_13 )
                {
                    var_5 = var_13;
                    break;
                }
            }
        }

        if ( !isdefined( var_5 ) )
        {
            var_5 = scripts\engine\utility::random( var_3 );
            self._id_1366E = var_5;
        }
    }

    var_15 = var_5.targets[var_11][var_5._id_11E85[var_11]];

    if ( !var_0 )
    {
        var_5._id_11E85[var_11]++;

        if ( var_5._id_11E85[var_11] >= var_5.targets[var_11].size )
            var_5._id_11E85[var_11] = 0;
    }

    var_15.height = 0;
    return var_15;
}

_id_1452D( var_0 )
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "infil_complete" );
    level.teamdata[var_0]["nextRespawn"] = 0;

    if ( level.deletetimedrunhud._id_12CA1 == 0 )
        return;

    for (;;)
    {
        level.teamdata[var_0]["nextRespawn"] = gettime() + level.deletetimedrunhud._id_12CA1 * 1000;
        wait( level.deletetimedrunhud._id_12CA1 );
    }
}

runkilltriger( var_0, var_1 )
{
    if ( level.deletetimedrunhud._id_12CA1 == 0 )
        return 0;

    if ( !isdefined( var_1 ) )
        var_1 = level.teamdata[var_0]["nextRespawn"];

    var_2 = max( var_1 - gettime(), 0 );
    var_3 = int( var_2 / 1000 );
    return var_3;
}

_id_1266E( var_0 )
{
    _id_1268B( "attacker", var_0 );
}

_id_12678( var_0 )
{
    _id_1268B( "defender", var_0 );
}

_id_12561( var_0 )
{
    var_1 = undefined;

    foreach ( var_3 in level.deletetimedrunhud.types["location"] )
    {
        if ( var_3.state == "current" && var_3.team == self.team )
        {
            var_1 = var_3;
            break;
        }
    }

    if ( isdefined( var_1 ) )
        _id_1268B( var_0, var_1 );
    else
    {
        var_5 = _id_12565();
        _id_1268B( var_0, var_5 );
    }
}

_id_1268B( var_0, var_1 )
{
    self._id_136A6 = gettime();
    self.spawntype = var_0;
    self._id_1366E = var_1;
}

_id_1257D()
{
    if ( !isdefined( self.spawntype ) )
        return "base";

    return self.spawntype;
}

_id_1198A( var_0, var_1, var_2, var_3 )
{
    scripts\mp\objidpoolmanager::update_objective_state( self.objidnum, var_0 );
    scripts\mp\objidpoolmanager::update_objective_setbackground( self.objidnum, var_1 );
    _func_042C( self.objidnum, var_2 );
    objective_setshowprogress( self.objidnum, var_3 );
}

_id_11984()
{
    self notify( "objective_hot" );
    self endon( "objective_hot" );
    scripts\mp\objidpoolmanager::update_objective_sethot( self.objidnum, 0 );
    wait 0.1;
    scripts\mp\objidpoolmanager::update_objective_sethot( self.objidnum, 1 );
    wait 0.5;
    scripts\mp\objidpoolmanager::update_objective_sethot( self.objidnum, 0 );
}

_id_11991()
{
    if ( level.deletetimedrunhud.spawnaccesscards._id_14291 == 1 )
        _id_11994( "icon", ( 1, 0.760784, 0.0823529 ), 1.0 );
    else
        _id_11994( "label_bg", ( 1, 0.760784, 0.0823529 ), 1.0 );
}

_id_11992()
{
    thread _id_11995( "bar", ( 1, 0.341176, 0.341176 ) );
    thread _id_11984();
}

_id_11995( var_0, var_1 )
{
    if ( isdefined( self.spawnanglemax ) )
    {
        foreach ( var_3 in level.deletetimedrunhud.teams )
        {
            var_4 = self.spawnanglemax.monitor_hack_prox[var_3][var_0];

            if ( isdefined( var_4 ) )
                var_4 thread spawn_wheelson_blinking_lights( var_1 );
        }
    }
}

_id_11994( var_0, var_1, var_2 )
{
    if ( isdefined( self.spawnanglemax ) )
    {
        foreach ( var_4 in level.deletetimedrunhud.teams )
        {
            var_5 = self.spawnanglemax.monitor_hack_prox[var_4][var_0];

            if ( isdefined( var_5 ) )
                var_5 thread spawn_weapon_box_cache( var_1, var_2 );
        }
    }
}

_id_11990( var_0 )
{
    if ( isdefined( self.spawnanglemax ) )
    {
        foreach ( var_2 in level.deletetimedrunhud.teams )
        {
            foreach ( var_4 in self.spawnanglemax.monitor_hack_prox[var_2] )
            {
                if ( !isdefined( var_4 ) )
                    continue;

                var_4.alpha = var_0;
            }
        }
    }
}

_id_11993()
{
    if ( isdefined( self.spawnanglemax ) )
    {
        foreach ( var_1 in level.deletetimedrunhud.teams )
        {
            foreach ( var_4, var_3 in self.spawnanglemax.monitor_hack_prox[var_1] )
            {
                if ( !isdefined( var_3 ) )
                    continue;

                if ( var_4 == "label_bg" )
                {
                    if ( var_1 == self.team )
                    {
                        var_3 spawn_weapons_by_player_count();
                        var_3 spawndistancemin( ( 1, 0.341176, 0.341176 ) );
                    }
                    else
                    {
                        var_3 spawn_weapons_by_player_count();
                        var_3 spawndistancemin( ( 0.337255, 0.690196, 0.929412 ) );
                    }

                    continue;
                }

                if ( var_4 == "label" )
                {
                    if ( var_1 == self.team )
                    {
                        var_3 spawn_weapons_by_player_count();
                        var_3 spawndistancemin( ( 1, 0.341176, 0.341176 ) );
                    }
                    else
                    {
                        var_3 spawn_weapons_by_player_count();
                        var_3 spawndistancemin( ( 0.337255, 0.690196, 0.929412 ) );
                    }

                    continue;
                }

                if ( var_4 == "icon" )
                {
                    if ( var_1 == self.team )
                    {
                        var_3 setshader( "ui_icon_br_ter_secured", 15, 15 );

                        if ( level.deletetimedrunhud.spawnaccesscards._id_14291 == 1 )
                        {
                            var_3 spawn_weapons_by_player_count();
                            var_3 spawndistancemin( ( 1, 0.341176, 0.341176 ) );
                        }
                    }
                    else
                    {
                        var_3 setshader( "ui_icon_br_ter_lost", 15, 15 );

                        if ( level.deletetimedrunhud.spawnaccesscards._id_14291 == 1 )
                        {
                            var_3 spawn_weapons_by_player_count();
                            var_3 spawndistancemin( ( 0.337255, 0.690196, 0.929412 ) );
                        }
                    }

                    continue;
                }

                if ( var_4 == "bar" )
                {
                    var_3.alpha = 0;
                    continue;
                }

                if ( var_4 == "count" )
                    var_3 destroy();
            }
        }
    }
}

allow_deleteme_on_path( var_0 )
{
    var_1 = 0;

    foreach ( var_3 in var_0 )
    {
        if ( istrue( var_3._id_12C46 ) )
            var_1++;
    }

    return var_1;
}

_id_11996()
{
    var_0 = isdefined( self.targets["damageable"] );
    var_1 = isdefined( self.targets["agent"] );
    var_2 = 0;
    var_3 = 0;

    if ( var_0 )
        var_3 = var_3 + allow_deleteme_on_path( self.targets["damageable"] );

    if ( var_1 )
        var_3 = var_3 + allow_deleteme_on_path( self.targets["agent"] );

    if ( var_0 )
    {
        foreach ( var_5 in self.targets["damageable"] )
        {
            if ( var_5.state == "destroyed" && istrue( var_5._id_12C46 ) )
                var_2++;
        }
    }

    if ( var_1 )
    {
        foreach ( var_8 in self.targets["agent"] )
        {
            if ( var_8.state == "destroyed" && istrue( var_8._id_12C46 ) )
                var_2++;
        }
    }

    var_10 = var_2 / var_3;
    objective_setprogress( self.objidnum, var_10 );

    if ( isdefined( self.spawnanglemax ) )
    {
        foreach ( var_12 in level.deletetimedrunhud.teams )
        {
            var_13 = self.spawnanglemax.monitor_hack_prox[var_12]["bar"];

            if ( isdefined( var_13 ) )
                var_13 setshader( "progress_bar_fill", int( ( 1.0 - var_10 ) * level.deletetimedrunhud.spawnaccesscards.choppersupport_watchforlaststand ), 15 );

            var_14 = self.spawnanglemax.monitor_hack_prox[var_12]["count"];

            if ( isdefined( var_14 ) )
                var_14 setvalue( var_3 - var_2 );
        }
    }
}

_id_11989( var_0 )
{
    foreach ( var_2 in self.targets["damageable"] )
    {
        if ( var_0 )
        {
            if ( var_2.state == "protected" )
                var_2 is_relic_collat_dmg_active( "undamaged" );

            continue;
        }

        var_2 is_relic_collat_dmg_active( "protected" );
    }
}

_id_11999()
{
    for (;;)
    {
        if ( _id_11974() )
            break;

        self waittillmatch( "child_changed_state", "destroyed" );
    }
}

_id_11974()
{
    if ( !isdefined( self.targets["outpost"] ) )
        return 1;

    if ( !self.targets["outpost"].size )
        return 1;

    foreach ( var_1 in self.targets["outpost"] )
    {
        if ( var_1.state == "destroyed" )
            return 1;
    }

    return 0;
}

_id_11998()
{
    for (;;)
    {
        if ( _id_11973() )
            break;

        self waittillmatch( "child_changed_state", "destroyed" );
    }
}

_id_11973()
{
    if ( !isdefined( self.targets["outpost"] ) )
        return 1;

    foreach ( var_1 in self.targets["outpost"] )
    {
        if ( var_1.state != "destroyed" )
            return 0;
    }

    return 1;
}

_id_11997()
{
    for (;;)
    {
        _id_11996();

        if ( _id_11972() )
            break;

        self waittill( "damageable_state_change" );
    }
}

_id_11972()
{
    var_0 = isdefined( self.targets["damageable"] );
    var_1 = isdefined( self.targets["agent"] );

    if ( !var_0 && !var_1 )
        return 1;

    if ( var_0 )
    {
        foreach ( var_3 in self.targets["damageable"] )
        {
            if ( var_3.state != "destroyed" )
                return 0;
        }
    }

    if ( var_1 )
    {
        foreach ( var_6 in self.targets["agent"] )
        {
            if ( var_6.state != "destroyed" )
                return 0;
        }
    }

    return 1;
}

_id_11971( var_0 )
{
    if ( !isdefined( self.targets[var_0] ) )
        return;

    foreach ( var_2 in self.targets[var_0] )
        var_2 thread _id_14229();
}

_id_14229()
{
    if ( self.state == "activated" )
        return;

    self.state = "activated";
    self notify( "activated" );
    scripts\mp\flags::gameflagwait( "ter_vehicle_spawn" );
    _id_1435D();

    if ( !canspawnvehicle() )
        return;

    thread _id_14269();
}

_id_14269()
{
    self endon( "deactivated" );
    var_0 = spawnstruct();

    for (;;)
    {
        var_1 = scripts\mp\gametypes\br_vehicles.gsc::tryspawnavehicle( self.name, self, "ter_spawns", var_0 );

        if ( !isdefined( var_1 ) )
            return;

        self.ent = var_1;
        self.ent._id_13A85 = self;

        if ( level.deletetimedrunhud._id_1420A < 0 )
            return;

        var_1 waittill( "death" );
        wait( level.deletetimedrunhud._id_1420A );
    }
}

_id_11970( var_0 )
{
    if ( !isdefined( self.targets[var_0] ) )
        return;

    foreach ( var_2 in self.targets[var_0] )
        var_2 thread _id_1422A();
}

_id_1422A()
{
    _id_14229();
    _id_1423D();
}

_id_11979( var_0 )
{
    if ( !isdefined( self.targets[var_0] ) )
        return;

    foreach ( var_2 in self.targets[var_0] )
        var_2 thread _id_1423D();
}

_id_1423D()
{
    if ( self.state == "deactivated" )
        return;

    self.state = "deactivated";
    self notify( "deactivated" );
}

_id_1196F( var_0 )
{
    if ( !isdefined( self.targets[var_0] ) )
        return;

    foreach ( var_2 in self.targets[var_0] )
        var_2 thread binoculars_used();
}

binoculars_used()
{
    if ( self.state == "active" )
        return;

    scripts\mp\flags::gameflagwait( "ter_agent_spawn" );
    _id_1435D();
    thread birds_in_square_monitor();
}

birds_in_square_monitor()
{
    self endon( "destroyed" );
    var_0 = spawnstruct();

    for (;;)
    {
        var_1 = brc130airdropcratecapturecallback( self.origin, self.angles, self.team );

        if ( !isdefined( var_1 ) )
        {
            waitframe();
            continue;
        }

        self.ent = var_1;
        self.ent._id_13A85 = self;
        is_relic_collat_dmg_active( "active" );
        var_1 waittill( "death", var_2 );
        binoculars_watchracedeath( var_2 );
        is_relic_collat_dmg_active( "destroyed" );
        return;
    }
}

_id_11978( var_0 )
{
    if ( !isdefined( self.targets[var_0] ) )
        return;

    foreach ( var_2 in self.targets[var_0] )
        var_2 thread binoculars_watchraceadson();
}

binoculars_watchraceadson()
{
    if ( self.state == "destroyed" )
        return;

    self.ent bot_custom_classes_allowed();
    is_relic_collat_dmg_active( "destroyed" );
}

_id_1197A()
{
    var_0 = self.name;

    if ( !isdefined( level.deletetimedrunhud._id_1196C[self.name] ) )
        var_0 = "default";

    return level.deletetimedrunhud._id_1196C[var_0];
}

_id_1197F()
{
    return _id_1197B( "securing" );
}

_id_1197E()
{
    return _id_1197B( "secured" );
}

_id_1197C()
{
    return _id_1197B( "losing" );
}

_id_1197D()
{
    return _id_1197B( "lost" );
}

_id_1197B( var_0 )
{
    var_1 = _id_1197A();
    return var_0 + var_1._id_14308;
}

_id_12565()
{
    foreach ( var_1 in level.deletetimedrunhud.types["base"] )
    {
        if ( var_1.team == self.team )
            return var_1;
    }

    return undefined;
}

_id_125B7( var_0 )
{
    var_1 = spawnstruct();
    var_1._id_133E4 = 1;
    scripts\mp\gametypes\br_plunder.gsc::playersetplundercount( self.plundercount + var_0, var_1 );
}

respawn_flare_used( var_0 )
{
    if ( var_0 == "allies" )
        return "axis";
    else
        return "allies";
}

request_crate_drop( var_0 )
{
    return relic_nobulletdamage_modifyplayerdamage( "means_of_death", var_0 );
}

safecheckweapon( var_0 )
{
    return relic_nobulletdamage_modifyplayerdamage( "weapon_type", var_0 );
}

runpain( var_0 )
{
    return relic_nobulletdamage_modifyplayerdamage( "weapon_class_name", var_0 );
}

runlogicbasedoncircuitbreaker( var_0 )
{
    return relic_nobulletdamage_modifyplayerdamage( "weapon_base_name", var_0 );
}

relic_nobulletdamage_modifyplayerdamage( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        return 1.0;

    var_1 = tolower( var_1 );
    var_2 = level.deletetimedrunhud.is_position_open[var_0][var_1];

    if ( !isdefined( var_2 ) )
    {
        var_3 = level.deletetimedrunhud.is_raid_gamemode[var_0][var_1];

        if ( !isdefined( var_3 ) )
            var_3 = 1.0;

        var_2 = getdvarfloat( "scr_br_damage_scale_" + var_0 + "_" + var_1, var_3 );
        level.deletetimedrunhud.is_position_open[var_0][var_1] = var_2;
    }

    return var_2;
}

dmzwincost( var_0 )
{
    foreach ( var_2 in level.deletetimedrunhud.teams )
        dmztutendgame( var_0, var_2 );
}

dmztutendgame( var_0, var_1 )
{
    if ( unfreezeplayercontrols( var_0, var_1 ) )
        return;

    level thread scripts\mp\utility\dialog::leaderdialog( var_0, var_1 );
    _id_13287( var_0, var_1 );
}

unfreezeplayercontrols( var_0, var_1 )
{
    var_2 = rungwperif_tracers( var_0 );

    if ( !isdefined( var_2 ) || var_2 == 0 )
        return 0;

    var_3 = rungwperifeffets( var_0, var_1 );

    if ( !isdefined( var_3 ) )
        return 0;

    return gettime() < var_3 + var_2;
}

_id_13287( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
        level.deletetimedrunhud.vo._id_13B7D[var_1][var_0] = gettime();
    else
    {
        foreach ( var_1 in level.deletetimedrunhud.teams )
            _id_13287( var_0, var_1 );
    }
}

rungwperifeffets( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
        return level.deletetimedrunhud.vo._id_13B7D[var_1][var_0];
    else
    {
        var_2 = undefined;

        foreach ( var_1 in level.deletetimedrunhud.teams )
        {
            var_4 = rungwperifeffets( var_0, var_1 );

            if ( isdefined( var_2 ) )
            {
                if ( isdefined( var_4 ) && var_4 < var_2 )
                    var_2 = var_4;

                continue;
            }

            var_2 = var_4;
        }
    }
}

_id_13286( var_0, var_1 )
{
    var_2 = getdvarint( "scr_br_ter_dialog_debounce_" + var_0, var_1 );
    level.deletetimedrunhud.vo._id_13B72[var_0] = var_2;
}

rungwperif_tracers( var_0 )
{
    if ( !isdefined( level.deletetimedrunhud.vo._id_13B72[var_0] ) )
        _id_13286( var_0, 0 );

    return level.deletetimedrunhud.vo._id_13B72[var_0];
}

_id_1435D()
{
    while ( level.deletetimedrunhud.waittillplayerlanded == gettime() )
        waitframe();

    level.deletetimedrunhud.waittillplayerlanded = gettime();
}

usestartspawns()
{
    return !scripts\mp\flags::gameflag( "infil_complete" );
}

is_module_active( var_0 )
{
    var_1 = self._id_13A85;

    if ( isdefined( var_0.attacker ) )
    {
        if ( istrue( var_1._id_12C46 ) )
        {
            var_0.attacker thread scripts\mp\rank::scoreeventpopup( "br_ter_obj_destroyed" );
            scripts\mp\utility\sound::playsoundonplayers( "mp_bodycount_tick_positive", respawn_flare_used( var_1.team ) );
            scripts\mp\utility\sound::playsoundonplayers( "mp_bodycount_tick_negative", var_1.team );
            var_0.attacker _id_125B7( level.deletetimedrunhud.is_greater_than_equal_to );
        }

        var_1 is_moving_platform_train( var_0 );
    }

    var_1 is_relic_collat_dmg_active( "destroyed" );
}

is_moving_platform_train( var_0 )
{
    if ( level.deletetimedrunhud.is_in_kill_zone_or_under_bridge_zone > 0 )
    {
        var_1 = level.deletetimedrunhud.is_in_kill_zone_or_under_bridge_zone;

        if ( level.deletetimedrunhud.is_inflictor_a_carepackage > var_1 )
            var_1 = randomintrange( var_1, level.deletetimedrunhud.is_inflictor_a_carepackage );

        var_2 = [];

        for ( var_3 = 0; var_3 < level.deletetimedrunhud.is_in_gas; var_3++ )
            var_2[var_2.size] = scripts\engine\utility::random( level.deletetimedrunhud.is_killstreak_valid_for_swat );

        for ( var_3 = 0; var_3 < level.deletetimedrunhud.is_hostage_oob; var_3++ )
            var_2[var_2.size] = scripts\engine\utility::random( level.deletetimedrunhud.is_kidnapping_player );

        var_4 = 0;

        if ( level.deletetimedrunhud.is_helicopter_player_occupied && isdefined( var_0.objweapon ) )
        {
            var_5 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_0.objweapon );

            if ( isdefined( var_5 ) )
            {
                var_2[var_2.size] = var_5;
                var_4 = 1;
            }
        }

        for ( var_3 = 0; var_3 < level.deletetimedrunhud.is_helicopter_player_occupied - var_4; var_3++ )
            var_2[var_2.size] = scripts\engine\utility::random( level.deletetimedrunhud.is_instant_use_munition );

        var_2 = scripts\engine\utility::array_randomize( var_2 );
        var_6 = min( var_1, var_2.size );
        var_7 = scripts\mp\gametypes\br_pickups.gsc::test_ai_anim();
        var_8 = level.deletetimedrunhud.is_goal_crowded[self.name];

        for ( var_3 = 0; var_3 < var_6; var_3++ )
        {
            var_9 = var_2[var_3];
            var_10 = self.origin + rotatevector( var_8._id_11A3F, self.angles );
            var_11 = self.angles + ( 0, var_8._id_11A49, 0 );
            scripts\mp\gametypes\br_lootcache.gsc::_id_11A41( var_9, var_7, var_10, var_11, 1, 0 );
        }
    }
}

is_on( var_0 )
{
    var_1 = var_0.damage;
    var_2 = self._id_13A85;
    var_3 = getdvarint( "scr_br_ter_allow_friendly_damage", 0 );

    if ( isdefined( var_0.attacker ) && var_2.team == var_0.attacker.team && !var_3 )
        var_1 = 0;
    else if ( getdvarint( "scr_br_ter_one_shot_kill", 0 ) )
        var_1 = 99999;
    else if ( isdefined( var_0.inflictor ) && var_0.inflictor scripts\cp_mp\vehicles\vehicle::isvehicle() )
    {
        if ( var_0.inflictor vehicle_getspeed() < level.deletetimedrunhud.is_so_stars_enabled )
            var_1 = 0;
        else if ( isdefined( var_2._id_11E89 ) && gettime() < var_2._id_11E89 )
            var_1 = 0;
        else
        {
            var_1 = level.deletetimedrunhud.is_same_combat_action;
            var_2._id_11E89 = gettime() + level.deletetimedrunhud.is_scriptable_healthy;
        }
    }
    else
    {
        var_1 = var_1 * request_crate_drop( var_0.meansofdeath );

        if ( isdefined( var_0.objweapon ) )
        {
            var_1 = var_1 * safecheckweapon( var_0.objweapon.type );
            var_1 = var_1 * runpain( var_0.objweapon.classname );
            var_1 = var_1 * runlogicbasedoncircuitbreaker( var_0.objweapon.basename );
        }

        var_1 = int( ceil( var_1 ) );
    }

    if ( var_1 > 0 && istrue( var_2._id_12C46 ) )
    {
        if ( isdefined( var_0.attacker ) )
            var_0.attacker _id_1266E( var_2._id_13A82[0] );

        var_2 is_relic_collat_dmg_active( "damaged" );
        var_4 = var_2 is_object_allowed_in_gametype();
        dmztutendgame( var_4 _id_1197F(), respawn_flare_used( var_4.team ) );
        dmztutendgame( var_4 _id_1197C(), var_4.team );
        var_4 _id_11991();
    }

    return var_1;
}

binoculars_watchracedeath( var_0 )
{
    var_1 = self.ent;

    if ( isdefined( var_0 ) && istrue( var_1._id_12C46 ) )
    {
        var_0 thread scripts\mp\rank::scoreeventpopup( "br_ter_obj_destroyed" );
        scripts\mp\utility\sound::playsoundonplayers( "mp_bodycount_tick_positive", respawn_flare_used( self.team ) );
        scripts\mp\utility\sound::playsoundonplayers( "mp_bodycount_tick_negative", var_1.team );
        var_0 _id_125B7( level.deletetimedrunhud.is_greater_than_equal_to );
    }

    is_relic_collat_dmg_active( "destroyed" );
}

binoculars_watchraceadsoff( var_0, var_1 )
{
    var_2 = self.ent;
    var_3 = var_0;

    if ( var_3 > 0 && istrue( var_2._id_12C46 ) )
    {
        if ( isdefined( var_1 ) )
            var_1 _id_1266E( self._id_13A82[0] );

        is_relic_collat_dmg_active( "damaged" );
        var_4 = is_object_allowed_in_gametype();
        dmztutendgame( var_4 _id_1197F(), respawn_flare_used( var_4.team ) );
        dmztutendgame( var_4 _id_1197C(), var_4.team );
        var_4 _id_11991();
    }
}

arenaloadouts_getoverrideweaponswithgroup( var_0, var_1 )
{
    var_2 = self.ent;
    var_3 = var_0;

    if ( var_3 > 0 && istrue( var_2._id_12C46 ) )
    {
        if ( isdefined( var_1 ) )
            var_1 _id_1266E( self._id_13A82[0] );

        is_relic_collat_dmg_active( "damaged" );
        var_4 = is_object_allowed_in_gametype();
        dmztutendgame( var_4 _id_1197F(), respawn_flare_used( var_4.team ) );
        dmztutendgame( var_4 _id_1197C(), var_4.team );
        var_4 _id_11991();
    }
}

is_one_player_near_point2d()
{
    if ( self.is_minimap_forcedisabled == "scriptable" )
        thread is_playing_vo();
    else if ( self.is_minimap_forcedisabled == "script_model" )
        thread is_point_in_cylinder();
    else if ( self.is_minimap_forcedisabled == "jugg_agent" )
        thread is_operations_gametype();
    else if ( self.is_minimap_forcedisabled == "aa_turret" )
        thread is_opened();
}

is_playing_vo()
{
    self endon( "monitorDamageEnd" );
    self.ent setscriptablepartstate( "base", "unprotected" );

    while ( self.ent getscriptablepartstate( "base" ) != "destroyed" )
        waitframe();

    is_relic_collat_dmg_active( "destroyed" );
}

is_point_in_cylinder()
{
    var_0 = level.deletetimedrunhud.is_goal_crowded[self.name];
    self.ent scripts\mp\damage::monitordamage( var_0.health, "hitequip", ::is_module_active, ::is_on );
}

is_operations_gametype()
{
    self endon( "monitorDamageEnd" );
    self.ent endon( "death" );

    for (;;)
    {
        self.ent waittill( "damage", var_0, var_1 );
        binoculars_watchraceadsoff( var_0, var_1 );
    }
}

is_opened()
{
    self endon( "monitorDamageEnd" );
    self.ent endon( "death" );

    for (;;)
    {
        self.ent waittill( "damage", var_0, var_1 );
        arenaloadouts_getoverrideweaponswithgroup( var_0, var_1 );
    }
}

is_player_damage_disabled()
{
    if ( self.is_minimap_forcedisabled == "scriptable" )
        thread is_player_part_exposed_to_chopper_boss();
    else if ( self.is_minimap_forcedisabled == "script_model" )
        thread is_player_valid_for_team_proximity();
    else if ( self.is_minimap_forcedisabled == "jugg_agent" )
        thread is_player_in_focus_fire_attacker_list();
    else if ( self.is_minimap_forcedisabled == "aa_turret" )
        thread is_player_in_aggro();
}

is_player_part_exposed_to_chopper_boss()
{
    self.ent setscriptablepartstate( "base", "protected" );
    self notify( "monitorDamageEnd" );
}

is_player_valid_for_team_proximity()
{
    self.ent scripts\mp\damage::monitordamageend();
}

is_player_in_focus_fire_attacker_list()
{
    self.ent bot_custom_classes_allowed();
    self notify( "monitorDamageEnd" );
}

is_player_in_aggro()
{
    self notify( "monitorDamageEnd" );
}

is_relic_collat_dmg_active( var_0 )
{
    if ( var_0 == self.state )
        return;

    if ( self.is_minimap_forcedisabled == "script_model" )
    {
        switch ( var_0 )
        {
            case "protected":
                is_relic_active( var_0 );
                is_player_damage_disabled();
                break;
            case "undamaged":
                if ( isdefined( self.ent.damagetaken ) )
                    self.ent.damagetaken = 0;

                is_relic_active( var_0 );
                self.ent setscriptablepartstate( "ter_damageable", "default" );
                is_one_player_near_point2d();
                break;
            case "damaged":
                is_relic_active( var_0 );
                self.ent setscriptablepartstate( "ter_damageable", "damaged" );
                var_1 = getdvarint( "scr_br_ter_allow_enemy_repair", 0 );

                foreach ( var_3 in level.players )
                {
                    if ( !level.deletetimedrunhud.brjugg_watchgasdamage )
                    {
                        self.ent disablescriptableplayeruse( var_3 );
                        continue;
                    }

                    if ( var_1 || var_3.team == self.team )
                    {
                        self.ent enablescriptableplayeruse( var_3 );
                        continue;
                    }

                    self.ent disablescriptableplayeruse( var_3 );
                }

                break;
            case "destroyed":
                is_relic_active( var_0 );
                var_5 = level.deletetimedrunhud.is_goal_crowded[self.name];
                self.ent setmodel( var_5.modeldestroyed );
                self.ent setscriptablepartstate( "ter_damageable", "destroyed" );
                is_player_damage_disabled();
                var_6 = is_object_allowed_in_gametype();
                var_6 _id_11992();
                break;
            default:
                break;
        }
    }
    else if ( self.is_minimap_forcedisabled == "jugg_agent" || self.is_minimap_forcedisabled == "aa_turret" )
    {
        switch ( var_0 )
        {
            case "undamaged":
            case "active":
                is_relic_active( var_0 );
                is_one_player_near_point2d();
                break;
            case "damaged":
                is_relic_active( var_0 );
                break;
            case "destroyed":
                is_relic_active( var_0 );
                is_player_damage_disabled();
                var_6 = is_object_allowed_in_gametype();
                var_6 _id_11992();
                break;
            case "protected":
                is_relic_active( var_0 );
                break;
            default:
                break;
        }
    }

    self.state = var_0;

    foreach ( var_8 in self._id_13A82 )
        var_8 notify( "damageable_state_change", self );
}

is_riding_heli( var_0, var_1, var_2, var_3, var_4 )
{
    var_3 _id_12678( var_0.entity._id_13A85._id_13A82[0] );
    var_3 thread scripts\mp\rank::scoreeventpopup( "br_ter_obj_repaired" );
    var_3 playlocalsound( "mp_bodycount_tick_positive" );
    var_3 _id_125B7( level.deletetimedrunhud.is_main_pilot );
    var_0.entity._id_13A85 is_relic_collat_dmg_active( "undamaged" );
}

is_relic_active( var_0 )
{
    var_1 = self;
    var_2 = self.team;
    var_3 = respawn_flare_used( self.team );

    if ( !istrue( var_1._id_12C46 ) )
    {
        var_1.ent hudoutlinedisable();
        return;
    }

    var_4 = getdvarint( "scr_br_ter_outline_destroyed_destructables", 0 );

    switch ( var_0 )
    {
        case "undamaged":
        case "active":
            var_1.ent spawnc130pathstructnewinternal( var_2, "outline_depth_friendly" );
            var_1.ent spawnc130pathstructnewinternal( var_3, "outline_depth_enemy" );
            break;
        case "damaged":
            var_1.ent spawnc130pathstructnewinternal( var_2, "outline_depth_friendly_damaged" );
            var_1.ent spawnc130pathstructnewinternal( var_3, "outline_depth_enemy_damaged" );
            break;
        case "destroyed":
            if ( var_4 )
            {
                var_1.ent spawnc130pathstructnewinternal( var_2, "outline_depth_friendly_destroyed" );
                var_1.ent spawnc130pathstructnewinternal( var_3, "outline_depth_enemy_destroyed" );
            }
            else
                var_1.ent hudoutlinedisable();

            break;
        case "protected":
            var_1.ent hudoutlinedisable();
            break;
        default:
            break;
    }
}

is_object_allowed_in_gametype()
{
    return self._id_13A82[0];
}

wait_for_garage_open()
{
    _id_1435D();
    self.ent = easepower( "br_plunder_box", self.origin, self.angles );
    self.ent._id_13A85 = self;
    level.br_armory_kiosk.scriptables[level.br_armory_kiosk.scriptables.size] = self.ent;
    self.ent setscriptablepartstate( "br_plunder_box", "visible" );
    self.ent.visible = 1;
}

watchdangerresetaction()
{
    level.deletetimedrunhud.spawnaccesscards = spawnstruct();
    level.deletetimedrunhud.spawnaccesscards._id_13BDE = getdvarint( "scr_br_hud_top_offset", 40 );
    level.deletetimedrunhud.spawnaccesscards._id_14291 = getdvarint( "scr_br_ter_hud_version", 0 );
    level.deletetimedrunhud.spawnaccesscards.watchcratetimeout = getdvarint( "scr_br_ter_hud_layout", 1 );
    level.deletetimedrunhud.spawnaccesscards._id_13347 = getdvarint( "scr_br_ter_hud_show_counts", 1 );
    level.deletetimedrunhud.spawnaccesscards.enabled = getdvarint( "scr_br_ter_hud_enabled", 1 );

    if ( !level.deletetimedrunhud.spawnaccesscards.enabled )
        return;

    level.deletetimedrunhud.spawnaccesscards.choppersupport_watchforlaststand = 45;

    if ( level.deletetimedrunhud.spawnaccesscards.watchcratetimeout == 1 )
        level.deletetimedrunhud.spawnaccesscards.choppersupport_watchforlaststand = level.deletetimedrunhud.spawnaccesscards.choppersupport_watchforlaststand * 2;

    level.deletetimedrunhud.spawnaccesscards.temp = spawnstruct();
    level.deletetimedrunhud.spawnaccesscards.temp._id_11B59 = [];
    level.deletetimedrunhud.spawnaccesscards.temp._id_11B55 = [];
    level.deletetimedrunhud.spawnaccesscards.temp.disable_ignore_on_getto = [];

    foreach ( var_1 in level.deletetimedrunhud.teams )
    {
        level.deletetimedrunhud.spawnaccesscards.temp._id_11B59[var_1] = 0;
        level.deletetimedrunhud.spawnaccesscards.temp._id_11B55[var_1] = 0;
        level.deletetimedrunhud.spawnaccesscards.temp.disable_ignore_on_getto[var_1] = [];
    }

    foreach ( var_4 in self.targets["base"] )
        var_4 _id_11986( 0 );

    foreach ( var_4 in self.targets["base"] )
        var_4 _id_11977();

    level.deletetimedrunhud.spawnaccesscards.temp = undefined;
}

_id_11986( var_0 )
{
    if ( isdefined( self.spawnanglemax ) )
        return;

    self.spawnanglemax = spawnstruct();
    self.spawnanglemax.temp = spawnstruct();

    if ( isdefined( level.deletetimedrunhud.spawnaccesscards.temp.disable_ignore_on_getto[self.team][var_0] ) )
        level.deletetimedrunhud.spawnaccesscards.temp.disable_ignore_on_getto[self.team][var_0]++;
    else
        level.deletetimedrunhud.spawnaccesscards.temp.disable_ignore_on_getto[self.team][var_0] = 0;

    var_1 = level.deletetimedrunhud.spawnaccesscards.temp.disable_ignore_on_getto[self.team][var_0];
    level.deletetimedrunhud.spawnaccesscards.temp._id_11B55[self.team] = max( level.deletetimedrunhud.spawnaccesscards.temp._id_11B55[self.team], var_1 );
    level.deletetimedrunhud.spawnaccesscards.temp._id_11B59[self.team] = max( level.deletetimedrunhud.spawnaccesscards.temp._id_11B59[self.team], var_0 );
    self.spawnanglemax.temp.lasttimespawngroupcalled = var_0;
    self.spawnanglemax.temp.disable_ignore_if_near_player = level.deletetimedrunhud.spawnaccesscards.temp.disable_ignore_on_getto[self.team][var_0];

    foreach ( var_4, var_3 in self.targets["outpost"] )
        var_3 _id_11986( var_0 + 1 );
}

_id_11977()
{
    if ( isdefined( self.spawnanglemax.monitor_hack_prox ) )
        return;

    var_0 = _id_1197A();
    self.spawnanglemax.monitor_hack_prox = [];

    foreach ( var_2 in level.deletetimedrunhud.teams )
    {
        if ( !isdefined( self.spawnanglemax.monitor_hack_prox[var_2] ) )
            self.spawnanglemax.monitor_hack_prox[var_2] = [];

        var_3 = level.deletetimedrunhud.spawnaccesscards.temp._id_11B59[self.team];
        var_4 = 5;
        var_5 = level.deletetimedrunhud.spawnaccesscards.choppersupport_watchforlaststand + var_4;
        var_5 = var_5 + ( 15 + level.deletetimedrunhud.spawnaccesscards.choppersupport_watchforlaststand ) * ( var_3 - self.spawnanglemax.temp.lasttimespawngroupcalled );

        if ( level.deletetimedrunhud.spawnaccesscards.watchcratetimeout == 1 )
        {
            var_5 = var_5 - int( ( var_3 + 1 ) * ( 15 + level.deletetimedrunhud.spawnaccesscards.choppersupport_watchforlaststand ) * 0.5 );
            var_6 = 2;
        }
        else
            var_6 = 4;

        var_7 = 7.5;
        var_7 = var_7 + level.deletetimedrunhud.spawnaccesscards._id_13BDE;
        var_7 = var_7 + ( 15 + var_6 ) * self.spawnanglemax.temp.disable_ignore_if_near_player;
        var_8 = level.deletetimedrunhud.spawnaccesscards.temp._id_11B55[self.team];
        var_9 = level.deletetimedrunhud.spawnaccesscards.temp.disable_ignore_on_getto[self.team][self.spawnanglemax.temp.lasttimespawngroupcalled];

        if ( var_8 > 0 && var_9 < var_8 )
        {
            var_10 = var_6 + 15;
            var_10 = var_10 * ( ( var_8 - var_9 ) / var_8 );
            var_7 = var_7 + var_10;
        }

        var_11 = var_5;

        if ( level.deletetimedrunhud.spawnaccesscards._id_14291 != 1 )
            var_11 = var_11 + 15;

        var_12 = var_7;

        if ( self.team == var_2 )
        {
            var_5 = var_5 * -1;
            var_11 = var_11 * -1;
            var_13 = "LEFT";
        }
        else if ( level.deletetimedrunhud.spawnaccesscards.watchcratetimeout == 1 )
        {
            var_7 = var_7 + ( 15 + var_6 ) * ( var_8 + 1 );
            var_12 = var_12 + ( 15 + var_6 ) * ( var_8 + 1 );
            var_5 = var_5 * -1;
            var_11 = var_11 * -1;
            var_13 = "LEFT";
        }
        else
            var_13 = "RIGHT";

        var_14 = var_2;
        var_15 = scripts\engine\utility::ter_op( self.team == var_2, ( 0.337255, 0.690196, 0.929412 ), ( 1, 0.341176, 0.341176 ) );
        var_16 = scripts\engine\utility::ter_op( level.deletetimedrunhud.spawnaccesscards._id_14291 == 1, var_15, ( 1, 1, 1 ) );
        var_17 = hudicon( var_14, var_0.hudicon, var_16 );
        var_17 scripts\mp\hud_util::setpoint( var_13, "CENTERTOP", var_11, var_12 );
        self.spawnanglemax.monitor_hack_prox[var_2]["icon"] = var_17;

        if ( level.deletetimedrunhud.spawnaccesscards._id_14291 != 1 )
        {
            var_18 = spawnboardroom_gasmask( var_14, var_15 );
            var_18 scripts\mp\hud_util::setpoint( var_13, "CENTERTOP", var_11, var_12 );
            self.spawnanglemax.monitor_hack_prox[var_2]["label_bg"] = var_18;
        }

        var_19 = spawn_transition_camera( var_14 );
        var_19 scripts\mp\hud_util::setpoint( var_13, "CENTERTOP", var_5, var_7 );
        self.spawnanglemax.monitor_hack_prox[var_2]["bar"] = var_19;
        thread _id_11976( var_2, var_14, var_13, var_11 + 15, var_12 );
    }

    foreach ( var_23, var_22 in self.targets["outpost"] )
        var_22 _id_11977();

    self.spawnanglemax.temp = undefined;
}

_id_11976( var_0, var_1, var_2, var_3, var_4 )
{
    if ( level.deletetimedrunhud.spawnaccesscards._id_13347 == 0 )
        return;

    if ( level.deletetimedrunhud.spawnaccesscards._id_13347 == 1 )
        self waittill( "current" );

    var_5 = spawn_tut_loot( var_1 );
    var_5 scripts\mp\hud_util::setpoint( var_2, "CENTERTOP", var_3, var_4 );
    self.spawnanglemax.monitor_hack_prox[var_0]["count"] = var_5;
}

hudicon( var_0, var_1, var_2 )
{
    var_3 = newteamhudelem( var_0 );
    var_3.archived = 0;
    var_3.elemtype = "";
    var_3.width = 15;
    var_3.height = 15;
    var_3.xoffset = 0;
    var_3.yoffset = 0;
    var_3.children = [];
    var_3.sort = 0;
    var_3 spawndistancemin( var_2 );
    var_3.alpha = 1.0;
    var_3 scripts\mp\hud_util::setparent( level.uiparent );
    var_3 setshader( var_1, 15, 15 );
    var_3.hidden = 0;
    return var_3;
}

spawnboardroom_auav( var_0, var_1 )
{
    var_2 = 15 / level.fontheight;
    var_3 = newteamhudelem( var_0 );
    var_3.archived = 0;
    var_3.elemtype = "font";
    var_3.font = "default";
    var_3.fontscale = var_2;
    var_3.basefontscale = var_2;
    var_3.sort = 0;
    var_3.width = 11;
    var_3.height = 15;
    var_3.xoffset = 0;
    var_3.yoffset = 0;
    var_3.children = [];
    var_3 scripts\mp\hud_util::setparent( level.uiparent );
    var_3.hidden = 0;
    var_3.label = var_1;
    var_3 spawndistancemin( ( 1, 1, 1 ) );
    return var_3;
}

spawnboardroom_gasmask( var_0, var_1 )
{
    var_2 = newteamhudelem( var_0 );
    var_2.archived = 0;
    var_2.elemtype = "";
    var_2.width = 15;
    var_2.height = 15;
    var_2.xoffset = 0;
    var_2.yoffset = 0;
    var_2.children = [];
    var_2.sort = -1;
    var_2 spawndistancemin( var_1 );
    var_2.alpha = 1.0;
    var_2 scripts\mp\hud_util::setparent( level.uiparent );
    var_2 setshader( "progress_bar_fill", 15, 15 );
    var_2.hidden = 0;
    return var_2;
}

spawn_transition_camera( var_0 )
{
    var_1 = newteamhudelem( var_0 );
    var_1.archived = 0;
    var_1.elemtype = "";
    var_1.width = level.deletetimedrunhud.spawnaccesscards.choppersupport_watchforlaststand;
    var_1.height = 15;
    var_1.xoffset = 0;
    var_1.yoffset = 0;
    var_1.children = [];
    var_1.sort = -3;
    var_1 spawndistancemin( ( 1, 1, 1 ) );
    var_1.alpha = 1.0;
    var_1 scripts\mp\hud_util::setparent( level.uiparent );
    var_1 setshader( "progress_bar_fill", level.deletetimedrunhud.spawnaccesscards.choppersupport_watchforlaststand, 15 );
    var_1.hidden = 0;
    return var_1;
}

spawn_tut_loot( var_0 )
{
    var_1 = 15 / level.fontheight;
    var_2 = newteamhudelem( var_0 );
    var_2.archived = 0;
    var_2.elemtype = "font";
    var_2.font = "default";
    var_2.fontscale = var_1;
    var_2.basefontscale = var_1;
    var_2.sort = 0;
    var_2.width = 15;
    var_2.height = 15;
    var_2.xoffset = 0;
    var_2.yoffset = 0;
    var_2.children = [];
    var_2 scripts\mp\hud_util::setparent( level.uiparent );
    var_2.hidden = 0;
    var_2 spawndistancemin( ( 1, 1, 0 ) );
    return var_2;
}

spawndistancemin( var_0 )
{
    self.color = var_0;
    self.juggernauts_spawned = var_0;
}

spawn_wheelson_blinking_lights( var_0 )
{
    self endon( "death" );
    self notify( "end_flash" );
    self endon( "end_flash" );
    self.color = var_0;
    wait 0.2;
    self.color = self.juggernauts_spawned;
}

spawn_weapon_box_cache( var_0, var_1 )
{
    self endon( "death" );
    self endon( "end_flashing" );
    self.player_onspawn = var_0;

    if ( isdefined( self.player_origin_inside_front_zone ) )
    {
        var_2 = gettime() + var_1 * 1000;

        if ( var_2 > self.player_origin_inside_front_zone )
            self.player_origin_inside_front_zone = var_2;

        return;
    }
    else
        self.player_origin_inside_front_zone = gettime() + var_1 * 1000;

    while ( gettime() < self.player_origin_inside_front_zone )
    {
        self.color = self.player_onspawn;
        wait 0.1;
        self.color = self.juggernauts_spawned;
        wait 0.1;
    }

    spawn_weapons_by_player_count();
}

spawn_weapons_by_player_count()
{
    self.color = self.juggernauts_spawned;
    self.player_onspawn = undefined;
    self.player_origin_inside_front_zone = undefined;
    self notify( "end_flashing" );
}

target_in_range_and_fov( var_0 )
{
    if ( !isdefined( self.targets ) )
        self.targets = [];

    if ( !isdefined( self.targets[var_0] ) )
        self.targets[var_0] = [];
}

hide_bomb_case_timer( var_0, var_1 )
{
    var_2 = var_0[0];
    var_3 = var_0[1];
    var_4 = var_0[2];
    return ( ( 1 - var_2 ) * var_1 + var_2, ( 1 - var_3 ) * var_1 + var_3, ( 1 - var_4 ) * var_1 + var_4 );
}

spawnc130pathstructnewinternal( var_0, var_1 )
{
    if ( level.teamdata[var_0]["players"].size )
        self hudoutlineenableforclients( level.teamdata[var_0]["players"], var_1 );
}

canspawnvehicle()
{
    return level.vehiclecount < getdvarint( "scr_br_ter_max_vehicle_count", 120 );
}

_id_13875()
{
    return canspawnvehicle() && getdvarint( "scr_br_ter_start_in_planes", 0 );
}
