// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

createspawnweaponatpos( var_0, var_1, var_2 )
{
    var_3 = scripts\engine\trace::ray_trace( var_0, ( var_0[0], var_0[1], var_0[2] - 60 ) );
    var_4 = var_0;

    if ( var_3["fraction"] < 1.0 )
        var_4 = var_3["position"] + ( 0, 0, 2 );

    if ( !isdefined( var_1 ) )
        var_1 = ( 0, 0, 90 );

    var_0 = var_4;

    if ( isdefined( var_1 ) )
        var_1 = var_1;
    else
        var_1 = ( 0, 0, 90 );

    var_5 = scripts\mp\gametypes\br_pickups.gsc::remove_roof_nodes( var_0, var_1 );
    return weaponspawn( var_2, undefined, var_5, 1 );
}

createspawnweaponatposfromname( var_0, var_1 )
{
    var_2 = var_0;
    var_3 = scripts\engine\trace::ray_trace( var_0, ( var_0[0], var_0[1], var_0[2] - 60 ) );

    if ( var_3["fraction"] < 1.0 )
        var_2 = var_3["position"] + ( 0, 0, 2 );

    var_4 = scripts\mp\gametypes\br_pickups.gsc::remove_roof_nodes( var_0, ( 0, 0, 90 ) );
    return weaponspawn( var_1, undefined, var_4, 1 );
}

stripweaponsfromplayer()
{
    var_0 = undefined;
    var_1 = undefined;

    foreach ( var_3 in self.equippedweapons )
    {
        var_4 = scripts\mp\utility\weapon::getweaponrootname( var_3.basename );

        if ( var_4 != "iw8_fists" && var_4 != "iw8_knifestab" && var_4 != "iw8_gunless" )
        {
            if ( issameweapon( var_3 ) && var_3.inventorytype == "primary" )
            {
                var_5 = scripts\mp\utility\weapon::getweaponrootname( self.currentprimaryweapon );

                if ( var_4 == var_5 )
                    var_0 = var_3;
                else
                    var_1 = var_3;
            }
        }
    }

    if ( isdefined( var_0 ) )
        var_7 = scripts\mp\utility\weapon::getweaponrootname( var_0.basename );

    if ( isdefined( var_1 ) )
        var_8 = scripts\mp\utility\weapon::getweaponrootname( var_1.basename );

    if ( isdefined( var_0 ) || isdefined( var_1 ) )
    {
        if ( isdefined( var_0 ) )
            scripts\cp_mp\utility\inventory_utility::_takeweapon( var_0, 1 );

        if ( isdefined( var_1 ) )
            scripts\cp_mp\utility\inventory_utility::_takeweapon( var_1, 1 );

        scripts\cp_mp\utility\inventory_utility::_giveweapon( "iw8_fists_mp" );
        scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( "iw8_fists_mp" );
    }
}

playerdropweaponfrominventory( var_0 )
{
    var_1 = undefined;
    var_2 = undefined;

    foreach ( var_4 in self.equippedweapons )
    {
        var_5 = scripts\mp\utility\weapon::getweaponrootname( var_4.basename );

        if ( var_5 != "iw8_fists" && var_5 != "iw8_knifestab" )
        {
            if ( issameweapon( var_4 ) && var_4.inventorytype == "primary" )
            {
                var_6 = scripts\mp\utility\weapon::getweaponrootname( self.currentprimaryweapon );

                if ( var_5 == var_6 )
                {
                    iprintln( "PRIMARY IS " + var_5 );
                    var_1 = var_4;
                }
                else
                    var_2 = var_4;
            }
        }
    }

    var_8 = undefined;
    var_9 = undefined;
    var_10 = "";
    var_11 = "";

    if ( isdefined( var_1 ) )
        var_10 = scripts\mp\utility\weapon::getweaponrootname( var_1.basename );

    if ( isdefined( var_2 ) )
        var_11 = scripts\mp\utility\weapon::getweaponrootname( var_2.basename );

    if ( var_0 == var_10 )
    {
        var_8 = var_1;
        var_9 = var_2;
    }
    else if ( var_0 == var_11 )
    {
        var_8 = var_2;
        var_9 = var_1;
    }

    var_12 = 0;

    if ( isdefined( var_8 ) )
    {
        var_13 = self getweaponammoclip( var_8 );
        var_14 = scripts\mp\gametypes\br_pickups.gsc::test_ai_anim();
        var_15 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_14, self.origin, self.angles, self );
        var_16 = weaponspawn( var_8, self, var_15, 0 );
        var_16.count = var_13;
        scripts\cp_mp\utility\inventory_utility::_takeweapon( var_8 );

        if ( isdefined( var_9 ) )
            scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( var_9 );
        else
        {
            scripts\cp_mp\utility\inventory_utility::_giveweapon( "iw8_fists_mp" );
            scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( "iw8_fists_mp" );
        }

        br_ammo_update_weapons( self );
    }
}

weaponspawn( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = createheadicon( var_0 );
    var_6 = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( var_5, var_2, 0, var_4, var_0 );
    level._id_120AD _calloutmarkerping_handleluinotify_acknowledgedcancel::from( var_6, var_1, var_0 );
    return var_6;
}

takeweaponpickup( var_0 )
{
    var_1 = self.primaryweapons.size;

    if ( !isdefined( var_0.weapon ) )
    {
        var_2 = [];
        var_3 = undefined;

        if ( isdefined( var_0.customweaponname ) )
        {
            var_4 = var_0.customweaponname;
            var_3 = asmdevgetallstates( var_4 );
            var_3.customweaponname = var_0.customweaponname;
        }
        else if ( !isdefined( var_0.completeweapon ) )
        {
            var_3 = scripts\mp\gametypes\br_pickups.gsc::relic_vampire_globalfunc( var_0 );
            var_4 = createheadicon( var_3 );
        }
        else
        {
            var_3 = scripts\mp\class::buildweapon( var_0.loadoutprimaryfullname, var_2, "none", "none", -1 );
            var_4 = var_0.loadoutprimaryfullname;
        }

        if ( !isdefined( var_4 ) )
        {
            scripts\mp\utility\script::laststand_dogtags( "takeWeaponPickup error - scriptable not setup for pickup: " + var_0.scriptablename );
            return;
        }

        var_5 = scripts\mp\utility\weapon::getweaponrootname( var_4 );
        var_6 = var_4;
    }
    else
    {
        var_3 = var_0.weapon;

        if ( isdefined( var_0.loadoutprimaryfullname ) )
            var_6 = var_0.loadoutprimaryfullname;
        else
            var_6 = getsubstr( var_3.classname, 7, var_3.classname.size );

        var_5 = scripts\mp\utility\weapon::getweaponrootname( var_6 );
    }

    var_7 = 0;
    var_8 = undefined;
    var_9 = 0;

    foreach ( var_11 in self.primaryweapons )
    {
        if ( nullweapon( var_11 ) )
        {
            var_1--;
            continue;
        }

        if ( isnullweapon( var_11, var_3 ) )
        {
            var_9 = 1;
            var_7 = 1;
            var_8 = var_11;
        }
    }

    if ( var_1 > 1 )
    {
        if ( !self hasweapon( "iw8_fists_mp" ) )
            var_7 = 1;
        else if ( !var_9 )
            self takeweapon( "iw8_fists_mp" );
    }

    if ( var_7 )
    {
        if ( !isdefined( var_8 ) )
            var_8 = router_use_obj();

        if ( var_8.basename != "none" )
        {
            var_13 = self getweaponammoclip( var_8 );
            var_14 = self getweaponammoclip( var_8, "left" );
            var_15 = 0;

            if ( var_8.hasalternate )
            {
                var_16 = var_8 getaltweapon();

                if ( !debug_spawn_crate_on_train( var_8, var_16 ) )
                    var_15 = self getweaponammoclip( var_16 );
            }

            if ( !scripts\mp\riotshield::isriotshield( var_8 ) )
            {
                var_17 = self getweaponammostock( var_8 );
                var_18 = br_ammo_type_for_weapon( var_8 );

                if ( isdefined( var_18 ) )
                    self.br_ammo[var_18] = var_17;
            }

            var_19 = var_0.origin - self.origin;
            var_20 = vectortoyaw( var_19 );
            var_21 = !scripts\mp\gametypes\br_extract_quest.gsc::operatorsfxalias( var_8 );

            if ( var_21 )
            {
                if ( isdefined( var_0.tracknonoobplayerlocation ) && isdefined( var_0.tracknonoobplayerlocation.specific_placement_angles ) )
                {
                    var_22 = var_0.tracknonoobplayerlocation.specific_placement_angles;
                    var_23 = strtok( var_8.basename, "_" );

                    if ( scripts\mp\class::update_health_bar_to_players( var_8 ) || var_23[1] == "me" )
                        var_22 = var_22 + ( 0, 90, 0 );
                }
                else
                    var_22 = ( 0, var_20, 0 );

                var_24 = scripts\mp\gametypes\br_pickups.gsc::remove_roof_nodes( var_0.origin, var_22 );
                var_25 = tablesort( var_24.origin, 500, 500 );
                var_25[var_25.size] = self;
                var_26 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 1, 1, 0, 1 );
                var_27 = var_24.origin;
                var_28 = -1 * getdvarfloat( "bg_maxLootDropHeight", 2000.0 );
                var_29 = var_24.origin + ( 0.0, 0.0, var_28 );
                var_30 = scripts\engine\trace::ray_trace( var_27, var_29, var_25, var_26 );

                if ( var_30["fraction"] < 1.0 )
                    var_24.set_force_aitype_armored = var_30["entity"];

                var_31 = weaponspawn( var_8, self, var_24, 0 );

                if ( isdefined( var_0.tracknonoobplayerlocation ) && isdefined( var_0.tracknonoobplayerlocation.specific_placement_origin ) )
                    var_31.origin = var_0.tracknonoobplayerlocation.specific_placement_origin;

                if ( isdefined( var_0.tracknonoobplayerlocation ) && isdefined( var_0.tracknonoobplayerlocation.specific_placement_angles ) )
                    var_31.specific_placement_angles = var_0.tracknonoobplayerlocation.specific_placement_angles;

                if ( isdefined( var_31 ) )
                {
                    scripts\mp\gametypes\br_pickups.gsc::_id_119F5( var_31, var_13, var_14, var_15 );
                    var_32 = 1;
                    scripts\mp\gametypes\br_analytics.gsc::branalytics_lootdrop( self, var_8.basename, var_32, var_13 );
                }
            }

            scripts\cp_mp\utility\inventory_utility::_takeweapon( var_8 );
        }
    }

    self giveweapon( var_3 );
    self notify( "pickedupweapon", var_6, var_3 );

    if ( istrue( var_3.isweaponfromcrate ) || istrue( var_0.isweaponfromcrate ) )
    {
        var_33 = br_ammo_type_for_weapon( var_5 );

        if ( isdefined( var_33 ) )
        {
            var_34 = weaponclipsize( var_3 );
            br_ammo_give_type( self, var_33, var_34 );
        }
    }
    else
    {
        var_35 = var_0.count;
        var_36 = var_0.impulsefx;
        var_34 = weaponclipsize( var_3 );
        var_37 = 0;

        if ( var_35 > var_34 )
        {
            var_37 = var_37 + ( var_35 - var_34 );
            var_35 = var_34;
        }

        if ( var_36 > var_34 )
        {
            var_37 = var_37 + ( var_36 - var_34 );
            var_36 = var_34;
        }

        self setweaponammoclip( var_3, var_35 );
        self setweaponammoclip( var_3, var_36, "left" );

        if ( var_37 > 0 )
        {
            var_33 = br_ammo_type_for_weapon( var_3 );

            if ( isdefined( var_33 ) )
                br_ammo_give_type( self, var_33, var_37 );
        }

        if ( var_3.hasalternate )
        {
            var_38 = var_0.impactfunc_fire;
            var_39 = var_3 getaltweapon();

            if ( !debug_spawn_crate_on_train( var_3, var_39 ) )
            {
                var_40 = weaponclipsize( var_39 );

                if ( var_38 > var_40 )
                    var_38 = var_40;

                self setweaponammoclip( var_39, var_38 );
            }
        }
    }

    var_3._id_12CC1 = undefined;
    br_ammo_update_weapons( self );
    self assignweaponprimaryslot( var_3 );
    scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( var_3 );
    scripts\mp\weapons::fixupplayerweapons( self, var_3 );
    scripts\mp\weapons::updatelastweaponobj( var_3 );

    if ( isdefined( var_0.weapon ) && isent( var_0.weapon ) )
        var_0.weapon delete();

    var_41 = undefined;

    foreach ( var_43 in self.equippedweapons )
    {
        if ( issameweapon( var_43 ) && var_43.inventorytype == "primary" )
        {
            var_4 = createheadicon( var_43 );

            if ( var_4 == var_6 )
            {
                var_41 = var_43;
                break;
            }
        }
    }

    thread scripts\mp\gametypes\br_respawn.gsc::giveweaponpickup( var_6 );

    if ( isdefined( var_0.tracknonoobplayerlocation ) )
        level._id_120AE _calloutmarkerping_handleluinotify_acknowledgedcancel::from( var_0.tracknonoobplayerlocation, self, var_3 );
}

router_use_obj()
{
    var_0 = self _meth_87D5();

    if ( isdefined( var_0 ) && scripts\mp\weapons::isdroppableweapon( var_0 ) )
    {
        foreach ( var_2 in self.primaryweapons )
        {
            if ( isnullweapon( var_2, var_0 ) )
                return var_0;
        }
    }

    return self.lastdroppableweaponobj;
}

takeammopickup( var_0 )
{
    var_1 = 0;

    if ( var_0.scriptablename == "Ammo_Crate" )
    {
        var_2 = self getcurrentweapon().basename;
        var_3 = scripts\mp\utility\weapon::getweaponrootname( var_2 );
        var_4 = weaponclipsize( var_2 );
        var_5 = br_ammo_type_for_weapon( var_2 );

        if ( isdefined( var_5 ) )
            var_1 = br_ammo_give_type( self, var_5, var_4 );
    }
    else
        var_1 = br_ammo_give_type( self, var_0.scriptablename, var_0.count, 1 );

    if ( var_1 )
    {
        var_0.count = var_1;
        var_6 = 1;
    }
    else
        var_6 = 0;

    return var_6;
}

br_forcegiveweapon( var_0, var_1, var_2 )
{
    if ( !scripts\engine\utility::array_contains( level.br_pickups.br_lootguns, var_0 ) )
        var_0 = degrees_to_radians();

    var_3 = spawnstruct();
    var_3.loadoutprimaryfullname = var_0;
    var_3.scriptablename = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    var_3.completeweapon = var_2;
    var_3.count = 0;
    var_3.impulsefx = 0;
    var_3.impactfunc_fire = 0;
    var_1 takeweaponpickup( var_3 );
}

degrees_to_radians( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_0 = "ar";

    if ( !isdefined( var_1 ) )
        var_1 = "comm";

    var_2 = [];

    foreach ( var_4 in level.br_pickups.br_lootguns )
    {
        if ( issubstr( var_4, "_" + var_0 + "_" ) )
        {
            if ( issubstr( var_4, "_" + var_1 ) )
                var_2[var_2.size] = var_4;
        }
    }

    return var_2[randomint( var_2.size )];
}

br_getweaponstartingclipammo( var_0 )
{
    var_1 = weaponclipsize( var_0 );
    return int( var_1 );
}

br_forcegivecustomweapon( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( var_0 hasweapon( var_1 ) )
    {
        var_0 scripts\mp\hud_message::showerrormessage( "MP/BR_ALREADY_HOLDING_WEAPON" );
        return 0;
    }

    var_6 = var_1 hasattachment( "maxammo", 1 );
    var_7 = spawnstruct();
    var_7.weapon = var_1;
    var_7.loadoutprimaryfullname = var_2;
    var_7.scriptablename = var_3;
    var_7.origin = var_0.origin + ( 0, 0, 24 );
    var_7.count = br_getweaponstartingclipammo( var_1 );
    var_7.impulsefx = 0;
    var_7.impactfunc_fire = 0;

    if ( var_6 )
        var_7.count = 999;

    if ( isdefined( var_4 ) && isdefined( var_5 ) )
    {
        var_8 = weaponclipsize( var_1 );
        var_9 = int( ceil( var_8 * var_4 ) );
        var_7.count = int( min( var_9, var_5 ) );
    }

    if ( scripts\mp\utility\weapon::turnexfiltoside( var_1 ) )
        var_7.impulsefx = var_7.count;

    if ( var_1.hasalternate )
    {
        var_10 = var_1 getaltweapon();

        if ( !debug_spawn_crate_on_train( var_1, var_10 ) )
        {
            var_11 = weaponclipsize( var_10 );
            var_7.impactfunc_fire = var_11;

            if ( var_6 )
                var_7.impactfunc_fire = 999;
        }
    }

    if ( getdvarint( "scr_br_request_streaming_weapons", 0 ) > 0 )
        var_0 loadweaponsforplayer( [ var_7.loadoutprimaryfullname ] );

    var_0 takeweaponpickup( var_7 );

    if ( var_1.hasalternate )
    {
        var_12 = var_1 getaltweapon();

        if ( var_12.isalternate && scripts\mp\utility\weapon::attachmentmap_tobase( var_12.underbarrel ) == "ubshtgn" )
        {
            var_13 = weaponclipsize( var_12 );
            var_14 = int( var_13 );
            var_0 setweaponammoclip( var_12, var_14 );
        }
    }

    return 1;
}

br_ammo_init()
{
    level.br_ammo_types = [];
    level.br_ammo_types[0] = "brloot_ammo_919";
    level.br_ammo_types[1] = "brloot_ammo_12g";
    level.br_ammo_types[2] = "brloot_ammo_762";
    level.br_ammo_types[3] = "brloot_ammo_50cal";
    level.br_ammo_types[4] = "brloot_ammo_rocket";
    level.br_ammo_clipsize["brloot_ammo_919"] = 30;
    level.br_ammo_clipsize["brloot_ammo_12g"] = 8;
    level.br_ammo_clipsize["brloot_ammo_762"] = 30;
    level.br_ammo_clipsize["brloot_ammo_50cal"] = 8;
    level.br_ammo_clipsize["brloot_ammo_rocket"] = 1;
    level.br_ammo_max = [];
    level.br_ammo_omnvars = [];
    level.br_ammo_omnvars["brloot_ammo_919"] = "ui_br_smallarms_ammo";
    level.br_ammo_omnvars["brloot_ammo_12g"] = "ui_br_shotgun_ammo";
    level.br_ammo_omnvars["brloot_ammo_762"] = "ui_br_assault_ammo";
    level.br_ammo_omnvars["brloot_ammo_50cal"] = "ui_br_sniper_ammo";
    level.br_ammo_omnvars["brloot_ammo_rocket"] = "ui_br_rocket_ammo";
}

br_ammo_player_init()
{
    self endon( "disconnect" );
    thread br_ammo_player_reload_watch();
    thread br_ammo_player_hud_monitor();

    for (;;)
    {
        self waittill( "br_spawned" );

        if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        {
            var_0 = self getweaponslistprimaries();

            foreach ( var_2 in var_0 )
            {
                var_3 = weaponclipsize( var_2 );

                if ( isdefined( var_3 ) )
                {
                    if ( scripts\mp\utility\weapon::turnexfiltoside( var_2 ) )
                    {
                        self setweaponammoclip( var_2, var_3, "left" );
                        self setweaponammoclip( var_2, var_3, "right" );
                        continue;
                    }

                    self setweaponammoclip( var_2, var_3 );
                }
            }
        }

        foreach ( var_6 in level.br_ammo_types )
        {
            if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
            {
                self.br_ammo[var_6] = level.br_ammo_max[var_6];
                continue;
            }

            self.br_ammo[var_6] = 0;
        }

        br_ammo_update_weapons( self );
        br_ammo_player_hud_update_ammotype( "brloot_ammo_919" );
        br_ammo_player_hud_update_ammotype( "brloot_ammo_12g" );
        br_ammo_player_hud_update_ammotype( "brloot_ammo_762" );
        br_ammo_player_hud_update_ammotype( "brloot_ammo_50cal" );
        br_ammo_player_hud_update_ammotype( "brloot_ammo_rocket" );
    }
}

delay_add_to_chopper_boss_drone_target_array()
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "weapons" ) )
        return;

    br_ammo_give_type( self, "brloot_ammo_919", 30, 0 );
}

br_ammo_player_clear()
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "weapons" ) )
        return;

    foreach ( var_1 in level.br_ammo_types )
        self.br_ammo[var_1] = 0;

    self notify( "ammo_update" );
}

debug_spawnallaccesscards()
{
    var_0 = self;
    var_1 = var_0 getweaponslistprimaries();

    foreach ( var_3 in var_1 )
    {
        var_4 = br_ammo_type_for_weapon( var_3 );

        if ( isdefined( var_4 ) )
        {
            var_5 = var_0 getweaponammoclip( var_3, "right" );
            var_6 = weaponclipsize( var_3 );

            if ( var_5 < var_6 )
                return 0;

            if ( var_3 hasattachment( "akimbo", 1 ) )
            {
                var_7 = var_0 getweaponammoclip( var_3, "left" );

                if ( var_7 < var_6 )
                    return 0;
            }

            if ( !br_ammo_type_player_full( var_0, var_4 ) )
                return 0;
        }
    }

    return 1;
}

debug_spawncover_badnodetest()
{
    var_0 = self;
    var_1 = [];
    var_2 = var_0 getweaponslistprimaries();

    foreach ( var_4 in var_2 )
    {
        var_5 = br_ammo_type_for_weapon( var_4 );

        if ( isdefined( var_5 ) )
        {
            var_1[var_5] = "dummy_value";
            var_6 = weaponclipsize( var_4 );
            var_0 setweaponammoclip( var_4, var_6 );
        }
    }

    foreach ( var_5, var_9 in var_1 )
    {
        var_0.br_ammo[var_5] = level.br_ammo_max[var_5];
        var_0 br_ammo_player_hud_update_ammotype( var_5 );
    }

    br_ammo_update_weapons( var_0 );
}

br_ammo_type_player_full( var_0, var_1 )
{
    if ( !isdefined( var_0.br_ammo ) || !isdefined( var_0.br_ammo[var_1] ) )
        return 0;

    if ( !isdefined( level.br_ammo_max[var_1] ) )
        return 0;

    return scripts\mp\gametypes\br.gsc::get_int_or_0( var_0.br_ammo[var_1] ) >= level.br_ammo_max[var_1];
}

br_ammo_give_type( var_0, var_1, var_2, var_3 )
{
    debug_spawnrewardstest( var_0, var_1 );

    if ( br_ammo_type_player_full( var_0, var_1 ) )
        return var_2;

    if ( !isdefined( var_0.br_ammo ) )
        var_0.br_ammo = [];

    if ( !isdefined( var_0.br_ammo[var_1] ) )
        var_0.br_ammo[var_1] = 0;

    if ( !isdefined( var_3 ) )
        var_3 = 0;

    var_4 = 0;
    var_0.br_ammo[var_1] = var_0.br_ammo[var_1] + var_2;

    if ( var_0.br_ammo[var_1] > level.br_ammo_max[var_1] )
    {
        if ( var_3 )
        {
            var_4 = var_0.br_ammo[var_1] - level.br_ammo_max[var_1];

            if ( var_4 < level.br_ammo_clipsize[var_1] )
                var_4 = 0;
        }

        var_0.br_ammo[var_1] = level.br_ammo_max[var_1];
    }

    var_0 br_ammo_player_hud_update_ammotype( var_1 );
    debug_start_numbers_threaded( var_0, var_1 );
    return var_4;
}

debug_spawnrewardstest( var_0, var_1 )
{
    if ( !var_0 isreloading() )
        return;

    var_2 = var_0 getcurrentprimaryweapon();
    var_3 = br_ammo_type_for_weapon( var_2 );

    if ( isdefined( var_3 ) && var_1 == var_3 )
        var_0.br_ammo[var_1] = var_0 getweaponammostock( var_2 );
}

br_ammo_take_type( var_0, var_1, var_2 )
{
    if ( var_0.br_ammo[var_1] <= 0 )
        return 0;

    var_0.br_ammo[var_1] = var_0.br_ammo[var_1] - var_2;

    if ( var_0.br_ammo[var_1] < 0 )
        var_0.br_ammo[var_1] = 0;

    var_0 br_ammo_player_hud_update_ammotype( var_1 );
    br_ammo_update_weapons( var_0 );
    return 1;
}

br_ammo_player_hud_monitor()
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    for (;;)
    {
        scripts\engine\utility::_id_143A8( "ammo_update", "pickedupweapon", "weapon_switch_done", "weapon_change", "weapon_change_complete" );
        br_ammo_player_hud_update_ammotype( "brloot_ammo_919" );
        br_ammo_player_hud_update_ammotype( "brloot_ammo_12g" );
        br_ammo_player_hud_update_ammotype( "brloot_ammo_762" );
        br_ammo_player_hud_update_ammotype( "brloot_ammo_50cal" );
        br_ammo_player_hud_update_ammotype( "brloot_ammo_rocket" );
    }
}

br_ammo_player_hud_update_ammotype( var_0, var_1 )
{
    if ( isdefined( level.br_ammo_omnvars[var_0] ) )
    {
        if ( !isdefined( self.br_ammo ) )
            self.br_ammo = [];

        if ( !isdefined( self.br_ammo[var_0] ) )
            self.br_ammo[var_0] = 0;

        self setclientomnvar( level.br_ammo_omnvars[var_0], self.br_ammo[var_0] );
    }
}

br_ammo_update_weapons( var_0 )
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::unset_relic_aggressive_melee( "weapons" ) )
        return;

    if ( !isdefined( var_0 ) )
        return;

    var_1 = var_0 getweaponslistprimaries();

    foreach ( var_3 in var_1 )
    {
        var_4 = br_ammo_type_for_weapon( var_3 );

        if ( isdefined( var_4 ) )
        {
            var_5 = scripts\mp\gametypes\br.gsc::get_int_or_0( var_0.br_ammo[var_4] );
            var_0 setweaponammostock( var_3, var_5 );
        }
    }

    var_0 notify( "ammo_update" );
}

debug_start_numbers_threaded( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_1 ) )
        return;

    var_2 = self getweaponslistprimaries();

    foreach ( var_4 in var_2 )
    {
        var_5 = br_ammo_type_for_weapon( var_4 );

        if ( isdefined( var_5 ) && var_1 == var_5 )
        {
            var_6 = scripts\mp\gametypes\br.gsc::get_int_or_0( var_0.br_ammo[var_1] );
            var_0 setweaponammostock( var_4, var_6 );
        }
    }

    var_0 notify( "ammo_update" );
}

br_ammo_type_for_weapon( var_0 )
{
    var_1 = undefined;
    var_2 = [ "selectsemi", "selectsemi_falpha", "selectsemi_anov94", "ub_buckslug_semi", "ub_buckslug", "s4_selectsemi", "selectsemi_bromeopg", "s4_selectauto", "selectsemi_mike1911" ];
    var_3 = [ "ubshtgn", "ubshtgn02", "ubshtgn_mike4" ];

    if ( var_0.isalternate && isdefined( var_0.underbarrel ) && !scripts\engine\utility::array_contains( var_2, var_0.underbarrel ) )
    {
        if ( scripts\engine\utility::array_contains( var_3, var_0.underbarrel ) )
            return undefined;
        else
            var_1 = "weapon_projectile";
    }
    else
        var_1 = scripts\mp\utility\weapon::getweapongroup( var_0 );

    return debug_spawning( var_1, var_0.basename );
}

debug_spawning( var_0, var_1 )
{
    switch ( var_0 )
    {
        case "weapon_machine_pistol":
        case "weapon_pistol":
            if ( isdefined( var_1 ) && var_1 == "iw8_pi_t9pistolshot_mp" )
                return "brloot_ammo_12g";
        case "weapon_smg":
            return "brloot_ammo_919";
        case "weapon_shotgun":
            return "brloot_ammo_12g";
        case "weapon_lmg":
        case "weapon_assault":
        case "weapon_tactical":
            return "brloot_ammo_762";
        case "weapon_dmr":
        case "weapon_sniper":
            return "brloot_ammo_50cal";
        case "weapon_projectile":
        case "weapon_melee2":
            return "brloot_ammo_rocket";
    }

    return undefined;
}

trial_vehicle( var_0 )
{
    switch ( var_0 )
    {
        case "brloot_ammo_50cal":
        case "brloot_ammo_rocket":
        case "brloot_ammo_919":
        case "brloot_ammo_12g":
        case "brloot_ammo_762":
            return 1;
    }

    return 0;
}

debug_spawn_crate_on_train( var_0, var_1 )
{
    var_2 = br_ammo_type_for_weapon( var_0 );
    var_3 = br_ammo_type_for_weapon( var_1 );
    return isdefined( var_2 ) && isdefined( var_3 ) && var_2 == var_3;
}

br_ammo_player_reload_watch()
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    for (;;)
    {
        self waittill( "reload_start" );

        if ( !isdefined( self ) )
            return;

        if ( scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
            continue;

        var_0 = self getcurrentweapon();
        var_1 = br_ammo_type_for_weapon( var_0 );

        if ( !isdefined( var_1 ) )
            continue;

        denyascendmessagejugg( var_0 );

        if ( !isdefined( self ) )
            return;

        if ( var_0 != self getcurrentweapon() )
            continue;

        if ( !getdvarint( "scr_prematch_infinite_ammo", istrue( level._id_12857 ) ) || scripts\mp\flags::gameflag( "prematch_done" ) )
            self.br_ammo[var_1] = self getweaponammostock( var_0 );

        debug_start_numbers_threaded( self, var_1 );
    }
}

denyascendmessagejugg( var_0 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "weapon_fired" );

    while ( self isreloading() )
        waitframe();
}

delay_delete_alerted_icon( var_0, var_1 )
{
    var_2 = self;

    if ( !isdefined( var_1 ) )
        var_1 = 1;

    var_3 = br_ammo_type_for_weapon( var_0 );

    if ( isdefined( var_3 ) )
    {
        var_4 = int( level.br_ammo_clipsize[var_3] * var_1 );
        var_2.br_ammo[var_3] = int( clamp( var_2.br_ammo[var_3] + var_4, 0, level.br_ammo_max[var_3] ) );
    }

    debug_start_numbers_threaded( var_2, var_3 );
}

delay_camera_normal( var_0, var_1 )
{
    var_2 = self;
    var_3 = br_ammo_type_for_weapon( var_0 );

    if ( isdefined( var_3 ) )
        var_2.br_ammo[var_3] = int( clamp( var_2.br_ammo[var_3] + var_1, 0, level.br_ammo_max[var_3] ) );

    debug_start_numbers_threaded( var_2, var_3 );
}

vandalize_attack_max_cooldown( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !issameweapon( var_0 ) )
        return 0;

    if ( nullweapon( var_0 ) )
        return 0;

    if ( scripts\mp\weapons::isfistweapon( var_0 ) || scripts\mp\utility\weapon::unset_relic_mythic( var_0 ) || scripts\mp\utility\weapon::update_health_bar_to_player( var_0 ) )
        return 0;

    return 1;
}

deregistergasmaskscriptableatframeend()
{
    if ( istrue( level.debug_safehouse_regroup_start ) && !scripts\mp\gametypes\br_public.gsc::uniquelootitemid() )
        return 1;
}

droptogroundmultitrace( var_0 )
{
    foreach ( var_2 in var_0 )
        zone_bounds( var_2, istrue( var_2.should_spawn_boss_one ) );
}

zone_bounds( var_0, var_1 )
{
    var_2 = br_ammo_type_for_weapon( var_0 );
    var_3 = weaponstartammo( var_0 );
    var_4 = weaponclipsize( var_0 );
    var_5 = weaponmaxammo( var_0 );
    var_6 = undefined;

    if ( var_1 )
        var_6 = var_5;
    else
        var_6 = var_3 - var_4;

    if ( isdefined( var_2 ) )
        br_ammo_give_type( self, var_2, var_6 );
}
