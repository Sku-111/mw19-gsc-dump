// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    var_0 = spawnstruct();
    level.btm = var_0;

    if ( getdvar( "mapname" ) == "mp_background" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_1[0] = scripts\mp\utility\game::getgametype();
    var_1[1] = "hardpoint";
    var_1[2] = "tdm";
    var_1[3] = "hq";
    var_1[4] = "dom";
    var_1[5] = "sd";
    var_1[6] = "bombzone";
    var_1[7] = "blocker";
    scripts\mp\gameobjects::main( var_1 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 300 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 300 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    }

    updategametypedvars();
    level.scoreperplayer = undefined;
    level.teambased = 1;
    level.onstartgametype = ::onstartgametype;
    level.onplayerconnect = ::onplayerconnect;
    level.getspawnpoint = ::getspawnpoint;
    level.modeonspawnplayer = ::onspawnplayer;
    level.onplayerkilled = ::onplayerkilled;
    level.onteamscore = ::onteamscore;
    level.onnormaldeath = ::onnormaldeath;
    level.lastcaptime = gettime();
    level.alliescapturing = [];
    level.axiscapturing = [];
    level.lastcaptureteam = undefined;
    level.previousclosespawnent = undefined;
    level.kothmode = 0;
    level.hqautodestroytime = 60;
    level.promode = 1;
    level.extradelay = 1;
    game["dialog"]["gametype"] = "gametype_hardpoint";

    if ( getdvarint( "OSMSLRTOP" ) )
        game["dialog"]["gametype"] = "hc_" + game["dialog"]["gametype"];
    else if ( getdvarint( "NOSLRNTRKL" ) )
        game["dialog"]["gametype"] = "thirdp_" + game["dialog"]["gametype"];
    else if ( getdvarint( "scr_diehard" ) )
        game["dialog"]["gametype"] = "dh_" + game["dialog"]["gametype"];
    else if ( getdvarint( "scr_" + scripts\mp\utility\game::getgametype() + "_promode" ) )
        game["dialog"]["gametype"] = game["dialog"]["gametype"] + "_pro";

    game["dialog"]["bomb_achieve"] = "bomb_achieve";
    game["dialog"]["bomb_taken"] = "bomb_taken";
    game["dialog"]["bomb_lost"] = "bomb_enemyowns";
    game["dialog"]["bomb_defused"] = "bomb_defused";
    game["dialog"]["bomb_planted"] = "bomb_planted";
    game["dialog"]["enemy_bomb_a"] = "bomb_enemy_a";
    game["dialog"]["enemy_bomb_b"] = "bomb_enemy_b";
    game["dialog"]["enemy_bomb_defused"] = "bomb_enemydefused";
    game["dialog"]["enemy_bomb_planted"] = "bomb_enemyplanted";
    game["dialog"]["offense_obj"] = "hint_killall";
    game["dialog"]["defense_obj"] = "hint_killall";
    game["dialog"]["obj_destroyed"] = "obj_destroyed";
    game["dialog"]["obj_captured"] = "obj_captured";
    level._effect["vfx_smk_signal"] = loadfx( "vfx/_requests/mp_gameplay/vfx_smk_signal" );
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "scr_btm_zoneLifetime", getmatchrulesdata( "kothData", "zoneLifetime" ) );
    setdynamicdvar( "scr_btm_zoneCaptureTime", getmatchrulesdata( "kothData", "zoneCaptureTime" ) );
    setdynamicdvar( "scr_btm_zoneActivationDelay", getmatchrulesdata( "kothData", "zoneActivationDelay" ) );
    setdynamicdvar( "scr_btm_randomLocationOrder", getmatchrulesdata( "kothData", "randomLocationOrder" ) );
    setdynamicdvar( "scr_btm_additiveScoring", getmatchrulesdata( "kothData", "additiveScoring" ) );
    setdynamicdvar( "scr_btm_pauseTime", getmatchrulesdata( "kothData", "pauseTime" ) );
    setdynamicdvar( "scr_btm_delayPlayer", getmatchrulesdata( "kothData", "delayPlayer" ) );
    setdynamicdvar( "scr_btm_useHQRules", getmatchrulesdata( "kothData", "useHQRules" ) );
    setdynamicdvar( "scr_btm_spawndelay", getmatchrulesdata( "tdefData", "spawnDelay" ) );
    setdynamicdvar( "scr_btm_juggHealth", getmatchrulesdata( "btmData", "juggHealth" ) );
    setdynamicdvar( "scr_btm_juggswitchtime", getmatchrulesdata( "btmData", "juggSwitchTime" ) );
    setdynamicdvar( "scr_btm_ppkasjugg", getmatchrulesdata( "btmData", "ppkAsJugg" ) );
    setdynamicdvar( "scr_btm_ppkonjugg", getmatchrulesdata( "btmData", "ppkOnJugg" ) );
    setdynamicdvar( "scr_btm_ppkjuggonjugg", getmatchrulesdata( "btmData", "ppkJuggOnJugg" ) );
    setdynamicdvar( "scr_koth_halftime", 0 );
    scripts\mp\utility\game::registerhalftimedvar( "koth", 0 );
}

onstartgametype()
{
    if ( !isdefined( game["switchedsides"] ) )
        game["switchedsides"] = 0;

    if ( game["switchedsides"] )
    {
        var_0 = game["attackers"];
        var_1 = game["defenders"];
        game["attackers"] = var_1;
        game["defenders"] = var_0;
    }

    level._effect["bomb_explosion"] = loadfx( "vfx/iw8_mp/gamemode/vfx_search_bombsite_destroy.vfx" );

    foreach ( var_3 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_3, &"OBJECTIVES/KOTH" );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"OBJECTIVES/KOTH" );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"OBJECTIVES/KOTH_SCORE" );

        scripts\mp\utility\game::setobjectivehinttext( var_3, &"OBJECTIVES/KOTH_HINT" );
    }

    setclientnamemode( "auto_change" );
    level.objectives = [];
    thread objectiveselectorsetup();
    setupradios();
    setupbtmflags();
    thread dommainloop();
    thread hqmainloop();
    level thread waittospawnvip();
    level thread waittospawnjuggcrate();
    level thread waittospawnbtmbombs();
    setmapsizespawnconsts();
    initspawns();
    seticonnames();
    setupwaypointicons();
    level.usedomflag = 0;
    setomnvar( "ui_btm_timer", 0 );
    setomnvar( "ui_btm_status", -1 );
}

updategametypedvars()
{
    scripts\mp\gametypes\common.gsc::updatecommongametypedvars();
    level.zoneduration = scripts\mp\utility\dvars::dvarfloatvalue( "zoneLifetime", 60, 0, 300 );
    level.zonecapturetime = scripts\mp\utility\dvars::dvarfloatvalue( "zoneCaptureTime", 0, 0, 30 );
    level.zoneactivationdelay = 30;
    level.zonerandomlocationorder = scripts\mp\utility\dvars::dvarintvalue( "randomLocationOrder", 0, 0, 1 );
    level.zoneadditivescoring = scripts\mp\utility\dvars::dvarintvalue( "additiveScoring", 0, 0, 1 );
    level.pausescoring = scripts\mp\utility\dvars::dvarintvalue( "pauseTime", 1, 0, 1 );
    level.delayplayer = scripts\mp\utility\dvars::dvarintvalue( "delayPlayer", 1, 0, 1 );
    level.spawndelay = scripts\mp\utility\dvars::dvarfloatvalue( "spawnDelay", 5, 0, 30 );
    level.usehqrules = 1;
    level.flagcapturetime = scripts\mp\utility\dvars::dvarfloatvalue( "flagCaptureTime", 10, 0, 30 );
    level.flagsrequiredtoscore = scripts\mp\utility\dvars::dvarintvalue( "flagsRequiredToScore", 1, 1, 3 );
    level.pointsperflag = scripts\mp\utility\dvars::dvarintvalue( "pointsPerFlag", 10, 1, 300 );
    level.flagneutralization = scripts\mp\utility\dvars::dvarintvalue( "flagNeutralization", 0, 0, 1 );
    level.precappoints = scripts\mp\utility\dvars::dvarintvalue( "preCapPoints", 0, 0, 1 );
    level.capturedecay = scripts\mp\utility\dvars::dvarintvalue( "captureDecay", 1, 0, 1 );
    level.capturetype = scripts\mp\utility\dvars::dvarintvalue( "captureType", 1, 0, 3 );
    level.numflagsscoreonkill = scripts\mp\utility\dvars::dvarintvalue( "numFlagsScoreOnKill", 0, 0, 3 );
    level.objectivescaler = scripts\mp\utility\dvars::dvarfloatvalue( "objScalar", 4, 1, 10 );
    level.jugghealth = scripts\mp\utility\dvars::dvarintvalue( "juggHealth", 1000, 1000, 10000 );
    level.juggswitchtime = scripts\mp\utility\dvars::dvarfloatvalue( "juggSwitchTime", 60, 10, 180 );
    level.ppkasjugg = scripts\mp\utility\dvars::dvarintvalue( "ppkAsJugg", 20, 1, 100 );
    level.ppkonjugg = scripts\mp\utility\dvars::dvarintvalue( "ppkOnJugg", 50, 1, 100 );
    level.ppkjuggonjugg = scripts\mp\utility\dvars::dvarintvalue( "ppkJuggOnJugg", 50, 1, 100 );
}

setmapsizespawnconsts()
{
    var_0 = getsubstr( level.mapname, 0, 7 );

    switch ( var_0 )
    {
        case "mp_vill":
        case "mp_offs":
        case "mp_dome":
        case "mp_cras":
        case "mp_hack":
        case "mp_cave":
            level.spawn_deadzone_dist = 1000;
            level.close_spawn_min_dist_sq = 10000;
            level.max_spawn_dist_sq = 25000000;
            level.max_relevant_spawn_dist = 6000;
            level.enemy_spawn_influence_dist_sq = 12250000;
            break;
        default:
            level.spawn_deadzone_dist = 1000;
            level.close_spawn_min_dist_sq = 10000;
            level.max_spawn_dist_sq = 225000000;
            level.max_relevant_spawn_dist = 5000;
            level.enemy_spawn_influence_dist_sq = 12250000;
            break;
    }
}

initspawns()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::setactivespawnlogic( "Default", "Crit_Default" );
    scripts\mp\spawnlogic::addstartspawnpoints( "mp_tdm_spawn_allies_start" );
    scripts\mp\spawnlogic::addstartspawnpoints( "mp_tdm_spawn_axis_start" );
    scripts\mp\spawnlogic::addspawnpoints( "allies", "mp_tdm_spawn" );
    scripts\mp\spawnlogic::addspawnpoints( "allies", "mp_tdm_spawn_secondary", 1, 1 );
    scripts\mp\spawnlogic::addspawnpoints( "axis", "mp_tdm_spawn" );
    scripts\mp\spawnlogic::addspawnpoints( "axis", "mp_tdm_spawn_secondary", 1, 1 );
    scripts\mp\spawnlogic::registerspawnset( "normal", "mp_tdm_spawn" );
    scripts\mp\spawnlogic::registerspawnset( "fallback", "mp_tdm_spawn_secondary" );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
    enablespawnpointbyindex( "mp_tdm_spawn" );
    level.spawnpoints = scripts\mp\spawnlogic::getspawnpointarray( "mp_tdm_spawn" );

    if ( !level.spawnpoints.size )
        return;

    foreach ( var_1 in level.objectives )
    {
        var_1.furthestspawndistsq = 0;
        var_1.spawnpoints = [];
        var_1.fallbackspawnpoints = [];
    }

    foreach ( var_4 in level.spawnpoints )
    {
        calculatespawndisttozones( var_4 );
        var_5 = scripts\mp\spawnlogic::getoriginidentifierstring( var_4 );

        if ( isdefined( level.btmextraprimaryspawnpoints ) && isdefined( level.btmextraprimaryspawnpoints[var_5] ) )
        {
            foreach ( var_7 in level.btmextraprimaryspawnpoints[var_5] )
            {
                var_1 = level.objectives[var_7];
                var_1.spawnpoints[var_1.spawnpoints.size] = var_4;
            }
        }

        var_9 = 0;
        var_10 = var_4.classname == "mp_tdm_spawn";
        var_11 = var_4.classname == "mp_tdm_spawn_secondary";

        if ( var_10 || var_11 )
        {
            if ( isdefined( var_4.script_noteworthy ) && var_4.script_noteworthy != "" )
            {
                var_9 = 1;
                var_12 = strtok( var_4.script_noteworthy, " " );

                foreach ( var_7 in var_12 )
                {
                    var_1 = level.objectives[var_7];

                    if ( var_10 )
                    {
                        var_1.spawnpoints[var_1.spawnpoints.size] = var_4;
                        continue;
                    }

                    var_1.fallbackspawnpoints[var_1.fallbackspawnpoints.size] = var_4;
                }
            }
        }

        if ( !var_9 )
        {
            foreach ( var_1 in level.objectives )
            {
                if ( var_4.scriptdata.distsqtokothzones[var_1 getentitynumber()] < level.close_spawn_min_dist_sq || var_4.scriptdata.distsqtokothzones[var_1 getentitynumber()] > level.max_spawn_dist_sq )
                    var_1.removespawn = 1;

                if ( var_10 )
                {
                    if ( !isdefined( var_1.removespawn ) )
                        var_1.spawnpoints[var_1.spawnpoints.size] = var_4;

                    continue;
                }

                var_1.fallbackspawnpoints[var_1.fallbackspawnpoints.size] = var_4;
            }
        }
    }

    foreach ( var_19, var_1 in level.objectives )
    {
        var_1.spawnset = "btm_" + var_19;
        scripts\mp\spawnlogic::registerspawnset( var_1.spawnset, var_1.spawnpoints );
        var_1.fallbackspawnset = "btm_fallback_" + var_19;
        scripts\mp\spawnlogic::registerspawnset( var_1.fallbackspawnset, var_1.fallbackspawnpoints );
    }
}

calculatespawndisttozones( var_0 )
{
    var_0.scriptdata.distsqtokothzones = [];

    foreach ( var_2 in level.objectives )
    {
        var_3 = getpathdist( var_0.origin, var_2.origin, level.max_relevant_spawn_dist );

        if ( var_3 < 0 )
            var_3 = scripts\engine\utility::distance_2d_squared( var_0.origin, var_2.origin );
        else
            var_3 = var_3 * var_3;

        var_0.scriptdata.distsqtokothzones[var_2 getentitynumber()] = var_3;

        if ( var_3 > var_2.furthestspawndistsq )
            var_2.furthestspawndistsq = var_3;
    }
}

setupradios()
{
    var_0 = [];
    var_1 = getentarray( "hq_hardpoint", "targetname" );

    if ( var_1.size < 2 )
        var_0[var_0.size] = "There are not at least 2 entities with targetname \"radio\"";

    var_2 = getentarray( "radiotrigger", "targetname" );

    for ( var_3 = 0; var_3 < var_1.size; var_3++ )
    {
        var_4 = 0;
        var_5 = var_1[var_3];
        var_5.trig = undefined;

        for ( var_6 = 0; var_6 < var_2.size; var_6++ )
        {
            if ( var_5 istouching( var_2[var_6] ) )
            {
                if ( isdefined( var_5.trig ) )
                {
                    var_0[var_0.size] = "Radio at " + var_5.origin + " is touching more than one \"radiotrigger\" trigger";
                    var_4 = 1;
                    break;
                }

                var_5.trig = var_2[var_6];
                break;
            }
        }

        if ( !isdefined( var_5.trig ) )
        {
            if ( !var_4 )
                var_0[var_0.size] = "Radio at " + var_5.origin + " is not inside any \"radiotrigger\" trigger";

            var_5.trig = spawn( "trigger_radius", var_5.origin, 0, 128, 128 );
            var_4 = 0;
        }

        var_5.trigorigin = var_5.trig.origin;
        var_7 = [];
        var_7[0] = var_5;
        var_8 = getentarray( var_5.target, "targetname" );

        for ( var_6 = 0; var_6 < var_8.size; var_6++ )
            var_7[var_7.size] = var_8[var_6];

        var_5.visuals = var_7;
        var_5 scripts\mp\gameobjects::setmodelvisibility( 0 );
        var_5.gameobject = scripts\mp\gameobjects::createuseobject( "neutral", var_5.trig, var_5.visuals, var_5.origin - var_5.trigorigin + ( 0, 0, 60 ) );
        var_5.gameobject scripts\mp\gameobjects::disableobject();
        var_5.gameobject scripts\mp\gameobjects::setmodelvisibility( 0 );
        var_5.trig.useobj = var_5.gameobject;
    }

    if ( var_0.size > 0 )
    {
        for ( var_3 = 0; var_3 < var_0.size; var_3++ )
        {

        }
    }

    foreach ( var_10 in var_1 )
        level.objectives[level.objectives.size] = var_10;

    level.radios = var_1;
    level.radios2 = var_1;
    level.prevradio = undefined;
    level.prevradio2 = undefined;
    return 1;
}

setupbtmflags()
{
    var_0 = getentarray( "btm_flag_primary", "targetname" );

    if ( var_0.size == 0 )
    {
        var_1 = getentarray( "flag_primary", "targetname" );
        var_2 = getentarray( "flag_secondary", "targetname" );

        for ( var_3 = 0; var_3 < var_1.size; var_3++ )
            level.primaryflags[level.primaryflags.size] = var_1[var_3];

        for ( var_3 = 0; var_3 < var_2.size; var_3++ )
            level.primaryflags[level.primaryflags.size] = var_2[var_3];

        level thread runnormaldomflags( var_1, var_2 );
    }
    else
    {
        level.primaryflags = var_0;
        level.primaryflags2 = var_0;
        level.prevflag = undefined;
        level.prevflag2 = undefined;
        level thread runbtmflags();
    }

    foreach ( var_5 in level.primaryflags )
        level.objectives[level.objectives.size] = var_5;
}

dommainloop()
{
    level endon( "game_ended" );
    level thread updatedomscores();
}

runbtmflags()
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "prematch_done" );

    for (;;)
    {
        level waittill( "spawn_btm_dom" );
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 0, 0 );
        scripts\mp\spawnlogic::setactivespawnlogic( "Hardpoint", "Crit_Default" );
        var_0 = pickflagtospawn();
        var_0.script_label = "_a";
        var_1 = "_a";
        var_2 = scripts\mp\gametypes\obj_dom.gsc::setupobjective( var_0 );
        var_2.origin = var_0.origin;
        var_2 scripts\mp\gameobjects::allowuse( "none" );
        var_2 scripts\mp\gameobjects::setvisibleteam( "any" );
        var_2 scripts\mp\gameobjects::setobjectivestatusicons( level.iconlocked );
        var_2.ignorestomp = 1;
        level.btmflagobject = var_2;
        setomnvar( "ui_btm_timer", int( 30000 + gettime() ) );
        setomnvar( "ui_btm_status", 2 );
        scripts\mp\utility\sound::playsoundonplayers( "ui_aar_sidebar" );
        wait 30;
        scripts\mp\utility\sound::playsoundonplayers( "iw8_new_objective_sfx" );

        foreach ( var_4 in level.teamnamelist )
        {
            scripts\mp\utility\dialog::leaderdialog( "obj_capture", var_4 );

            if ( scripts\mp\utility\teams::getteamdata( var_4, "teamCount" ) > 0 )
                scripts\mp\utility\print::teamhudtutorialmessage( "OBJECTIVES/CAPTURE_FLAG", var_4, 4 );
        }

        level.btmflagobject scripts\mp\gameobjects::allowuse( "enemy" );
        level.btmflagobject scripts\mp\gametypes\obj_dom.gsc::domflag_setneutral();
        setomnvar( "ui_btm_timer", int( 60000 + gettime() ) );
        setomnvar( "ui_btm_status", 3 );
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 14, 14 );
        wait 60;
        scripts\mp\utility\sound::playsoundonplayers( "mp_sar_enemy_eliminated" );

        foreach ( var_4 in level.teamnamelist )
        {
            if ( scripts\mp\utility\teams::getteamdata( var_4, "teamCount" ) > 0 )
                scripts\mp\utility\print::teamhudtutorialmessage( "OBJECTIVES/OBJ_OFFLINE", var_4, 4 );
        }

        level.btmflagobject scripts\mp\gametypes\obj_dom.gsc::domflag_setneutral();
        level removedompoint( var_1 );
        level.btmflagobject = undefined;
        scripts\mp\spawnlogic::setactivespawnlogic( "Default", "Crit_Default" );
        level getnextobjective( "dom" );
    }
}

runnormaldomflags( var_0, var_1 )
{
    scripts\mp\flags::gameflagwait( "prematch_done" );

    for (;;)
    {
        level waittill( "spawn_btm_dom" );
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 0, 0 );

        switch ( level.usedomflag )
        {
            case 0:
                var_2 = "_b";
                break;
            case 1:
                var_2 = "_a";
                break;
            case 2:
                var_2 = "_c";
                break;
            default:
                var_2 = "_b";
                break;
        }

        scripts\mp\spawnlogic::setactivespawnlogic( "Hardpoint", "Crit_Default" );
        var_3 = [];

        for ( var_4 = 0; var_4 < var_0.size; var_4++ )
            var_3[var_3.size] = var_0[var_4];

        for ( var_4 = 0; var_4 < var_1.size; var_4++ )
            var_3[var_3.size] = var_1[var_4];

        foreach ( var_6 in var_3 )
        {
            if ( var_6.script_label == var_2 )
            {
                var_7 = scripts\mp\gametypes\obj_dom.gsc::setupobjective( var_6 );
                var_7 scripts\mp\gameobjects::allowuse( "none" );
                var_7 scripts\mp\gameobjects::setvisibleteam( "any" );
                var_7 scripts\mp\gameobjects::setobjectivestatusicons( level.iconlocked );
                var_7.ignorestomp = 1;
                level.btmflagobject = var_7;
                break;
            }
        }

        setomnvar( "ui_btm_timer", int( 30000 + gettime() ) );
        setomnvar( "ui_btm_status", 2 );
        scripts\mp\utility\sound::playsoundonplayers( "ui_aar_sidebar" );
        wait 30;
        scripts\mp\utility\sound::playsoundonplayers( "iw8_new_objective_sfx" );

        foreach ( var_10 in level.teamnamelist )
        {
            scripts\mp\utility\dialog::leaderdialog( "obj_capture", var_10 );

            if ( scripts\mp\utility\teams::getteamdata( var_10, "teamCount" ) > 0 )
                scripts\mp\utility\print::teamhudtutorialmessage( "OBJECTIVES/CAPTURE_FLAG", var_10, 4 );
        }

        level.btmflagobject scripts\mp\gameobjects::allowuse( "enemy" );
        level.btmflagobject scripts\mp\gametypes\obj_dom.gsc::domflag_setneutral();
        setomnvar( "ui_btm_timer", int( 60000 + gettime() ) );
        setomnvar( "ui_btm_status", 3 );
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 14, 14 );
        wait 60;
        scripts\mp\utility\sound::playsoundonplayers( "mp_sar_enemy_eliminated" );

        foreach ( var_10 in level.teamnamelist )
        {
            if ( scripts\mp\utility\teams::getteamdata( var_10, "teamCount" ) > 0 )
                scripts\mp\utility\print::teamhudtutorialmessage( "OBJECTIVES/OBJ_OFFLINE", var_10, 4 );
        }

        level.btmflagobject scripts\mp\gametypes\obj_dom.gsc::domflag_setneutral();
        level removedompoint( var_2 );
        level.btmflagobject = undefined;
        scripts\mp\spawnlogic::setactivespawnlogic( "Default", "Crit_Default" );
        level getnextobjective( "dom" );
    }
}

updatedomscores()
{
    level endon( "game_ended" );
    level waittill( "spawn_btm_dom" );
    var_0 = undefined;
    var_1 = undefined;

    while ( !level.gameended )
    {
        wait 5.0;
        scripts\mp\hostmigration::waittillhostmigrationdone();

        if ( !isdefined( level.scoretick ) )
            level.scoretick = [];

        foreach ( var_3 in level.teamnamelist )
            level.scoretick[var_3] = 0;

        if ( isdefined( level.btmflagobject ) )
        {
            var_5 = level.btmflagobject scripts\mp\gameobjects::getownerteam();

            if ( var_5 == "neutral" )
                continue;

            level.scoretick[var_5] = level.scoretick[var_5] + level.pointsperflag;
            updatescores();
        }
    }
}

updatescores()
{
    var_0 = [];

    foreach ( var_2 in level.teamnamelist )
    {
        var_3 = game["teamScores"][var_2] + level.scoretick[var_2];

        if ( var_3 >= level.roundscorelimit )
            var_0[var_0.size] = var_2;
    }

    if ( var_0.size == 1 )
        level.scoretick[var_0[0]] = level.roundscorelimit - game["teamScores"][var_0[0]];

    foreach ( var_2 in level.teamnamelist )
    {
        if ( level.scoretick[var_2] > 0 )
            scripts\mp\gamescore::giveteamscoreforobjective( var_2, level.scoretick[var_2], 1 );
    }
}

removedompoint( var_0 )
{
    self endon( "game_ended" );
    level.btmflagobject scripts\mp\gameobjects::allowuse( "none" );
    level.btmflagobject scripts\mp\gameobjects::setvisibleteam( "none" );
    level.btmflagobject scripts\mp\gameobjects::releaseid();
    level.btmflagobject.trigger = undefined;
    level.btmflagobject notify( "deleted" );
    level.btmflagobject.visibleteam = "none";
    level.btmflagobject.scriptable delete();
    level.btmflagobject.flagmodel delete();
}

pickflagtospawn()
{
    var_0 = [];
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == "spectator" )
            continue;

        if ( !isalive( var_3 ) )
            continue;

        var_3.dist = 0;

        if ( var_3.team == "allies" )
        {
            var_0[var_0.size] = var_3;
            continue;
        }

        var_1[var_1.size] = var_3;
    }

    if ( !var_0.size || !var_1.size )
    {
        if ( level.primaryflags.size == 0 )
            level.primaryflags = level.primaryflags2;

        for ( var_5 = level.primaryflags[randomint( level.primaryflags.size )]; isdefined( level.prevflag ) && var_5 == level.prevflag; var_5 = level.primaryflags[randomint( level.primaryflags.size )] )
        {

        }

        level.prevflag2 = level.prevflag;
        level.prevflag = var_5;
        return var_5;
    }

    for ( var_6 = 0; var_6 < var_0.size; var_6++ )
    {
        for ( var_7 = var_6 + 1; var_7 < var_0.size; var_7++ )
        {
            var_8 = distancesquared( var_0[var_6].origin, var_0[var_7].origin );
            var_0[var_6].dist = var_0[var_6].dist + var_8;
            var_0[var_7].dist = var_0[var_7].dist + var_8;
        }
    }

    for ( var_6 = 0; var_6 < var_1.size; var_6++ )
    {
        for ( var_7 = var_6 + 1; var_7 < var_1.size; var_7++ )
        {
            var_8 = distancesquared( var_1[var_6].origin, var_1[var_7].origin );
            var_1[var_6].dist = var_1[var_6].dist + var_8;
            var_1[var_7].dist = var_1[var_7].dist + var_8;
        }
    }

    var_9 = var_0[0];

    foreach ( var_3 in var_0 )
    {
        if ( var_3.dist < var_9.dist )
            var_9 = var_3;
    }

    var_12["allies"] = var_9.origin;
    var_9 = var_1[0];

    foreach ( var_3 in var_1 )
    {
        if ( var_3.dist < var_9.dist )
            var_9 = var_3;
    }

    var_12["axis"] = var_1[0].origin;
    var_15 = undefined;
    var_16 = undefined;

    for ( var_6 = 0; var_6 < level.primaryflags.size; var_6++ )
    {
        var_5 = level.primaryflags[var_6];
        var_17 = abs( distance( var_5.origin, var_12["allies"] ) - distance( var_5.origin, var_12["axis"] ) );

        if ( isdefined( level.prevflag ) && var_5 == level.prevflag )
            continue;

        if ( isdefined( level.prevflag2 ) && var_5 == level.prevflag2 )
        {
            if ( level.primaryflags.size > 2 )
                continue;
            else
                var_17 = var_17 + 512;
        }

        if ( !isdefined( var_16 ) || var_17 < var_16 )
        {
            var_16 = var_17;
            var_15 = var_5;
        }
    }

    level.prevflag2 = level.prevflag;
    level.prevflag = var_15;
    return var_15;
}

hqmainloop()
{
    level endon( "game_ended" );
    level.hqrevealtime = -100000;
    scripts\mp\flags::gameflagwait( "prematch_done" );

    for (;;)
    {
        level waittill( "spawn_btm_hq" );
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 0, 0 );
        scripts\mp\spawnlogic::setactivespawnlogic( "Default", "Crit_Default" );
        setomnvar( "ui_btm_timer", 0 );
        setomnvar( "ui_btm_status", -1 );
        scripts\mp\spawnlogic::setactivespawnlogic( "Hardpoint", "Crit_Default" );
        var_0 = pickradiotospawn();
        var_0 makeradioactive();
        scripts\mp\utility\sound::playsoundonplayers( "ui_aar_sidebar" );
        var_1 = var_0.gameobject;
        var_1 scripts\mp\gameobjects::pinobjiconontriggertouch();
        var_1 scripts\mp\gameobjects::setmodelvisibility( 1 );
        var_1 scripts\mp\gameobjects::setvisibleteam( "any" );
        var_1 scripts\mp\gameobjects::setobjectivestatusicons( level.iconlocked, level.iconlocked );
        level.radioobject = var_1;
        level.hqrevealtime = gettime();

        if ( level.zoneactivationdelay )
        {
            setomnvar( "ui_btm_timer", int( 30000 + gettime() ) );
            setomnvar( "ui_btm_status", 2 );
            wait( level.zoneactivationdelay );
        }

        waittillframeend;
        scripts\mp\utility\sound::playsoundonplayers( "iw8_new_objective_sfx" );

        foreach ( var_3 in level.teamnamelist )
        {
            scripts\mp\utility\dialog::leaderdialog( "obj_capture", var_3 );

            if ( scripts\mp\utility\teams::getteamdata( var_3, "teamCount" ) > 0 )
                scripts\mp\utility\print::teamhudtutorialmessage( "OBJECTIVES/CAPTURE_HQ", var_3, 4 );
        }

        var_1 scripts\mp\gameobjects::allowuse( "any" );
        var_1 scripts\mp\gameobjects::setusetime( level.zonecapturetime );
        var_1 scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqneutral, level.iconhqneutral );
        var_1 scripts\mp\gameobjects::setvisibleteam( "any" );
        var_1.onuse = ::onradiocapture;
        var_1.onbeginuse = ::onbeginuse;
        var_1.onenduse = ::onenduse;
        var_1.onuncontested = ::onuncontested;
        var_1.oncontested = ::oncontested;
        var_1.id = "hardpoint";
        var_1 scripts\mp\gameobjects::pinobjiconontriggertouch();
        var_1 scripts\mp\gameobjects::setcapturebehavior( "normal" );
        level.radioobject = var_1;
        setomnvar( "ui_btm_timer", int( 60000 + gettime() ) );
        setomnvar( "ui_btm_status", 3 );
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 16, 16 );
        thread destroyhqaftertime( 60 );
        var_5 = level scripts\engine\utility::_id_143AD( "hq_captured", "hq_destroyed" );

        if ( var_5 == "hq_captured" )
        {
            var_6 = var_1 scripts\mp\gameobjects::getownerteam();
            var_7 = scripts\mp\utility\game::getotherteam( var_6 );

            if ( level.hqautodestroytime )
                thread destroyhqaftertime( level.hqautodestroytime, var_6 );
            else
                level.hqdestroyedbytimer = 0;

            for (;;)
            {
                var_6 = var_1 scripts\mp\gameobjects::getownerteam();
                var_7 = scripts\mp\utility\game::getotherteam( var_6 );

                if ( var_6 == "allies" )
                {

                }
                else
                {

                }

                var_1 scripts\mp\gameobjects::allowuse( "enemy" );
                var_1 scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqdefend, level.iconhqcapture );

                if ( !level.kothmode )
                    var_1 scripts\mp\gameobjects::setusetext( &"MP_DESTROYING_HQ" );

                var_1.onuse = ::onradiodestroy;
                level waittill( "hq_destroyed" );

                if ( !level.kothmode || level.hqdestroyedbytimer )
                    break;

                thread forcespawnteam( var_6 );
                var_1 scripts\mp\gameobjects::setownerteam( scripts\mp\utility\game::getotherteam( var_6 )[0] );
            }
        }

        scripts\mp\utility\sound::playsoundonplayers( "mp_sar_enemy_eliminated" );

        foreach ( var_3 in level.teamnamelist )
        {
            if ( scripts\mp\utility\teams::getteamdata( var_3, "teamCount" ) > 0 )
                scripts\mp\utility\print::teamhudtutorialmessage( "OBJECTIVES/HQ_OFFLINE", var_3, 4 );
        }

        var_6 = var_1 scripts\mp\gameobjects::getownerteam();
        var_1 scripts\mp\gameobjects::allowuse( "none" );
        var_1 scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqneutral, level.iconhqneutral );
        var_1 scripts\mp\gameobjects::setownerteam( "neutral" );
        var_1 scripts\mp\gameobjects::setmodelvisibility( 0 );
        var_0 makeradioinactive();
        level.radioobject = undefined;

        if ( var_6 != "neutral" )
            thread forcespawnteam( var_6, level.extradelay );

        level.usedomflag++;

        if ( level.usedomflag == 3 )
            level.usedomflag = 0;

        scripts\mp\spawnlogic::setactivespawnlogic( "Default", "Crit_Default" );
        wait 1;
        level getnextobjective( "koth" );
    }
}

forcespawnteam( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
    {
        foreach ( var_3 in level.players )
        {
            if ( isalive( var_3 ) )
                continue;

            if ( var_3.pers["team"] == var_0 )
                var_3 scripts\mp\utility\lower_message::setlowermessageomnvar( 9, int( gettime() + var_1 * 1000 ) );
        }

        wait( var_1 );
    }

    foreach ( var_3 in level.players )
    {
        if ( var_3.pers["team"] == var_0 )
        {
            var_3 scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );

            if ( !isalive( var_3 ) )
                var_3.forcespawnnearteammates = 1;

            var_3 notify( "force_spawn" );
        }
    }
}

onbeginuse( var_0 )
{
    var_1 = scripts\mp\gameobjects::getownerteam();

    if ( var_1 == "neutral" )
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqtaking, level.iconhqlosing );
    else
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqtaking, level.iconhqlosing );
}

onenduse( var_0, var_1, var_2 )
{
    var_3 = scripts\mp\gameobjects::getownerteam();

    if ( var_2 )
        return;

    if ( var_3 == "neutral" )
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqneutral, level.iconhqneutral );
    else
    {
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqdefend, level.iconhqcapture );
        return;
    }
}

oncontested()
{
    scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqcontested );
}

onuncontested( var_0 )
{
    var_1 = scripts\mp\gameobjects::getownerteam();

    if ( var_0 == "none" || var_1 == "neutral" )
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqneutral );
    else
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqcapture, level.iconhqdefend );
}

onradiocapture( var_0 )
{
    var_1 = var_0.pers["team"];
    scripts\mp\gamescore::giveplayerscore( "capture", var_0 );

    foreach ( var_3 in self.touchlist[var_1] )
    {
        var_4 = var_3.player;
        var_4 scripts\mp\utility\stats::incpersstat( "captures", 1 );
        var_4 scripts\mp\persistence::statsetchild( "round", "captures", var_0.pers["captures"] );
    }

    var_0 thread scripts\common\utility::_id_13E0A( level._id_11B29, "capture", var_0.origin );
    var_6 = scripts\mp\gameobjects::getownerteam();
    scripts\mp\gameobjects::setownerteam( var_1 );

    if ( !level.kothmode )
        scripts\mp\gameobjects::setusetime( level.zonecapturetime );

    var_7 = "axis";

    if ( var_1 == "axis" )
        var_7 = "allies";

    thread scripts\mp\utility\sound::playsoundonplayers( "mp_dom_flag_captured", var_1 );
    thread scripts\mp\utility\sound::playsoundonplayers( "mp_dom_flag_lost", var_7 );
    level thread awardhqpoints( var_1 );
    var_0 notify( "objective", "captured" );
    level notify( "hq_captured" );
    level thread scripts\mp\hud_message::updatematchstatushintforallplayers( var_1, 17, 16 );
}

onradiodestroy( var_0 )
{
    var_1 = var_0.pers["team"];
    var_2 = "axis";

    if ( var_1 == "axis" )
        var_2 = "allies";

    scripts\mp\gamescore::giveplayerscore( "capture", var_0 );

    foreach ( var_4 in self.touchlist[var_1] )
    {
        var_5 = var_4.player;
        var_5 scripts\mp\utility\stats::incpersstat( "destructions", 1 );
        var_5 scripts\mp\persistence::statsetchild( "round", "destructions", var_0.pers["destructions"] );
    }

    var_0 thread scripts\common\utility::_id_13E0A( level._id_11B29, "destroy", var_0.origin );

    if ( level.kothmode )
    {

    }
    else
    {

    }

    thread scripts\mp\utility\sound::playsoundonplayers( "mp_dom_flag_captured", var_1 );
    thread scripts\mp\utility\sound::playsoundonplayers( "mp_dom_flag_lost", var_2 );
    level notify( "hq_destroyed" );

    if ( level.kothmode )
        level thread awardhqpoints( var_1 );
    else
        scripts\mp\gamescore::giveteamscoreforobjective( var_1, 20 );
}

destroyhqaftertime( var_0, var_1 )
{
    level endon( "game_ended" );
    level endon( "hq_reset" );
    level notify( "hq_reset_timeout" );
    level endon( "hq_reset_timeout" );
    level.hqdestroytime = gettime() + var_0 * 1000;
    level.hqdestroyedbytimer = 0;
    wait( var_0 );
    level.hqdestroyedbytimer = 1;

    if ( isdefined( var_1 ) )
        scripts\mp\gamescore::giveteamscoreforobjective( var_1, 5 );

    level notify( "hq_destroyed" );
}

awardhqpoints( var_0 )
{
    level endon( "game_ended" );
    level endon( "hq_destroyed" );
    level notify( "awardHQPointsRunning" );
    level endon( "awardHQPointsRunning" );
    var_1 = 12;
    var_2 = 5;
    var_3 = 5;
    var_4 = 5;

    if ( level.promode )
        var_5 = int( level.hqautodestroytime / var_1 );
    else
        var_5 = 5;

    var_6 = 0;

    while ( !level.gameended )
    {
        scripts\mp\gamescore::giveteamscoreforobjective( var_0, 15 );
        var_6++;
        wait( var_5 );
        scripts\mp\hostmigration::waittillhostmigrationdone();
    }
}

makeradioactive()
{
    self.gameobject scripts\mp\gameobjects::setmodelvisibility( 0 );
    self.gameobject scripts\mp\gameobjects::cancontestclaim( 1 );
    self.gameobject scripts\mp\gameobjects::enableobject();
    self.gameobject.ignorestomp = 1;
    self.trig.useobj = self.gameobject;
}

makeradioinactive()
{
    self.gameobject scripts\mp\gameobjects::releaseid();
    self.gameobject scripts\mp\gameobjects::setvisibleteam( "none" );
    self.gameobject scripts\mp\gameobjects::allowuse( "none" );
    level.radios = scripts\engine\utility::array_remove( level.radios, self );
}

pickradiotospawn()
{
    var_0 = [];
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == "spectator" )
            continue;

        if ( !isalive( var_3 ) )
            continue;

        var_3.dist = 0;

        if ( var_3.team == "allies" )
        {
            var_0[var_0.size] = var_3;
            continue;
        }

        var_1[var_1.size] = var_3;
    }

    if ( !var_0.size || !var_1.size )
    {
        if ( level.radios.size == 0 )
            level.radios = level.radios2;

        for ( var_5 = level.radios[randomint( level.radios.size )]; isdefined( level.prevradio ) && var_5 == level.prevradio; var_5 = level.radios[randomint( level.radios.size )] )
        {

        }

        level.prevradio2 = level.prevradio;
        level.prevradio = var_5;
        return var_5;
    }

    for ( var_6 = 0; var_6 < var_0.size; var_6++ )
    {
        for ( var_7 = var_6 + 1; var_7 < var_0.size; var_7++ )
        {
            var_8 = distancesquared( var_0[var_6].origin, var_0[var_7].origin );
            var_0[var_6].dist = var_0[var_6].dist + var_8;
            var_0[var_7].dist = var_0[var_7].dist + var_8;
        }
    }

    for ( var_6 = 0; var_6 < var_1.size; var_6++ )
    {
        for ( var_7 = var_6 + 1; var_7 < var_1.size; var_7++ )
        {
            var_8 = distancesquared( var_1[var_6].origin, var_1[var_7].origin );
            var_1[var_6].dist = var_1[var_6].dist + var_8;
            var_1[var_7].dist = var_1[var_7].dist + var_8;
        }
    }

    var_9 = var_0[0];

    foreach ( var_3 in var_0 )
    {
        if ( var_3.dist < var_9.dist )
            var_9 = var_3;
    }

    var_12["allies"] = var_9.origin;
    var_9 = var_1[0];

    foreach ( var_3 in var_1 )
    {
        if ( var_3.dist < var_9.dist )
            var_9 = var_3;
    }

    var_12["axis"] = var_1[0].origin;
    var_15 = undefined;
    var_16 = undefined;

    for ( var_6 = 0; var_6 < level.radios.size; var_6++ )
    {
        var_5 = level.radios[var_6];
        var_17 = abs( distance( var_5.origin, var_12["allies"] ) - distance( var_5.origin, var_12["axis"] ) );

        if ( isdefined( level.prevradio ) && var_5 == level.prevradio )
            continue;

        if ( isdefined( level.prevradio2 ) && var_5 == level.prevradio2 )
        {
            if ( level.radios.size > 2 )
                continue;
            else
                var_17 = var_17 + 512;
        }

        if ( !isdefined( var_16 ) || var_17 < var_16 )
        {
            var_16 = var_17;
            var_15 = var_5;
        }
    }

    level.prevradio2 = level.prevradio;
    level.prevradio = var_15;
    return var_15;
}

updaterespawntimer()
{
    level endon( "game_ended" );
    level endon( "zone_moved" );
    level endon( "zone_destroyed" );
    var_0 = gettime();

    if ( level.zoneduration > 0 )
        var_1 = var_0 + level.zoneduration * 1000;
    else
        var_1 = var_0 + scripts\mp\utility\game::gettimelimit() * 1000 - scripts\mp\utility\game::gettimepassed();

    var_2 = var_0;

    while ( var_2 < var_1 )
    {
        var_2 = gettime();
        level.spawndelay = ( var_1 - var_2 ) / 1000;
        waitframe();
    }
}

onteamscore( var_0, var_1, var_2 )
{

}

waittospawnvip()
{
    level endon( "game_ended" );
    level waittill( "spawn_btm_vip" );
    setomnvar( "ui_btm_timer", 0 );
    setomnvar( "ui_btm_status", -1 );
    level.spawnedvip = 1;
    level.hostagespawnpos = pickviptospawn();
    scripts\mp\spawnlogic::setactivespawnlogic( "Default", "Crit_Default" );
    level.onteamscore = undefined;
    level.hostagecarrystates = [];
    level.hostages[0] = scripts\mp\tac_ops\hostage_utility::spawnhostage( level.hostagespawnpos, "neutral" );
    level thread spawnextractzones();
    scripts\mp\utility\sound::playsoundonplayers( "iw8_new_objective_sfx" );

    foreach ( var_1 in level.teamnamelist )
    {
        scripts\mp\utility\dialog::leaderdialog( "obj_capture", var_1 );

        if ( scripts\mp\utility\teams::getteamdata( var_1, "teamCount" ) > 0 )
            scripts\mp\utility\print::teamhudtutorialmessage( "OBJECTIVES/CAPTURE_VIP", var_1, 4 );
    }

    level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 10, 10 );
}

spawnextractzones()
{
    level endon( "game_ended" );
    level.vipextractzones = [];
    var_0 = getextractionbtmflag();
    var_1 = getextractionbtmflag( var_0 );
    setupextractgoal( var_0, "allies" );
    setupextractgoal( var_1, "axis" );
}

getextractionbtmflag( var_0 )
{
    var_1 = 0;
    var_2 = undefined;
    var_3 = 1000000;

    foreach ( var_5 in level.primaryflags2 )
    {
        var_6 = scripts\engine\utility::distance_2d_squared( level.hostagespawnpos, var_5.origin );

        if ( isdefined( var_0 ) )
        {
            if ( var_6 > var_3 && var_0 != var_5.origin )
                var_2 = var_5;

            continue;
        }

        if ( var_6 > 1000000 )
            var_2 = var_5;
    }

    return var_2.origin;
}

setupextractgoal( var_0, var_1 )
{
    var_2 = spawn( "script_model", var_0 );
    var_2.angles = ( 0, 270, 0 );
    var_2.team = var_1;
    var_2.ownerteam = var_1;
    var_2.curorigin = var_0;
    var_2.offset3d = ( 0, 0, 32 );
    var_2.compassicons = [];
    var_2.type = "useObject";
    var_2 setmodel( "cop_marker_scriptable" );
    var_2 setscriptablepartstate( "marker", "red" );
    var_2 playloopsound( "mp_flare_burn_lp" );
    var_3 = spawn( "trigger_radius", var_0, 0, 120, 128 );
    var_2 scripts\mp\gameobjects::requestid( 1, 1 );
    var_2 scripts\mp\gameobjects::setvisibleteam( "none" );
    var_2 scripts\mp\gameobjects::setobjectivestatusicons( level.iconextract, level.iconpreventextract );
    var_3.goalent = var_2;
    var_3 thread goaltriggerwatcher();
    level.vipextractzones[var_1] = var_3;
    waitframe();
    playfxontag( level._effect["vfx_smk_signal"], var_2, "tag_origin" );
}

goaltriggerwatcher()
{
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( "trigger", var_0 );

        if ( isdefined( level.hostagecarrier ) && var_0 == level.hostagecarrier && var_0.team == self.goalent.team )
        {
            scripts\mp\tac_ops\hostage_utility::drophostage( var_0, level.hostages[0], var_0.origin );
            level.hostages[0].trigger makeunusable();
            level.hostages[0] makeunusable();
            level.hostages[0].useobj unlink();
            level.hostages[0].useobj makeunusable();
            level.hostages[0].trackedobject scripts\mp\gameobjects::allowuse( "none" );
            level.hostages[0].trackedobject scripts\mp\gameobjects::setvisibleteam( "none" );
            level.hostages[0].trackedobject scripts\mp\gameobjects::releaseid();
            level.hostages[0] notify( "gameobject_deleted" );
            level.hostages[0] delete();
            self.goalent scripts\mp\gameobjects::setvisibleteam( "none" );
            self.goalent scripts\mp\gameobjects::releaseid();
            scripts\mp\gamescore::giveteamscoreforobjective( var_0.team, 200, 0 );
            level notify( "vip_scored" );
            level.spawnedvip = 0;
            self.chopper thread scripts\mp\gametypes\br_extract_chopper.gsc::littlebirdleave();
            playannouncerbattlechatter( self.chopper.team, "extract_littlebird_leaving_a_friendly", 10 );

            foreach ( var_2 in level.vipextractzones )
            {
                stopfxontag( level._effect["vfx_smk_signal"], var_2.goalent, "tag_origin" );
                var_2.goalent stoploopsound();
                var_2.goalent delete();
                var_2.goalent = undefined;
                var_2 delete();
            }

            thread scripts\mp\utility\sound::playsoundonplayers( "mp_dom_flag_captured", var_0.team );
            thread scripts\mp\utility\sound::playsoundonplayers( "mp_dom_flag_lost", scripts\mp\utility\game::getotherteam( var_0.team )[0] );

            foreach ( var_5 in level.teamnamelist )
            {
                if ( scripts\mp\utility\teams::getteamdata( var_5, "teamCount" ) > 0 )
                    scripts\mp\utility\print::teamhudtutorialmessage( "OBJECTIVES/VIP_CAPTURED", var_5, 4 );
            }

            level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 0, 0 );
            break;
        }

        waitframe();
    }

    level.objectiveselector.objectivetypes[2] = "skip";
    level getnextobjective( "vip" );
}

summonextractchopper( var_0 )
{
    if ( !isdefined( var_0.chopper ) )
    {
        var_1 = scripts\mp\gametypes\br_extract_chopper.gsc::spawnextractchopper( var_0, var_0.origin );
        var_1.invulnerable = 1;
        var_0.chopper = var_1;
        self iprintlnbold( "Extraction copter en route!" );
        var_1.extractzone = var_0;
        var_1.extractteam = self.team;
        var_0.curorigin = var_0.origin;
        var_0.offset3d = ( 0, 0, 30 );
        var_0 thread extracttriggerwatcher( var_1 );
    }
}

extracttriggerwatcher( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "bugOut" );
    var_0 waittill( "esc_littlebird_arrive" );
    self.extractionactive = 1;
    playannouncerbattlechatter( var_0.extractteam, "extract_littlebird_close_a_friendly", 10 );
}

playannouncerbattlechatter( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_3 = "ustl";
    var_4 = "dx_mpa_" + var_3 + "_" + var_1 + "_" + var_2;

    if ( soundexists( var_4 ) )
    {
        foreach ( var_6 in level.players )
        {
            if ( var_6.team == var_0 )
                var_6 queuedialogforplayer( var_4, var_1, 2 );
        }
    }
}

pickviptospawn()
{
    var_0 = [];
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == "spectator" )
            continue;

        if ( !isalive( var_3 ) )
            continue;

        var_3.dist = 0;

        if ( var_3.team == "allies" )
        {
            var_0[var_0.size] = var_3;
            continue;
        }

        var_1[var_1.size] = var_3;
    }

    var_5 = level.primaryflags2;

    if ( !var_0.size || !var_1.size )
    {
        for ( var_6 = var_5[randomint( var_5.size )]; isdefined( level.prevspawnpos ) && var_6 == level.prevspawnpos; var_6 = var_5[randomint( var_5.size )] )
        {

        }

        level.prevspawnpos2 = level.prevspawnpos;
        level.prevspawnpos = var_6;
        return var_6.origin;
    }

    for ( var_7 = 0; var_7 < var_0.size; var_7++ )
    {
        for ( var_8 = var_7 + 1; var_8 < var_0.size; var_8++ )
        {
            var_9 = distancesquared( var_0[var_7].origin, var_0[var_8].origin );
            var_0[var_7].dist = var_0[var_7].dist + var_9;
            var_0[var_8].dist = var_0[var_8].dist + var_9;
        }
    }

    for ( var_7 = 0; var_7 < var_1.size; var_7++ )
    {
        for ( var_8 = var_7 + 1; var_8 < var_1.size; var_8++ )
        {
            var_9 = distancesquared( var_1[var_7].origin, var_1[var_8].origin );
            var_1[var_7].dist = var_1[var_7].dist + var_9;
            var_1[var_8].dist = var_1[var_8].dist + var_9;
        }
    }

    var_10 = var_0[0];

    foreach ( var_3 in var_0 )
    {
        if ( var_3.dist < var_10.dist )
            var_10 = var_3;
    }

    var_13["allies"] = var_10.origin;
    var_10 = var_1[0];

    foreach ( var_3 in var_1 )
    {
        if ( var_3.dist < var_10.dist )
            var_10 = var_3;
    }

    var_13["axis"] = var_1[0].origin;
    var_16 = undefined;
    var_17 = undefined;

    for ( var_7 = 0; var_7 < var_5.size; var_7++ )
    {
        var_6 = var_5[var_7];
        var_18 = abs( distance( var_6.origin, var_13["allies"] ) - distance( var_6.origin, var_13["axis"] ) );

        if ( isdefined( level.prevspawnpos ) && var_6 == level.prevspawnpos )
            continue;

        if ( isdefined( level.prevspawnpos2 ) && var_6 == level.prevspawnpos2 )
        {
            if ( var_5.size > 2 )
                continue;
            else
                var_18 = var_18 + 512;
        }

        if ( !isdefined( var_17 ) || var_18 < var_17 )
        {
            var_17 = var_18;
            var_16 = var_6;
        }
    }

    level.prevspawnpos2 = level.prevspawnpos;
    level.prevspawnpos = var_16;
    return var_16.origin;
}

waittospawnjuggcrate()
{
    level endon( "game_ended" );
    level waittill( "spawn_btm_jugg" );
    level.spawnedjugg = 1;
    scripts\mp\spawnlogic::setactivespawnlogic( "Default", "Crit_Default" );
    scripts\mp\utility\sound::playsoundonplayers( "iw8_new_objective_sfx" );

    foreach ( var_1 in level.teamnamelist )
    {
        scripts\mp\utility\dialog::leaderdialog( "obj_capture", var_1 );

        if ( scripts\mp\utility\teams::getteamdata( var_1, "teamCount" ) > 0 )
            scripts\mp\utility\print::teamhudtutorialmessage( "OBJECTIVES/CAPTURE_JUGG", var_1, 4 );
    }

    level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 19, 19 );
    level.spawnedjugg = 1;
    level.juggcratespawnpos = pickviptospawn();
    initjugg();
    level.btmjuggcrate = createjuggcrate( level.juggcratespawnpos, ( 0, 0, 0 ) );
    setomnvar( "ui_btm_timer", int( 30000 + gettime() ) );
    setomnvar( "ui_btm_status", 2 );
    wait 30;
    level.btmjuggcrate thread juggcratemanageuse();
    setomnvar( "ui_btm_timer", 0 );
    setomnvar( "ui_btm_status", -1 );
    objective_icon( level.juggcrateobjid, "icon_minimap_juggernaut" );
}

createjuggcrate( var_0, var_1 )
{
    var_2 = getgroundposition( var_0, 32 );
    var_3 = spawn( "script_model", var_2 + ( 0, 0, 40 ) );
    var_4 = spawn( "script_model", var_2 );
    var_3.cratemodel = var_4;
    var_3.cratemodel.angles = var_1;
    var_3.cratemodel setmodel( "military_crate_large_stackable_01_jugg" );
    var_3.crateid = var_3 getentitynumber();
    createjuggcrateobjective( var_3 );
    return var_3;
}

juggcratemanageuse()
{
    level endon( "game_ended" );
    self endon( "death" );
    self setuserange( 120 );
    self setcursorhint( "HINT_NOICON" );
    self sethintstring( &"MP_MODE_RUGBY/CRATE_USE" );
    self setuseholdduration( "duration_long" );
    self makeusable();
    self.inuse = 0;
    thread juggcratewatchuseprogress();
    thread juggcratewatchusecompleted();
    thread juggcratewatchstopuseprogress();
}

juggcrateused( var_0 )
{
    activatenewjuggernaut( var_0 );
    juggcratecleanup();
    level notify( "jugg_scored" );
    level.objectiveselector.objectivetypes[3] = "skip";
    level getnextobjective( "jugg" );
    self.cratemodel delete();
    self delete();
}

juggcratecleanup()
{
    scripts\mp\objidpoolmanager::returnobjectiveid( self.objid );
}

juggcratewatchusecompleted()
{
    level endon( "game_ended" );
    self endon( "death" );

    for (;;)
    {
        self waittill( "trigger", var_0 );

        if ( !scripts\mp\utility\player::isreallyalive( var_0 ) )
            continue;

        juggcrateused( var_0 );
        return;
    }
}

juggcratewatchuseprogress()
{
    level endon( "game_ended" );
    self endon( "death" );

    for (;;)
    {
        self waittill( "trigger_progress", var_0 );
        self.usingplayer = var_0;
        self.inuse = 1;
        self.lastusetime = gettime();
    }
}

juggcratewatchstopuseprogress()
{
    level endon( "game_ended" );
    self endon( "death" );
    var_0 = self.inuse;
    var_1 = self.usingplayer;

    for (;;)
    {
        wait 0.2;

        if ( self.inuse )
        {
            if ( self.lastusetime < gettime() - 200.0 )
            {
                self.inuse = 0;
                self.usingplayer = undefined;
                self.lastusetime = undefined;
                continue;
            }

            var_2 = isdefined( var_1 ) && isdefined( self.usingplayer ) && var_1 != self.usingplayer;

            if ( !var_0 || var_2 )
                updatejuggcrateobjectivestate( self );
        }
        else if ( var_0 )
            updatejuggcrateobjectivestate( self );

        var_0 = self.inuse;
        var_1 = self.usingplayer;
    }
}

createjuggcrateobjective( var_0 )
{
    var_1 = scripts\mp\objidpoolmanager::requestobjectiveid( 99 );
    var_0.objid = var_1;
    level.juggcrateobjid = var_1;
    var_2 = var_0.origin + ( 0, 0, 32 );
    scripts\mp\objidpoolmanager::objective_add_objective( var_1, "current", var_2, level.iconlocked );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_1, 0 );
    scripts\mp\objidpoolmanager::objective_set_play_outro( var_1, 0 );
    scripts\mp\objidpoolmanager::objective_playermask_showtoall( var_1 );
    objective_setneutrallabel( var_1, "MP_MODE_RUGBY/CRATE_CAPTURE" );
    objective_setfriendlylabel( var_1, "MP_MODE_RUGBY/CRATE_CAPTURING" );
    objective_setenemylabel( var_1, "MP_MODE_RUGBY/CRATE_LOSING" );
    updatejuggcrateobjectivestate( var_0 );
}

updatejuggcrateobjectivestate( var_0 )
{
    var_1 = var_0.objid;
    var_2 = istrue( var_0.inuse );

    if ( var_2 )
    {
        objective_setownerteam( var_1, var_0.usingplayer.team );
        objective_sethot( var_1, 1 );
    }
    else
    {
        objective_setownerteam( var_1, undefined );
        objective_sethot( var_1, 0 );
    }
}

activatenewjuggernaut( var_0 )
{
    var_1 = level.btm;
    var_2 = spawnstruct();
    var_2.player = var_0;
    var_3 = var_0 getentitynumber();
    var_2.id = var_3;
    var_1.activejuggernauts[var_3] = var_0;
    var_0.btmjugginfo = var_2;
    setupplayerasjugg( var_0 );
    createjuggobjective( var_0, var_2 );
}

setupplayerasjugg( var_0 )
{
    var_1 = level.btm.juggconfig;
    var_0 scripts\mp\juggernaut::jugg_makejuggernaut( var_1 );
    var_0 givemaxammo( var_0.classstruct.loadoutprimaryobject );
    var_0 givemaxammo( var_0.classstruct.loadoutsecondaryobject );
    var_0 scripts\mp\weapons::updatemovespeedscale();
    var_2 = scripts\mp\utility\teams::getenemyteams( var_0.team );
    var_3 = var_2[0];
    var_0.isjuggernaut = 1;
}

createjuggobjective( var_0, var_1 )
{
    var_2 = scripts\mp\objidpoolmanager::requestobjectiveid( 99 );
    var_1.juggobjid = var_2;
    scripts\mp\objidpoolmanager::objective_add_objective( var_2, "current", var_0.origin, "icon_minimap_juggernaut" );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_2, 0 );
    scripts\mp\objidpoolmanager::objective_set_play_outro( var_2, 0 );
    scripts\mp\objidpoolmanager::objective_playermask_showtoall( var_2 );
    scripts\mp\objidpoolmanager::update_objective_onentity( var_2, var_0 );
    scripts\mp\objidpoolmanager::update_objective_setzoffset( var_2, 90 );
    objective_setownerteam( var_2, var_0.team );
    objective_setfriendlylabel( var_2, "MP_INGAME_ONLY/OBJ_DEFEND_CAPS" );
    objective_setenemylabel( var_2, "MP_INGAME_ONLY/OBJ_KILL_CAPS" );
}

initjugg()
{
    var_0 = scripts\mp\juggernaut::jugg_createconfig();
    level.btm.juggconfig = var_0;
    var_1 = getjuggmaxhealth();
    var_0.maxhealth = var_1;
    var_0.startinghealth = var_1;
    var_0.suit = "iw8_juggernaut_mp_rugby";
    var_0.allows["crouch"] = 0;
    var_0.allows["sprint"] = 0;
    var_0.allows["usability"] = 0;
    var_0.allows["weapon_switch"] = undefined;
    var_0.classstruct.loadoutprimary = "iw8_lm_dblmg";
    var_0.classstruct.loadoutprimaryattachments = [ "holo" ];
    var_0.classstruct.loadoutsecondary = "iw8_pi_decho";
}

cleanupobjectiveiconsforjugg( var_0 )
{
    scripts\mp\objidpoolmanager::returnobjectiveid( var_0.btmjugginfo.juggobjid );
}

getjuggmaxhealth()
{
    return getdvarint( "scr_btm_juggHealth" );
}

waittospawnbtmbombs()
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "prematch_done" );
    level waittill( "spawn_btm_dd" );
    level.bombexploded = 0;
    level.multibomb = 1;
    level.bombsplanted = 0;
    level.bombtimer = 45;
    level.defusetime = 5;
    level.planttime = 5;
    level.bombzones = [];
    level.aplanted = 0;
    level.bplanted = 0;
    level thread applybombstoplayers();
    var_0 = getfirstbtmbombloc();
    var_1 = getsecondbtmbombloc( var_0 );
    var_0 = getgroundposition( var_0.origin, 64 );
    var_1 = getgroundposition( var_1.origin, 64 );
    level.resetprogress = 1;
    scripts\mp\spawnlogic::setactivespawnlogic( "Default", "Crit_Default" );
    var_2 = getentarray( "bombzone", "targetname" );
    var_2 = scripts\mp\gametypes\sd.gsc::removebombzonec( var_2 );

    for ( var_3 = 0; var_3 < var_2.size; var_3++ )
    {
        var_4 = getentarray( var_2[var_3].target, "targetname" );

        if ( var_3 == 0 )
        {
            var_2[var_3] = modifybombzonecollision( var_4, var_2[var_3], var_0 );
            var_2[var_3].origin = var_0;
            var_4[0].origin = var_0;
        }
        else
        {
            var_2[var_3] = modifybombzonecollision( var_4, var_2[var_3], var_1 );
            var_2[var_3].origin = var_1;
            var_4[0].origin = var_1;
        }

        var_5 = scripts\mp\gameobjects::createuseobject( "neutral", var_2[var_3], var_4, ( 0, 0, 64 ) );
        var_5 scripts\mp\gameobjects::allowuse( "none" );
        var_6 = var_2[var_3].script_label;

        if ( isdefined( var_2[var_3].objectivekey ) )
            var_5.objectivekey = var_2[var_3].objectivekey;
        else
            var_5.objectivekey = var_5 scripts\mp\gameobjects::getlabel();

        if ( isdefined( var_2[var_3].iconname ) )
            var_5.iconname = var_2[var_3].iconname;
        else
            var_5.iconname = var_5 scripts\mp\gameobjects::getlabel();

        var_5.id = "bomb_zone";
        var_5.trigger setusepriority( -3 );
        var_5 scripts\mp\gameobjects::setusetime( level.planttime );
        var_5 scripts\mp\gameobjects::setwaitweaponchangeonuse( 0 );
        var_5 scripts\mp\gameobjects::setusehinttext( &"MP/HOLD_TO_PLANT_EXPLOSIVES" );

        if ( var_5.objectivekey == "_c" )
        {
            var_5.objectivekey = "_a";
            var_5.iconname = "_a";
        }

        var_5 scripts\mp\gameobjects::setobjectivestatusicons( level.iconlocked );
        var_5 scripts\mp\gameobjects::setvisibleteam( "any" );
        var_5.onbeginuse = scripts\mp\gametypes\obj_bombzone.gsc::bombzone_onbeginuse;
        var_5.onenduse = scripts\mp\gametypes\obj_bombzone.gsc::bombzone_onenduse;
        var_5.onuse = scripts\mp\gametypes\obj_bombzone.gsc::bombzone_onuseplantobject;
        var_5.oncantuse = scripts\mp\gametypes\obj_bombzone.gsc::bombzone_oncantuse;
        var_5.useweapon = getcompleteweaponname( "briefcase_bomb_mp" );
        var_5.bombplanted = 0;
        var_5.bombexploded = undefined;
        var_5.resetprogress = level.resetprogress;

        for ( var_7 = 0; var_7 < var_4.size; var_7++ )
        {
            if ( isdefined( var_4[var_7].script_exploder ) )
            {
                var_5.exploderindex = var_4[var_7].script_exploder;
                var_4[var_7] thread scripts\mp\gametypes\obj_bombzone.gsc::setupkillcament( var_5 );
                break;
            }
        }

        var_5.bombdefusetrig = getent( var_4[0].target, "targetname" );
        var_5.bombdefusetrig.origin = var_5.bombdefusetrig.origin + ( 0, 0, -10000 );
        var_5.bombdefusetrig.label = var_6;
        var_5.noweapondropallowedtrigger = spawn( "trigger_radius", var_5.trigger.origin, 0, 140, 100 );
        level.objectives[var_5.objectivekey] = var_5;
        level.bombzones[level.bombzones.size] = var_5;
    }

    setomnvar( "ui_btm_timer", int( 30000 + gettime() ) );
    setomnvar( "ui_btm_status", 2 );
    wait 30;

    foreach ( var_5 in level.bombzones )
    {
        var_5 scripts\mp\gameobjects::allowuse( "any" );
        var_5 scripts\mp\gameobjects::setobjectivestatusicons( level.iconplant );
    }

    setomnvar( "ui_btm_timer", 0 );
    setomnvar( "ui_btm_status", -1 );
    level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 20, 20 );
}

applybombstoplayers()
{
    foreach ( var_1 in level.players )
    {
        if ( !isai( var_1 ) )
        {
            var_1 setclientomnvar( "ui_carrying_bomb", 1 );
            var_1.isplanting = 0;
            var_1.isdefusing = 0;
            var_1.isbombcarrier = 1;
        }
    }
}

resetbombzone()
{
    scripts\mp\gameobjects::setownerteam( "neutral" );
    scripts\mp\gameobjects::setobjectivestatusicons( level.iconplant );
    self.id = "bomb_zone";
    scripts\mp\gameobjects::setusetime( level.planttime );
    scripts\mp\gameobjects::setvisibleteam( "any" );
    scripts\mp\gameobjects::setusehinttext( &"MP/HOLD_TO_PLANT_EXPLOSIVES" );
    self.useweapon = getcompleteweaponname( "briefcase_bomb_mp" );
    self.bombexploded = undefined;
    self.bombplanted = 0;
}

bombhandler( var_0, var_1, var_2 )
{
    level.bombsplanted = level.bombsplanted - 1;

    if ( self.objectivekey == "_a" )
        level.aplanted = 0;
    else
        level.bplanted = 0;

    scripts\mp\gametypes\obj_bombzone.gsc::setbombtimeromnvars();

    if ( level.gameended )
        return;

    if ( var_1 == "explode" )
    {
        self.bombexploded = 1;
        self.bombplanted = 0;
        scripts\mp\gameobjects::releaseid();
        scripts\mp\gamescore::giveteamscoreforobjective( var_0.team, 100 );

        if ( level.bombexploded > 1 )
        {
            level.objectiveselector.objectivetypes[4] = "skip";
            level getnextobjective( "dd" );
        }
    }
    else
    {
        var_0 notify( "bomb_defused" + self.objectivekey );
        self notify( "defused" );
        resetbombzone();
    }
}

getsecondbtmbombloc( var_0 )
{
    var_1 = 1000000;
    var_2 = [];
    var_3 = [];

    foreach ( var_5 in level.players )
    {
        if ( var_5.team == "spectator" )
            continue;

        if ( !isalive( var_5 ) )
            continue;

        var_5.dist = 0;

        if ( var_5.team == "allies" )
        {
            var_2[var_2.size] = var_5;
            continue;
        }

        var_3[var_3.size] = var_5;
    }

    var_7 = level.primaryflags2;

    if ( !var_2.size || !var_3.size )
    {
        for ( var_8 = var_7[randomint( var_7.size )]; isdefined( level.prevbomb ) && var_8 == level.prevbomb; var_8 = var_7[randomint( var_7.size )] )
        {

        }

        level.prevbomb2 = level.prevbomb;
        level.prevbomb = var_8;
        return var_8;
    }

    for ( var_9 = 0; var_9 < var_2.size; var_9++ )
    {
        for ( var_10 = var_9 + 1; var_10 < var_2.size; var_10++ )
        {
            var_11 = distancesquared( var_2[var_9].origin, var_2[var_10].origin );
            var_2[var_9].dist = var_2[var_9].dist + var_11;
            var_2[var_10].dist = var_2[var_10].dist + var_11;
        }
    }

    for ( var_9 = 0; var_9 < var_3.size; var_9++ )
    {
        for ( var_10 = var_9 + 1; var_10 < var_3.size; var_10++ )
        {
            var_11 = distancesquared( var_3[var_9].origin, var_3[var_10].origin );
            var_3[var_9].dist = var_3[var_9].dist + var_11;
            var_3[var_10].dist = var_3[var_10].dist + var_11;
        }
    }

    var_12 = var_2[0];

    foreach ( var_5 in var_2 )
    {
        if ( var_5.dist < var_12.dist )
            var_12 = var_5;
    }

    var_15["allies"] = var_12.origin;
    var_12 = var_3[0];

    foreach ( var_5 in var_3 )
    {
        if ( var_5.dist < var_12.dist )
            var_12 = var_5;
    }

    var_15["axis"] = var_3[0].origin;
    var_18 = undefined;
    var_19 = undefined;

    for ( var_9 = 0; var_9 < var_7.size; var_9++ )
    {
        var_8 = var_7[var_9];
        var_20 = abs( distance( var_8.origin, var_15["allies"] ) - distance( var_8.origin, var_15["axis"] ) );

        if ( isdefined( level.prevbomb ) && var_8 == level.prevbomb )
            continue;

        if ( isdefined( level.prevbomb2 ) && var_8 == level.prevbomb2 )
        {
            if ( var_7.size > 2 )
                continue;
            else
                var_20 = var_20 + 512;
        }

        var_11 = scripts\engine\utility::distance_2d_squared( var_0.origin, var_8.origin );

        if ( isdefined( var_0 ) )
        {
            if ( var_11 > var_1 && var_0.origin != var_8.origin )
                var_18 = var_8;
        }
        else if ( var_11 > 1000000 )
            var_18 = var_8;

        if ( !isdefined( var_19 ) || var_20 < var_19 )
        {
            var_19 = var_20;
            var_18 = var_8;
        }
    }

    level.prevbomb2 = level.prevbomb;
    level.prevbomb = var_18;
    return var_18;
}

getfirstbtmbombloc()
{
    var_0 = [];
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == "spectator" )
            continue;

        if ( !isalive( var_3 ) )
            continue;

        var_3.dist = 0;

        if ( var_3.team == "allies" )
        {
            var_0[var_0.size] = var_3;
            continue;
        }

        var_1[var_1.size] = var_3;
    }

    var_5 = level.primaryflags2;

    if ( !var_0.size || !var_1.size )
    {
        for ( var_6 = var_5[randomint( var_5.size )]; isdefined( level.prevbomb ) && var_6 == level.prevbomb; var_6 = var_5[randomint( var_5.size )] )
        {

        }

        level.prevbomb2 = level.prevbomb;
        level.prevbomb = var_6;
        return var_6;
    }

    for ( var_7 = 0; var_7 < var_0.size; var_7++ )
    {
        for ( var_8 = var_7 + 1; var_8 < var_0.size; var_8++ )
        {
            var_9 = distancesquared( var_0[var_7].origin, var_0[var_8].origin );
            var_0[var_7].dist = var_0[var_7].dist + var_9;
            var_0[var_8].dist = var_0[var_8].dist + var_9;
        }
    }

    for ( var_7 = 0; var_7 < var_1.size; var_7++ )
    {
        for ( var_8 = var_7 + 1; var_8 < var_1.size; var_8++ )
        {
            var_9 = distancesquared( var_1[var_7].origin, var_1[var_8].origin );
            var_1[var_7].dist = var_1[var_7].dist + var_9;
            var_1[var_8].dist = var_1[var_8].dist + var_9;
        }
    }

    var_10 = var_0[0];

    foreach ( var_3 in var_0 )
    {
        if ( var_3.dist < var_10.dist )
            var_10 = var_3;
    }

    var_13["allies"] = var_10.origin;
    var_10 = var_1[0];

    foreach ( var_3 in var_1 )
    {
        if ( var_3.dist < var_10.dist )
            var_10 = var_3;
    }

    var_13["axis"] = var_1[0].origin;
    var_16 = undefined;
    var_17 = undefined;

    for ( var_7 = 0; var_7 < var_5.size; var_7++ )
    {
        var_6 = var_5[var_7];
        var_18 = abs( distance( var_6.origin, var_13["allies"] ) - distance( var_6.origin, var_13["axis"] ) );

        if ( isdefined( level.prevbomb ) && var_6 == level.prevbomb )
            continue;

        if ( isdefined( level.prevbomb2 ) && var_6 == level.prevbomb2 )
        {
            if ( var_5.size > 2 )
                continue;
            else
                var_18 = var_18 + 512;
        }

        if ( !isdefined( var_17 ) || var_18 < var_17 )
        {
            var_17 = var_18;
            var_16 = var_6;
        }
    }

    level.prevbomb2 = level.prevbomb;
    level.prevbomb = var_16;
    return var_16;
}

modifybombzonecollision( var_0, var_1, var_2 )
{
    var_3 = var_1.origin;
    var_4 = modifiedbombzones( var_1, var_3, var_0, var_2 );
    return var_4;
}

modifiedbombzones( var_0, var_1, var_2, var_3 )
{
    var_2[0].origin = var_3;
    var_2[0].angles = ( 0, 0, 0 );
    var_0.origin = var_3;
    var_0.angles = ( 0, 0, 0 );
    setmodifiedbombzonescollision( ( 0, 0, 35 ), ( 0, 0, 0 ), var_1, var_2 );
    setexplodermodel( var_1, var_2 );
    return var_0;
}

setmodifiedbombzonescollision( var_0, var_1, var_2, var_3 )
{
    var_4 = getentarray( "script_brushmodel", "classname" );

    foreach ( var_6 in var_4 )
    {
        if ( isdefined( var_6.script_gameobjectname ) && var_6.script_gameobjectname == "bombzone" )
        {
            if ( distance( var_6.origin, var_2 ) < 100 )
            {
                var_7 = spawn( "script_model", var_3[0].origin + var_0 );
                var_7.angles = var_1;
                var_7 clonebrushmodeltoscriptmodel( var_6 );
                var_7 disconnectpaths();
                var_6 delete();
                break;
            }
        }
    }
}

setexplodermodel( var_0, var_1 )
{
    var_2 = getentarray( "script_model", "classname" );

    for ( var_3 = 0; var_3 < var_2.size; var_3++ )
    {
        if ( isdefined( var_2[var_3].script_exploder ) )
        {
            if ( isdefined( var_2[var_3].targetname ) && var_2[var_3].targetname == "exploder" && distance( var_2[var_3].origin, var_0 ) < 100 )
            {
                var_2[var_3].origin = var_1[0].origin;
                var_2[var_3].angles = var_1[0].angles;
            }
        }
    }
}

getspawnpoint()
{
    var_0 = self.pers["team"];

    if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
    {
        var_1 = scripts\mp\spawnlogic::getspawnpointarray( "mp_tdm_spawn_" + var_0 + "_start" );
        var_2 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_1 );
    }
    else if ( isdefined( level.radioobject ) )
    {
        var_1 = removespawnsinactivehq( level.radioobject.spawnpoints );
        var_3 = removespawnsinactivehq( level.radioobject.fallbackspawnpoints );
        var_4 = getobjzonedeadzonedist();
        var_5 = [];
        var_5["activeKOTHZoneNumber"] = level.radioobject.visuals[0] getentitynumber();
        var_5["maxSquaredDistToObjective"] = level.radioobject.visuals[0].furthestspawndistsq;
        var_5["kothZoneDeadzoneDistSq"] = var_4 * var_4;
        var_5["closestEnemyInfluenceDistSq"] = level.enemy_spawn_influence_dist_sq;
        var_2 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, level.radioobject.visuals[0].spawnset, level.radioobject.visuals[0].fallbackspawnset, undefined, var_5 );
    }
    else if ( isdefined( level.btmflagobject ) )
    {
        var_1 = removespawnsinactiveflag( level.btmflagobject.trigger.spawnpoints );
        var_3 = removespawnsinactiveflag( level.btmflagobject.trigger.fallbackspawnpoints );
        var_4 = getobjzonedeadzonedist();
        var_5 = [];
        var_5["activeKOTHZoneNumber"] = level.btmflagobject.trigger getentitynumber();
        var_5["maxSquaredDistToObjective"] = level.btmflagobject.trigger.furthestspawndistsq;
        var_5["kothZoneDeadzoneDistSq"] = var_4 * var_4;
        var_5["closestEnemyInfluenceDistSq"] = level.enemy_spawn_influence_dist_sq;
        var_2 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, level.btmflagobject.trigger.spawnset, level.btmflagobject.trigger.fallbackspawnset, undefined, var_5 );
    }
    else
        var_2 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, "normal", "fallback" );

    return var_2;
}

getobjzonedeadzonedist()
{
    return level.spawn_deadzone_dist;
}

removespawnsinactivehq( var_0 )
{
    var_1 = [];

    if ( isdefined( var_0 ) )
    {
        foreach ( var_3 in var_0 )
        {
            if ( !ispointinvolume( var_3.origin, level.radioobject.trigger ) )
                var_1[var_1.size] = var_3;
        }
    }

    return var_1;
}

removespawnsinactiveflag( var_0 )
{
    var_1 = [];

    if ( isdefined( var_0 ) )
    {
        foreach ( var_3 in var_0 )
        {
            if ( !ispointinvolume( var_3.origin, level.btmflagobject.trigger ) )
                var_1[var_1.size] = var_3;
        }
    }

    return var_1;
}

forcespawnplayers()
{
    var_0 = level.players;

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
    {
        var_2 = var_0[var_1];

        if ( !isdefined( var_2 ) || isalive( var_2 ) )
            continue;

        var_2 notify( "force_spawn" );
        wait 0.1;
    }
}

onspawnplayer()
{
    scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    self.forcespawnnearteammates = undefined;
    self setclientomnvar( "ui_match_status_hint_text", -1 );
    thread updatematchstatushintonspawn();

    if ( istrue( level.multibomb ) )
    {
        self setclientomnvar( "ui_carrying_bomb", 1 );
        self.isplanting = 0;
        self.isdefusing = 0;
        self.isbombcarrier = 1;
    }
}

movezoneaftertime( var_0 )
{
    level endon( "game_ended" );
    level endon( "zone_reset" );
    level endon( "dev_force_zone" );
    level.zonemovetime = var_0;
    level.zonedestroyedbytimer = 0;
    scripts\mp\gametypes\obj_zonecapture.gsc::zonetimerwait();
    level.zonedestroyedbytimer = 1;
    level notify( "zone_moved" );
    level notify( "zone_destroyed" );
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( !isplayer( var_1 ) || var_1.team == self.team )
        return;

    if ( var_1 == self )
        return;

    if ( isdefined( level.radioobject ) )
    {
        var_10 = level.radioobject.ownerteam;

        if ( !isdefined( var_10 ) )
            return;

        if ( isdefined( var_4 ) && scripts\mp\utility\weapon::iskillstreakweapon( var_4.basename ) )
            return;

        var_11 = self;
        var_12 = 0;
        var_13 = var_1.team;

        if ( level.zonecapturetime > 0 && var_1 istouching( level.radioobject.trigger ) )
        {
            if ( var_10 != var_13 )
                var_12 = 1;
        }

        if ( var_13 != var_10 )
        {
            if ( var_11 istouching( level.radioobject.trigger ) )
            {
                if ( var_12 )
                    var_1 thread scripts\mp\utility\points::giveunifiedpoints( "capture_kill" );

                var_1 thread scripts\mp\awards::givemidmatchaward( "mode_x_assault" );
                thread scripts\common\utility::_id_13E0A( level._id_11B24._id_11B30, var_9, "defending" );
            }
        }
        else if ( var_1 istouching( level.radioobject.trigger ) )
        {
            if ( var_12 )
                var_1 thread scripts\mp\utility\points::giveunifiedpoints( "capture_kill" );

            var_1 thread scripts\mp\awards::givemidmatchaward( "mode_x_defend" );
            var_1 scripts\mp\utility\stats::incpersstat( "defends", 1 );
            var_1 scripts\mp\persistence::statsetchild( "round", "defends", var_1.pers["defends"] );
            var_1 scripts\mp\utility\stats::setextrascore1( var_1.pers["defends"] );
        }
    }

    if ( istrue( level.spawnedjugg ) )
    {
        if ( var_3 == "MOD_SUICIDE" && var_4.basename == "none" && isdefined( self.wasswitchingteamsforonplayerkilled ) )
            return;

        var_11 = self;

        if ( isdefined( var_11.isjuggernaut ) )
        {
            level.spawnedjugg = 0;

            if ( isdefined( var_11.juggoverlay ) )
                var_11.juggoverlay destroy();

            var_11.playerstreakspeedscale = undefined;
            var_11.nostuckdamagekill = 0;
            var_11 scripts\mp\utility\player::_setsuit( "iw8_defaultsuit_mp" );
            cleanupobjectiveiconsforjugg( var_11 );
        }

        if ( isdefined( var_1 ) && isplayer( var_1 ) )
        {
            var_14 = 0;
            var_15 = 0;
            var_16 = 0;
            var_17 = 0;
            var_18 = 0;
            var_19 = 0;

            if ( var_1.team != var_11.team )
            {
                if ( isdefined( var_11.isjuggernaut ) )
                {
                    if ( isdefined( var_1.isjuggernaut ) )
                        var_15 = 1;
                    else
                        var_16 = 1;
                }
                else if ( isdefined( var_1.isjuggernaut ) )
                    var_17 = 1;
            }

            if ( var_16 )
            {
                var_1 thread scripts\mp\utility\points::giveunifiedpoints( "kill_juggernaut" );
                var_19 = level.ppkonjugg;
            }
            else if ( var_15 )
                var_19 = level.ppkjuggonjugg;
            else if ( var_17 )
                var_19 = level.ppkasjugg;

            if ( var_19 )
                var_1 scripts\mp\gamescore::giveteamscoreforobjective( var_1.pers["team"], var_19 );

            if ( var_1.team != var_11.team && game["state"] == "postgame" && game["teamScores"][var_1.team] > game["teamScores"][level.otherteam[var_1.team]] )
                var_1.finalkill = 1;
        }
    }
}

objectiveselectorsetup()
{
    level endon( "game_ended" );
    level.objectiveselector = spawnstruct();
    level.objectiveselector.objectivetypes = [];
    level.objectiveselector.objectivetypes[0] = "dom";
    level.objectiveselector.objectivetypes[1] = "koth";
    level.objectiveselector.objectivetypes[2] = "vip";
    level.objectiveselector.objectivetypes[3] = "jugg";
    level.objectiveselector.objectivetypes[4] = "dd";
    level.objectiveselector.prevobj = undefined;
    level.objectiveselector.currentobj = undefined;
    level getnextobjective();
}

getnextobjective( var_0 )
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "prematch_done" );

    if ( isdefined( var_0 ) )
    {
        level.objectiveselector.prevobj = var_0;

        for (;;)
        {
            var_1 = randomint( level.objectiveselector.objectivetypes.size );

            if ( var_0 != level.objectiveselector.objectivetypes[var_1] && level.objectiveselector.objectivetypes[var_1] != "skip" )
                break;

            waitframe();
        }

        setomnvar( "ui_btm_timer", int( 45000 + gettime() ) );
        setomnvar( "ui_btm_status", 1 );
        wait 45;
    }
    else
    {
        var_1 = randomint( level.objectiveselector.objectivetypes.size );
        setomnvar( "ui_btm_timer", int( 60000 + gettime() ) );
        setomnvar( "ui_btm_status", 1 );
        wait 60;
    }

    switch ( var_1 )
    {
        case 0:
            startbtmflag();
            break;
        case 1:
            starthq();
            break;
        case 2:
            startvip();
            break;
        case 3:
            startjugg();
            break;
        case 4:
            startddbombs();
            break;
        default:
            startbtmflag();
            break;
    }
}

startbtmflag()
{
    level notify( "spawn_btm_dom" );
}

starthq()
{
    level notify( "spawn_btm_hq" );
}

startvip()
{
    level notify( "spawn_btm_vip" );
}

startjugg()
{
    level notify( "spawn_btm_jugg" );
}

startddbombs()
{
    level notify( "spawn_btm_dd" );
}

give_capture_credit( var_0, var_1, var_2, var_3, var_4 )
{
    level endon( "game_ended" );
    level.lastcaptime = gettime();
    var_5 = var_4;

    if ( isdefined( var_5.owner ) )
        var_5 = var_5.owner;

    if ( isplayer( var_5 ) )
    {
        if ( !isscoreboosting( var_5 ) )
        {
            var_5 thread scripts\common\utility::_id_13E0A( level._id_11B29, "capture", var_5.origin );
            var_5 thread scripts\mp\awards::givemidmatchaward( "mode_hp_secure" );

            if ( isdefined( level.radioobject.lastactivatetime ) && gettime() - level.radioobject.lastactivatetime <= 2100 )
                var_5 thread scripts\mp\awards::givemidmatchaward( "mode_hp_quick_cap" );

            if ( var_5.lastkilltime + 500 > gettime() )
            {

            }
            else
                var_5 scripts\mp\gametypes\obj_zonecapture.gsc::setcrankedtimerzonecap( var_5 );
        }
    }

    var_6 = getarraykeys( var_0 );

    for ( var_7 = 0; var_7 < var_6.size; var_7++ )
    {
        var_8 = var_0[var_6[var_7]].player;
        var_8 updatecapsperminute( var_3 );

        if ( !isscoreboosting( var_8 ) )
        {
            var_8 scripts\mp\utility\stats::incpersstat( "captures", 1 );
            var_8 scripts\mp\persistence::statsetchild( "round", "captures", var_8.pers["captures"] );
        }
        else
        {

        }

        wait 0.05;
    }
}

updatecapsperminute( var_0 )
{
    if ( !isdefined( self.capsperminute ) )
    {
        self.numcaps = 0;
        self.capsperminute = 0;
    }

    if ( !isdefined( var_0 ) || var_0 == "neutral" )
        return;

    self.numcaps++;
    var_1 = scripts\mp\utility\game::gettimepassed() / 60000;

    if ( isplayer( self ) && isdefined( self.timeplayed["total"] ) )
        var_1 = self.timeplayed["total"] / 60;

    self.capsperminute = self.numcaps / var_1;

    if ( self.capsperminute > self.numcaps )
        self.capsperminute = self.numcaps;
}

isscoreboosting( var_0 )
{
    if ( var_0.capsperminute > 3 )
        return 1;

    return 0;
}

onplayerconnect( var_0 )
{
    var_0._hardpointeffect = [];
    var_0.numcaps = 0;
    var_0.capsperminute = 0;
    var_0.timebyrotation = [];
    var_0 scripts\mp\utility\stats::setextrascore0( 0 );

    if ( isdefined( var_0.pers["captures"] ) )
        var_0 scripts\mp\utility\stats::setextrascore0( var_0.pers["captures"] );

    var_0 scripts\mp\utility\stats::setextrascore1( 0 );

    if ( isdefined( var_0.pers["defends"] ) )
        var_0 scripts\mp\utility\stats::setextrascore1( var_0.pers["defends"] );

    thread onplayerspawned( var_0 );
}

onplayerspawned( var_0 )
{
    for (;;)
        var_0 waittill( "spawned" );
}

getownerteamplayer( var_0 )
{
    var_1 = undefined;

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == var_0 )
        {
            var_1 = var_3;
            break;
        }
    }

    return var_1;
}

getrespawndelay()
{
    if ( !level.delayplayer )
        return undefined;

    if ( !isdefined( level.radioobject ) )
        return undefined;

    var_0 = level.radioobject.ownerteam;

    if ( isdefined( var_0 ) )
    {
        if ( self.pers["team"] == var_0 )
        {
            if ( !level.spawndelay )
                return undefined;

            return level.spawndelay;
        }
    }
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    scripts\mp\gametypes\common.gsc::oncommonnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 );
}

updatematchstatushintonspawn()
{
    level endon( "game_ended" );

    if ( isdefined( level.btmflagobject ) )
    {
        if ( isdefined( level.btmflagobject.ownerteam ) )
        {
            if ( level.btmflagobject.ownerteam == self.team )
                self setclientomnvar( "ui_match_status_hint_text", 15 );
            else
                self setclientomnvar( "ui_match_status_hint_text", 14 );
        }
    }
    else if ( isdefined( level.radioobject ) )
    {
        if ( isdefined( level.radioobject.ownerteam ) )
        {
            if ( level.radioobject.ownerteam == self.team )
                self setclientomnvar( "ui_match_status_hint_text", 17 );
            else
                self setclientomnvar( "ui_match_status_hint_text", 16 );
        }
    }
    else if ( istrue( level.spawnedvip ) )
    {
        if ( isdefined( level.hostagecarrier ) )
        {
            if ( level.hostagecarrier.team == self.team )
            {
                if ( level.hostagecarrier == self )
                    self setclientomnvar( "ui_match_status_hint_text", 13 );
                else
                    self setclientomnvar( "ui_match_status_hint_text", 11 );
            }
            else
                self setclientomnvar( "ui_match_status_hint_text", 12 );
        }
        else if ( level.hostages[0].team == self.team )
            self setclientomnvar( "ui_match_status_hint_text", 10 );
        else
            self setclientomnvar( "ui_match_status_hint_text", 12 );
    }
    else if ( istrue( level.spawnedjugg ) )
        self setclientomnvar( "ui_match_status_hint_text", 19 );
    else
        self setclientomnvar( "ui_match_status_hint_text", 0 );
}

seticonnames()
{
    level.iconneutral = "waypoint_captureneutral";
    level.iconcapture = "waypoint_capture";
    level.icondefend = "waypoint_defend";
    level.iconcontested = "waypoint_contested";
    level.icontaking = "waypoint_taking";
    level.iconlosing = "waypoint_losing";
    level.icontarget = "waypoint_dom_target";
    level.iconlocked = "icon_waypoint_locked";
    level.iconhqtarget = "hq_target";
    level.iconhqneutral = "hq_neutral";
    level.iconhqcapture = "hq_destroy";
    level.iconhqdefend = "hq_defend";
    level.iconhqcontested = "hq_contested";
    level.iconhqtaking = "hq_taking";
    level.iconhqlosing = "hq_losing";
    level.iconrecover = "waypoint_recover_vip";
    level.iconescort = "waypoint_escort_vip_carrier";
    level.iconkill = "waypoint_kill_vip_carrier";
    level.iconextract = "waypoint_extract_vip";
    level.iconpreventextract = "icon_waypoint_prevent_exfil";
    level.iconplant = "waypoint_target_btm";
}

setupwaypointicons()
{

}
