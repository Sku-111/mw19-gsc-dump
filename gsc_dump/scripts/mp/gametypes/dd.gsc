// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "mapname" ) == "mp_background" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = scripts\mp\utility\game::getgametype();
    var_0[1] = "dd_bombzone";
    var_0[2] = "blocker";
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 1, 0, 9 );
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 180 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 3 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 2 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::setovertimelimitdvar( 180 );
    }

    updategametypedvars();
    level.objectivebased = 1;
    level.teambased = 1;
    level.onprecachegametype = ::onprecachegametype;
    level.onstartgametype = ::onstartgametype;
    level.getspawnpoint = ::getspawnpoint;
    level.modeonspawnplayer = ::onspawnplayer;
    level.ondeadevent = ::ondeadevent;
    level.ontimelimit = ::ontimelimit;
    level.onnormaldeath = ::onnormaldeath;
    level.gamemodemaydropweapon = scripts\mp\utility\game::isplayeroutsideofanybombsite;
    level.resetuiomnvargamemode = scripts\mp\gametypes\obj_bombzone.gsc::resetuiomnvargamemode;
    level.dd = 1;
    level.bombsplanted = 0;
    level.ddbombmodel = [];
    level.aplanted = 0;
    level.bplanted = 0;
    scripts\mp\gametypes\obj_bombzone.gsc::setbombtimeromnvars();
    game["dialog"]["gametype"] = "gametype_demo";

    if ( getdvarint( "OSMSLRTOP" ) )
        game["dialog"]["gametype"] = "hc_" + game["dialog"]["gametype"];
    else if ( getdvarint( "NOSLRNTRKL" ) )
        game["dialog"]["gametype"] = "thirdp_" + game["dialog"]["gametype"];
    else if ( getdvarint( "scr_diehard" ) )
        game["dialog"]["gametype"] = "dh_" + game["dialog"]["gametype"];
    else if ( getdvarint( "scr_" + scripts\mp\utility\game::getgametype() + "_promode" ) )
        game["dialog"]["gametype"] = game["dialog"]["gametype"] + "_pro";

    game["dialog"]["bomb_achieve"] = "bomb_achieve";
    game["dialog"]["bomb_taken"] = "bomb_taken";
    game["dialog"]["bomb_lost"] = "bomb_enemyowns";
    game["dialog"]["bomb_defused"] = "bomb_defused";
    game["dialog"]["bomb_planted"] = "bomb_planted";
    game["dialog"]["enemy_bomb_a"] = "bomb_enemy_a";
    game["dialog"]["enemy_bomb_b"] = "bomb_enemy_b";
    game["dialog"]["enemy_bomb_defused"] = "bomb_enemydefused";
    game["dialog"]["enemy_bomb_planted"] = "bomb_enemyplanted";
    game["dialog"]["bomb_planting"] = "bomb_planting";
    game["dialog"]["bomb_planting_a"] = "bomb_planting_a";
    game["dialog"]["bomb_planting_b"] = "bomb_planting_b";
    game["dialog"]["bomb_destroyed_en"] = "objective_destroyed";

    if ( !isdefined( game["roundsPlayed"] ) )
    {
        var_1 = "boost_demoattack";
        var_2 = "boost_demodefend";
    }
    else if ( game["roundsPlayed"] == 2 )
    {
        var_1 = "boost_demo_ot";
        var_2 = "boost_demo_ot";
    }
    else
    {
        var_1 = "boost_demoattack_short";
        var_2 = "boost_demodefend_short";
    }

    game["dialog"]["offense_obj"] = var_1;
    game["dialog"]["defense_obj"] = var_2;
    return isdefined( game["status"] ) && game["status"] == "overtime";
    setomnvar( "ui_bomb_timer_endtime_a", 0 );
    setomnvar( "ui_bomb_timer_endtime_b", 0 );
    setomnvar( "ui_bomb_planted_a", 0 );
    setomnvar( "ui_bomb_planted_b", 0 );
    setomnvar( "ui_bomb_interacting", 0 );
    level.nosuspensemusic = 1;
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "scr_dd_bombtimer", getmatchrulesdata( "bombData", "bombTimer" ) );
    setdynamicdvar( "scr_dd_planttime", getmatchrulesdata( "bombData", "plantTime" ) );
    setdynamicdvar( "scr_dd_defusetime", getmatchrulesdata( "bombData", "defuseTime" ) );
    setdynamicdvar( "scr_dd_silentPlant", getmatchrulesdata( "bombData", "silentPlant" ) );
    setdynamicdvar( "scr_dd_extratime", getmatchrulesdata( "demData", "extraTime" ) );
    setdynamicdvar( "scr_dd_overtimeLimit", getmatchrulesdata( "demData", "overtimeLimit" ) );
    setdynamicdvar( "scr_dd_halftime", 0 );
    scripts\mp\utility\game::registerhalftimedvar( "dd", 0 );
    setdynamicdvar( "scr_dd_promode", 0 );
}

onprecachegametype()
{
    game["bomb_dropped_sound"] = "mp_war_objective_lost";
    game["bomb_recovered_sound"] = "mp_war_objective_taken";
}

onstartgametype()
{
    if ( game["roundsPlayed"] == 2 )
    {
        game["status"] = "overtime";
        setdvar( "ui_overtime", 1 );
    }

    if ( scripts\mp\utility\game::inovertime() )
    {
        setomnvar( "ui_round_hint_override_attackers", 1 );
        setomnvar( "ui_round_hint_override_defenders", 1 );
    }

    if ( !isdefined( game["switchedsides"] ) )
        game["switchedsides"] = 0;

    if ( game["switchedsides"] )
    {
        var_0 = game["attackers"];
        var_1 = game["defenders"];
        game["attackers"] = var_1;
        game["defenders"] = var_0;
    }

    level.usestartspawns = 1;
    setclientnamemode( "manual_change" );

    if ( scripts\mp\utility\game::inovertime() )
        game["dialog"]["defense_obj"] = "obj_destroy";

    level._effect["bomb_explosion"] = loadfx( "vfx/iw8_mp/gamemode/vfx_search_bombsite_destroy.vfx" );
    level._effect["vehicle_explosion"] = loadfx( "vfx/core/expl/small_vehicle_explosion_new.vfx" );
    level._effect["building_explosion"] = loadfx( "vfx/iw7/_requests/mp/vfx_debug_warning.vfx" );
    scripts\mp\utility\game::setobjectivetext( game["attackers"], &"OBJECTIVES/DD_ATTACKER" );
    scripts\mp\utility\game::setobjectivetext( game["defenders"], &"OBJECTIVES/DD_DEFENDER" );

    if ( level.splitscreen )
    {
        scripts\mp\utility\game::setobjectivescoretext( game["attackers"], &"OBJECTIVES/DD_ATTACKER" );
        scripts\mp\utility\game::setobjectivescoretext( game["defenders"], &"OBJECTIVES/DD_DEFENDER" );
    }
    else
    {
        scripts\mp\utility\game::setobjectivescoretext( game["attackers"], &"OBJECTIVES/DD_ATTACKER_SCORE" );
        scripts\mp\utility\game::setobjectivescoretext( game["defenders"], &"OBJECTIVES/DD_DEFENDER_SCORE" );
    }

    if ( scripts\mp\utility\game::inovertime() )
    {
        scripts\mp\utility\game::setobjectivehinttext( game["attackers"], &"OBJECTIVES/DD_OVERTIME_HINT" );
        scripts\mp\utility\game::setobjectivehinttext( game["defenders"], &"OBJECTIVES/DD_OVERTIME_HINT" );
    }
    else
    {
        scripts\mp\utility\game::setobjectivehinttext( game["attackers"], &"OBJECTIVES/DD_ATTACKER_HINT" );
        scripts\mp\utility\game::setobjectivehinttext( game["defenders"], &"OBJECTIVES/DD_DEFENDER_HINT" );
    }

    thread waittoprocess();
    setupobjectiveicons();
    thread bombs();
}

initspawns()
{
    scripts\mp\spawnlogic::setactivespawnlogic( "Default", "Crit_Default" );
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::addstartspawnpoints( "mp_dd_spawn_attacker_start" );
    scripts\mp\spawnlogic::addstartspawnpoints( "mp_dd_spawn_defender_start" );
    scripts\mp\spawnlogic::addspawnpoints( game["attackers"], "mp_dd_spawn_attacker_start" );
    scripts\mp\spawnlogic::addspawnpoints( game["defenders"], "mp_dd_spawn_defender_start" );
    var_0 = scripts\mp\spawnlogic::getspawnpointarray( "mp_dd_spawn_attacker_start" );
    var_1 = scripts\mp\spawnlogic::getspawnpointarray( "mp_dd_spawn_defender_start" );
    scripts\mp\spawnlogic::registerspawnset( "start_attackers", var_0 );
    scripts\mp\spawnlogic::registerspawnset( "start_defenders", var_1 );
    scripts\mp\spawnlogic::addspawnpoints( game["defenders"], "mp_dd_spawn_defender" );
    scripts\mp\spawnlogic::addspawnpoints( game["defenders"], "mp_dd_spawn_defender_a", 1 );
    scripts\mp\spawnlogic::addspawnpoints( game["defenders"], "mp_dd_spawn_defender_b", 1 );
    scripts\mp\spawnlogic::addspawnpoints( game["attackers"], "mp_dd_spawn_attacker" );
    scripts\mp\spawnlogic::addspawnpoints( game["attackers"], "mp_dd_spawn_attacker_a", 1 );
    scripts\mp\spawnlogic::addspawnpoints( game["attackers"], "mp_dd_spawn_attacker_b", 1 );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );

    if ( istrue( level.binoculars_clearuidata ) )
    {
        scripts\mp\spawnlogic::addspawnpoints( "allies", "mp_tdm_spawn" );
        scripts\mp\spawnlogic::addspawnpoints( "axis", "mp_tdm_spawn" );
        scripts\mp\spawnlogic::addspawnpoints( "allies", "mp_tdm_spawn_secondary", 1, 1 );
        scripts\mp\spawnlogic::addspawnpoints( "axis", "mp_tdm_spawn_secondary", 1, 1 );
        var_2 = scripts\mp\spawnlogic::getspawnpointarray( "mp_tdm_spawn" );
        var_3 = scripts\mp\spawnlogic::getspawnpointarray( "mp_tdm_spawn_secondary" );
        scripts\mp\spawnlogic::registerspawnset( "normal", var_2 );
        scripts\mp\spawnlogic::registerspawnset( "fallback", var_3 );
        return;
    }

    level.spawn_defenders = scripts\mp\spawnlogic::getspawnpointarray( "mp_dd_spawn_defender" );
    scripts\mp\spawnlogic::registerspawnset( "dd_defenders", level.spawn_defenders );
    level.spawn_defenders_a = scripts\mp\spawnlogic::getspawnpointarray( "mp_dd_spawn_defender_a" );
    level.spawn_defenders_a = scripts\engine\utility::array_combine( level.spawn_defenders, level.spawn_defenders_a );
    scripts\mp\spawnlogic::registerspawnset( "dd_defenders_a", level.spawn_defenders_a );
    level.spawn_defenders_b = scripts\mp\spawnlogic::getspawnpointarray( "mp_dd_spawn_defender_b" );
    level.spawn_defenders_b = scripts\engine\utility::array_combine( level.spawn_defenders, level.spawn_defenders_b );
    scripts\mp\spawnlogic::registerspawnset( "dd_defenders_b", level.spawn_defenders_b );
    level.spawn_defenders_fallback = scripts\engine\utility::array_combine( level.spawn_defenders, level.spawn_defenders_a, level.spawn_defenders_b );
    scripts\mp\spawnlogic::registerspawnset( "dd_defenders_fallback", level.spawn_defenders_fallback );
    level.spawn_attackers = scripts\mp\spawnlogic::getspawnpointarray( "mp_dd_spawn_attacker" );
    scripts\mp\spawnlogic::registerspawnset( "dd_attackers", level.spawn_attackers );
    level.spawn_attackers_a = scripts\mp\spawnlogic::getspawnpointarray( "mp_dd_spawn_attacker_a" );
    level.spawn_attackers_a = scripts\engine\utility::array_combine( level.spawn_attackers, level.spawn_attackers_a );
    scripts\mp\spawnlogic::registerspawnset( "dd_attackers_a", level.spawn_attackers_a );
    level.spawn_attackers_b = scripts\mp\spawnlogic::getspawnpointarray( "mp_dd_spawn_attacker_b" );
    level.spawn_attackers_b = scripts\engine\utility::array_combine( level.spawn_attackers, level.spawn_attackers_b );
    scripts\mp\spawnlogic::registerspawnset( "dd_attackers_b", level.spawn_attackers_b );
    level.spawn_attackers_fallback = scripts\engine\utility::array_combine( level.spawn_attackers, level.spawn_attackers_a, level.spawn_attackers_b );
    scripts\mp\spawnlogic::registerspawnset( "dd_attackers_fallback", level.spawn_attackers_fallback );
    level.spawn_defenders_start = scripts\mp\spawnlogic::getspawnpointarray( "mp_dd_spawn_defender_start" );
    level.spawn_attackers_start = scripts\mp\spawnlogic::getspawnpointarray( "mp_dd_spawn_attacker_start" );
}

getspawnpointdist( var_0, var_1 )
{
    var_2 = getpathdist( var_0.origin, var_1, 16000 );

    if ( var_2 < 0 )
        var_2 = distance( var_0.origin, var_1 );

    return var_2;
}

waittoprocess()
{
    level endon( "game_end" );

    for (;;)
    {
        if ( level.ingraceperiod == 0 )
            break;

        waitframe();
    }

    level.usestartspawns = 0;
}

getspawnpoint()
{
    var_0 = self.pers["team"];

    if ( istrue( level.binoculars_clearuidata ) )
    {
        if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
        {
            if ( var_0 == game["attackers"] )
            {
                scripts\mp\spawnlogic::activatespawnset( "start_attackers", 1 );
                var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "start_attackers" );
            }
            else
            {
                scripts\mp\spawnlogic::activatespawnset( "start_defenders", 1 );
                var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "start_defenders" );
            }
        }
        else
        {
            scripts\mp\spawnlogic::activatespawnset( "normal", 1 );
            var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "fallback" );
        }
    }
    else if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
    {
        if ( var_0 == game["attackers"] )
        {
            scripts\mp\spawnlogic::activatespawnset( "start_attackers", 1 );
            var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "start_attackers" );
        }
        else
        {
            scripts\mp\spawnlogic::activatespawnset( "start_defenders", 1 );
            var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "start_defenders" );
        }
    }
    else
    {
        var_2 = undefined;
        var_3 = undefined;

        if ( var_0 == game["attackers"] )
        {
            if ( scripts\mp\utility\game::inovertime() )
                var_2 = "dd_attackers";
            else if ( !level.aplanted && !level.bplanted )
                var_2 = "dd_attackers";
            else if ( level.aplanted && !level.bplanted )
                var_2 = "dd_attackers_a";
            else if ( level.bplanted && !level.aplanted )
                var_2 = "dd_attackers_b";
            else
                var_2 = "dd_attackers";

            var_3 = "dd_attackers_fallback";
        }
        else
        {
            if ( scripts\mp\utility\game::inovertime() )
                var_2 = "dd_defenders";
            else if ( !level.aplanted && !level.bplanted )
                var_2 = "dd_defenders";
            else if ( level.aplanted && !level.bplanted )
                var_2 = "dd_defenders_a";
            else if ( level.bplanted && !level.aplanted )
                var_2 = "dd_defenders_b";
            else
                var_2 = "dd_defenders";

            var_3 = "dd_defenders_fallback";
        }

        var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, var_2, var_3 );
    }

    return var_1;
}

onspawnplayer()
{
    var_0 = regroup_think();

    if ( scripts\mp\utility\game::inovertime() || self.pers["team"] == var_0 )
    {
        self setclientomnvar( "ui_carrying_bomb", 1 );
        self.isplanting = 0;
        self.isdefusing = 0;
        self.isbombcarrier = 1;
    }
    else
    {
        self.isplanting = 0;
        self.isdefusing = 0;
        self.isbombcarrier = 0;
    }

    if ( isdefined( self.pers["plants"] ) )
        scripts\mp\utility\stats::setextrascore0( self.pers["plants"] );
    else
        scripts\mp\utility\stats::setextrascore0( 0 );

    if ( isdefined( self.pers["defuses"] ) )
        scripts\mp\utility\stats::setextrascore1( self.pers["defuses"] );
    else
        scripts\mp\utility\stats::setextrascore1( 0 );

    level notify( "spawned_player" );
}

regroup_think()
{
    var_0 = game["attackers"];

    if ( level.mapname == "mp_euphrates" )
    {
        if ( game["switchedsides"] )
            var_0 = game["attackers"];
        else
            var_0 = game["defenders"];
    }

    return var_0;
}

hidecarryiconongameend()
{
    self endon( "disconnect" );
    level waittill( "game_ended" );

    if ( isdefined( self.carryicon ) )
        self.carryicon.alpha = 0;
}

dd_endgame( var_0, var_1 )
{
    setomnvar( "ui_bomb_interacting", 0 );
    thread scripts\mp\gamelogic::endgame( var_0, var_1 );
}

ondeadevent( var_0 )
{
    if ( level.bombexploded > 0 || level.bombdefused )
        return;

    if ( var_0 == "all" )
    {
        if ( level.bombplanted )
            dd_endgame( game["attackers"], game["end_reason"][tolower( game[game["defenders"]] ) + "_eliminated"] );
        else
            dd_endgame( game["defenders"], game["end_reason"][tolower( game[game["attackers"]] ) + "_eliminated"] );
    }
    else if ( var_0 == game["attackers"] )
    {
        if ( level.bombplanted )
            return;

        level thread dd_endgame( game["defenders"], game["end_reason"][tolower( game[game["attackers"]] ) + "_eliminated"] );
    }
    else if ( var_0 == game["defenders"] )
        level thread dd_endgame( game["attackers"], game["end_reason"][tolower( game[game["defenders"]] ) + "_eliminated"] );
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    scripts\mp\gametypes\common.gsc::oncommonnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 );
    var_6 = var_0.team;

    if ( var_0.isplanting )
    {
        thread scripts\common\utility::_id_13E0A( level._id_11B30, var_2, "planting" );
        var_1 scripts\mp\utility\stats::incpersstat( "defends", 1 );
        var_1 scripts\mp\persistence::statsetchild( "round", "defends", var_1.pers["defends"] );
    }
    else if ( var_0.isdefusing )
    {
        thread scripts\common\utility::_id_13E0A( level._id_11B30, var_2, "defusing" );
        var_1 scripts\mp\utility\stats::incpersstat( "defends", 1 );
        var_1 scripts\mp\persistence::statsetchild( "round", "defends", var_1.pers["defends"] );
    }

    scripts\mp\gametypes\obj_bombzone.gsc::bombzone_awardgenericbombzonemedals( var_1, var_0 );
}

ontimelimit()
{
    if ( scripts\mp\utility\game::inovertime() )
        dd_endgame( "tie", game["end_reason"]["time_limit_reached"] );
    else
        dd_endgame( game["defenders"], game["end_reason"]["time_limit_reached"] );
}

updategametypedvars()
{
    scripts\mp\gametypes\common.gsc::updatecommongametypedvars();
    level.planttime = scripts\mp\utility\dvars::dvarfloatvalue( "planttime", 5, 0, 20 );
    level.defusetime = scripts\mp\utility\dvars::dvarfloatvalue( "defusetime", 5, 0, 20 );
    level.bombtimer = scripts\mp\utility\dvars::dvarintvalue( "bombtimer", 45, 1, 300 );
    level.ddtimetoadd = scripts\mp\utility\dvars::dvarfloatvalue( "extraTime", 120, 0, 500 );
    level.overtime = scripts\mp\utility\dvars::dvarfloatvalue( "overtimeLimit", 1, 0, 180 );
    level.resetprogress = scripts\mp\utility\dvars::dvarintvalue( "resetProgress", 1, 0, 1 );
    scripts\mp\utility\game::setovertimelimitdvar( level.overtime );
    level.silentplant = scripts\mp\utility\dvars::dvarintvalue( "silentPlant", 0, 0, 1 );
}

verifybombzones( var_0 )
{
    var_1 = "";

    if ( var_0.size != 3 )
    {
        var_2 = 0;
        var_3 = 0;
        var_4 = 0;

        foreach ( var_6 in var_0 )
        {
            if ( issubstr( tolower( var_6.script_label ), "a" ) )
            {
                var_2 = 1;
                continue;
            }

            if ( issubstr( tolower( var_6.script_label ), "b" ) )
            {
                var_3 = 1;
                continue;
            }

            if ( issubstr( tolower( var_6.script_label ), "c" ) )
                var_4 = 1;
        }

        if ( !var_2 )
            var_1 = var_1 + " A ";

        if ( !var_3 )
            var_1 = var_1 + " B ";

        if ( !var_4 )
            var_1 = var_1 + " C ";
    }

    if ( var_1 != "" )
        return;
}

bombs()
{
    waittillframeend;
    level.bombplanted = 0;
    level.bombdefused = 0;
    level.bombexploded = 0;
    level.multibomb = 1;
    var_0 = getentarray( "dd_bombzone", "targetname" );
    verifybombzones( var_0 );
    level.objectives = [];

    foreach ( var_2 in var_0 )
    {
        var_3 = scripts\mp\gametypes\obj_bombzone.gsc::setupobjective( var_2, 1 );

        if ( isdefined( var_3 ) )
        {
            var_3.onbeginuse = ::onbeginuse;
            var_3.onenduse = ::onenduse;
            var_3.onuse = ::onuseplantobject;
            level.objectives[var_3.objectivekey] = var_3;
        }
    }

    initspawns();

    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        level scripts\engine\utility::_id_143A5( "prematch_done", "start_mode_setup" );

    foreach ( var_3 in level.objectives )
    {
        var_3 scripts\mp\gameobjects::requestid( 1, 1 );

        if ( scripts\mp\utility\game::inovertime() )
            var_3 scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_target_neutral" );
        else
            var_3 scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defend", "waypoint_target" );

        var_3 scripts\mp\gameobjects::setvisibleteam( "any" );
    }
}

onbeginuse( var_0 )
{
    scripts\mp\gametypes\obj_bombzone.gsc::bombzone_onbeginuse( var_0 );
}

onenduse( var_0, var_1, var_2 )
{
    scripts\mp\gametypes\obj_bombzone.gsc::bombzone_onenduse( var_0, var_1, var_2 );
}

onuseplantobject( var_0 )
{
    var_1 = [];
    var_1[var_1.size] = var_0;
    level thread scripts\mp\hud_message::notifyteam( "emp_planted", "emp_planted_enemy", var_0.team, var_1 );
    var_0 thread scripts\mp\hud_message::showsplash( "emp_planted", scripts\mp\rank::getscoreinfovalue( "plant" ) );
    scripts\mp\gametypes\obj_bombzone.gsc::bombzone_onuseplantobject( var_0 );

    if ( level.bombexploded == 1 )
        thread scripts\mp\music_and_dialog::bombplanted_music();
}

setupkillcament()
{
    var_0 = spawn( "script_origin", self.origin );
    var_0.angles = self.angles;
    var_0 rotateyaw( -45, 0.05 );
    waitframe();
    var_1 = self.origin + ( 0, 0, 5 );
    var_2 = self.origin + anglestoforward( var_0.angles ) * 100 + ( 0, 0, 128 );
    var_3 = scripts\engine\trace::ray_trace( var_1, var_2, self, scripts\engine\trace::create_default_contents( 1 ) );
    self.killcament = spawn( "script_model", var_3["position"] );
    self.killcament setscriptmoverkillcam( "explosive" );
    var_0 delete();
}

resetbombzone( var_0 )
{
    if ( scripts\mp\utility\game::inovertime() )
    {
        scripts\mp\gameobjects::setownerteam( "neutral" );
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_target" );
    }
    else
    {
        scripts\mp\gameobjects::setownerteam( game["defenders"] );
        scripts\mp\gameobjects::allowuse( "enemy" );
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defend", "waypoint_target" );
    }

    scripts\mp\gameobjects::setusehinttext( &"MP/HOLD_TO_PLANT_EXPLOSIVES" );
    self.id = "bomb_zone";
    scripts\mp\gameobjects::setusetime( level.planttime );
    scripts\mp\gameobjects::setvisibleteam( "any" );
    self.useweapon = getcompleteweaponname( "briefcase_bomb_mp" );
    self.bombexploded = undefined;
}

setupfordefusing()
{
    scripts\mp\gameobjects::allowuse( "friendly" );
    scripts\mp\gameobjects::setusetime( level.defusetime );
    scripts\mp\gameobjects::setkeyobject( undefined );
    scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defuse", "waypoint_defend" );
    scripts\mp\gameobjects::setvisibleteam( "any" );
}

oncantuse( var_0 )
{
    var_0 iprintlnbold( &"MP/BOMBSITE_IN_USE" );
}

onreset()
{

}

bombplanted( var_0, var_1 )
{
    var_0 endon( "defused" );
    var_2 = var_1.team;
    level.bombsplanted = level.bombsplanted + 1;
    scripts\mp\gamelogic::pausetimer();
    level.timepausestart = gettime();
    level.timelimitoverride = 1;
    level.bombplanted = 1;
    level.destroyedobject = var_0;

    if ( level.destroyedobject.objectivekey == "_a" )
        level.aplanted = 1;
    else
        level.bplanted = 1;

    level.destroyedobject.bombplanted = 1;
    level.tickingobject = var_0.visuals[0];
    dropbombmodel( var_1, var_0.objectivekey );
    var_0.bombdefused = 0;
    var_0 scripts\mp\gameobjects::allowuse( "none" );
    var_0 scripts\mp\gameobjects::setvisibleteam( "none" );

    if ( scripts\mp\utility\game::inovertime() )
        var_0 scripts\mp\gameobjects::setownerteam( scripts\mp\utility\game::getotherteam( var_1.team )[0] );

    var_0 setupfordefusing();
    var_0 bombtimerwait( var_0 );
    var_0 thread bombhandler( var_1, "explode", var_2 );
}

bombhandler( var_0, var_1, var_2 )
{
    level.bombsplanted = level.bombsplanted - 1;

    if ( self.objectivekey == "_a" )
        level.aplanted = 0;
    else
        level.bplanted = 0;

    restarttimer();
    scripts\mp\gametypes\obj_bombzone.gsc::setbombtimeromnvars();

    if ( level.gameended )
        return;

    if ( var_1 == "explode" )
    {
        self.bombexploded = 1;
        var_3 = scripts\mp\utility\dvars::getwatcheddvar( "timelimit" );

        if ( var_3 != 0 && !scripts\mp\utility\game::inovertime() && level.bombexploded < 2 && level.ddtimetoadd > 0 )
        {
            level.extratime = level.bombexploded * level.ddtimetoadd;
            var_4 = scripts\mp\gamelogic::gettimeremaining();

            if ( istrue( level.timerstoppedforgamemode ) )
                var_4 = var_4 - level.bombtimer * 1000;

            setgameendtime( gettime() + int( var_4 ) );
        }

        wait 2;

        if ( scripts\mp\utility\game::inovertime() || level.bombexploded > 1 )
        {
            if ( istrue( level.nukeincoming ) )
                return;

            dd_endgame( var_2, game["end_reason"]["target_destroyed"] );
            return;
        }

        if ( level.ddtimetoadd > 0 )
        {
            scripts\mp\utility\dialog::statusdialog( "bomb_destroyed_en", game["defenders"] );
            level thread scripts\mp\hud_message::notifyteam( "callout_time_added", "callout_time_added", var_0.team );
            return;
        }

        return;
    }
    else
    {
        var_0 notify( "bomb_defused" + self.objectivekey );
        self notify( "defused" );
        resetbombzone( var_0 );
    }
}

dropbombmodel( var_0, var_1 )
{
    var_2 = scripts\engine\trace::ray_trace( var_0.origin + ( 0, 0, 20 ), var_0.origin - ( 0, 0, 2000 ), var_0, scripts\engine\trace::create_default_contents( 1 ) );
    var_3 = randomfloat( 360 );
    var_4 = ( cos( var_3 ), sin( var_3 ), 0 );
    var_4 = vectornormalize( var_4 - var_2["normal"] * vectordot( var_4, var_2["normal"] ) );
    var_5 = vectortoangles( var_4 );
    level.ddbombmodel[var_1] = spawn( "script_model", var_2["position"] );
    level.ddbombmodel[var_1].angles = var_5;
    level.ddbombmodel[var_1] setmodel( "prop_suitcase_bomb" );
}

restarttimer()
{
    if ( scripts\mp\utility\game::inovertime() )
    {
        if ( level.bombexploded == 1 )
            return;
    }
    else if ( level.bombexploded > 1 )
        return;

    if ( level.bombsplanted <= 0 )
    {
        scripts\mp\gamelogic::resumetimer();
        level.timepaused = gettime() - level.timepausestart;
        level.timelimitoverride = 0;
    }
}

bombtimerwait( var_0 )
{
    level endon( "game_ended" );
    level endon( "bomb_defused" + var_0.objectivekey );

    if ( scripts\mp\utility\game::inovertime() )
        var_0.waittime = level.bombtimer;
    else
        var_0.waittime = level.bombtimer;

    level thread update_ui_timers( var_0 );

    while ( var_0.waittime >= 0 )
    {
        var_0.waittime--;

        if ( var_0.waittime >= 0 )
            wait 1;

        scripts\mp\hostmigration::waittillhostmigrationdone();
    }
}

update_ui_timers( var_0 )
{
    level endon( "game_ended" );
    level endon( "disconnect" );
    level endon( "bomb_defused" + var_0.objectivekey );
    level endon( "bomb_exploded" + var_0.objectivekey );
    var_1 = var_0.waittime * 1000 + gettime();
    setdvar( "ui_bombtimer" + var_0.objectivekey, var_1 );
    level waittill( "host_migration_begin" );
    var_2 = scripts\mp\hostmigration::waittillhostmigrationdone();

    if ( var_2 > 0 )
        setdvar( "ui_bombtimer" + var_0.objectivekey, var_1 + var_2 );
}

bombdefused( var_0 )
{
    level.tickingobject scripts\mp\gamelogic::stoptickingsound();
    var_0.bombdefused = 1;
    level notify( "bomb_defused" + var_0.objectivekey );
}

setupobjectiveicons()
{
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_target_neutral_a", 0, "neutral", "MP_INGAME_ONLY/OBJ_TARGET_CAPS", "icon_waypoint_dom_a", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_defuse_a", 0, "enemy", "MP_INGAME_ONLY/OBJ_DEFUSE_CAPS", "icon_waypoint_dom_a", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_defuse_b", 0, "enemy", "MP_INGAME_ONLY/OBJ_DEFUSE_CAPS", "icon_waypoint_dom_b", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_bomb_defend_a", 0, "friendly", "MP_INGAME_ONLY/OBJ_DEFEND_CAPS", "icon_waypoint_dom_a", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_bomb_defend_b", 0, "friendly", "MP_INGAME_ONLY/OBJ_DEFEND_CAPS", "icon_waypoint_dom_b", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_defuse_nt_a", 0, "enemy", "", "icon_waypoint_dom_a", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_defuse_nt_b", 0, "enemy", "", "icon_waypoint_dom_b", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_bomb_defend_nt_a", 0, "friendly", "", "icon_waypoint_dom_a", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_bomb_defend_nt_b", 0, "friendly", "", "icon_waypoint_dom_b", 0 );
}
