// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

setupobjective( var_0, var_1, var_2 )
{
    var_3 = undefined;
    var_4 = undefined;

    if ( isdefined( level.curobj ) )
        level.curobj scripts\mp\gameobjects::deleteuseobject();

    if ( isdefined( var_0.originalpos ) )
        var_0.origin = var_0.originalpos;
    else
        var_0.originalpos = var_0.origin;

    var_5 = getentarray( var_0.target, "targetname" );

    if ( isdefined( var_0.objectivekey ) )
        var_6 = var_0.objectivekey;
    else
        var_6 = var_0.script_label;

    if ( istrue( var_2 ) )
        var_7 = getreservedobjid( var_6 );
    else
        var_7 = undefined;

    if ( scripts\mp\utility\game::getgametype() == "dd" || scripts\mp\utility\game::getgametype() == "to_dd" )
    {
        var_4 = var_0.script_label;
        var_8 = getent( "dd_bombzone_clip" + var_4, "targetname" );

        if ( scripts\mp\utility\game::inovertime() )
        {
            if ( var_4 == "_a" || var_4 == "_b" )
            {
                var_0 delete();
                var_5[0] delete();
                var_8 delete();
                return;
            }

            var_3 = scripts\mp\gameobjects::createuseobject( "neutral", var_0, var_5, ( 0, 0, 64 ), var_7, var_1 );
            var_3 scripts\mp\gameobjects::allowuse( "any" );
            var_3.trigger.script_label = "_a";
        }
        else if ( var_4 == "_c" )
        {
            var_0 delete();
            var_5[0] delete();
            var_8 delete();
            return;
        }
    }
    else if ( scripts\mp\utility\game::getgametype() == "sd" )
        setomnvar( "ui_bomb_owner_team", 0 );

    if ( !isdefined( var_3 ) )
    {
        var_3 = scripts\mp\gameobjects::createuseobject( game["defenders"], var_0, var_5, ( 0, 0, 64 ), var_7, var_1 );
        var_3 scripts\mp\gameobjects::allowuse( "enemy" );
    }

    if ( isdefined( var_0.objectivekey ) )
        var_3.objectivekey = var_0.objectivekey;
    else
        var_3.objectivekey = var_3 scripts\mp\gameobjects::getlabel();

    if ( isdefined( var_0.iconname ) )
        var_3.iconname = var_0.iconname;
    else
        var_3.iconname = var_3 scripts\mp\gameobjects::getlabel();

    var_3.id = "bomb_zone";
    var_3.trigger setusepriority( -3 );
    var_3 scripts\mp\gameobjects::setusetime( level.planttime );
    var_3 scripts\mp\gameobjects::setwaitweaponchangeonuse( 0 );
    var_3 scripts\mp\gameobjects::setusehinttext( &"MP/HOLD_TO_PLANT_EXPLOSIVES" );
    var_3.trigger setuseholdduration( "duration_none" );

    if ( !level.multibomb )
        var_3 scripts\mp\gameobjects::setkeyobject( level.sdbomb );

    if ( var_3.objectivekey == "_c" )
    {
        var_3.objectivekey = "_a";
        var_3.iconname = "_a";
    }

    if ( ( scripts\mp\utility\game::getgametype() == "to_dd" || scripts\mp\utility\game::getgametype() == "cmd" ) && scripts\mp\utility\game::inovertime() )
    {
        var_3 scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_target" );
        var_3 scripts\mp\gameobjects::setvisibleteam( "any" );
    }

    var_3.onbeginuse = ::bombzone_onbeginuse;
    var_3.onenduse = ::bombzone_onenduse;
    var_3.onuse = ::bombzone_onuseplantobject;
    var_3.oncantuse = ::bombzone_oncantuse;
    var_3.useweapon = getcompleteweaponname( "briefcase_bomb_mp" );
    var_3.bombplanted = 0;
    var_3.bombexploded = undefined;
    var_3.resetprogress = level.resetprogress;

    for ( var_9 = 0; var_9 < var_5.size; var_9++ )
    {
        if ( isdefined( var_5[var_9].script_exploder ) )
        {
            var_3.exploderindex = var_5[var_9].script_exploder;
            var_5[var_9] thread setupkillcament( var_3 );
            break;
        }
    }

    if ( scripts\mp\utility\game::getgametype() != "dd" )
    {
        var_3.bombdefusetrig = getent( var_5[0].target, "targetname" );
        var_3.bombdefusetrig.origin = var_3.bombdefusetrig.origin + ( 0, 0, -10000 );
        var_3.bombdefusetrig.label = var_4;
    }
    else
    {
        var_10 = getent( var_5[0].target, "targetname" );
        var_10 delete();
        var_3.bombdefusetrig = var_3.trigger;
    }

    var_3.noweapondropallowedtrigger = spawn( "trigger_radius", var_3.trigger.origin, 0, 140, 100 );
    return var_3;
}

getreservedobjid( var_0 )
{
    if ( var_0 == "_a" )
        var_1 = 0;
    else
        var_1 = 1;

    return var_1;
}

setupkillcament( var_0 )
{
    var_1 = spawn( "script_origin", self.origin );
    var_1.angles = self.angles;
    var_1 rotateyaw( -45, 0.05 );
    waitframe();
    var_2 = undefined;
    var_3 = self.origin + ( 0, 0, 45 );
    var_4 = self.origin + anglestoforward( var_1.angles ) * 100 + ( 0, 0, 128 );
    var_5 = [ "physicscontents_clipshot", "physicscontents_missileclip", "physicscontents_solid", "physicscontents_vehicle" ];
    var_6 = physics_createcontents( var_5 );
    var_7 = scripts\engine\trace::ray_trace( var_3, var_4, self, var_6 );
    var_2 = var_7["position"];

    switch ( scripts\cp_mp\utility\game_utility::getmapname() )
    {
        case "mp_spear":
        case "mp_spear_pm":
            if ( var_0.objectivekey == "_a" )
                var_2 = ( 1373, 2048, 213 );

            break;
        default:
            break;
    }

    self.killcament = spawn( "script_model", var_2 );
    self.killcament setscriptmoverkillcam( "explosive" );
    var_0.killcamentnum = self.killcament getentitynumber();
    var_1 delete();
}

allowedwhileplanting( var_0 )
{
    scripts\common\utility::allow_jump( var_0 );
    scripts\mp\utility\player::allow_gesture( var_0 );

    if ( var_0 )
    {
        scripts\engine\utility::_id_143B9( 0.8, "bomb_allow_offhands" );
        scripts\common\utility::allow_melee( var_0 );
        scripts\common\utility::allow_mantle( var_0 );
    }
    else
    {
        scripts\common\utility::allow_melee( var_0 );
        scripts\common\utility::allow_mantle( var_0 );
    }

    scripts\common\utility::allow_offhand_weapons( var_0 );
}

setbombplantingomnvar( var_0 )
{
    wait 0.35;

    if ( var_0 == "_a" )
        var_1 = 1;
    else
        var_1 = 2;

    setomnvar( "ui_bomb_interacting", var_1 );
}

setbombdefusingomnvar( var_0 )
{
    wait 0.35;

    if ( var_0 == "_a" )
        var_1 = 3;
    else
        var_1 = 4;

    setomnvar( "ui_bomb_interacting", var_1 );
}

bombzone_onbeginuse( var_0 )
{
    var_0 thread allowedwhileplanting( 0 );

    if ( !scripts\mp\gameobjects::isfriendlyteam( var_0.pers["team"] ) && self.bombplanted )
    {
        if ( level.codcasterenabled )
            var_0 setgametypevip( 1 );

        var_0 scripts\mp\bots\bots_util::notify_enemy_bots_bomb_used( "defuse" );
        var_0 notify( "super_obj_drain" );
        var_0.isdefusing = 1;
        var_0 thread setbombdefusingomnvar( self.objectivekey );
        setomnvar( "ui_bomb_defuser", var_0 getentitynumber() );
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_bomb_defend_nt", "waypoint_bomb_defusing" );
        scripts\mp\objidpoolmanager::objective_teammask_removefrommask( self.radialtimeobjid, var_0.team );
        scripts\mp\utility\game::setmlgannouncement( 2, var_0.team, var_0 getentitynumber() );

        if ( isdefined( level.sdbombmodel ) )
            level.sdbombmodel hide();
        else if ( isdefined( level.ddbombmodel[self.objectivekey] ) )
            level.ddbombmodel[self.objectivekey] hide();

        var_0 thread startnpcbombusesound( "briefcase_bomb_defuse_mp", "weap_suitcase_defuse_button" );
    }
    else
    {
        var_1 = 2;

        if ( self.objectivekey == "_a" )
            var_1 = 1;

        var_0 scripts\mp\bots\bots_util::notify_enemy_bots_bomb_used( "plant" );
        var_0 notify( "super_obj_drain" );
        var_0.isplanting = 1;
        var_0.bombplantweapon = self.useweapon;
        var_0 thread setbombplantingomnvar( self.objectivekey );
        scripts\mp\utility\dialog::statusdialog( "bomb_planting" + self.objectivekey, var_0.team, "status" );
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defend", "waypoint_bomb_planting" );
        var_0 thread startnpcbombusesound( "briefcase_bomb_mp", "weap_suitcase_raise_button" );
    }
}

bombzone_onenduse( var_0, var_1, var_2 )
{
    if ( var_2 && istrue( var_1.isdefusing ) )
        setomnvar( "ui_bomb_interacting", 0 );

    setomnvar( "ui_bomb_defuser", -1 );
    var_3 = self.objidnum;

    if ( level.resetprogress )
    {
        scripts\mp\objidpoolmanager::objective_set_progress( var_3, 0 );
        scripts\mp\objidpoolmanager::objective_show_progress( var_3, 0 );
    }

    if ( !var_2 )
    {
        if ( scripts\mp\utility\game::inovertime() && self.bombplanted == 0 )
            self.showprogressforteam = undefined;

        if ( var_1.isdefusing )
            scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defuse_nt", "waypoint_bomb_defend_nt" );
        else if ( scripts\mp\utility\game::getgametype() == "btm" )
            scripts\mp\gameobjects::setobjectivestatusicons( level.iconplant );
        else
            scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defend", "waypoint_target" );

        if ( isdefined( self.radialtimeobjid ) )
            scripts\mp\objidpoolmanager::objective_teammask_addtomask( self.radialtimeobjid, var_1.team );
    }

    if ( !isdefined( var_1 ) )
        return;

    var_1 thread allowedwhileplanting( 1 );
    var_1.bombplantweapon = undefined;

    if ( isalive( var_1 ) )
    {
        var_1.isdefusing = 0;
        var_1.isplanting = 0;
    }

    if ( isplayer( var_1 ) )
    {
        var_1 setclientomnvar( "ui_objective_state", 0 );
        var_1.ui_bomb_planting_defusing = undefined;
    }

    if ( scripts\mp\gameobjects::isfriendlyteam( var_1.pers["team"] ) )
    {
        if ( level.codcasterenabled )
            var_1 setgametypevip( 0 );
    }
    else if ( isdefined( level.sdbombmodel ) && !var_2 )
    {
        if ( self.bombplanted )
            level.sdbombmodel show();
    }
    else if ( isdefined( level.ddbombmodel ) )
    {
        if ( isdefined( level.ddbombmodel[self.objectivekey] ) && !var_2 )
            level.ddbombmodel[self.objectivekey] show();
    }
}

startnpcbombusesound( var_0, var_1 )
{
    self endon( "death" );
    self endon( "stopNpcBombSound" );

    if ( scripts\mp\utility\game::isanymlgmatch() || istrue( level.silentplant ) || scripts\mp\utility\perk::_hasperk( "specialty_engineer" ) )
    {
        self setentitysoundcontext( "silent_plant", "on" );
        return;
    }

    for (;;)
    {
        self waittill( "weapon_change", var_2 );

        if ( var_2.basename == var_0 )
            break;
    }

    self playsoundtoteam( var_1, self.team, self );
    var_3 = scripts\mp\utility\game::getotherteam( self.team )[0];
    self playsoundtoteam( var_1, var_3 );
    self waittill( "weapon_change" );
    self notify( "stopNpcBombSound" );
}

bombzone_oncantuse( var_0 )
{

}

bombzone_onuseplantobject( var_0 )
{
    if ( scripts\mp\utility\game::inovertime() && self.bombplanted == 0 || !scripts\mp\gameobjects::isfriendlyteam( var_0.pers["team"] ) )
    {
        self.showprogressforteam = undefined;
        level thread bombzone_onbombplanted( self, var_0 );
        var_0 playsound( "mp_bomb_plant" );
        var_0 notify( "bomb_planted" );
        var_1 = 2;

        if ( self.objectivekey == "_a" )
            var_1 = 1;

        scripts\mp\utility\game::setmlgannouncement( 0, var_0.team, var_0 getentitynumber(), var_1 );
        var_0 scripts\mp\utility\stats::incpersstat( "plants", 1 );
        var_0 scripts\mp\persistence::statsetchild( "round", "plants", var_0.pers["plants"] );
        var_0 scripts\cp_mp\pet_watch::addplantingcharge();
        var_0 scripts\mp\utility\stats::setextrascore0( var_0.pers["plants"] );

        if ( isdefined( level.sd_loadout ) && isdefined( level.sd_loadout[var_0.team] ) )
            var_0 thread removebombcarrierclass();

        if ( scripts\mp\utility\game::getgametype() != "cmd" )
        {
            if ( scripts\mp\utility\game::inovertime() )
                scripts\mp\utility\dialog::statusdialog( "enemy_bomb_planted", scripts\mp\utility\game::getotherteam( var_0.team )[0], 1 );
            else
                scripts\mp\utility\dialog::statusdialog( "enemy_bomb" + self.objectivekey, scripts\mp\utility\game::getotherteam( var_0.team )[0], 1 );

            scripts\mp\utility\dialog::statusdialog( "bomb_planted", var_0.team, 1 );
        }

        level thread scripts\mp\hud_util::teamplayercardsplash( "callout_bombplanted", var_0 );
        level.bombowner = var_0;
        var_0 thread scripts\mp\utility\points::giveunifiedpoints( "plant" );
        var_0.bombplantedtime = gettime();

        if ( isplayer( var_0 ) )
        {
            var_0 scripts\cp\vehicles\vehicle_compass_cp::_id_12062();
            var_0 thread scripts\common\utility::_id_13E0A( level._id_11B29, "plant", var_0.origin );
        }
    }
}

bombzone_onusedefuseobject( var_0 )
{
    var_1 = 0;
    setomnvar( "ui_bomb_interacting", 0 );

    foreach ( var_3 in level.objectives )
    {
        if ( isdefined( var_3.objectivekey ) && var_3.objectivekey == self.objectivekey )
        {
            var_0 notify( "bomb_defused" + var_3.objectivekey );
            level thread bombdefused( var_3 );
            break;
        }
    }

    if ( scripts\mp\utility\game::getgametype() != "dd" )
    {
        scripts\mp\gameobjects::disableobject();
        iprintln( &"MP/EXPLOSIVES_DEFUSED_BY", var_0 );
    }

    scripts\mp\utility\dialog::statusdialog( "enemy_bomb_defused", scripts\mp\utility\game::getotherteam( var_0.team )[0], 1 );
    scripts\mp\utility\dialog::statusdialog( "bomb_defused", var_0.team, 1 );
    level thread scripts\mp\hud_util::teamplayercardsplash( "callout_bombdefused", var_0 );
    var_0 scripts\cp\vehicles\vehicle_compass_cp::_id_1201F();
    scripts\mp\events::bombdefused( var_0 );
}

bombzone_onbombplanted( var_0, var_1 )
{
    level endon( "bombs_canceled" );
    level notify( "bomb_planted", var_0 );
    var_2 = var_1.team;
    level.bombdefused = 0;
    var_0.bombdefused = 0;

    if ( scripts\mp\utility\game::getgametype() == "dd" && level.bombsplanted <= 0 )
    {
        scripts\mp\gamelogic::pausetimer();
        level.timepausestart = gettime();
    }

    level.bombplanted = 1;
    level.bombsplanted = level.bombsplanted + 1;

    if ( scripts\mp\utility\game::getgametype() != "btm" )
        level.timelimitoverride = 1;

    level.defuseendtime = int( gettime() + level.bombtimer * 1000 );

    if ( var_0.objectivekey == "_a" )
        level.aplanted = 1;
    else
        level.bplanted = 1;

    setbombtimeromnvars( var_1.team );
    level.destroyedobject = var_0;
    level.destroyedobject.bombplanted = 1;

    if ( !level.multibomb )
    {
        var_1 setclientomnvar( "ui_carrying_bomb", 0 );
        setomnvar( "ui_bomb_carrier", -1 );
        setgameendtime( level.defuseendtime );
    }

    var_0.visuals[0] thread scripts\mp\gamelogic::playtickingsound();
    level.tickingobject = var_0.visuals[0];

    if ( !level.multibomb )
    {
        level.sdbomb scripts\mp\gameobjects::allowcarry( "none" );
        level.sdbomb scripts\mp\gameobjects::setvisibleteam( "none" );
        var_3 = removespawnprotectiononnotify();
        level.sdbomb scripts\mp\gameobjects::setdropped( undefined, scripts\engine\utility::ter_op( var_3 > 0, var_3, undefined ) );
        level.sdbombmodel = level.sdbomb.visuals[0];
        level.sdbombmodel setteaminhuddatafromteamname( var_2 );
        level.sdbombmodel setasgametypeobjective();
    }
    else if ( scripts\mp\utility\game::getgametype() == "cmd" )
    {

    }
    else if ( scripts\mp\utility\game::getgametype() == "dd" || scripts\mp\utility\game::getgametype() == "btm" )
    {
        level.ddbombmodel[var_0.objectivekey] = spawn( "script_model", var_1.origin );
        level.ddbombmodel[var_0.objectivekey].angles = var_1.angles;
        level.ddbombmodel[var_0.objectivekey] setmodel( getbombmodel() );
        level.ddbombmodel[var_0.objectivekey] setasgametypeobjective();
        level.ddbombmodel[var_0.objectivekey] setnonstick( 1 );
    }
    else if ( scripts\mp\utility\game::getgametype() == "to_dd" )
    {
        var_4 = var_0.trigger.origin;
        var_5 = var_0.trigger.angles;
        var_6 = ( 0, 0, 0 );

        if ( isdefined( level.tacopssublevel ) )
        {
            if ( var_0.objectivekey == "_a" )
            {
                var_6 = ( 0, 0, 50 );
                var_5 = ( -90, -45, 0 );
            }
            else
            {
                var_6 = ( 0, 0, 50 );
                var_5 = ( -90, 90, 0 );
            }
        }

        level.ddbombmodel[var_0.objectivekey] = spawn( "script_model", var_4 + var_6 );
        level.ddbombmodel[var_0.objectivekey].angles = var_5;
        level.ddbombmodel[var_0.objectivekey] setmodel( getbombmodel() );
        level.ddbombmodel[var_0.objectivekey] setasgametypeobjective();
    }
    else
    {
        level.sdbombmodel = spawn( "script_model", var_1.origin );
        level.sdbombmodel.angles = var_1.angles;
        level.sdbombmodel setmodel( getbombmodel() );
        level.sdbombmodel setasgametypeobjective();
        level.sdbombmodel setnonstick( 1 );
    }

    if ( scripts\mp\utility\game::getgametype() != "dd" && scripts\mp\utility\game::getgametype() != "to_dd" && scripts\mp\utility\game::getgametype() != "cmd" || scripts\mp\utility\game::getgametype() != "btm" )
    {
        var_0 scripts\mp\gameobjects::allowuse( "none" );
        var_0 scripts\mp\gameobjects::setvisibleteam( "none" );
    }

    var_7 = [];

    if ( scripts\mp\utility\game::getgametype() == "dd" || scripts\mp\utility\game::getgametype() == "to_dd" || scripts\mp\utility\game::getgametype() == "cmd" || scripts\mp\utility\game::getgametype() == "btm" )
    {
        var_8 = var_0;
        var_8 scripts\mp\gameobjects::setownerteam( var_1.team );
    }
    else
    {
        var_9 = var_0.bombdefusetrig;
        var_9.origin = level.sdbombmodel.origin;
        var_10 = game["attackers"];
        var_0 scripts\mp\gameobjects::releaseid( 1, 1 );
        var_8 = scripts\mp\gameobjects::createuseobject( var_10, var_9, var_7, ( 0, 0, 32 ) );
        scripts\mp\objidpoolmanager::objective_set_play_intro( var_8.objidnum, 0 );
        scripts\mp\objidpoolmanager::objective_set_play_outro( var_8.objidnum, 0 );
    }

    var_8.objectivekey = var_0.objectivekey;
    var_8.iconname = var_0.iconname;
    var_8.id = "defuse_object";
    var_8.trigger setusepriority( -3 );

    if ( scripts\mp\utility\game::getgametype() == "cmd" )
        var_8 scripts\mp\gameobjects::allowuse( "none" );
    else
        var_8 scripts\mp\gameobjects::allowuse( "enemy" );

    var_8 scripts\mp\gameobjects::setusetime( level.defusetime );
    var_8 scripts\mp\gameobjects::setwaitweaponchangeonuse( 0 );
    var_8 scripts\mp\gameobjects::setusehinttext( &"MP/HOLD_TO_DEFUSE_EXPLOSIVES" );
    var_8.trigger setuseholdduration( "duration_none" );
    var_8 scripts\mp\gameobjects::setvisibleteam( "any" );
    var_8 scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_bomb_defend_nt", "waypoint_defuse_nt" );

    if ( scripts\mp\utility\game::getgametype() != "cmd" )
        var_8 thread current_carrier( var_2, "waypoint_bomb_defend", "waypoint_defuse" );

    if ( scripts\mp\utility\game::getgametype() == "cmd" && level.cmdrules == 2 )
    {

    }
    else
    {
        var_8.onbeginuse = ::bombzone_onbeginuse;
        var_8.onenduse = ::bombzone_onenduse;
        var_8.onuse = ::bombzone_onusedefuseobject;
        var_8.resetprogress = level.resetprogress;
        var_8.useweapon = getcompleteweaponname( "briefcase_bomb_defuse_mp" );
    }

    level thread scripts\mp\hud_message::updatematchstatushintforallplayers( var_1.team, 22, 23 );
    var_0 bombtimerwait( var_0.objectivekey );
    var_0.visuals[0] scripts\mp\gamelogic::stoptickingsound();
    var_8.bombplanted = 0;

    if ( level.gameended )
        return;
    else if ( scripts\mp\utility\game::getgametype() == "sd" && level.bombdefused || scripts\mp\utility\game::getgametype() == "sr" && level.bombdefused )
    {
        var_8 scripts\mp\gameobjects::deleteuseobject();
        return;
    }

    if ( scripts\mp\utility\game::getgametype() == "dd" || scripts\mp\utility\game::getgametype() == "to_dd" || scripts\mp\utility\game::getgametype() == "cmd" || scripts\mp\utility\game::getgametype() == "btm" )
    {
        var_8.showprogressforteam = undefined;
        var_11 = scripts\mp\gametypes\dd.gsc::bombhandler;

        if ( var_0.bombdefused )
        {
            var_0 thread [[ var_11 ]]( var_1, "defused" );
            var_0.onuse = ::bombzone_onuseplantobject;

            if ( isdefined( level.ddbombmodel[var_0.objectivekey] ) )
                level.ddbombmodel[var_0.objectivekey] delete();

            return;
        }
        else
        {
            level.bombexploded = level.bombexploded + 1;
            var_0 thread [[ var_11 ]]( var_1, "explode", var_2 );
        }
    }
    else
        level.bombexploded = level.bombexploded + 1;

    if ( scripts\mp\utility\game::getgametype() == "cmd" )
        level waittill( "allow_bomb_explosion" );

    level notify( "bomb_exploded" + var_0.objectivekey );
    var_1 thread scripts\mp\rank::scoreeventpopup( "detonate" );
    var_1 thread scripts\mp\awards::givemidmatchaward( "mode_sd_detonate" );

    if ( isdefined( level.sd_onbombtimerend ) )
        level thread [[ level.sd_onbombtimerend ]]();

    if ( scripts\mp\utility\game::getgametype() == "cmd" )
        var_12 = var_0.curorigin;
    else if ( scripts\mp\utility\game::getgametype() == "dd" || scripts\mp\utility\game::getgametype() == "to_dd" || scripts\mp\utility\game::getgametype() == "btm" )
    {
        var_12 = level.ddbombmodel[var_0.objectivekey].origin;
        level.ddbombmodel[var_0.objectivekey] delete();
    }
    else
    {
        var_12 = level.sdbombmodel.origin;
        level.sdbombmodel delete();
    }

    if ( isdefined( var_1 ) )
    {
        var_0.visuals[0] radiusdamage( var_12, 512, 200, 20, var_1, "MOD_EXPLOSIVE", "bomb_site_mp" );
        var_1 scripts\mp\utility\stats::incpersstat( "destructions", 1 );
        var_1 scripts\mp\persistence::statsetchild( "round", "destructions", var_1.pers["destructions"] );
    }
    else
        var_0.visuals[0] radiusdamage( var_12, 512, 200, 20, undefined, "MOD_EXPLOSIVE", "bomb_site_mp" );

    var_13 = randomfloat( 360 );

    if ( isdefined( var_0.trigger.effect ) )
        var_14 = var_0.trigger.effect;
    else if ( level.mapname == "mp_faridah" )
        var_14 = "faridah_bomb_explosion";
    else
        var_14 = "bomb_explosion";

    var_15 = var_12 + ( 0, 0, 50 );
    var_16 = spawnfx( level._effect[var_14], var_15, ( 0, 0, 1 ), ( cos( var_13 ), sin( var_13 ), 0 ) );
    triggerfx( var_16 );
    physicsexplosionsphere( var_15, 200, 100, 3 );
    playrumbleonposition( "grenade_rumble", var_12 );
    earthquake( 0.75, 2.0, var_12, 2000 );
    playsoundatpos( var_15, "exp_bombsite_lr" );

    if ( scripts\mp\utility\game::getgametype() == "to_dd" )
    {
        foreach ( var_18 in level.objectives )
        {
            if ( isdefined( var_18.exploderindex ) )
                scripts\engine\utility::exploder( var_18.exploderindex );
        }
    }
    else if ( isdefined( var_0.exploderindex ) )
        scripts\engine\utility::exploder( var_0.exploderindex );

    var_8 scripts\mp\gameobjects::disableobject();

    if ( isdefined( level.onobjectivecomplete ) )
        [[ level.onobjectivecomplete ]]( "bombzone", self.objectivekey, var_1, game["attackers"], undefined );
}

removespawnprotectiononnotify()
{
    switch ( level.mapname )
    {
        case "mp_m_stadium":
            return 10;
        default:
            return 0;
    }
}

current_carrier( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_3 = level.framedurationseconds;
    var_4 = var_3 * 1000;
    var_5 = level.bombtimer * 1000;
    var_6 = var_4 / var_5;
    self.radialtimeobjid = scripts\mp\objidpoolmanager::requestobjectiveid( 99 );

    if ( self.radialtimeobjid != -1 )
    {
        var_7 = "invisible";
        scripts\mp\objidpoolmanager::objective_add_objective( self.radialtimeobjid, var_7, self.curorigin + self.offset3d );
        scripts\mp\objidpoolmanager::objective_set_play_intro( self.radialtimeobjid, 0 );
        scripts\mp\objidpoolmanager::objective_set_play_outro( self.radialtimeobjid, 0 );
        scripts\mp\objidpoolmanager::objective_playermask_showtoall( self.radialtimeobjid );
        self.showworldicon = 1;
    }

    scripts\mp\gameobjects::setobjectivestatusicons( var_1, var_2, self.radialtimeobjid );
    self.bombplanted = 1;

    while ( self.bombplanted )
    {
        var_8 = var_6;
        scripts\mp\objidpoolmanager::objective_set_progress_team( self.radialtimeobjid, var_0 );
        scripts\mp\objidpoolmanager::objective_show_progress( self.radialtimeobjid, 1 );
        scripts\mp\objidpoolmanager::objective_set_progress( self.radialtimeobjid, var_8 );
        var_6 = min( var_6 + var_4 / var_5, 1.0 );
        waitframe();
    }

    scripts\mp\objidpoolmanager::returnobjectiveid( self.radialtimeobjid );
    self.radialtimeobjid = -1;
}

getbombmodel( var_0 )
{
    if ( istrue( level.setplayerselfrevivingextrainfo ) && istrue( var_0 ) )
        return "military_dogtags_human_skull_01";

    return "offhand_wm_briefcase_bomb";
}

initobjectivecam( var_0 )
{
    var_1 = undefined;
    var_2 = getentarray( "sd_bombcam_start", "targetname" );

    foreach ( var_4 in var_2 )
    {
        if ( var_4.script_label == var_0.objectivekey )
        {
            var_1 = var_4;
            break;
        }
    }

    var_6 = [];

    if ( isdefined( var_1 ) && isdefined( var_1.target ) )
    {
        var_7 = getent( var_1.target, "targetname" );

        while ( isdefined( var_7 ) )
        {
            var_6[var_6.size] = var_7;

            if ( isdefined( var_7.target ) )
            {
                var_7 = getent( var_7.target, "targetname" );
                continue;
            }

            break;
        }
    }

    if ( isdefined( var_1 ) && var_6.size )
    {
        var_8 = spawn( "script_model", var_1.origin );
        var_8.origin = var_1.origin;
        var_8.angles = var_1.angles;
        var_8.path = var_6;
        var_8 setmodel( "tag_origin" );
        var_8 hide();
        return var_8;
    }
    else
        return undefined;
}

runobjectivecam()
{
    level notify( "objective_cam" );

    foreach ( var_1 in level.players )
    {
        if ( !isai( var_1 ) )
        {
            var_1 scripts\mp\utility\player::_freezecontrols( 1 );
            var_1 visionsetnakedforplayer( "black_bw", 0.5 );
        }
    }

    wait 0.5;

    foreach ( var_1 in level.players )
    {
        if ( !isai( var_1 ) )
        {
            var_1 scripts\mp\utility\player::setusingremote( "objective_cam" );
            var_1 scripts\common\utility::allow_weapon( 0 );
            var_1 playerlinkweaponviewtodelta( self, "tag_player", 1, 180, 180, 180, 180, 1 );
            var_1 scripts\mp\utility\player::_freezecontrols( 1 );
            var_1 setplayerangles( self.angles );
            var_1 visionsetnakedforplayer( "", 0.5 );
        }
    }

    for ( var_5 = 0; var_5 < self.path.size; var_5++ )
    {
        var_6 = 0;

        if ( var_5 == 0 )
            var_6 = 5 / self.path.size / 2;

        var_7 = 0;

        if ( var_5 == self.path.size - 1 )
            var_7 = 5 / self.path.size / 2;

        self moveto( self.path[var_5].origin, 5 / self.path.size, var_6, var_7 );
        self rotateto( self.path[var_5].angles, 5 / self.path.size, var_6, var_7 );
        wait( 5 / self.path.size );
    }
}

bombtimerwait( var_0 )
{
    level endon( "game_ended" );
    level endon( "bombs_canceled" );
    level endon( "bomb_defused" + var_0 );
    var_1 = int( level.bombtimer * 1000 + gettime() );
    setomnvar( "ui_bomb_timer_endtime" + var_0, var_1 );
    thread updatetimerconstant( "ui_bomb_timer_endtime" + var_0, var_1, level.bombtimer * 1000, var_0 );
    level thread handlehostmigration( var_1, var_0 );
    scripts\mp\hostmigration::waitlongdurationwithgameendtimeupdate( level.bombtimer );
}

updatetimerconstant( var_0, var_1, var_2, var_3 )
{
    level endon( "bombs_canceled" );
    level endon( "bomb_defused" + var_3 );
    self.startbombtime = gettime();

    while ( gettime() < var_1 )
    {
        var_4 = gettime() - self.startbombtime;
        setomnvar( var_0, int( gettime() + var_2 - var_4 ) );
        waitframe();
    }
}

handlehostmigration( var_0, var_1 )
{
    level endon( "game_ended" );
    level endon( "bomb_defused" + var_1 );
    level endon( "disconnect" );
    level waittill( "host_migration_begin" );
    setomnvar( "ui_bomb_timer_endtime" + var_1, 0 );
    var_2 = scripts\mp\hostmigration::waittillhostmigrationdone();

    if ( var_2 > 0 )
        setomnvar( "ui_bomb_timer_endtime" + var_1, var_0 + var_2 );
}

bombdefused( var_0 )
{
    if ( scripts\mp\utility\game::getgametype() != "dd" && scripts\mp\utility\game::getgametype() != "to_dd" && scripts\mp\utility\game::getgametype() != "cmd" && scripts\mp\utility\game::getgametype() != "btm" )
        level.bombdefused = 1;

    var_0.bombdefused = 1;
    setbombtimeromnvars();
    level notify( "bomb_defused" + var_0.objectivekey );

    if ( isdefined( level.onobjectivecomplete ) )
        [[ level.onobjectivecomplete ]]( "bombzone", self.objectivekey, undefined, game["defenders"], undefined );
}

updatebombplantedomnvar( var_0 )
{
    if ( scripts\mp\utility\game::getgametype() == "cmd" )
        return;

    if ( isdefined( var_0 ) )
    {
        if ( var_0 == "allies" )
            setomnvar( "ui_bomb_owner_team", 2 );
        else
            setomnvar( "ui_bomb_owner_team", 1 );
    }

    if ( isdefined( level.aplanted ) )
    {
        if ( level.aplanted )
            setomnvar( "ui_bomb_planted_a", 1 );
        else
            setomnvar( "ui_bomb_planted_a", 0 );
    }

    if ( isdefined( level.bplanted ) )
    {
        if ( level.bplanted )
            setomnvar( "ui_bomb_planted_b", 1 );
        else
            setomnvar( "ui_bomb_planted_b", 0 );
    }
}

setbombtimeromnvars( var_0 )
{
    updatebombplantedomnvar( var_0 );
}

bombzone_setupbombcase( var_0 )
{
    level.bombplanted = 0;
    level.bombdefused = 0;
    level.bombexploded = 0;
    var_1 = getent( var_0 + "_pickup_trig", "targetname" );

    if ( !isdefined( var_1 ) )
        scripts\engine\utility::error( "No " + var_0 + "_pickup_trig trigger found in map." );
    else
    {
        var_2[0] = getent( var_0, "targetname" );

        if ( !isdefined( var_2[0] ) )
        {
            scripts\engine\utility::error( "No " + var_0 + " script_model found in map." );
            return;
        }

        var_2[0] setmodel( getbombmodel( 1 ) );
        var_2[0] setnonstick( 1 );
        var_2[0] = getadjustedfirstroundbombcaseposition( var_2[0] );
        var_1 = getadjustedfirstroundbombcaseposition( var_1, 1 );

        if ( !level.multibomb )
        {
            level.sdbomb = scripts\mp\gameobjects::createcarryobject( game["attackers"], var_1, var_2, ( 0, 0, 32 ), undefined, 1 );
            level.sdbomb scripts\mp\gameobjects::allowcarry( "friendly" );
            level.sdbomb.allowweapons = 1;
            level.sdbomb.onpickup = ::onpickup;
            level.sdbomb.ondrop = ::ondrop;
            level.sdbomb.firstpickup = 1;
            level thread bombsitewatcher();
            level.bombrespawnpoint = level.sdbomb.visuals[0].origin;
            level.bombrespawnangles = level.sdbomb.visuals[0].angles;
            level.sdbomb.visualgroundoffset = ( 0, 0, 2 );
            return;
        }

        var_1 delete();
        var_2[0] delete();
    }
}

getadjustedfirstroundbombcaseposition( var_0, var_1 )
{
    switch ( level.mapname )
    {
        case "mp_raid":
            if ( scripts\mp\flags::gameflag( "infil_will_run" ) && game["roundsPlayed"] == 0 )
            {
                var_2 = ( -518, -959.2, 267 );

                if ( istrue( var_1 ) )
                    var_0.origin = var_2;
                else
                {
                    var_0.origin = var_2;
                    var_0.angles = ( 0, 90, 0 );
                }
            }

            break;
        case "mp_petrograd":
            var_2 = ( 263, -2500, 146 );

            if ( istrue( var_1 ) )
                var_0.origin = var_2;
            else
            {
                var_0.origin = var_2;
                var_0.angles = ( 0, 90, 0 );
            }

            break;
        default:
            break;
    }

    return var_0;
}

movebombcase( var_0, var_1 )
{
    if ( isdefined( level.sdbomb ) )
    {
        level.sdbomb.trigger.origin = var_0;
        level.sdbomb.visuals[0].origin = var_0;
        level.sdbomb.visuals[0].angles = var_1;
        level.sdbomb.visuals[0] show();
        level.sdbomb scripts\mp\gameobjects::allowcarry( "friendly" );
        level.sdbomb scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_bomb" );
        level.sdbomb scripts\mp\gameobjects::setvisibleteam( "friendly" );
        level.sdbomb.allowweapons = 1;
        level.sdbomb.onpickup = ::onpickup;
        level.sdbomb.ondrop = ::ondrop;
    }
}

bombsitewatcher()
{
    level endon( "game_ended" );

    for (;;)
    {
        level waittill( "bomb_pickup" );

        foreach ( var_1 in level.objectives )
            var_1.trigger enableplayeruse( level.sdbomb.carrier );

        waitframe();
    }
}

onpickup( var_0, var_1, var_2 )
{
    var_0.isbombcarrier = 1;

    if ( isplayer( var_0 ) )
    {
        var_0 thread scripts\common\utility::_id_13E0A( level._id_11B29, "pickup", var_0.origin );
        scripts\mp\utility\game::setmlgannouncement( 1, var_0.team, var_0 getentitynumber() );
    }

    var_0 setclientomnvar( "ui_carrying_bomb", 1 );
    setomnvar( "ui_bomb_carrier", var_0 getentitynumber() );
    self.offset3d = ( 0, 0, 75 );
    scripts\mp\gameobjects::setobjectivestatusicons( "icon_waypoint_escort_bomb" );

    if ( isdefined( level.sd_loadout ) && isdefined( level.sd_loadout[var_0.team] ) )
        var_0 thread applybombcarrierclass();

    if ( !level.bombdefused )
    {
        var_0 thread scripts\mp\hud_message::showsplash( "callout_bombpickup" );
        scripts\mp\hud_util::teamplayercardsplash( "callout_bombtaken", var_0, var_0.team );

        if ( istrue( self.firstpickup ) )
        {
            var_3 = "bomb_pickup_first";
            self.firstpickup = 0;

            if ( istrue( level.setplayerselfrevivingextrainfo ) )
            {
                level.sdbomb.visuals[0] setmodel( getbombmodel() );
                playfx( level.spawnoffsettacinsertmax["vanish_hw_fr"], self.trigger.origin + ( 0, 0, -9970 ) );
            }
        }
        else
            var_3 = "bomb_pickup";

        var_4 = [];
        var_4[var_4.size] = var_0;
        level thread playerdelayedvo( var_0, var_3 );
        level thread teamdelayedvo( var_0.pers["team"], var_4 );
    }

    scripts\mp\utility\sound::playsoundonplayers( game["bomb_recovered_sound"], game["attackers"] );

    if ( level.codcasterenabled )
        var_0 setgametypevip( 1 );

    scripts\mp\utility\game::_id_119AC( var_0, undefined, "Bomb Picked Up", var_0.origin );
    level notify( "bomb_pickup" );
    level thread scripts\mp\hud_message::updatematchstatushintforallplayers( var_0.team, 25, undefined, var_0, 21 );
}

ondrop( var_0 )
{
    level notify( "bomb_dropped" );
    setomnvar( "ui_bomb_carrier", -1 );

    if ( level.codcasterenabled )
    {
        if ( isdefined( var_0 ) )
            var_0 setgametypevip( 0 );
    }

    scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_bomb" );
    scripts\mp\utility\sound::playsoundonplayers( game["bomb_dropped_sound"], game["attackers"] );

    if ( isdefined( var_0 ) )
    {
        var_0.isbombcarrier = 0;
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( var_0.team, 24 );
    }

    if ( !level.bombplanted && isdefined( level.bombresettimer ) && level.bombresettimer > 0 )
        thread waitforbombreset( level.bombresettimer );
}

waitforbombreset( var_0 )
{
    level endon( "game_ended" );
    level endon( "bomb_pickup" );
    wait( var_0 );
    scripts\mp\weapons::equipmentdeletevfx( self.visuals[0].origin, self.visuals[0].angles );
    movebombcase( level.bombrespawnpoint, level.bombrespawnangles );
}

enablemultibombui()
{
    foreach ( var_1 in level.players )
    {
        if ( !isai( var_1 ) )
            var_1 setclientomnvar( "ui_carrying_bomb", var_1.pers["team"] == game["attackers"] );
    }
}

respawnbombcase()
{
    level endon( "game_ended" );
    wait 5;

    if ( level.multibomb )
        enablemultibombui();
    else
        movebombcase( level.bombrespawnpoint, level.bombrespawnangles );
}

advancebombcase()
{
    level.bombplanted = 0;
    level.bombdefused = 0;
    level.bombrespawnpoint = level.curobj.visuals[0].origin + ( 0, 0, 48 );
    level.bombrespawnangles = level.curobj.visuals[0].angles;

    if ( level.multibomb )
        enablemultibombui();
    else
        movebombcase( level.bombrespawnpoint, level.bombrespawnangles );
}

applybombcarrierclass()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );

    if ( isdefined( self.iscarrying ) && self.iscarrying == 1 )
    {
        self notify( "force_cancel_placement" );
        waitframe();
    }

    while ( self ismantling() )
        waitframe();

    while ( !self isonground() )
        waitframe();

    self.pers["gamemodeLoadout"] = level.sd_loadout[self.team];
    scripts\mp\equipment\tac_insert::_id_13684( self.origin, self.angles );
    self.gamemode_chosenclass = self.class;
    self.pers["class"] = "gamemode";
    self.pers["lastClass"] = "gamemode";
    self.class = "gamemode";
    self.lastclass = "gamemode";
    self notify( "faux_spawn" );
    self.gameobject_fauxspawn = 1;
    self.faux_spawn_stance = self getstance();
    thread scripts\mp\playerlogic::spawnplayer( 1 );
}

removebombcarrierclass()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );

    if ( isdefined( self.iscarrying ) && self.iscarrying == 1 )
    {
        self notify( "force_cancel_placement" );
        waitframe();
    }

    while ( self ismantling() )
        waitframe();

    while ( !self isonground() )
        waitframe();

    self.pers["gamemodeLoadout"] = undefined;
    scripts\mp\equipment\tac_insert::_id_13684( self.origin, self.angles );
    self notify( "faux_spawn" );
    self.faux_spawn_stance = self getstance();
    thread scripts\mp\playerlogic::spawnplayer( 1 );
}

bombzone_awardgenericbombzonemedals( var_0, var_1 )
{
    foreach ( var_3 in level.objectives )
    {
        if ( !isdefined( var_3.bombdefusetrig.origin ) )
            continue;

        var_4 = istrue( var_3.bombplanted );
        var_5 = distsquaredcheck( var_0.origin, var_1.origin, scripts\engine\utility::ter_op( var_4, var_3.bombdefusetrig.origin, var_3.trigger.origin ) );

        if ( var_5 )
        {
            if ( scripts\mp\utility\game::getgametype() == "dd" && scripts\mp\utility\game::inovertime() )
            {
                if ( var_0.team == var_3.ownerteam )
                {
                    var_0 thread scripts\mp\rank::scoreeventpopup( scripts\engine\utility::ter_op( var_4, "defend", "assault" ) );
                    var_0 thread scripts\mp\awards::givemidmatchaward( scripts\engine\utility::ter_op( var_4, "mode_x_defend", "mode_x_assault" ) );
                }
                else
                {
                    var_0 thread scripts\mp\rank::scoreeventpopup( "assault" );
                    var_0 thread scripts\mp\awards::givemidmatchaward( "mode_x_assault" );
                }

                continue;
            }

            if ( var_1.team == game["defenders"] )
            {
                var_0 thread scripts\mp\rank::scoreeventpopup( scripts\engine\utility::ter_op( var_4, "defend", "assault" ) );
                var_0 thread scripts\mp\awards::givemidmatchaward( scripts\engine\utility::ter_op( var_4, "mode_x_defend", "mode_x_assault" ) );
                continue;
            }

            var_0 thread scripts\mp\rank::scoreeventpopup( scripts\engine\utility::ter_op( var_4, "assault", "defend" ) );
            var_0 thread scripts\mp\awards::givemidmatchaward( scripts\engine\utility::ter_op( var_4, "mode_x_assault", "mode_x_defend" ) );
        }
    }
}

distsquaredcheck( var_0, var_1, var_2 )
{
    var_3 = distancesquared( var_2, var_0 );
    var_4 = distancesquared( var_2, var_1 );

    if ( var_3 < 90000 || var_4 < 90000 )
        return 1;
    else
        return 0;
}

playerdelayedvo( var_0, var_1 )
{
    var_2 = scripts\mp\utility\game::gettimepassed() / 1000;

    if ( istrue( level.infilvotiming ) )
        var_3 = 8;
    else
        var_3 = 5;

    var_4 = var_3 - var_2;

    if ( var_4 > 0 )
        wait( var_4 );

    if ( isdefined( var_0 ) )
        var_0 scripts\mp\utility\dialog::leaderdialogonplayer( var_1 );
}

teamdelayedvo( var_0, var_1 )
{
    var_2 = scripts\mp\utility\game::gettimepassed() / 1000;

    if ( istrue( level.infilvotiming ) )
        var_3 = 8;
    else
        var_3 = 5;

    var_4 = var_3 - var_2;

    if ( var_4 > 0 )
        wait( var_4 );

    scripts\mp\utility\dialog::leaderdialog( "bomb_achieve", var_0, "bomb", var_1 );
}

resetuiomnvargamemode()
{
    self setclientomnvar( "ui_carrying_bomb", 0 );
}

setteaminhuddatafromteamname( var_0 )
{
    if ( var_0 == "axis" )
        self setteaminhuddata( 1 );
    else if ( var_0 == "allies" )
        self setteaminhuddata( 2 );
    else
        self setteaminhuddata( 0 );
}
