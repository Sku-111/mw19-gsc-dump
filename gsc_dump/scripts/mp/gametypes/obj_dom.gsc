// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

setupobjective( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( !isdefined( var_5 ) )
        var_5 = 1;

    if ( isdefined( var_0.target ) )
    {
        if ( !isdefined( var_0.visuals ) )
            var_7[0] = getent( var_0.target, "targetname" );
        else
            var_7 = var_0.visuals;
    }
    else
    {
        var_7[0] = spawn( "script_model", var_0.origin );
        var_7[0].angles = var_0.angles;
    }

    if ( !isdefined( level.flagcapturetime ) )
        level.flagcapturetime = scripts\mp\utility\dvars::dvarfloatvalue( "flagCaptureTime", 10, 0, 30 );

    if ( isdefined( var_0.objectivekey ) )
        var_8 = var_0.objectivekey;
    else
        var_8 = var_0.script_label;

    if ( isdefined( var_0.iconname ) )
        var_9 = var_0.iconname;
    else
        var_9 = var_0.script_label;

    if ( istrue( var_2 ) )
        var_10 = getreservedobjid( var_8 );
    else
        var_10 = undefined;

    if ( !isdefined( var_1 ) )
        var_1 = "neutral";

    var_11 = scripts\mp\gameobjects::createuseobject( var_1, var_0, var_7, ( 0, 0, 100 ), var_10, var_3, var_4, var_6 );
    var_11 scripts\mp\gameobjects::allowuse( "enemy" );
    var_11 scripts\mp\gameobjects::cancontestclaim( 1 );
    var_11 scripts\mp\gameobjects::setusetime( level.flagcapturetime );

    if ( isdefined( level.capturetype ) )
        var_11 scripts\mp\gameobjects::setcapturebehavior( getcapturetype() );

    var_11.objectivekey = var_8;
    var_11.iconname = var_9;

    if ( !istrue( var_3 ) )
    {
        var_11 scripts\mp\gameobjects::setvisibleteam( "any", undefined, 1 );
        var_11.onuse = ::dompoint_onuse;
        var_11.onbeginuse = ::dompoint_onusebegin;
        var_11.onuseupdate = ::dompoint_onuseupdate;
        var_11.onenduse = ::dompoint_onuseend;
        var_11.oncontested = ::dompoint_oncontested;
        var_11.onuncontested = ::dompoint_onuncontested;
        var_11.onunoccupied = ::dompoint_onunoccupied;
        var_11.onpinnedstate = ::dompoint_onpinnedstate;
        var_11.onunpinnedstate = ::dompoint_onunpinnedstate;
        var_11.stompprogressreward = ::dompoint_stompprogressreward;
    }

    var_11.nousebar = 1;
    var_11.id = "domFlag";
    var_11.claimgracetime = level.flagcapturetime * 1000;
    var_11.firstcapture = 1;
    var_11 scripts\mp\gameobjects::pinobjiconontriggertouch();

    if ( istrue( level.playinggulagbink ) )
        var_11._id_136CD = ::_id_136CE;
    else if ( istrue( level.setplayerselfrevivingextrainfo ) && scripts\mp\utility\game::getgametype() != "br" )
        var_11._id_136CD = ::_id_136CF;

    var_12 = var_7[0].origin + ( 0, 0, 32 );
    var_13 = var_7[0].origin + ( 0, 0, -32 );
    var_14 = scripts\engine\trace::create_contents( var_5, 1, 1, 1, 0, 1, 1 );
    var_15 = [];
    var_16 = scripts\engine\trace::ray_trace( var_12, var_13, var_15, var_14 );
    var_17 = checkmapoffsets( var_11 );
    var_11.baseeffectpos = var_16["position"] + var_17;
    var_18 = vectortoangles( var_16["normal"] );
    var_19 = checkmapfxangles( var_11, var_18 );
    var_11.baseeffectforward = anglestoforward( var_19 );
    var_20 = spawn( "script_model", var_11.baseeffectpos );
    var_20 setmodel( "dom_flag_scriptable" );
    var_20.angles = generateaxisanglesfromforwardvector( var_11.baseeffectforward, var_20.angles );
    var_11.scriptable = var_20;
    var_11.vfxnamemod = "";
    var_11.noscriptable = 1;

    if ( istrue( level.multiteambased ) )
        var_11.noscriptable = 1;

    var_11.flagmodel = spawn( "script_model", var_11.baseeffectpos );

    if ( istrue( level.setplayerselfrevivingextrainfo ) && scripts\mp\utility\game::getgametype() != "br" )
    {
        var_21 = "decor_halloween_scarecrow";
        var_11.flagmodel.useagents = 1;
    }
    else
        var_21 = "military_dom_flag_neutral";

    var_11.flagmodel setmodel( var_21 );
    var_11.flagmodel.angles = getlivingplayersonteam( var_11 );
    var_11.outlineent = var_11.flagmodel;

    if ( istrue( level.setplayerselfrevivingextrainfo ) && scripts\mp\utility\game::getgametype() != "br" )
    {
        var_11 thread setplayermostwantedextrainfo();
        var_11 thread markdistanceoverride();
    }

    var_11 initializematchrecording();

    if ( !istrue( var_3 ) )
        var_11 domflag_setneutral( undefined, 1 );

    return var_11;
}

removeobjective( var_0 )
{
    if ( isdefined( var_0.flagmodel ) )
        var_0.flagmodel delete();

    if ( isdefined( var_0.scriptable ) )
        var_0.scriptable delete();

    var_0 scripts\mp\gameobjects::deleteuseobject();
}

getreservedobjid( var_0 )
{
    if ( var_0 == "_a" )
        var_1 = 0;
    else if ( var_0 == "_b" )
        var_1 = 1;
    else if ( var_0 == "_d" )
        var_1 = 3;
    else if ( var_0 == "_e" )
        var_1 = 4;
    else
        var_1 = 2;

    return var_1;
}

getcapturetype()
{
    var_0 = "normal";

    if ( level.capturetype == 2 )
        var_0 = "neutralize";
    else if ( level.capturetype == 3 )
        var_0 = "persistent";

    return var_0;
}

getlivingplayersonteam( var_0 )
{
    var_1 = var_0.objectivekey;
    var_2 = ( 0, 0, 0 );

    if ( level.mapname == "mp_hardhat" )
    {
        if ( var_1 == "_b" )
            var_2 = ( 0, 110, 0 );
    }

    return var_2;
}

checkmapoffsets( var_0 )
{
    var_1 = var_0.objectivekey;
    var_2 = ( 0, 0, 0 );

    if ( level.mapname == "mp_quarry" )
    {
        if ( var_1 == "_c" )
            var_2 = var_2 + ( 0, 0, 7 );
    }

    if ( level.mapname == "mp_divide" )
    {
        if ( var_1 == "_a" )
            var_2 = var_2 + ( 0, 0, 4.5 );
    }

    if ( level.mapname == "mp_afghan" )
    {
        if ( var_1 == "_a" )
            var_2 = var_2 + ( 0, 0, 5 );

        if ( var_1 == "_c" )
            var_2 = var_2 + ( 0, 0, 1 );
    }

    return var_2;
}

checkmapfxangles( var_0, var_1 )
{
    var_2 = var_0.objectivekey;
    var_3 = var_1;

    if ( level.mapname == "mp_quarry" )
    {
        if ( var_2 == "_c" )
            var_3 = ( 276.5, var_3[1], var_3[2] );
    }

    if ( level.mapname == "mp_divide" )
    {
        if ( var_2 == "_a" )
            var_3 = ( 273.5, var_3[1], var_3[2] );
    }

    if ( level.mapname == "mp_afghan" )
    {
        if ( var_2 == "_a" )
            var_3 = ( 273.5, 200.5, var_3[2] );

        if ( var_2 == "_c" )
            var_3 = ( 273.5, var_3[1], var_3[2] );
    }

    if ( level.mapname == "mp_faridah" )
    {
        if ( isstring( var_2 ) )
        {
            if ( var_2 == "_school" )
                var_3 = ( 270, 0, 0 );
            else if ( var_2 == "_warehouse" )
                var_3 = ( 270, 0, 0 );
        }
    }

    return var_3;
}

initializematchrecording()
{
    if ( isdefined( level.matchrecording_logevent ) )
    {
        self.logid = [[ level.matchrecording_generateid ]]();
        var_0 = "A";

        switch ( self.objectivekey )
        {
            case "_a":
                var_0 = "A";
                break;
            case "_b":
                var_0 = "B";
                break;
            case "_c":
                var_0 = "C";
                break;
            case "_d":
                var_0 = "D";
                break;
            case "_e":
                var_0 = "E";
                break;
            case "0":
                var_0 = "0";
                break;
            case "1":
                var_0 = "1";
                break;
            case "2":
                var_0 = "2";
                break;
            case "3":
                var_0 = "3";
                break;
            case "4":
                var_0 = "4";
                break;
            default:
                break;
        }

        self.logeventflag = "FLAG_" + var_0;
    }

    if ( scripts\mp\analyticslog::analyticslogenabled() )
    {
        self.analyticslogid = scripts\mp\analyticslog::getuniqueobjectid();
        self.analyticslogtype = "dom_flag" + self.objectivekey;
    }
}

domflag_setneutral( var_0, var_1 )
{
    self notify( "flag_neutral" );
    scripts\mp\gameobjects::setobjectivestatusicons( level.iconneutral, undefined, undefined, undefined, 1 );
    scripts\mp\gameobjects::setownerteam( "neutral" );
    thread updateflagstate( "idle", istrue( var_0 ), undefined, var_1 );

    if ( isdefined( level.matchrecording_logevent ) && isdefined( self.logid ) && isdefined( self.logeventflag ) )
        [[ level.matchrecording_logevent ]]( self.logid, undefined, self.logeventflag, self.visuals[0].origin[0], self.visuals[0].origin[1], gettime(), 0 );

    scripts\mp\analyticslog::logevent_gameobject( self.analyticslogtype, self.analyticslogid, self.visuals[0].origin, -1, "neutral" );
}

dompoint_setcaptured( var_0, var_1 )
{
    scripts\mp\gameobjects::setownerteam( var_0 );
    self notify( "capture", var_1 );
    self notify( "assault", var_1 );

    if ( istrue( level.numflagsscoreonkill ) )
    {
        var_2 = getteamflagcount( var_0 );

        if ( var_2 >= level.numflagsscoreonkill )
            level.teamscoresonkill[var_0] = 1;
        else
            level.teamscoresonkill[var_0] = 0;
    }

    scripts\mp\gameobjects::setobjectivestatusicons( level.icondefending, level.iconcapture );

    if ( scripts\mp\utility\game::getgametype() == "btm" )
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( self.ownerteam, 15, 14 );

    self.neutralized = 0;
    thread updateflagstate( var_0, 0, var_0 );

    if ( self.touchlist[var_0].size == 0 && isdefined( self.oldtouchlist ) )
        self.touchlist = self.oldtouchlist;

    foreach ( var_4 in level.teamnamelist )
    {
        if ( isdefined( self.assisttouchlist[var_4] ) && var_4 != var_0 )
            self.assisttouchlist[var_4] = [];
    }

    if ( isdefined( self.assisttouchlist[var_0] ) )
    {
        var_6 = getarraykeys( self.assisttouchlist[var_0] );

        foreach ( var_8 in var_6 )
        {
            var_9 = self.assisttouchlist[var_0][var_8].player;

            if ( isdefined( var_9.owner ) )
                var_9 = var_9.owner;

            if ( !isplayer( var_9 ) )
                continue;

            var_9 scripts\cp\vehicles\vehicle_compass_cp::_id_12003();
        }
    }

    thread giveflagcapturexp( self.touchlist[var_0], var_1, var_0 );

    if ( isdefined( level.matchrecording_logevent ) )
        [[ level.matchrecording_logevent ]]( self.logid, undefined, self.logeventflag, self.visuals[0].origin[0], self.visuals[0].origin[1], gettime(), scripts\engine\utility::ter_op( var_0 == "allies", 1, 2 ) );

    scripts\mp\analyticslog::logevent_gameobject( self.analyticslogtype, self.analyticslogid, self.visuals[0].origin, -1, "captured_" + var_0 );
}

dompoint_onuse( var_0 )
{
    var_1 = var_0.team;
    var_2 = scripts\mp\gameobjects::getownerteam();
    scripts\mp\objidpoolmanager::objective_set_progress( self.objidnum, 0 );
    scripts\mp\objidpoolmanager::objective_show_progress( self.objidnum, 0 );
    self.capturetime = gettime();
    self.neutralized = 0;

    if ( istrue( level.flagneutralization ) )
    {
        var_3 = scripts\mp\gameobjects::getownerteam();

        if ( var_3 == "neutral" )
        {
            dompoint_setcaptured( var_1, var_0 );

            if ( isdefined( self._id_136CD ) )
                [[ self._id_136CD ]]();
        }
        else
        {
            thread domflag_setneutral( 1 );
            scripts\mp\utility\sound::playsoundonplayers( "mp_dom_flag_lost", var_3 );
            level.lastcaptime = gettime();
            thread giveflagassistedcapturepoints( self.touchlist[var_1] );
            self.neutralized = 1;
        }
    }
    else
    {
        dompoint_setcaptured( var_1, var_0 );

        if ( isdefined( self._id_136CD ) )
            [[ self._id_136CD ]]();
    }

    if ( !self.neutralized )
    {
        var_4 = 3;

        if ( self.objectivekey == "_a" )
            var_4 = 1;
        else if ( self.objectivekey == "_b" )
            var_4 = 2;
        else if ( self.objectivekey == "_d" )
            var_4 = 4;
        else if ( self.objectivekey == "_e" )
            var_4 = 5;

        scripts\mp\utility\game::setmlgannouncement( 21, var_1, var_0 getentitynumber(), var_4 );

        if ( isdefined( level.onobjectivecomplete ) )
        {
            [[ level.onobjectivecomplete ]]( "dompoint", self.objectivekey, var_0, var_1, var_2, self );
            var_5 = "Flag " + resetchemicalvalvevalues() + " Captured";

            if ( var_2 == "neutral" || var_2 == "none" )
                scripts\mp\utility\game::_id_119AC( var_0, undefined, var_5, var_0.origin, "neutral_flag" );
            else
                scripts\mp\utility\game::_id_119AC( var_0, undefined, var_5, var_0.origin );
        }
    }

    self.firstcapture = 0;
}

dompoint_onusebegin( var_0 )
{
    var_1 = scripts\mp\gameobjects::getownerteam();
    self.neutralizing = istrue( level.flagneutralization ) && var_1 != "neutral";

    if ( self.neutralizing )
    {
        if ( var_1 != var_0.team )
            var_2 = relic_nuketimer_timerloop();
        else
            var_2 = 0;
    }
    else if ( var_1 != var_0.team )
        var_2 = 1;
    else
        var_2 = 0;

    var_0 setclientomnvar( "ui_objective_state", var_2 );

    if ( !isdefined( self.statusnotifytime ) )
        self.statusnotifytime = gettime();

    if ( !istrue( self.neutralized ) && self.statusnotifytime > self.statusnotifytime + 5000 )
    {
        self.didstatusnotify = 0;
        self.statusnotifytime = gettime();
    }

    var_3 = scripts\engine\utility::ter_op( istrue( level.flagneutralization ) && !self.firstcapture, level.flagcapturetime * 0.5, level.flagcapturetime );
    scripts\mp\gameobjects::setusetime( var_3 );

    if ( var_3 > 0 )
    {
        self.prevownerteam = scripts\mp\utility\game::getotherteam( var_0.team )[0];
        updateflagcapturestate( var_0.team );
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconlosing, level.icontaking );
    }

    if ( istrue( level.hideenemyfobs ) )
    {
        if ( var_0.team != var_1 )
            scripts\mp\gameobjects::setvisibleteam( "any" );
    }
}

dompoint_onuseupdate( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\gameobjects::getownerteam();

    if ( var_1 < 1.0 && !level.gameended && !scripts\mp\utility\game::isanymlgmatch() )
        play_dom_capture_sfx( var_1, var_0 );

    if ( var_1 > 0.05 && var_2 && !self.didstatusnotify )
    {
        if ( var_4 == "neutral" )
        {
            if ( level.flagcapturetime > 0.05 )
            {
                scripts\mp\utility\dialog::statusdialog( "securing" + self.objectivekey, var_0 );

                if ( isdefined( level.objectives ) && level.objectives.size == 5 && ( self.objectivekey == "_c" || self.objectivekey == "_d" ) || self.objectivekey == "_b" )
                {
                    var_5 = scripts\mp\utility\game::getotherteam( var_0 )[0];
                    scripts\mp\utility\dialog::statusdialog( "losing" + self.objectivekey, var_5 );
                }
            }
        }
        else if ( level.flagcapturetime > 0.05 )
        {
            scripts\mp\utility\dialog::statusdialog( "losing" + self.objectivekey, var_4 );
            scripts\mp\utility\dialog::statusdialog( "securing" + self.objectivekey, var_0 );
        }

        self.didstatusnotify = 1;
    }
}

dompoint_onuseend( var_0, var_1, var_2 )
{
    if ( isplayer( var_1 ) )
    {
        var_1 setclientomnvar( "ui_objective_state", 0 );
        var_1.ui_dom_securing = undefined;
    }

    var_3 = scripts\mp\gameobjects::getownerteam();

    if ( var_3 == "neutral" )
    {
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconneutral );
        thread updateflagstate( "idle", 0 );
    }
    else
    {
        scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );
        thread updateflagstate( var_3, 0 );
    }

    if ( !var_2 )
        self.neutralized = 0;
}

dompoint_oncontested()
{
    self.hostvictimoverride = gettime();
    scripts\mp\gameobjects::setobjectivestatusicons( level.iconcontested );
    scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, undefined );
    thread updateflagstate( "contested", 0 );
}

dompoint_onuncontested( var_0 )
{
    if ( istrue( level.flagneutralization ) && !self.firstcapture )
        scripts\mp\gameobjects::setusetime( level.flagcapturetime * 0.5 );

    var_1 = scripts\mp\gameobjects::getownerteam();

    if ( var_1 == "neutral" )
    {
        if ( var_0 != "none" )
            scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, var_0 );
        else if ( isdefined( self.lastprogressteam ) )
            scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, self.lastprogressteam );
    }
    else
        scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, scripts\mp\utility\game::getotherteam( var_1 )[0] );

    if ( var_0 == "none" || var_1 == "neutral" )
    {
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconneutral );
        self.didstatusnotify = 0;
    }
    else
        scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );

    var_2 = ( gettime() - self.hostvictimoverride ) * 0.001;
    var_3 = "Flag " + resetchemicalvalvevalues() + " Contested";
    scripts\mp\utility\game::_id_119AC( undefined, undefined, var_3, undefined, var_2 + " seconds" );
    self.hostvictimoverride = undefined;
    var_4 = scripts\engine\utility::ter_op( var_1 == "neutral", "idle", var_1 );
    thread updateflagstate( var_4, 0 );
}

play_dom_capture_sfx( var_0, var_1 )
{
    if ( !isdefined( self.lastsfxplayedtime ) )
        self.lastsfxplayedtime = gettime();

    if ( self.lastsfxplayedtime + 995 < gettime() )
    {
        self.lastsfxplayedtime = gettime();
        var_2 = "";
        var_0 = int( floor( var_0 * 10 ) );
        var_2 = "mp_dom_capturing_tick_0" + var_0;
        self.visuals[0] playsoundtoteam( var_2, var_1 );
    }
}

dompoint_onunoccupied()
{
    var_0 = scripts\mp\gameobjects::getownerteam();

    if ( var_0 == "neutral" )
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconneutral );
    else
        scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );

    self.didstatusnotify = 0;
}

dompoint_onpinnedstate( var_0 )
{
    if ( self.ownerteam != "neutral" && self.numtouching[self.ownerteam] && !self.stalemate )
        scripts\mp\gameobjects::setobjectivestatusicons( level.icondefending, level.iconcapture );
}

dompoint_onunpinnedstate( var_0 )
{
    if ( self.ownerteam != "neutral" && !self.numtouching[self.ownerteam] && !self.stalemate )
        scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );
}

dompoint_stompprogressreward( var_0 )
{
    var_0 thread scripts\mp\utility\points::giveunifiedpoints( "obj_prog_defend" );
    scripts\mp\gameobjects::setobjectivestatusicons( level.icondefending, level.iconcapture );
}

setcrankedtimerdomflag( var_0 )
{
    if ( isdefined( level.supportcranked ) && level.supportcranked && isdefined( var_0.cranked ) && var_0.cranked )
        var_0 scripts\mp\cranked::setcrankedplayerbombtimer( "assist" );
}

_id_136CE()
{
    var_0 = 20;
    var_1 = 600;
    var_2 = self.flagmodel.origin;
    var_3 = var_2 + ( 0, 0, var_0 );
    var_4 = var_2 + ( 0, 0, var_1 );
    var_5 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 1, 1 );
    var_6 = [];
    var_6 = level.players;
    var_6[var_6.size] = self.flagmodel;
    var_7 = scripts\engine\trace::ray_trace( var_3, var_4, var_6, var_5, 0 );

    if ( isplayer( var_7["entity"] ) )
        var_7["entity"] = undefined;

    if ( isdefined( var_7["entity"] ) && isdefined( var_7["entity"].code_classname ) && var_7["entity"].code_classname == "script_vehicle" )
    {
        var_6[var_6.size] = var_7["entity"];
        var_7 = scripts\engine\trace::ray_trace( var_3, var_4, var_6, var_5, 0 );
    }

    if ( var_7["fraction"] != 1 )
    {
        var_0 = 4000;
        var_1 = 20;
        var_2 = self.flagmodel.origin;
        var_3 = var_2 + ( 0, 0, var_0 );
        var_4 = var_2 + ( 0, 0, var_1 );
        var_5 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 1, 1 );
        var_6 = [];
        var_6 = level.players;
        var_6[var_6.size] = self.flagmodel;
        var_7 = scripts\engine\trace::ray_trace( var_3, var_4, var_6, var_5, 0 );

        if ( isplayer( var_7["entity"] ) )
            var_7["entity"] = undefined;

        if ( isdefined( var_7["entity"] ) && isdefined( var_7["entity"].code_classname ) && var_7["entity"].code_classname == "script_vehicle" )
        {
            var_6[var_6.size] = var_7["entity"];
            var_7 = scripts\engine\trace::ray_trace( var_3, var_4, var_6, var_5, 0 );
        }

        if ( var_7["fraction"] != 1 )
        {
            playfx( level.select_stairway_spawners["gos_fireworks"], var_7["position"] );
            playfx( level.select_stairway_spawners["gos_fireworks"], var_7["position"], anglestoforward( self.flagmodel.angles ) + ( -10, -10, 0 ) );
            playfx( level.select_stairway_spawners["gos_fireworks"], var_7["position"], anglestoforward( self.flagmodel.angles ) + ( 10, 10, 0 ) );
            level thread scripts\mp\gametypes\common.gsc::_id_14397( var_7["position"] );
        }
    }
    else
    {
        playfx( level.select_stairway_spawners["gos_fireworks"], var_2 );
        playfx( level.select_stairway_spawners["gos_fireworks"], var_2, anglestoforward( self.flagmodel.angles ) + ( -10, -10, 0 ) );
        playfx( level.select_stairway_spawners["gos_fireworks"], var_2, anglestoforward( self.flagmodel.angles ) + ( 10, 10, 0 ) );
        level thread scripts\mp\gametypes\common.gsc::_id_14397( var_2 );
    }
}

_id_136CF()
{
    if ( isdefined( self.spawnpoint_clearspawnpoint ) )
        return;
    else
    {
        self.spawnpoint_clearspawnpoint = 1;
        var_0 = 20;
        var_1 = 600;

        if ( level.mapname == "mp_shipment" )
            var_1 = 400;

        var_2 = self.flagmodel.origin;
        var_3 = var_2 + ( 0, 0, var_0 );
        var_4 = var_2 + ( 0, 0, var_1 );
        var_5 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 1, 1 );
        var_6 = [];
        var_6 = level.players;
        var_6[var_6.size] = self.flagmodel;
        var_7 = scripts\engine\trace::ray_trace( var_3, var_4, var_6, var_5, 0 );

        if ( isplayer( var_7["entity"] ) )
            var_7["entity"] = undefined;

        if ( isdefined( var_7["entity"] ) && isdefined( var_7["entity"].code_classname ) && var_7["entity"].code_classname == "script_vehicle" )
        {
            var_6[var_6.size] = var_7["entity"];
            var_7 = scripts\engine\trace::ray_trace( var_3, var_4, var_6, var_5, 0 );
        }

        if ( var_7["fraction"] != 1 )
            playfx( level.spawnoffsettacinsertmax["blood_ceil_hw"], var_7["position"] - ( 0, 0, 5 ), ( -180, -180, 0 ), ( -180, -180, -180 ) );

        playfx( level.spawnoffsettacinsertmax["blood_floor_hw"], self.flagmodel.origin + ( 0, 0, 2 ) );
        var_0 = 4000;
        var_1 = 20;
        var_2 = self.flagmodel.origin;
        var_3 = var_2 + ( 0, 0, var_0 );
        var_4 = var_2 + ( 0, 0, var_1 );
        var_5 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 1, 1 );
        var_6 = [];
        var_6 = level.players;
        var_6[var_6.size] = self.flagmodel;
        var_7 = scripts\engine\trace::ray_trace( var_3, var_4, var_6, var_5, 0 );

        if ( isplayer( var_7["entity"] ) )
            var_7["entity"] = undefined;

        if ( isdefined( var_7["entity"] ) && isdefined( var_7["entity"].code_classname ) && var_7["entity"].code_classname == "script_vehicle" )
        {
            var_6[var_6.size] = var_7["entity"];
            var_7 = scripts\engine\trace::ray_trace( var_3, var_4, var_6, var_5, 0 );
        }

        if ( var_7["fraction"] != 1 )
            playfx( level.spawnoffsettacinsertmax["bats_fly_hw"], var_7["position"] + ( 0, 0, 50 ) );
        else
            playfx( level.spawnoffsettacinsertmax["bats_fly_hw"], self.flagmodel.origin + ( 0, 0, 50 ) );
    }
}

setplayermostwantedextrainfo()
{
    scripts\mp\flags::gameflagwait( "prematch_done" );
    var_0 = 4000;
    var_1 = 20;
    var_2 = self.flagmodel.origin;
    var_3 = var_2 + ( 0, 0, var_0 );
    var_4 = var_2 + ( 0, 0, var_1 );
    var_5 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 1, 1 );
    var_6 = [];
    var_6 = level.players;
    var_6[var_6.size] = self.flagmodel;
    var_7 = scripts\engine\trace::ray_trace( var_3, var_4, var_6, var_5, 0 );

    if ( isplayer( var_7["entity"] ) )
        var_7["entity"] = undefined;

    if ( isdefined( var_7["entity"] ) && isdefined( var_7["entity"].code_classname ) && var_7["entity"].code_classname == "script_vehicle" )
    {
        var_6[var_6.size] = var_7["entity"];
        var_7 = scripts\engine\trace::ray_trace( var_3, var_4, var_6, var_5, 0 );
    }

    if ( var_7["fraction"] != 1 )
        playfx( level.spawnoffsettacinsertmax["bats_hw"], var_7["position"] );
    else
        playfx( level.spawnoffsettacinsertmax["bats_hw"], self.flagmodel.origin + ( 0, 0, 200 ) );
}

dompoint_setupflagmodels()
{
    game["flagmodels"] = [];
    game["flagmodels"]["neutral"] = "prop_flag_neutral";
}

updateflagstate( var_0, var_1, var_2, var_3 )
{
    self notify( "updateFlagState" );
    self endon( "updateFlagState" );

    if ( istrue( level.setplayerselfrevivingextrainfo ) && scripts\mp\utility\game::getgametype() != "br" )
    {
        if ( istrue( var_3 ) )
            self.flagmodel.angles = self.flagmodel.angles + ( 90, 0, 0 );
        else if ( isdefined( var_2 ) && self.firstcapture && scripts\mp\utility\game::getgametype() != "arena" )
            self.flagmodel thread _id_12ED1();
        else if ( isdefined( var_2 ) )
            playfx( level.spawnoffsettacinsertmax["vanish_hw_fr"], self.flagmodel.origin + ( 0, 0, 60 ) );
    }
    else if ( isdefined( var_2 ) )
    {
        if ( var_2 == "allies" )
            self.flagmodel setmodel( "military_dom_flag_west" );
        else if ( var_2 == "axis" )
            self.flagmodel setmodel( "military_dom_flag_east" );
        else
            self.flagmodel setmodel( "military_dom_flag_neutral" );
    }

    if ( isdefined( self.noscriptable ) )
        return;

    while ( !isdefined( self.scriptable ) )
        waitframe();

    if ( scripts\mp\utility\game::getgametype() == "defcon" )
        return;

    if ( scripts\mp\utility\game::getgametype() == "arm" )
        return;

    if ( isdefined( self.scriptable ) )
    {
        if ( var_0 == "off" )
            setdomscriptablepartstate( "flag", var_0 );
        else
            setdomscriptablepartstate( "flag", var_0, self.vfxnamemod );

        if ( !istrue( var_1 ) )
            setdomscriptablepartstate( "pulse", "off" );
    }
}

setdomscriptablepartstate( var_0, var_1, var_2 )
{
    if ( !isdefined( self.scriptable ) )
        return;

    if ( isdefined( level.setdomscriptablepartstatefunc ) )
    {
        if ( [[ level.setdomscriptablepartstatefunc ]]( var_0, var_1, var_2 ) )
            return;
    }

    if ( isdefined( var_2 ) )
        var_1 = var_1 + var_2;

    self.scriptable setscriptablepartstate( var_0, var_1 );
}

updateflagcapturestate( var_0 )
{
    if ( isdefined( self.noscriptable ) )
        return;

    if ( scripts\mp\utility\game::getgametype() != "arm" && scripts\mp\utility\game::getgametype() != "defcon" )
    {
        if ( isdefined( self.scriptable ) )
            setdomscriptablepartstate( "pulse", var_0, self.vfxnamemod );
    }
}

ondisconnect()
{
    self waittill( "disconnect" );

    foreach ( var_1 in self._domflageffect )
    {
        if ( isdefined( var_1 ) )
            var_1 delete();
    }

    foreach ( var_4 in self._domflagpulseeffect )
    {
        if ( isdefined( var_4 ) )
            var_4 delete();
    }
}

giveflagassistedcapturepoints( var_0 )
{
    level endon( "game_ended" );
    var_1 = getarraykeys( var_0 );

    for ( var_2 = 0; var_2 < var_1.size; var_2++ )
    {
        var_3 = var_0[var_1[var_2]].player;

        if ( !isdefined( var_3 ) )
            continue;

        if ( isdefined( var_3.owner ) )
            var_3 = var_3.owner;

        if ( !isplayer( var_3 ) )
            continue;

        if ( istrue( level.flagneutralization ) )
            var_3 thread scripts\mp\rank::scoreeventpopup( "neutralized" );
        else
            var_3 thread scripts\mp\rank::scoreeventpopup( "capture" );

        var_3 thread scripts\mp\awards::givemidmatchaward( "mode_dom_neutralized" );
        var_3 setcrankedtimerdomflag( var_3 );
        wait 0.05;
    }
}

giveflagcapturexp( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_3 = var_1;

    if ( isdefined( var_3.owner ) )
        var_3 = var_3.owner;

    level.lastcaptime = gettime();
    level.playholdtwovo = 1;

    if ( isplayer( var_3 ) )
    {
        if ( scripts\mp\utility\game::getgametype() == "cmd" || scripts\mp\utility\game::getgametype() == "rush" )
            level thread scripts\mp\hud_util::teamplayercardsplash( "callout_securedposition", var_3 );
        else
            level thread scripts\mp\hud_util::teamplayercardsplash( "callout_securedposition" + self.objectivekey, var_3 );

        var_3 thread scripts\common\utility::_id_13E0A( level._id_11B29, "capture", var_3.origin );
    }

    if ( self.firstcapture == 1 )
        var_4 = 1;
    else
        var_4 = 0;

    if ( isdefined( var_0 ) )
    {
        var_5 = getarraykeys( var_0 );

        for ( var_6 = 0; var_6 < var_5.size; var_6++ )
        {
            var_7 = var_0[var_5[var_6]].player;

            if ( isdefined( var_7.owner ) )
                var_7 = var_7.owner;

            if ( !isplayer( var_7 ) )
                continue;

            var_7 setcapturestats();
            givecaptureawards( var_7, var_4, 0 );
            setcrankedtimerdomflag( var_7 );
            wait 0.05;
        }

        if ( isdefined( self.assisttouchlist ) )
        {
            if ( self.assisttouchlist[var_2].size > 0 )
            {
                var_8 = getarraykeys( self.assisttouchlist[var_2] );

                foreach ( var_10 in var_5 )
                {
                    foreach ( var_12 in var_8 )
                    {
                        if ( var_12 == var_10 )
                            self.assisttouchlist[var_2][var_12] = undefined;
                    }
                }
            }

            if ( self.assisttouchlist[var_2].size > 0 )
                thread giveflagcaptureassistxp( var_2, var_4 );
        }
    }
}

giveflagcaptureassistxp( var_0, var_1 )
{
    level endon( "game_ended" );
    var_2 = getarraykeys( self.assisttouchlist[var_0] );

    if ( var_2.size > 0 )
    {
        for ( var_3 = 0; var_3 < var_2.size; var_3++ )
        {
            var_4 = self.assisttouchlist[var_0][var_2[var_3]].player;

            if ( isdefined( var_4.owner ) )
                var_4 = var_4.owner;

            if ( !isplayer( var_4 ) )
                continue;

            var_4 setcapturestats();
            givecaptureawards( var_4, var_1, 1 );
            setcrankedtimerdomflag( var_4 );
            self.assisttouchlist[var_0][var_2[var_3]] = undefined;
            wait 0.05;
        }
    }
}

givecaptureawards( var_0, var_1, var_2 )
{
    var_3 = 0;
    var_4 = "";

    if ( var_2 )
    {
        var_0 thread scripts\mp\rank::scoreeventpopup( "capture_assist" );
        var_4 = "mode_dom_secure_assist";
    }
    else if ( var_1 )
    {
        var_5 = scripts\mp\utility\game::getgametype() == "arm";
        var_6 = !var_5 && self.objectivekey == "_b" || var_5 && self.objectivekey == "_c";
        var_7 = var_5 && ( self.objectivekey == "_b" || self.objectivekey == "_d" );

        if ( var_6 )
        {
            if ( var_5 )
            {
                var_0 thread scripts\mp\rank::scoreeventpopup( "neutral_capture" );
                var_4 = "mode_arm_secure_mid";
            }
            else
            {
                var_0 thread scripts\mp\rank::scoreeventpopup( "neutral_b_capture" );
                var_4 = "mode_dom_secure_b";
            }
        }
        else if ( var_7 )
        {
            var_0 thread scripts\mp\rank::scoreeventpopup( "neutral_capture" );
            var_4 = "mode_arm_secure_outer_mid";
        }
        else if ( var_5 )
        {
            var_0 thread scripts\mp\rank::scoreeventpopup( "neutral_capture" );
            var_4 = "mode_arm_secure_outer";
        }
        else
        {
            var_0 thread scripts\mp\rank::scoreeventpopup( "neutral_capture" );
            var_4 = "mode_dom_secure_neutral";
        }
    }
    else if ( istrue( level.flagneutralization ) )
    {
        var_0 thread scripts\mp\rank::scoreeventpopup( "capture" );
        var_4 = "mode_dom_neutralized_cap";
    }
    else
    {
        var_0 thread scripts\mp\rank::scoreeventpopup( "capture" );
        var_4 = "mode_dom_secure";
    }

    var_0 thread scripts\mp\awards::givemidmatchaward( var_4 );

    if ( var_3 )
        var_0 scripts\mp\killstreaks\killstreaks::givestreakpoints( "capture", 1, 0 );
}

setcapturestats()
{
    scripts\mp\utility\stats::incpersstat( "captures", 1 );

    if ( isdefined( self.pers["captures"] ) )
    {
        scripts\mp\persistence::statsetchild( "round", "captures", self.pers["captures"] );

        if ( scripts\mp\utility\game::getgametype() != "arena" )
            scripts\mp\utility\stats::setextrascore0( self.pers["captures"] );
    }
}

precap( var_0 )
{
    storecenterflag( var_0 );
    var_1 = [];
    var_1[var_1.size] = level.centerflag;

    if ( game["switchedsides"] )
    {
        level.closestalliesflag = getunownedflagneareststart( "axis", level.centerflag );
        var_1[var_1.size] = level.closestalliesflag;
        level.closestaxisflag = getunownedflagneareststart( "allies", var_1 );
    }
    else
    {
        level.closestalliesflag = getunownedflagneareststart( "allies", level.centerflag );
        var_1[var_1.size] = level.closestalliesflag;
        level.closestaxisflag = getunownedflagneareststart( "axis", var_1 );
    }

    level.closestalliesflag setflagcaptured( "allies", "neutral", undefined, 1 );
    level.closestaxisflag setflagcaptured( "axis", "neutral", undefined, 1 );
}

storecenterflag( var_0 )
{
    var_1 = undefined;

    foreach ( var_3 in level.objectives )
    {
        if ( istrue( var_0 ) )
        {
            if ( var_3.objectivekey == "_c" )
                level.centerflag = var_3;
        }

        if ( var_3.objectivekey == "_b" )
            level.centerflag = var_3;
    }
}

setflagcaptured( var_0, var_1, var_2, var_3 )
{
    scripts\mp\gameobjects::setownerteam( var_0 );
    scripts\mp\gameobjects::setobjectivestatusicons( level.icondefending, level.iconcapture );
    thread updateflagstate( var_0, 0, var_0 );
    self.capturetime = gettime();
    var_4 = scripts\mp\utility\game::getgametype();

    if ( var_4 == "siege" )
        scripts\mp\gametypes\siege.gsc::watchflagenduse( var_0 );

    if ( !isdefined( var_3 ) )
    {
        if ( var_1 != "neutral" )
        {
            var_5 = getteamflagcount( var_0 );

            if ( var_5 == 2 )
            {
                scripts\mp\utility\dialog::statusdialog( "friendly_captured_2", var_0 );
                scripts\mp\utility\dialog::statusdialog( "enemy_captured_2", var_1 );
            }
            else
            {
                scripts\mp\utility\dialog::statusdialog( "secured" + self.objectivekey, var_0 );
                scripts\mp\utility\dialog::statusdialog( "lost" + self.objectivekey, var_1 );
            }

            level.lastcaptime = gettime();
        }

        if ( var_4 == "siege" )
            scripts\mp\gametypes\siege.gsc::teamrespawn( var_0, var_2 );

        self.firstcapture = 0;
    }
}

getteamflagcount( var_0 )
{
    var_1 = 0;

    foreach ( var_3 in level.objectives )
    {
        if ( var_3.ownerteam == var_0 )
            var_1++;
    }

    return var_1;
}

isflagexcluded( var_0, var_1 )
{
    var_2 = 0;

    if ( isarray( var_1 ) )
    {
        foreach ( var_4 in var_1 )
        {
            if ( var_0 == var_4 )
            {
                var_2 = 1;
                break;
            }
        }
    }
    else if ( var_0 == var_1 )
        var_2 = 1;

    return var_2;
}

getunownedflagneareststart( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = undefined;
    var_4 = undefined;

    foreach ( var_6 in level.objectives )
    {
        if ( var_6 scripts\mp\gameobjects::getownerteam() != "neutral" )
            continue;

        var_7 = distancesquared( var_6.trigger.origin, level.startpos[var_0] );

        if ( isdefined( var_1 ) )
        {
            if ( !isflagexcluded( var_6, var_1 ) && ( !isdefined( var_2 ) || var_7 < var_3 ) )
            {
                var_3 = var_7;
                var_2 = var_6;
            }

            continue;
        }

        if ( !isdefined( var_2 ) || var_7 < var_3 )
        {
            var_3 = var_7;
            var_2 = var_6;
        }
    }

    return var_2;
}

awardgenericmedals( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    var_10 = 0;
    var_11 = 0;
    var_12 = 0;
    var_13 = self;
    var_14 = var_13.origin;
    var_15 = var_1.origin;
    var_16 = 0;

    if ( !isdefined( var_1.team ) || !isdefined( var_13.team ) )
        return;

    if ( isdefined( var_0 ) )
    {
        var_15 = var_0.origin;
        var_16 = var_0 == var_1;

        if ( istrue( level.setplayerselfrevivingextrainfo ) )
        {
            if ( istrue( var_0.useagents ) )
                return;
        }
    }

    foreach ( var_18 in level.objectives )
    {
        if ( istrue( var_18.trigger.trigger_off ) )
            continue;

        var_19 = var_18 scripts\mp\gameobjects::getownerteam();
        var_20 = var_1 istouching( var_18.trigger );
        var_21 = var_13 istouching( var_18.trigger );

        if ( var_20 && var_1.team != var_19 )
        {
            var_1 thread scripts\mp\utility\points::giveunifiedpoints( "capture_kill" );
            var_18 notify( "assault", var_1 );
            var_11 = 1;
        }

        if ( var_19 == "neutral" )
        {
            if ( var_20 || var_21 )
            {
                if ( var_18.claimteam == var_13.team )
                {
                    if ( !var_11 )
                    {
                        var_11 = 1;
                        var_1 thread scripts\mp\rank::scoreeventpopup( "assault" );
                        var_1 thread scripts\mp\awards::givemidmatchaward( "mode_x_assault" );
                        var_18 notify( "assault", var_1 );
                        thread scripts\common\utility::_id_13E0A( level._id_11B26, var_9, "assaulting" );
                        continue;
                    }
                }
                else if ( var_18.claimteam == var_1.team )
                {
                    if ( !var_12 )
                    {
                        var_12 = 1;
                        var_1 thread scripts\mp\rank::scoreeventpopup( "defend" );
                        var_1 thread scripts\mp\awards::givemidmatchaward( "mode_x_defend" );
                        var_18 notify( "defend", var_1 );
                        var_1 scripts\mp\utility\stats::incpersstat( "defends", 1 );
                        var_1 scripts\mp\persistence::statsetchild( "round", "defends", var_1.pers["defends"] );
                        var_1 scripts\mp\utility\stats::setextrascore1( var_1.pers["defends"] );
                        thread scripts\common\utility::_id_13E0A( level._id_11B26, var_9, "defending" );
                        continue;
                    }
                }
            }
        }
        else if ( var_19 != var_1.team )
        {
            if ( !var_11 )
            {
                var_22 = distsquaredcheck( var_18.trigger, var_15, var_14 );

                if ( var_22 )
                {
                    var_11 = 1;
                    var_1 thread scripts\mp\rank::scoreeventpopup( "assault" );
                    var_1 thread scripts\mp\awards::givemidmatchaward( "mode_x_assault" );
                    var_18 notify( "assault", var_1 );
                    thread scripts\common\utility::_id_13E0A( level._id_11B26, var_9, "assaulting" );
                    continue;
                }
            }
        }
        else if ( !var_12 )
        {
            var_23 = distsquaredcheck( var_18.trigger, var_15, var_14 );

            if ( var_23 )
            {
                var_12 = 1;
                var_1 thread scripts\mp\rank::scoreeventpopup( "defend" );
                var_1 thread scripts\mp\awards::givemidmatchaward( "mode_x_defend" );
                var_18 notify( "defend", var_1 );
                var_1 scripts\mp\utility\stats::incpersstat( "defends", 1 );
                var_1 scripts\mp\persistence::statsetchild( "round", "defends", var_1.pers["defends"] );
                var_1 scripts\mp\utility\stats::setextrascore1( var_1.pers["defends"] );
                thread scripts\common\utility::_id_13E0A( level._id_11B26, var_9, "defending" );
                continue;
            }
        }
    }
}

distsquaredcheck( var_0, var_1, var_2 )
{
    var_3 = distancesquared( var_0.origin, var_1 );
    var_4 = distancesquared( var_0.origin, var_2 );

    if ( var_3 < 105625 || var_4 < 105625 )
    {
        if ( !isdefined( var_0.modifieddefendcheck ) )
            return 1;
        else if ( var_1[2] - var_0.origin[2] < 100 || var_2[2] - var_0.origin[2] < 100 )
            return 1;
        else
            return 0;
    }
    else
        return 0;
}

relic_nuketimer_timerloop()
{
    switch ( self.objectivekey )
    {
        case "_a":
            return 6;
        case "_b":
            return 7;
        case "_c":
            return 8;
        default:
            return 6;
    }
}

resetchemicalvalvevalues()
{
    if ( !isdefined( self.objectivekey ) )
        return "";

    switch ( self.objectivekey )
    {
        case "_a":
            return "A";
        case "_b":
            return "B";
        case "_c":
            return "C";
        case "_d":
            return "D";
        case "_e":
            return "E";
        default:
            return "";
    }
}

_id_12ED1()
{
    self rotateto( self.angles - ( 135, 0, 0 ), 0.5, 0.25, 0.25 );
    self playsound( "mp_dom_scarecrow_hw" );
    wait 0.55;
    playfx( level.spawnoffsettacinsertmax["vanish_hw_fr"], self.origin + ( 0, 0, 60 ) );
    self rotateto( self.angles + ( 80, 0, 0 ), 0.2, 0.1, 0.1 );
    wait 0.25;
    self rotateto( self.angles - ( 60, 0, 0 ), 0.2, 0.1, 0.1 );
    wait 0.25;
    self rotateto( self.angles + ( 40, 0, 0 ), 0.2, 0.1, 0.1 );
    wait 0.25;
    self rotateto( self.angles - ( 15, 0, 0 ), 0.2, 0.1, 0.1 );
    wait 0.25;
    self notify( "start_stalker" );
}

markdistanceoverride()
{
    level endon( "game_ended" );
    self.flagmodel.startorigin = self.flagmodel.origin;
    self.flagmodel waittill( "start_stalker" );
    self.flagmodel.fwd = anglestoforward( self.flagmodel.angles );
    self.flagmodel.ismoving = 0;
    thread _id_144F0();

    for (;;)
    {
        self.trigger waittill( "trigger", var_0 );

        if ( isplayer( var_0 ) )
        {
            if ( !isdefined( self._id_1376A ) )
            {
                self._id_1376A = var_0;
                thread _id_144F8( self.flagmodel, var_0 );
            }
        }

        wait 0.25;
    }
}

_id_144F8( var_0, var_1 )
{
    level endon( "game_ended" );
    self notify( "new_stalker_target" );
    self endon( "new_stalker_target" );

    while ( isdefined( self._id_1376A ) )
    {
        if ( !_id_140D6( var_0, var_1 ) )
        {
            self._id_1376A = undefined;
            self._id_13769 = 0;
            self.paddedquadgridcenterpoints = undefined;
            self.buildloadoutindices = undefined;
            self._id_12AC7 = undefined;
            self.flagmodel rotateto( ( 0, self.flagmodel.angles[1], self.flagmodel.angles[2] ), 0.2, 0.1, 0.1 );
        }
        else if ( isdefined( self._id_1376A ) && scripts\mp\utility\player::isreallyalive( self._id_1376A ) )
        {
            if ( self.flagmodel.ismoving )
            {

            }
            else
            {
                self.flagmodel.fwd = anglestoforward( self.flagmodel.angles );
                var_2 = self._id_1376A.origin;
                var_3 = self.flagmodel.origin;
                var_4 = vectornormalize( var_2 - var_3 );
                var_5 = vectortoangles( var_4 );
                self.flagmodel rotateto( ( 0, var_5[1], var_5[2] ), 0.2, 0.1, 0.1 );
                self.flagmodel.ismoving = 1;
            }
        }

        wait 0.25;
        self.flagmodel.ismoving = 0;
    }
}

_id_144F0()
{
    self.flagmodel setcandamage( 1 );
    self._id_13769 = 0;

    for (;;)
    {
        self.flagmodel waittill( "damage", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 );

        if ( isdefined( var_1 ) && isdefined( self._id_1376A ) && self._id_1376A == var_1 )
            self._id_13769 = self._id_13769 + var_0;

        if ( isdefined( self._id_13769 ) )
        {
            if ( self._id_13769 > 100 && !isdefined( self.paddedquadgridcenterpoints ) )
                self.paddedquadgridcenterpoints = 1;

            if ( self._id_13769 > 200 && !isdefined( self.buildloadoutindices ) )
            {
                self.buildloadoutindices = 1;
                playfx( level.spawnoffsettacinsertmax["vanish_hw_en"], self.flagmodel.origin + ( 0, 0, 80 ) );
            }

            if ( self._id_13769 > 300 && !isdefined( self._id_12AC7 ) )
            {
                self._id_12AC7 = 1;
                thread _id_12CCD( var_1 );
            }
        }

        wait 0.25;
    }
}

_id_12CCD( var_0 )
{
    self.flagmodel moveto( self.flagmodel.origin + ( 0, 0, 50 ), 0.2, 0.1, 0.1 );
    wait 0.25;
    self.flagmodel moveto( self.flagmodel.startorigin, 0.1, 0.05, 0.05 );
    wait 0.2;
    self.flagmodel playsound( "mp_dom_scarecrow_hw_explo" );
    var_1 = self.flagmodel.origin + ( 0, 0, 32 );
    playfx( level._effect["cranked_explode"], var_1 );

    if ( isdefined( var_0 ) )
        var_0 dodamage( 100, self.flagmodel.origin + ( 0, 0, 50 ), var_0, self.flagmodel, "MOD_EXPLOSIVE", undefined, "head" );

    self._id_13769 = 0;
    self.paddedquadgridcenterpoints = undefined;
    self.buildloadoutindices = undefined;
    self._id_12AC7 = undefined;
}

round_robin_spawners()
{
    var_0 = self getplayerangles();
    var_1 = anglestoforward( var_0 );
    return var_1;
}

_id_140D6( var_0, var_1 )
{
    var_2 = 0.05;
    var_3 = var_1 round_mortars_logic();
    var_4 = var_0 rocket_fuel_x2();
    var_5 = distancesquared( var_4, var_3 );

    if ( var_5 > 90000 )
        return 0;
    else
        return 1;

    return 0;
}

rocket_fuel_x2()
{
    return self.origin;
}

round_mortars_logic()
{
    return self.origin;
}
