// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "mapname" ) == "mp_background" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = scripts\mp\utility\game::getgametype();
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 10 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 2 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 3 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 2 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    }

    updategametypedvars();
    level.scoreperplayer = undefined;
    level.teambased = 1;
    level.ontimelimit = ::ontimelimit;
    level.onstartgametype = ::onstartgametype;
    level.getspawnpoint = ::getspawnpoint;
    level.modeonspawnplayer = ::onspawnplayer;
    level.lastcaptime = gettime();
    level.previousclosespawnent = undefined;
    game["dialog"]["gametype"] = "hardpoint";

    if ( getdvarint( "OSMSLRTOP" ) )
        game["dialog"]["gametype"] = "hc_" + game["dialog"]["gametype"];
    else if ( getdvarint( "NOSLRNTRKL" ) )
        game["dialog"]["gametype"] = "thirdp_" + game["dialog"]["gametype"];
    else if ( getdvarint( "scr_diehard" ) )
        game["dialog"]["gametype"] = "dh_" + game["dialog"]["gametype"];
    else if ( getdvarint( "scr_" + scripts\mp\utility\game::getgametype() + "_promode" ) )
        game["dialog"]["gametype"] = game["dialog"]["gametype"] + "_pro";

    game["dialog"]["offense_obj"] = "capture_obj";
    game["dialog"]["defense_obj"] = "capture_obj";
    game["dialog"]["obj_destroyed"] = "obj_destroyed";
    game["dialog"]["obj_captured"] = "obj_captured";
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "scr_payload_waverespawndelay", 5 );
}

onstartgametype( var_0 )
{
    var_1 = scripts\mp\utility\game::istimetobeatvalid();

    if ( game["roundsPlayed"] == 0 )
    {
        setomnvar( "ui_round_hint_override_attackers", 1 );
        setomnvar( "ui_round_hint_override_defenders", 1 );
    }
    else if ( var_1 )
    {
        setomnvar( "ui_round_hint_override_attackers", scripts\engine\utility::ter_op( game["timeToBeatTeam"] == game["attackers"], 2, 3 ) );
        setomnvar( "ui_round_hint_override_defenders", scripts\engine\utility::ter_op( game["timeToBeatTeam"] == game["defenders"], 2, 3 ) );
    }
    else
    {
        setomnvar( "ui_round_hint_override_attackers", 4 );
        setomnvar( "ui_round_hint_override_defenders", 4 );
    }

    if ( !isdefined( game["switchedsides"] ) )
        game["switchedsides"] = 0;

    if ( game["switchedsides"] )
    {
        var_2 = game["attackers"];
        var_3 = game["defenders"];
        game["attackers"] = var_3;
        game["defenders"] = var_2;
    }

    foreach ( var_5 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_5, &"OBJECTIVES/KOTH" );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_5, &"OBJECTIVES/KOTH" );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_5, &"OBJECTIVES/KOTH_SCORE" );

        scripts\mp\utility\game::setobjectivehinttext( var_5, &"OBJECTIVES/KOTH_HINT" );
    }

    setclientnamemode( "auto_change" );
    initspawns();
    seticonnames();
    level createpatharray();
}

initspawns()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::setactivespawnlogic( "Default", "Crit_Frontline" );
    scripts\mp\spawnlogic::addstartspawnpoints( "mp_payload_spawn_allies_start" );
    scripts\mp\spawnlogic::addstartspawnpoints( "mp_payload_spawn_axis_start" );
    scripts\mp\spawnlogic::addspawnpoints( "allies", "mp_payload_spawn_allies" );
    scripts\mp\spawnlogic::addspawnpoints( "axis", "mp_payload_spawn_axis" );
    level.payloadspawnsets = [];
    level.payloadspawnsets["allies"] = "allies";
    level.payloadspawnsets["axis"] = "axis";
    scripts\mp\spawnlogic::registerspawnset( "allies", "mp_payload_spawn_allies" );
    scripts\mp\spawnlogic::registerspawnset( "axis", "mp_payload_spawn_axis" );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
}

getspawnpoint()
{
    var_0 = self.pers["team"];

    if ( game["switchedsides"] )
        var_0 = scripts\mp\utility\game::getotherteam( var_0 )[0];

    if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
    {
        var_1 = scripts\mp\spawnlogic::getspawnpointarray( "mp_payload_spawn_" + var_0 + "_start" );
        var_2 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_1 );
    }
    else
        var_2 = scripts\mp\spawnscoring::getspawnpoint( self, var_0, level.payloadspawnsets[var_0] );

    return var_2;
}

updategametypedvars()
{
    scripts\mp\gametypes\common.gsc::updatecommongametypedvars();
}

ontimelimit()
{
    level scripts\mp\gamescore::giveteamscoreforobjective( scripts\mp\utility\game::getotherteam( level.tank.team )[0], 1, 0 );
    thread scripts\mp\gamelogic::endgame( scripts\mp\utility\game::getotherteam( level.tank.team )[0], game["end_reason"]["time_limit_reached"] );
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    scripts\mp\gametypes\common.gsc::oncommonnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 );
}

onspawnplayer()
{

}

spawnbradleypayload()
{
    var_0 = level.players[0];
    var_1 = game["attackers"];
    var_2 = spawn( "script_model", level.tankmovetopath.origin );
    var_2.angles = level.tankmovetopath.angles;
    var_2.team = var_1;
    var_2 setmodel( "veh8_mil_lnd_bromeo_allies_mp_to" );
    var_2 setentityowner( var_0 );
    var_2 setotherent( var_0 );
    var_3 = undefined;

    if ( isdefined( var_0 ) )
        var_3 = var_0 getentitynumber();

    var_4 = ( -532.957, -3351.52, 312.255 );
    var_5 = ( 0, 90, 0 );
    var_2.owner = var_0;
    var_2.ownerid = var_3;
    var_2.team = var_1;
    var_2 setcandamage( 0 );
    var_6 = var_2 gettagorigin( "tag_turret" );
    var_7 = spawnturret( "misc_turret", var_6, "tur_bradley_mp", 0 );
    var_7 linkto( var_2, "tag_turret", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_7 setmodel( "veh8_mil_lnd_bromeo_turret_allies_mp" );
    var_7.owner = var_0;
    var_7.team = var_1;
    var_7 setmode( "sentry_offline" );
    var_7 setsentryowner( undefined );
    var_7 makeunusable();
    var_7 setdefaultdroppitch( 0 );
    var_7 setcandamage( 0 );
    var_7 setturretmodechangewait( 1 );
    var_2.turret = var_7;
    var_2.isbradley = 1;
    var_7.vehicle = var_2;
    var_7.damageshakeexplosivenum = 0;
    var_7.damageshakebulletnum = 0;
    var_8 = [];
    var_9 = spawn( "trigger_radius", var_2.origin, 0, 300, 192 );
    var_9 enablelinkto();
    var_9 linkto( var_2 );
    var_10 = scripts\mp\gameobjects::createuseobject( var_1, var_9, var_8, ( 0, 0, 90 ) );
    var_10 scripts\mp\gameobjects::allowuse( "friendly" );
    var_10 scripts\mp\gameobjects::setusetime( 0 );
    var_10 scripts\mp\gameobjects::cancontestclaim( 1 );
    var_10 scripts\mp\gameobjects::mustmaintainclaim( 1 );
    var_10.onuse = ::tank_onuse;
    var_10.onunoccupied = ::tank_onunoccupied;
    var_10.oncontested = ::tank_oncontested;
    var_10.onuncontested = ::tank_onuncontested;
    var_2.useobj = var_10;
    var_2.damaged = 0;
    var_2.trackedobject = var_2 scripts\mp\gameobjects::createtrackedobject( var_2, ( 0, 0, 64 ) );
    var_2.trackedobject.objidpingfriendly = 0;
    var_2.trackedobject.objidpingenemy = 1;
    var_2.trackedobject.objpingdelay = 0.05;
    var_2.trackedobject.visibleteam = "any";
    var_2.invulnerable = 1;
    var_2.trackedobject scripts\mp\gameobjects::setobjectivestatusicons( level.icontarget, level.icontarget );
    level.tank = var_2;
}

bradley_handletacopsdamage( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.objweapon;
    var_3 = var_0.meansofdeath;
    var_4 = var_0.damage;
    var_5 = var_0.idflags;

    if ( var_3 == "MOD_MELEE" )
        return 0;

    var_4 = scripts\mp\utility\killstreak::getmodifiedantikillstreakdamage( var_1, var_2, var_3, var_4, 3000, 8, 12, 16 );
    return var_4;
}

bradley_handlefataltacopsdamage( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.objweapon;
    var_3 = var_0.meansofdeath;
    var_4 = var_0.damage;
    var_5 = var_0.idflags;

    if ( level.teambased )
    {
        var_6 = "";

        if ( isdefined( var_1 ) && isdefined( var_1.team ) )
            var_6 = var_1.team;

        if ( var_6 != self.team )
        {

        }
    }
    else if ( isdefined( var_1 ) && ( !isdefined( self.owner ) || self.owner != var_1 ) )
    {

    }

    thread bradley_vehicledestroy( var_1, var_2, var_3, 0 );
}

bradley_vehicledestroy( var_0, var_1, var_2, var_3 )
{
    self.damaged = 1;
    self notify( "bradley_disabled" );
    var_3 = istrue( var_3 );
    self.isdestroyed = 1;
    self setcandamage( 0 );
    self.turret setcandamage( 0 );
    scripts\mp\utility\print::printboldonteam( "Bradley is badly damaged, stay near it to repair it", "allies" );
    thread bradley_restorehealth();
}

watchdamagecycle()
{
    level endon( "game_ended" );
    self endon( "bradley_disabled" );

    for (;;)
    {
        self waittill( "damage", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 );

        if ( istrue( self.isrepairing ) )
            continue;

        scripts\engine\utility::_id_143B9( 3, "damage" );
        self.allowpartialrepairs = 1;
    }
}

bradley_restorehealth()
{
    if ( !isdefined( self.damagetaken ) || self.damagetaken == 0 )
        return;

    if ( istrue( self.isrepairing ) || !istrue( self.allowpartialrepairs ) )
        return;

    level endon( "game_ended" );

    if ( !istrue( self.damaged ) )
    {
        self endon( "damage" );
        self.allowpartialrepairs = 0;
        var_0 = 0;
        var_1 = 0.2;
        var_2 = 10;
    }
    else
    {
        self.isrepairing = 1;
        var_0 = 10;
        var_1 = 0.1;
        var_2 = 100;
    }

    wait( var_0 );
    scripts\mp\utility\print::printboldonteam( "Repairing Bradley", "allies" );

    while ( self.damagetaken != 0 )
    {
        self.damagetaken = max( self.damagetaken - var_2, 0 );
        wait( var_1 );
    }

    scripts\mp\utility\print::printboldonteam( "Bradley Repaired", "allies" );
    self.isrepairing = 0;
    self setcandamage( 1 );
    self.turret setcandamage( 1 );
    self.damaged = 0;
    self.isdestroyed = 0;
    thread scripts\mp\damage::monitordamage( 3000, "", ::bradley_handlefataltacopsdamage, ::bradley_handletacopsdamage, 1 );
    self.movementdisabled = 0;
}

tank_onuse( var_0 )
{
    var_1 = var_0.team;
    var_2 = scripts\mp\gameobjects::getownerteam();
    var_3 = scripts\mp\utility\game::getotherteam( var_1 )[0];
    var_4 = gettime();

    if ( istrue( self.allowpartialrepairs ) )
        level.tank thread bradley_restorehealth();

    level thread startmove( level.tank );
    level.usestartspawns = 0;
    var_5 = 0;
    level.tank.trackedobject scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );

    if ( !isdefined( level.lastcaptureteam ) || level.lastcaptureteam != var_1 )
    {
        var_6 = [];
        var_7 = getarraykeys( self.touchlist[var_1] );

        for ( var_8 = 0; var_8 < var_7.size; var_8++ )
            var_6[var_7[var_8]] = self.touchlist[var_1][var_7[var_8]];
    }

    level.hpcapteam = var_1;
    scripts\mp\gameobjects::setownerteam( var_1 );
    level.lastcaptureteam = var_1;
}

tank_onunoccupied()
{
    level notify( "zone_destroyed" );
    level.hpcapteam = "neutral";
    var_0 = 1;

    foreach ( var_2 in level.teamnamelist )
    {
        if ( self.numtouching[var_2] > 0 )
        {
            var_0 = 0;
            break;
        }
    }

    if ( var_0 )
    {
        level.tank.useobj.wasleftunoccupied = 1;
        level.tank.trackedobject scripts\mp\gameobjects::setobjectivestatusicons( level.icontarget );
    }

    self notify( "payload_stopped" );
    level.tank moveto( level.tank.origin, 0.05, 0, 0 );
    level.tank rotateto( level.tank.angles, 1, 0, 0 );
}

tank_oncontested()
{
    var_0 = level.tank.useobj scripts\mp\gameobjects::getownerteam();
    level.tank.trackedobject scripts\mp\gameobjects::setobjectivestatusicons( level.iconcontested );

    if ( var_0 == "neutral" )
        var_1 = self.claimteam;
    else
        var_1 = var_0;

    self notify( "payload_stopped" );
    level.tank moveto( level.tank.origin, 0.05, 0, 0 );
}

tank_onuncontested( var_0 )
{
    var_1 = level.tank.useobj scripts\mp\gameobjects::getownerteam();

    if ( var_0 == "none" || var_1 == "neutral" )
        level.tank.trackedobject scripts\mp\gameobjects::setobjectivestatusicons( level.icontarget );
    else
        level.tank.trackedobject scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );
}

startmove( var_0 )
{
    level endon( "game_ended" );
    var_0 moveonpath( level.tankmovetopath );
}

createpatharray()
{
    level.tankmovetopath = scripts\engine\utility::getstruct( "tank_path", "targetname" );
    thread spawnbradleypayload();
}

getpathstart( var_0, var_1 )
{
    var_2 = 100;
    var_3 = 150;
    var_4 = ( 0, var_1, 0 );
    var_5 = var_0 + anglestoforward( var_4 ) * ( -1 * var_3 );
    var_5 = var_5 + ( ( randomfloat( 2 ) - 1 ) * var_2, ( randomfloat( 2 ) - 1 ) * var_2, 0 );
    return var_5;
}

moveonpath( var_0 )
{
    level endon( "game_ended" );
    level endon( "hostage_phase_ended" );
    self endon( "hostage_scored" );
    self endon( "hostage_stopped" );
    self endon( "payload_stopped" );
    self.speed = 100;
    level.tankspeed = self.speed;

    if ( istrue( self.damaged ) )
    {
        level.tank moveto( level.tank.origin, 0.05, 0, 0 );
        self notify( "payload_stopped" );
    }
    else
    {
        var_1 = level.tankmovetopath.origin;
        var_2 = getphysicspointaboutnavmesh( var_1 );
        var_3 = distance( self.origin, var_2 );

        if ( var_3 < 10 && !level.gameended )
        {
            if ( isdefined( level.tankmovetopath.target ) )
            {
                level scripts\mp\gamescore::giveteamscoreforobjective( level.tank.team, 1, 0 );
                level.tankmovetopath = scripts\engine\utility::getstruct( level.tankmovetopath.target, "targetname" );
                return;
            }

            game["status"] = "recordTTB";
            level scripts\mp\gamescore::giveteamscoreforobjective( level.tank.team, 1, 0 );
            thread scripts\mp\gamelogic::endgame( level.tank.team, game["end_reason"]["objective_completed"] );
            return;
            return;
        }

        var_4 = var_3 / self.speed;
        self moveto( var_2, var_4, 0, 0 );
        self rotateto( ( level.tankmovetopath.angles[0], level.tankmovetopath.angles[1], self.angles[2] ), 1 );
        wait( var_4 );
    }
}

getphysicspointaboutnavmesh( var_0 )
{
    var_1 = scripts\engine\trace::create_contents( undefined, 1, 1, undefined, undefined, undefined, undefined );
    var_2 = physics_raycast( var_0 + ( 0, 0, 48 ), var_0 - ( 0, 0, 48 ), var_1, undefined, 0, "physicsquery_closest" );
    var_3 = isdefined( var_2 ) && var_2.size > 0;

    if ( var_3 )
    {
        var_4 = var_2[0]["position"];
        return var_4;
    }

    return var_0;
}

seticonnames()
{
    level.icontarget = "waypoint_hardpoint_target";
    level.iconcapture = "waypoint_capture_kill";
    level.icondefend = "waypoint_escort";
    level.iconcontested = "waypoint_hardpoint_contested";
}
