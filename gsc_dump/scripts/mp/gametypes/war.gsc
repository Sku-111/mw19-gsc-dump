// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "mapname" ) == "mp_background" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = scripts\mp\utility\game::getgametype();
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 0, 0, 9 );
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 600 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 75 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    }

    updategametypedvars();
    level.teambased = 1;
    level.onstartgametype = ::onstartgametype;
    level.getspawnpoint = ::getspawnpoint;
    level.onnormaldeath = ::onnormaldeath;
    level.modeonspawnplayer = ::onspawnplayer;

    if ( getdvarint( "scr_hotfoot", 0 ) != 0 )
        level.onplayerkilled = ::_id_12040;

    game["dialog"]["gametype"] = "gametype_tdm";

    if ( getdvarint( "OSMSLRTOP" ) )
        game["dialog"]["gametype"] = "hc_" + game["dialog"]["gametype"];
    else if ( getdvarint( "NOSLRNTRKL" ) )
        game["dialog"]["gametype"] = "thirdp_" + game["dialog"]["gametype"];

    game["dialog"]["boost"] = "boost_tdm";
    game["dialog"]["offense_obj"] = "boost_tdm";
    game["dialog"]["defense_obj"] = "boost_tdm";
    level.testtdmanywhere = getdvarint( "scr_tdmAnywhere", 0 );
    level.tdmanywhere_dropheight = getdvarfloat( "scr_tdmAnywhere_drop_height", 1000 );
    level.tdmanywhere_perpenoffset = getdvarfloat( "scr_tdmAnywhere_perpen_offset", 2048 );
    level.tdmanywhere_distoffset = getdvarfloat( "scr_tdmAnywhere_dist_offset", 4092 );

    if ( istrue( level.testtdmanywhere ) )
        scripts\cp_mp\parachute::initparachutedvars();

    if ( scripts\mp\utility\game::matchmakinggame() )
        level._id_132FE = ::_id_132FE;
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "scr_war_halftime", 0 );
    scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    setdynamicdvar( "scr_war_promode", 0 );
}

onstartgametype()
{
    setclientnamemode( "auto_change" );

    if ( !isdefined( game["switchedsides"] ) )
        game["switchedsides"] = 0;

    if ( game["switchedsides"] )
    {
        var_0 = game["attackers"];
        var_1 = game["defenders"];
        game["attackers"] = var_1;
        game["defenders"] = var_0;
    }

    foreach ( var_3 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_3, &"OBJECTIVES/WAR" );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"OBJECTIVES/WAR" );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"OBJECTIVES/WAR_SCORE" );

        scripts\mp\utility\game::setobjectivehinttext( var_3, &"OBJECTIVES/WAR_HINT" );
    }

    if ( isdefined( level.totalapacheresponses ) )
        [[ level.totalapacheresponses ]]();
    else
        initspawns();

    scripts\mp\gametypes\bradley_spawner.gsc::inittankspawns();

    if ( getdvarint( "scr_hotfoot", 0 ) != 0 )
        thread _id_11D09();
}

updategametypedvars()
{
    scripts\mp\gametypes\common.gsc::updatecommongametypedvars();
}

initspawns()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );

    if ( isdefined( scripts\cp_mp\utility\game_utility::getlocaleid() ) )
        scripts\mp\spawnlogic::setactivespawnlogic( "BigTDM", "Crit_Frontline" );
    else
        scripts\mp\spawnlogic::setactivespawnlogic( "Default", "Crit_Frontline" );

    scripts\mp\spawnlogic::addstartspawnpoints( "mp_tdm_spawn_allies_start" );
    scripts\mp\spawnlogic::addstartspawnpoints( "mp_tdm_spawn_axis_start" );
    scripts\mp\spawnlogic::addspawnpoints( game["attackers"], "mp_tdm_spawn_allies_start" );
    scripts\mp\spawnlogic::addspawnpoints( game["defenders"], "mp_tdm_spawn_axis_start" );
    var_0 = scripts\mp\spawnlogic::getspawnpointarray( "mp_tdm_spawn_allies_start" );
    var_1 = scripts\mp\spawnlogic::getspawnpointarray( "mp_tdm_spawn_axis_start" );
    scripts\mp\spawnlogic::registerspawnset( "start_attackers", var_0 );
    scripts\mp\spawnlogic::registerspawnset( "start_defenders", var_1 );
    scripts\mp\spawnlogic::addspawnpoints( "allies", "mp_tdm_spawn" );
    scripts\mp\spawnlogic::addspawnpoints( "axis", "mp_tdm_spawn" );
    scripts\mp\spawnlogic::addspawnpoints( "allies", "mp_tdm_spawn_secondary", 1, 1 );
    scripts\mp\spawnlogic::addspawnpoints( "axis", "mp_tdm_spawn_secondary", 1, 1 );
    var_2 = scripts\mp\spawnlogic::getspawnpointarray( "mp_tdm_spawn" );
    var_3 = scripts\mp\spawnlogic::getspawnpointarray( "mp_tdm_spawn_secondary" );
    scripts\mp\spawnlogic::registerspawnset( "normal", var_2 );
    scripts\mp\spawnlogic::registerspawnset( "fallback", var_3 );

    if ( istrue( level.testtdmanywhere ) )
    {
        var_4 = getdvarfloat( "scr_tdmAnywhere_centerX", randomfloatrange( -4096, 4096 ) );
        var_5 = getdvarfloat( "scr_tdmAnywhere_centerY", randomfloatrange( -4096, 4096 ) );
        var_6 = getdvarfloat( "scr_tdmAnywhere_centerZ", randomfloatrange( 0, 512 ) );
        level.mapcenter = ( var_4, var_5, var_6 );
        tdmanywhere_debugshowlocs();
    }
    else
    {
        level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
        setmapcenter( level.mapcenter );
    }
}

getspawnpoint()
{
    var_0 = self.pers["team"];
    var_1 = undefined;

    if ( istrue( level.testtdmanywhere ) )
    {
        var_2 = level.tdmanywherefrontline.anchorrt * randomfloatrange( level.tdmanywhere_perpenoffset * -1.0, level.tdmanywhere_perpenoffset );
        var_3 = undefined;

        if ( var_0 == "axis" )
            var_3 = level.tdmanywherefrontline.anchordir * level.tdmanywhere_distoffset * -1.0;
        else
            var_3 = level.tdmanywherefrontline.anchordir * level.tdmanywhere_distoffset;

        var_1 = spawnstruct();
        var_1.origin = level.mapcenter + var_2 + var_3 + ( 0, 0, level.tdmanywhere_dropheight );
        var_1.angles = ( 0, 0, 0 );
        var_1.index = 1;
    }
    else if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
    {
        if ( var_0 == game["attackers"] )
        {
            scripts\mp\spawnlogic::activatespawnset( "start_attackers", 1 );
            var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "start_attackers" );
        }
        else
        {
            scripts\mp\spawnlogic::activatespawnset( "start_defenders", 1 );
            var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "start_defenders" );
        }
    }
    else
    {
        scripts\mp\spawnlogic::activatespawnset( "normal", 1 );
        var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "fallback" );
    }

    return var_1;
}

onspawnplayer()
{
    self setclientomnvar( "ui_match_status_hint_text", 0 );

    if ( !istrue( level.testtdmanywhere ) )
        return;

    self setplayerangles( vectortoangles( level.mapcenter - self.origin ) );
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    scripts\mp\gametypes\common.gsc::oncommonnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 );
}

ontimelimit()
{
    var_0 = scripts\mp\gamescore::gethighestscoringteam();

    if ( game["status"] == "overtime" )
        var_0 = "forfeit";
    else if ( "tie" )
        var_0 = "overtime";

    thread scripts\mp\gamelogic::endgame( var_0, game["end_reason"]["time_limit_reached"] );
}

tdmanywhere_debugshowlocs()
{
    thread scripts\mp\utility\debug::drawsphere( level.mapcenter, 128, 100, ( 0, 1, 0 ) );

    if ( !isdefined( level.tdmanywherefrontline ) )
        waitframe();

    var_0 = level.tdmanywherefrontline.anchordir * level.tdmanywhere_distoffset;
    var_1 = level.tdmanywherefrontline.anchorrt * level.tdmanywhere_perpenoffset;
    thread scripts\mp\utility\debug::drawline( level.mapcenter, level.mapcenter + var_0, 1000, ( 1, 0, 0 ) );
    thread scripts\mp\utility\debug::drawline( level.mapcenter, level.mapcenter - var_0, 1000, ( 1, 0, 0 ) );
    thread scripts\mp\utility\debug::drawline( level.mapcenter + var_0, level.mapcenter + var_0 + var_1, 1000, ( 0, 0, 1 ) );
    thread scripts\mp\utility\debug::drawline( level.mapcenter + var_0, level.mapcenter + var_0 - var_1, 1000, ( 0, 0, 1 ) );
    thread scripts\mp\utility\debug::drawline( level.mapcenter - var_0, level.mapcenter - var_0 + var_1, 1000, ( 0, 0, 1 ) );
    thread scripts\mp\utility\debug::drawline( level.mapcenter - var_0, level.mapcenter - var_0 - var_1, 1000, ( 0, 0, 1 ) );
}

_id_11D09()
{
    level endon( "game_ended" );
    level.outlinedplayers = [];
    level.spawn_player_vehicle = 0;
    var_0 = 0;
    scripts\mp\flags::gameflagwait( "prematch_done" );

    for (;;)
    {
        foreach ( var_2 in level.players )
        {
            if ( !isdefined( var_2.spawn_race_dogtags ) )
            {
                var_2.spawn_queue_think = 0;
                var_2.spawn_race_dogtags = var_2.origin;
                var_2.armorbox_used = var_2.origin;
            }

            var_2.spawn_queue_think = var_2.spawn_queue_think + distancesquared( var_2.spawn_race_dogtags, var_2.origin );
            var_2.spawn_race_dogtags = var_2.origin;
        }

        var_0 = var_0 + level.framedurationseconds;

        if ( var_0 > 3.0 )
        {
            if ( level.spawn_player_vehicle >= 2 )
            {
                level.spawn_player_vehicle = 0;

                foreach ( var_2 in level.players )
                {
                    if ( !isdefined( var_2.armorbox_used ) )
                        var_2.armorbox_used = var_2.origin;

                    var_2.playeriscinematiclayeron = distancesquared( var_2.armorbox_used, var_2.origin ) < 4225;
                    var_2.armorbox_used = var_2.origin;
                }
            }

            foreach ( var_2 in level.players )
            {
                var_7 = var_2 getentitynumber();
                var_8 = var_2.pers["team"];

                if ( var_8 == "allies" )
                    var_9 = "axis";
                else
                    var_9 = "allies";

                if ( isalive( var_2 ) && ( istrue( var_2.playeriscinematiclayeron ) || var_2.spawn_queue_think < 4225 && !istrue( var_2.spawn_real_letter ) ) )
                {
                    var_2.playeriscinematiclayeron = 0;

                    if ( !isdefined( level.outlinedplayers[var_7] ) )
                    {
                        level.outlinedplayers[var_7] = var_2;
                        var_2.outlineidfriend = scripts\mp\utility\outline::outlineenableforteam( var_2, var_8, "outline_nodepth_orange", "level_script" );
                        var_2.outlineidenemy = scripts\mp\utility\outline::outlineenableforteam( var_2, var_9, "outline_nodepth_red", "level_script" );
                        var_2 scripts\mp\utility\outline::_hudoutlineviewmodelenable( "outlinefill_nodepth_orange", 0 );
                    }
                }
                else
                {
                    if ( isalive( var_2 ) )
                        var_2.spawn_real_letter = 0;

                    var_2.playeriscinematiclayeron = 0;

                    if ( isdefined( level.outlinedplayers[var_7] ) )
                    {
                        scripts\mp\utility\outline::outlinedisable( var_2.outlineidfriend, var_2 );
                        scripts\mp\utility\outline::outlinedisable( var_2.outlineidenemy, var_2 );
                        var_2 scripts\mp\utility\outline::_hudoutlineviewmodeldisable();
                        var_2.outlineidfriend = undefined;
                        var_2.outlineidenemy = undefined;
                        level.outlinedplayers[var_7] = undefined;
                    }
                }

                var_2.spawn_queue_think = 0;
            }

            var_0 = 0;
        }

        level.spawn_player_vehicle++;
        waitframe();
    }
}

_id_12040( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    var_10 = self getentitynumber();

    if ( isdefined( level.outlinedplayers[var_10] ) )
    {
        scripts\mp\utility\outline::outlinedisable( self.outlineidfriend, self );
        scripts\mp\utility\outline::outlinedisable( self.outlineidenemy, self );
        self.outlineidfriend = undefined;
        self.outlineidenemy = undefined;
        level.outlinedplayers[var_10] = undefined;
    }

    self.spawn_real_letter = 1;
}

_id_132FE()
{
    var_0 = int( game["teamScores"]["axis"] );
    var_1 = int( game["teamScores"]["allies"] );
    var_2 = var_0 - var_1;
    return var_2 < 10;
}
