// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

registernotetracksifnot()
{
    if ( isdefined( anim.notetracks ) )
        return;

    anim.notetracks = [];
    registernotetracks();
}

registernotetracks()
{
    level._defaultnotetrackhandler = ::handlenotetrack;
    level.fnnotetrackprefixhandler = ::notetrack_prefix_handler_mp;
    scripts\anim\notetracks.gsc::registernotetracks();
    anim.notetracks["footstep_right_large"] = ::notetrackfootstep;
    anim.notetracks["footstep_right_small"] = ::notetrackfootstep;
    anim.notetracks["footstep_left_large"] = ::notetrackfootstep;
    anim.notetracks["footstep_left_small"] = ::notetrackfootstep;
    anim.notetracks["anim_pose = stand"] = ::notetrackposestand;
    anim.notetracks["anim_pose = crouch"] = ::notetrackposecrouch;
    anim.notetracks["anim_pose = prone"] = ::notetrackposeprone;
    anim.notetracks["gun drop"] = ::notetrackgundrop;
    anim.notetracks["dropgun"] = ::notetrackgundrop;
}

notetrackfootstep( var_0, var_1 )
{
    var_2 = issubstr( var_0, "left" );
    var_3 = issubstr( var_0, "large" );
    var_4 = "right";

    if ( var_2 )
        var_4 = "left";

    if ( var_3 )
        self notify( "large_footstep" );

    self.asm.footsteps.foot = var_4;
    self.asm.footsteps.time = gettime();
}

handlenotetrack( var_0, var_1, var_2, var_3 )
{
    if ( scripts\anim\notetracks.gsc::hascustomnotetrackhandler( var_0 ) )
        return scripts\anim\notetracks.gsc::handlecustomnotetrackhandler( var_0, var_1, var_2, var_3 );

    var_4 = scripts\anim\notetracks.gsc::handlecommonnotetrack( var_0, var_1, var_2, var_3 );

    if ( isdefined( var_4 ) && var_4 == "__unhandled" )
    {
        var_4 = undefined;

        switch ( var_0 )
        {
            case "attach_clip_left":
                if ( weaponclass( self.weapon ) == "rocketlauncher" )
                    notetrackrocketlauncherammoattach();

                break;
            default:
                if ( isdefined( var_2 ) )
                {
                    if ( isdefined( var_3 ) )
                        return [[ var_2 ]]( var_0, var_3 );
                    else
                        return [[ var_2 ]]( var_0 );
                }

                break;
        }
    }

    return var_4;
}

notetrack_prefix_handler_mp( var_0 )
{
    return scripts\anim\notetracks.gsc::notetrack_prefix_handler_common( var_0 );
}

notetrackrocketlauncherammoattach()
{
    if ( !isalive( self ) )
        return;

    if ( !scripts\anim\utility_common.gsc::usingrocketlauncher() )
        return;

    if ( self tagexists( "tag_rocket" ) )
        self showpart( "tag_rocket" );
}

notetrackgundrop( var_0, var_1 )
{
    if ( isdefined( self.playercleanupentondisconnect ) )
        self [[ self.playercleanupentondisconnect ]]();
}

setpose( var_0 )
{
    self.currentpose = var_0;
    scripts\asm\asm_bb::bb_requeststance( var_0 );
    self notify( "entered_pose" + var_0 );
}

notetrackposestand( var_0, var_1 )
{
    setpose( "stand" );
}

notetrackposecrouch( var_0, var_1 )
{
    setpose( "crouch" );
}

notetrackposeprone( var_0, var_1 )
{
    setpose( "prone" );
}
