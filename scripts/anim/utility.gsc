// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

#using_animtree("generic_human");

initanimtree( var_0 )
{
    self clearanim( %body, 0.3 );
    self setanim( %body, 1, 0 );

    if ( var_0 != "pain" && var_0 != "death" )
        self.a.special = "none";

    self.a.aimweight = 1.0;
    self.a.aimweight_start = 1.0;
    self.a.aimweight_end = 1.0;
    self.a.aimweight_transframes = 0;
    self.a.aimweight_t = 0;
    updateisincombattimer();
}

updateanimpose()
{
    if ( isdefined( self.desired_anim_pose ) && self.desired_anim_pose != self.currentpose )
    {
        if ( self.currentpose == "prone" )
            exitpronewrapper( 0.5 );

        if ( self.desired_anim_pose == "prone" )
        {
            self setproneanimnodes( -45, 45, %prone_legs_down, %exposed_aiming, %prone_legs_up );
            enterpronewrapper( 0.5 );
            self setanimknoball( lookupanim( "default_prone", "straight_level" ), %body, 1, 0.1, 1 );
        }
    }

    self.desired_anim_pose = undefined;
}

initialize( var_0 )
{
    self endon( "killanimscript" );
    self waittill( "Hellfreezesover" );
}

printdisplaceinfo()
{
    self endon( "death" );
    self notify( "displaceprint" );
    self endon( "displaceprint" );

    for (;;)
        wait 0.05;
}

isincombat( var_0 )
{
    if ( ( !isdefined( var_0 ) || var_0 ) && self.alertlevelint > 1 )
        return 1;

    if ( isdefined( self.enemy ) )
        return 1;

    return self.a.combatendtime > gettime();
}

updateisincombattimer()
{
    if ( isdefined( self.enemy ) )
        self.a.combatendtime = gettime() + anim.combatmemorytimeconst + randomint( anim.combatmemorytimerand );
}

notifyaftertime( var_0, var_1, var_2 )
{
    self endon( "death" );
    self endon( var_1 );
    wait( var_2 );
    self notify( var_0 );
}

drawstring( var_0 )
{
    self endon( "killanimscript" );
    self endon( "enddrawstring" );

    for (;;)
        wait 0.05;
}

drawstringtime( var_0, var_1, var_2, var_3 )
{
    var_4 = var_3 * 20;

    for ( var_5 = 0; var_5 < var_4; var_5++ )
        wait 0.05;
}

showlastenemysightpos( var_0 )
{
    self notify( "got known enemy2" );
    self endon( "got known enemy2" );
    self endon( "death" );

    if ( !isdefined( self.enemy ) )
        return;

    if ( self.enemy.team == "allies" )
        var_1 = ( 0.4, 0.7, 1 );
    else
        var_1 = ( 1, 0.7, 0.4 );

    for (;;)
    {
        wait 0.05;

        if ( !isdefined( self.lastenemysightpos ) )
            continue;
    }
}

hasenemysightpos()
{
    if ( isdefined( self.node ) )
        return scripts\anim\utility_common.gsc::canseeenemyfromexposed() || scripts\anim\utility_common.gsc::cansuppressenemyfromexposed();
    else
        return scripts\anim\utility_common.gsc::canseeenemy() || scripts\anim\utility_common.gsc::cansuppressenemy();
}

getenemysightpos()
{
    return self.goodshootpos;
}

debugtimeout()
{
    wait 5;
    self notify( "timeout" );
}

debugposinternal( var_0, var_1, var_2 )
{
    self endon( "death" );
    self notify( "stop debug " + var_0 );
    self endon( "stop debug " + var_0 );
    var_3 = spawnstruct();
    var_3 thread debugtimeout();
    var_3 endon( "timeout" );

    if ( self.enemy.team == "allies" )
        var_4 = ( 0.4, 0.7, 1 );
    else
        var_4 = ( 1, 0.7, 0.4 );

    for (;;)
        wait 0.05;
}

debugpos( var_0, var_1 )
{
    thread debugposinternal( var_0, var_1, 2.15 );
}

debugpossize( var_0, var_1, var_2 )
{
    thread debugposinternal( var_0, var_1, var_2 );
}

debugburstprint( var_0, var_1 )
{
    var_2 = var_0 / var_1;
    var_3 = undefined;

    if ( var_0 == self.bulletsinclip )
        var_3 = "all rounds";
    else if ( var_2 < 0.25 )
        var_3 = "small burst";
    else if ( var_2 < 0.5 )
        var_3 = "med burst";
    else
        var_3 = "long burst";

    thread debugpossize( self.origin + ( 0, 0, 42 ), var_3, 1.5 );
    thread debugpos( self.origin + ( 0, 0, 60 ), "Suppressing" );
}

printshootproc()
{
    self endon( "death" );
    self notify( "stop shoot " + self.export );
    self endon( "stop shoot " + self.export );
    var_0 = 0.25;
    var_1 = var_0 * 20;

    for ( var_2 = 0; var_2 < var_1; var_2 = var_2 + 1 )
        wait 0.05;
}

printshoot()
{

}

showdebugproc( var_0, var_1, var_2, var_3 )
{
    self endon( "death" );
    var_4 = var_3 * 20;

    for ( var_5 = 0; var_5 < var_4; var_5 = var_5 + 1 )
        wait 0.05;
}

showdebugline( var_0, var_1, var_2, var_3 )
{
    thread showdebugproc( var_0, var_1 + ( 0, 0, -5 ), var_2, var_3 );
}

shootenemywrapper_normal( var_0 )
{
    self.a.lastshoottime = gettime();
    scripts\common\gameskill::set_accuracy_based_on_situation();
    self notify( "shooting" );

    if ( scripts\anim\utility_common.gsc::isasniper() && istrue( self._blackboard.shootparams_valid ) && isdefined( self._blackboard.shootparams_pos ) )
        self shoot( 1, self._blackboard.shootparams_pos, 1, 0, 1 );
    else
    {
        if ( isagent( self ) )
            var_0 = 1;

        self shoot( 1, undefined, var_0 );
    }
}

shootenemywrapper_shootnotify( var_0 )
{
    level notify( "an_enemy_shot", self );
    shootenemywrapper_normal( var_0 );
}

shootposwrapper( var_0, var_1 )
{
    self.a.lastshoottime = gettime();

    if ( !isdefined( var_1 ) )
        var_1 = 1;

    self notify( "shooting" );

    if ( scripts\anim\utility_common.gsc::isasniper() )
        self shoot( 1, var_0, 1, 1, 1 );
    else
    {
        var_2 = 0;

        if ( isdefined( self.enemy ) && istrue( self.enemy.underlowcover ) )
            var_2 = 1;

        var_3 = bulletspread( self getmuzzlepos(), var_0, 4 );
        self shoot( 1, var_3, var_1, var_2 );
    }
}

throwgun()
{
    var_0 = spawn( "script_model", ( 0, 0, 0 ) );
    var_0 setmodel( "temp" );
    var_0.origin = self gettagorigin( "tag_weapon_right" ) + ( 50, 50, 0 );
    var_0.angles = self gettagangles( "tag_weapon_right" );
    var_1 = anglestoright( var_0.angles );
    var_1 = var_1 * 15;
    var_2 = anglestoforward( var_0.angles );
    var_2 = var_2 * 15;
    var_0 movegravity( ( 0, 50, 150 ), 100 );
    var_3 = "weapon_" + createheadicon( self.weapon );
    var_4 = spawn( var_3, var_0.origin );
    var_4.angles = self gettagangles( "tag_weapon_right" );
    var_4 linkto( var_0 );
    var_5 = var_0.origin;

    while ( isdefined( var_4 ) && isdefined( var_4.origin ) )
    {
        var_6 = var_5;
        var_7 = var_0.origin;
        var_8 = vectortoangles( var_7 - var_6 );
        var_2 = anglestoforward( var_8 );
        var_2 = var_2 * 4;
        var_9 = scripts\engine\trace::_bullet_trace( var_7, var_7 + var_2, 1, var_4 );

        if ( isalive( var_9["entity"] ) && var_9["entity"] == self )
        {
            wait 0.05;
            continue;
        }

        if ( var_9["fraction"] < 1.0 )
            break;

        var_5 = var_0.origin;
        wait 0.05;
    }

    if ( isdefined( var_4 ) && isdefined( var_4.origin ) )
        var_4 unlink();

    var_0 delete();
}

personalcoldbreath()
{
    var_0 = "TAG_EYE";
    self endon( "death" );
    self notify( "stop personal effect" );
    self endon( "stop personal effect" );

    while ( isdefined( self ) )
    {
        wait 0.05;

        if ( !isdefined( self ) )
            break;

        if ( isdefined( self.a.movement ) && self.a.movement == "stop" )
        {
            if ( isdefined( self.isindoor ) && self.isindoor == 1 )
                continue;

            playfxontag( level._effect["cold_breath"], self, var_0 );
            wait( 2.5 + randomfloat( 3 ) );
            continue;
        }

        wait 0.5;
    }
}

ispartiallysuppressedwrapper()
{
    if ( self.suppressionmeter <= self.suppressionthreshold * 0.25 )
        return 0;

    return self issuppressed();
}

showlines( var_0, var_1, var_2 )
{
    for (;;)
    {
        wait 0.05;
        wait 0.05;
    }
}

anim_array( var_0, var_1 )
{
    var_2 = var_0.size;
    var_3 = randomint( var_2 );

    if ( var_2 == 1 )
        return var_0[0];

    var_4 = 0;
    var_5 = 0;

    for ( var_6 = 0; var_6 < var_2; var_6++ )
        var_5 = var_5 + var_1[var_6];

    var_7 = randomfloat( var_5 );
    var_8 = 0;

    for ( var_6 = 0; var_6 < var_2; var_6++ )
    {
        var_8 = var_8 + var_1[var_6];

        if ( var_7 >= var_8 )
            continue;

        var_3 = var_6;
        break;
    }

    return var_0[var_3];
}

canthrowgrenade()
{
    if ( !self.grenadeammo )
        return 0;

    if ( self.script_forcegrenade )
        return 1;

    return isplayer( self.enemy );
}

usingboltactionweapon()
{
    return weaponisboltaction( self.weapon );
}

random_weight( var_0 )
{
    var_1 = randomint( var_0.size );

    if ( var_0.size > 1 )
    {
        var_2 = 0;

        for ( var_3 = 0; var_3 < var_0.size; var_3++ )
            var_2 = var_2 + var_0[var_3];

        var_4 = randomfloat( var_2 );
        var_2 = 0;

        for ( var_3 = 0; var_3 < var_0.size; var_3++ )
        {
            var_2 = var_2 + var_0[var_3];

            if ( var_4 < var_2 )
            {
                var_1 = var_3;
                break;
            }
        }
    }

    return var_1;
}

setfootstepeffect( var_0, var_1, var_2 )
{
    if ( !isdefined( anim.optionalstepeffects ) )
        anim.optionalstepeffects = [];

    anim.optionalstepeffects[var_1] = 1;
    level._effect["step_" + var_1][var_0] = var_2;
}

setfootstepeffectsmall( var_0, var_1, var_2 )
{
    if ( !isdefined( anim.optionalstepeffectssmall ) )
        anim.optionalstepeffectssmall = [];

    anim.optionalstepeffectssmall[var_1] = 1;
    level._effect["step_small_" + var_1][var_0] = var_2;
}

setfootprinteffect( var_0, var_1, var_2 )
{
    if ( !isdefined( anim.optionalfootprinteffects ) )
        anim.optionalfootprinteffects = [];

    if ( !isdefined( anim.flirfootprinteffects ) )
        anim.flirfootprinteffects = 0;

    anim.optionalfootprinteffects[var_1] = 1;
    level._effect["footprint_" + var_1][var_0] = var_2;
}

unsetfootstepeffect( var_0 )
{
    if ( isdefined( anim.optionalstepeffects ) )
        anim.optionalstepeffects[var_0] = undefined;

    level._effect["step_" + var_0] = undefined;
}

unsetfootstepeffectsmall( var_0 )
{
    if ( isdefined( anim.optionalstepeffectssmall ) )
        anim.optionalstepeffectssmall[var_0] = undefined;

    level._effect["step_small_" + var_0] = undefined;
}

unsetfootprinteffect( var_0 )
{
    if ( isdefined( anim.optionalfootprinteffects ) )
        anim.optionalfootprinteffects[var_0] = undefined;

    level._effect["footprint_" + var_0] = undefined;
}

setnotetrackeffect( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_2 ) )
        var_2 = "all";

    if ( !isdefined( level._notetrackfx ) )
        level._notetrackfx = [];

    level._notetrackfx[var_0][var_2] = spawnstruct();
    level._notetrackfx[var_0][var_2].tag = var_1;
    level._notetrackfx[var_0][var_2].fx = var_3;
    setnotetracksound( var_0, var_2, var_4, var_5 );
}

setnotetracksound( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_1 ) )
        var_1 = "all";

    if ( !isdefined( level._notetrackfx ) )
        level._notetrackfx = [];

    if ( isdefined( level._notetrackfx[var_0][var_1] ) )
        var_4 = level._notetrackfx[var_0][var_1];
    else
    {
        var_4 = spawnstruct();
        level._notetrackfx[var_0][var_1] = var_4;
    }

    if ( isdefined( var_2 ) )
        var_4.sound_prefix = var_2;

    if ( isdefined( var_3 ) )
        var_4.sound_suffix = var_3;
}

enterpronewrapper( var_0 )
{
    thread enterpronewrapperproc( var_0 );
}

enterpronewrapperproc( var_0 )
{
    self endon( "death" );
    self notify( "anim_prone_change" );
    self endon( "anim_prone_change" );
    self enterprone( var_0, isdefined( self.a.onback ) );
    self waittill( "killanimscript" );

    if ( self.currentpose != "prone" && !isdefined( self.a.onback ) )
        self.currentpose = "prone";
}

stoponback()
{
    exitpronewrapper( 1.0 );
    self.a.onback = undefined;
}

exitpronewrapper( var_0 )
{
    thread exitpronewrapperproc( var_0 );
}

exitpronewrapperproc( var_0 )
{
    self endon( "death" );
    self notify( "anim_prone_change" );
    self endon( "anim_prone_change" );
    self exitprone( var_0 );
    self waittill( "killanimscript" );

    if ( self.currentpose == "prone" )
        self.currentpose = "crouch";
}

animarray( var_0 )
{
    return self.a.array[var_0];
}

animarrayanyexist( var_0 )
{
    return isdefined( self.a.array[var_0] ) && self.a.array[var_0].size > 0;
}

animarraypickrandom( var_0 )
{
    var_1 = randomint( self.a.array[var_0].size );
    return self.a.array[var_0][var_1];
}

array( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 )
{
    var_14 = [];

    if ( isdefined( var_0 ) )
        var_14[0] = var_0;
    else
        return var_14;

    if ( isdefined( var_1 ) )
        var_14[1] = var_1;
    else
        return var_14;

    if ( isdefined( var_2 ) )
        var_14[2] = var_2;
    else
        return var_14;

    if ( isdefined( var_3 ) )
        var_14[3] = var_3;
    else
        return var_14;

    if ( isdefined( var_4 ) )
        var_14[4] = var_4;
    else
        return var_14;

    if ( isdefined( var_5 ) )
        var_14[5] = var_5;
    else
        return var_14;

    if ( isdefined( var_6 ) )
        var_14[6] = var_6;
    else
        return var_14;

    if ( isdefined( var_7 ) )
        var_14[7] = var_7;
    else
        return var_14;

    if ( isdefined( var_8 ) )
        var_14[8] = var_8;
    else
        return var_14;

    if ( isdefined( var_9 ) )
        var_14[9] = var_9;
    else
        return var_14;

    if ( isdefined( var_10 ) )
        var_14[10] = var_10;
    else
        return var_14;

    if ( isdefined( var_11 ) )
        var_14[11] = var_11;
    else
        return var_14;

    if ( isdefined( var_12 ) )
        var_14[12] = var_12;
    else
        return var_14;

    if ( isdefined( var_13 ) )
        var_14[13] = var_13;

    return var_14;
}

getaiprimaryweapon()
{
    return self.primaryweapon;
}

getaisecondaryweapon()
{
    return self.secondaryweapon;
}

getaisidearmweapon()
{
    return self.sidearm;
}

getaicurrentweapon()
{
    return self.weapon;
}

getaicurrentweaponslot()
{
    if ( self.weapon == self.primaryweapon )
        return "primary";
    else if ( self.weapon == self.secondaryweapon )
        return "secondary";
    else if ( self.weapon == self.sidearm )
        return "sidearm";
    else
    {

    }
}

aihasweapon( var_0 )
{
    var_1 = createheadicon( var_0 );

    if ( isdefined( self.weaponinfo[var_1] ) )
        return 1;

    return 0;
}

getanimendpos( var_0 )
{
    var_1 = getmovedelta( var_0, 0, 1 );
    return self localtoworldcoords( var_1 );
}

ragdolldeath( var_0 )
{
    self endon( "killanimscript" );
    var_1 = self.origin;
    var_2 = ( 0, 0, 0 );

    for (;;)
    {
        wait 0.05;
        var_3 = distance( self.origin, var_1 );
        var_1 = self.origin;

        if ( self.health == 1 )
        {
            self.a.nodeath = 1;
            self startragdoll();
            self clearanim( var_0, 0.1 );
            wait 0.05;
            physicsexplosionsphere( var_1, 600, 0, var_3 * 0.1 );
            self notify( "killanimscript" );
            return;
        }
    }
}

shouldcqb()
{
    return iscqbwalking() && !isdefined( self.grenade );
}

iscqbwalking()
{
    return isdefined( self.demeanoroverride ) && self.demeanoroverride == "cqb";
}

iscqbwalkingorfacingenemy()
{
    return !self.facemotion || iscqbwalking();
}

randomizeidleset()
{
    self.a.idleset = randomint( 2 );
}

getrandomintfromseed( var_0, var_1 )
{
    var_2 = var_0 % anim.randominttablesize;
    return anim.randominttable[var_2] % var_1;
}

getcurrentweaponslotname()
{
    if ( scripts\anim\utility_common.gsc::isusingsecondary() )
        return "secondary";

    if ( scripts\anim\utility_common.gsc::isusingsidearm() )
        return "sidearm";

    return "primary";
}

lookupanim( var_0, var_1 )
{
    if ( isdefined( self.animarchetype ) )
    {
        if ( isdefined( anim.archetypes[self.animarchetype][var_0] ) && isdefined( anim.archetypes[self.animarchetype][var_0][var_1] ) )
            return anim.archetypes[self.animarchetype][var_0][var_1];
    }

    return anim.archetypes["soldier"][var_0][var_1];
}

lookupanimarray( var_0 )
{
    if ( isdefined( self.animarchetype ) )
    {
        if ( isdefined( anim.archetypes[self.animarchetype][var_0] ) )
        {
            var_1 = anim.archetypes["soldier"][var_0];

            foreach ( var_4, var_3 in anim.archetypes[self.animarchetype][var_0] )
                var_1[var_4] = var_3;

            return var_1;
        }
    }

    return anim.archetypes["soldier"][var_0];
}

isenergyweapon( var_0 )
{
    return weaponusesenergybullets( var_0 );
}
