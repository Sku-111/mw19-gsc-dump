// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    game["isLaunchChunk"] = getdvarint( "MPNRKLKOKR", 0 ) != 0;

    if ( getdvar( "mapname" ) == "mp_background" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = scripts\mp\utility\game::getgametype();
    var_0[1] = "dom";
    scripts\mp\gameobjects::main( var_0 );

    if ( game["isLaunchChunk"] )
    {
        scripts\mp\gametypes\arena_alt.gsc::main();
        return;
    }

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 0, 0, 24 );
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 30 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 75 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 19 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 10 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerwinbytwoenableddvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerwinbytwomaxroundsdvar( scripts\mp\utility\game::getgametype(), 4 );
    }

    updategametypedvars();

    if ( israndompreviewloadouts() )
    {
        level.ispreviewbuild = 1;
        level.previewbuildfirstallies = 1;
        level.previewbuildfirstaxis = 1;
    }

    level.teambased = 1;
    level.objectivebased = 1;
    level.overridetimelimitclock = 10;
    level.ontimelimit = ::ontimelimit;
    level.onstartgametype = ::onstartgametype;
    level.onplayerconnect = ::onplayerconnect;
    level.getspawnpoint = ::getspawnpoint;
    level.onplayerdamaged = ::onplayerdamaged;
    level.onnormaldeath = ::onnormaldeath;
    level.onplayerkilled = ::onplayerkilled;
    level.modeonspawnplayer = ::onspawnplayer;
    level.ondeadevent = ::ondeadevent;
    level.ontimelimitot = ::ontimelimitot;
    level.allowlatecomers = 0;
    level.removekilleventsplash = 1;

    if ( scripts\mp\utility\game::matchmakinggame() )
    {
        var_1 = getdvarint( "OOTQKOTRM", 4 ) / 2;
        level._id_12C49 = 1;
        level.requiredplayercount["allies"] = var_1;
        level.requiredplayercount["axis"] = var_1;
    }

    scripts\mp\utility\join_team_aggregator::registeronplayerjointeamcallback( ::_id_12043 );

    if ( !scripts\mp\utility\game::iswinbytworulegametype() )
        level.skipdefendersadvantage = 1;

    if ( !isnormalloadouts() )
    {
        level.disablecopycatloadout = 1;
        setomnvar( "ui_killcam_copycat", 0 );
        level.bypassclasschoicefunc = ::alwaysgamemodeclass;
    }
    else
        level.disablecopycatloadout = undefined;

    level.calloutmarkerpingvo_doesoperatorsupportalias = removefromlittlebirdmglistondeath();

    if ( level.calloutmarkerpingvo_doesoperatorsupportalias )
    {
        level.playerzombievehiclehittoss = 0.5;
        level.playerzombiewaittillinputreturn = 0.05;
    }

    if ( scripts\cp_mp\utility\game_utility::getmapname() == "mp_m_overwinter" )
    {
        level._id_1343F = 1;
        level.brmissionscompleted = getdvarint( "scr_always_snowfight", 0 );

        if ( level.brmissionscompleted )
            level.practiceround = 0;
        else
            level.practiceround = 1;
    }

    if ( getdvarint( "scr_arena_vday" ) == 1 )
    {
        level.calloutmarkerpingvo_getcalloutaliasstringworld = 1;
        level._id_136CB = 1;
    }
    else if ( getdvarint( "scr_arena_stpday" ) == 1 )
    {
        level.calloutmarkerpingvo_getcalloutaliasstringloot = 1;
        level._id_136CB = 1;
    }

    game["dialog"]["gametype"] = "gametype_arena";

    if ( getdvarint( "OSMSLRTOP" ) )
        game["dialog"]["gametype"] = "hc_" + game["dialog"]["gametype"];
    else if ( getdvarint( "NOSLRNTRKL" ) )
        game["dialog"]["gametype"] = "thirdp_" + game["dialog"]["gametype"];

    if ( ispickuploadouts() && !isdefined( game["roundsPlayed"] ) )
    {
        game["dialog"]["offense_obj"] = "boost_arena_pickups";
        game["dialog"]["defense_obj"] = "boost_arena_pickups";
    }
    else if ( level.objmodifier == 1 && !isdefined( game["roundsPlayed"] ) )
    {
        game["dialog"]["offense_obj"] = "boost_arena_objective";
        game["dialog"]["defense_obj"] = "boost_arena_objective";
    }
    else
    {
        game["dialog"]["offense_obj"] = "boost_arena";
        game["dialog"]["defense_obj"] = "boost_arena";
    }

    game["dialog"]["obj_indepth"] = "boost_arena_indepth";
    game["dialog"]["securing_a"] = "flag_securing";
    game["dialog"]["losing_a"] = "flag_losing";
    game["dialog"]["secured_a"] = "flag_secured";
    game["dialog"]["lost_a"] = "flag_lost";
    game["dialog"]["round_success"] = "round_win";
    game["dialog"]["round_failure"] = "round_lose";
    game["dialog"]["mission_success"] = "gamestate_win";
    game["dialog"]["mission_failure"] = "gamestate_lost";
    level.allieshealth = 0;
    level.alliesmaxhealth = 0;
    level.axishealth = 0;
    level.axismaxhealth = 0;
    level.usedspawnposone["allies"] = 0;
    level.usedspawnpostwo["allies"] = 0;
    level.usedspawnposthree["allies"] = 0;
    level.usedspawnposone["axis"] = 0;
    level.usedspawnpostwo["axis"] = 0;
    level.usedspawnposthree["axis"] = 0;
    setomnvar( "ui_arena_allies_health", 0 );
    setomnvar( "ui_arena_axis_health", 0 );
    setomnvar( "ui_arena_allies_health_max", 100 );
    setomnvar( "ui_arena_axis_health_max", 100 );
    setomnvar( "ui_arena_primaryVariantID", -1 );
    setomnvar( "ui_arena_secondaryVariantID", -1 );
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "scr_arena_arenaloadouts", getmatchrulesdata( "arenaData", "arenaLoadouts" ) );
    setdynamicdvar( "scr_arena_loadoutchangeround", getmatchrulesdata( "arenaData", "loadoutChangeRound" ) );
    setdynamicdvar( "scr_arena_switchspawns", getmatchrulesdata( "arenaData", "switchSpawns" ) );
    setdynamicdvar( "scr_arena_winCondition", getmatchrulesdata( "arenaData", "winCondition" ) );
    setdynamicdvar( "scr_arena_objModifier", getmatchrulesdata( "arenaData", "objModifier" ) );
    setdynamicdvar( "scr_arena_spawnFlag", getmatchrulesdata( "arenaData", "spawnFlag" ) );
    setdynamicdvar( "scr_arena_flagCaptureTime", getmatchrulesdata( "domData", "flagCaptureTime" ) );
    setdynamicdvar( "scr_arena_tacticaltimemod", getmatchrulesdata( "arenaData", "tacticalTimeMod" ) );
    setdynamicdvar( "scr_arena_blastshieldmod", getmatchrulesdata( "arenaData", "blastShieldMod" ) );
    setdynamicdvar( "scr_arena_blastshieldclamp", getmatchrulesdata( "arenaData", "blastShieldClamp" ) );
    setdynamicdvar( "scr_arena_startWeapon", getmatchrulesdata( "arenaData", "startWeapon" ) );
    setdynamicdvar( "scr_arena_weaponTier1", getmatchrulesdata( "arenaData", "weaponTier1" ) );
    setdynamicdvar( "scr_arena_weaponTier2", getmatchrulesdata( "arenaData", "weaponTier2" ) );
    setdynamicdvar( "scr_arena_weaponTier3", getmatchrulesdata( "arenaData", "weaponTier3" ) );
    setdynamicdvar( "scr_arena_weaponTier4", getmatchrulesdata( "arenaData", "weaponTier4" ) );
    setdynamicdvar( "scr_arena_weaponTier5", getmatchrulesdata( "arenaData", "weaponTier5" ) );
    setdynamicdvar( "scr_arena_weaponTier6", getmatchrulesdata( "arenaData", "weaponTier6" ) );
    setdynamicdvar( "scr_arena_weaponTier7", getmatchrulesdata( "arenaData", "weaponTier7" ) );
    setdynamicdvar( "scr_arena_weaponTier8", getmatchrulesdata( "arenaData", "weaponTier8" ) );
    setdynamicdvar( "scr_arena_arenaAttachments", getmatchrulesdata( "arenaData", "arenaAttachments" ) );
    setdynamicdvar( "scr_arena_arenaSuper", getmatchrulesdata( "arenaData", "arenaSuper" ) );
    setdynamicdvar( "scr_arena_halftime", 0 );
    scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
}

onstartgametype()
{
    setclientnamemode( "auto_change" );

    if ( !isdefined( game["switchedsides"] ) )
        game["switchedsides"] = 0;

    if ( game["switchedsides"] )
    {
        var_0 = game["attackers"];
        var_1 = game["defenders"];
        game["attackers"] = var_1;
        game["defenders"] = var_0;
    }

    foreach ( var_3 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_3, &"OBJECTIVES/WAR" );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"OBJECTIVES/WAR" );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"OBJECTIVES/WAR_SCORE" );

        scripts\mp\utility\game::setobjectivehinttext( var_3, &"OBJECTIVES/WAR_HINT" );
    }

    initspawns();

    if ( game["roundsPlayed"] == 0 )
        level thread setroundwinstreakarray();

    thread adjustroundendtimer();
    thread waittooverridegraceperiod();
    var_5 = 1;

    if ( istrue( level._id_1343F ) )
    {
        if ( !level.brmissionscompleted && game["roundsPlayed"] == 0 && istrue( game["practiceRound"] ) )
        {
            level.extratime = 30;
            game["didSnowFight"] = 1;
            level.arenaloadouts = 3;
            var_5 = 0;
        }
        else if ( level.brmissionscompleted )
        {
            level.arenaloadouts = 3;
            var_5 = 0;
        }

        level._id_13443["vanish"] = loadfx( "vfx/core/impacts/small_snowhit" );
        level._id_13443["screen"] = loadfx( "vfx/iw8/weap/_impact/snowball/vfx_imp_snowball_scrn.vfx" );

        if ( !var_5 )
            _id_1343F();
    }

    if ( var_5 )
    {
        if ( israndomloadouts() || usbs_pulled_out() || usb_right() || usb_tape_animation_test() )
            thread updaterandomloadout();
        else if ( ispickuploadouts() )
        {
            buildrandomweapontable();

            if ( !isdefined( game["roundsPlayed"] ) || isdefined( game["roundsPlayed"] ) && game["roundsPlayed"] == 0 )
            {
                level.startweapon.weapon = getrandomweaponforweapontier( level.startweapon.weapon, 1 );
                level.arenaweapont1.weapon = getrandomweaponforweapontier( level.arenaweapont1.weapon );
                level.arenaweapont2.weapon = getrandomweaponforweapontier( level.arenaweapont2.weapon );
                level.arenaweapont3.weapon = getrandomweaponforweapontier( level.arenaweapont3.weapon );
                level.arenaweapont4.weapon = getrandomweaponforweapontier( level.arenaweapont4.weapon );
                level.arenaweapont5.weapon = getrandomweaponforweapontier( level.arenaweapont5.weapon );
                level.arenaweapont6.weapon = getrandomweaponforweapontier( level.arenaweapont6.weapon );
                level.arenaweapont7.weapon = getrandomweaponforweapontier( level.arenaweapont7.weapon );
                level.arenaweapont8.weapon = getrandomweaponforweapontier( level.arenaweapont8.weapon );
                level.startweapon.variantid = regroup_at_truck( level.startweapon.weapon );
                level.arenaweapont1.variantid = regroup_at_truck( level.arenaweapont1.weapon );
                level.arenaweapont2.variantid = regroup_at_truck( level.arenaweapont2.weapon );
                level.arenaweapont3.variantid = regroup_at_truck( level.arenaweapont3.weapon );
                level.arenaweapont4.variantid = regroup_at_truck( level.arenaweapont4.weapon );
                level.arenaweapont5.variantid = regroup_at_truck( level.arenaweapont5.weapon );
                level.arenaweapont6.variantid = regroup_at_truck( level.arenaweapont6.weapon );
                level.arenaweapont7.variantid = regroup_at_truck( level.arenaweapont7.weapon );
                level.arenaweapont8.variantid = regroup_at_truck( level.arenaweapont8.weapon );
            }
            else if ( level.loadoutchangeround == 0 || game["roundsPlayed"] % level.loadoutchangeround != 0 )
            {
                level.startweapon.weapon = game["startWeapon"]["weapon"];
                level.arenaweapont1.weapon = game["arenaWeaponT1"]["weapon"];
                level.arenaweapont2.weapon = game["arenaWeaponT2"]["weapon"];
                level.arenaweapont3.weapon = game["arenaWeaponT3"]["weapon"];
                level.arenaweapont4.weapon = game["arenaWeaponT4"]["weapon"];
                level.arenaweapont5.weapon = game["arenaWeaponT5"]["weapon"];
                level.arenaweapont6.weapon = game["arenaWeaponT6"]["weapon"];
                level.arenaweapont7.weapon = game["arenaWeaponT7"]["weapon"];
                level.arenaweapont8.weapon = game["arenaWeaponT8"]["weapon"];
                level.startweapon.variantid = game["startWeapon"]["variantID"];
                level.arenaweapont1.variantid = game["arenaWeaponT1"]["variantID"];
                level.arenaweapont2.variantid = game["arenaWeaponT2"]["variantID"];
                level.arenaweapont3.variantid = game["arenaWeaponT3"]["variantID"];
                level.arenaweapont4.variantid = game["arenaWeaponT4"]["variantID"];
                level.arenaweapont5.variantid = game["arenaWeaponT5"]["variantID"];
                level.arenaweapont6.variantid = game["arenaWeaponT6"]["variantID"];
                level.arenaweapont7.variantid = game["arenaWeaponT7"]["variantID"];
                level.arenaweapont8.variantid = game["arenaWeaponT8"]["variantID"];
            }
            else if ( game["roundsPlayed"] % level.loadoutchangeround == 0 )
            {
                level.startweapon.weapon = getrandomweaponforweapontier( level.startweapon.weapon, 1 );
                level.arenaweapont1.weapon = getrandomweaponforweapontier( level.arenaweapont1.weapon );
                level.arenaweapont2.weapon = getrandomweaponforweapontier( level.arenaweapont2.weapon );
                level.arenaweapont3.weapon = getrandomweaponforweapontier( level.arenaweapont3.weapon );
                level.arenaweapont4.weapon = getrandomweaponforweapontier( level.arenaweapont4.weapon );
                level.arenaweapont5.weapon = getrandomweaponforweapontier( level.arenaweapont5.weapon );
                level.arenaweapont6.weapon = getrandomweaponforweapontier( level.arenaweapont6.weapon );
                level.arenaweapont7.weapon = getrandomweaponforweapontier( level.arenaweapont7.weapon );
                level.arenaweapont8.weapon = getrandomweaponforweapontier( level.arenaweapont8.weapon );
                level.startweapon.variantid = regroup_at_truck( level.startweapon.weapon );
                level.arenaweapont1.variantid = regroup_at_truck( level.arenaweapont1.weapon );
                level.arenaweapont2.variantid = regroup_at_truck( level.arenaweapont2.weapon );
                level.arenaweapont3.variantid = regroup_at_truck( level.arenaweapont3.weapon );
                level.arenaweapont4.variantid = regroup_at_truck( level.arenaweapont4.weapon );
                level.arenaweapont5.variantid = regroup_at_truck( level.arenaweapont5.weapon );
                level.arenaweapont6.variantid = regroup_at_truck( level.arenaweapont6.weapon );
                level.arenaweapont7.variantid = regroup_at_truck( level.arenaweapont7.weapon );
                level.arenaweapont8.variantid = regroup_at_truck( level.arenaweapont8.weapon );
            }

            game["startWeapon"]["weapon"] = level.startweapon.weapon;
            game["arenaWeaponT1"]["weapon"] = level.arenaweapont1.weapon;
            game["arenaWeaponT2"]["weapon"] = level.arenaweapont2.weapon;
            game["arenaWeaponT3"]["weapon"] = level.arenaweapont3.weapon;
            game["arenaWeaponT4"]["weapon"] = level.arenaweapont4.weapon;
            game["arenaWeaponT5"]["weapon"] = level.arenaweapont5.weapon;
            game["arenaWeaponT6"]["weapon"] = level.arenaweapont6.weapon;
            game["arenaWeaponT7"]["weapon"] = level.arenaweapont7.weapon;
            game["arenaWeaponT8"]["weapon"] = level.arenaweapont8.weapon;
            game["startWeapon"]["variantID"] = level.startweapon.variantid;
            game["arenaWeaponT1"]["variantID"] = level.arenaweapont1.variantid;
            game["arenaWeaponT2"]["variantID"] = level.arenaweapont2.variantid;
            game["arenaWeaponT3"]["variantID"] = level.arenaweapont3.variantid;
            game["arenaWeaponT4"]["variantID"] = level.arenaweapont4.variantid;
            game["arenaWeaponT5"]["variantID"] = level.arenaweapont5.variantid;
            game["arenaWeaponT6"]["variantID"] = level.arenaweapont6.variantid;
            game["arenaWeaponT7"]["variantID"] = level.arenaweapont7.variantid;
            game["arenaWeaponT8"]["variantID"] = level.arenaweapont8.variantid;
            level.lethaldelay = 0;
            defineplayerloadout();

            if ( !istrue( level._id_1343F ) )
            {
                initweaponmap();
                thread setupweapons();
            }
            else
                _id_1343F();
        }
        else if ( isgungameloadouts() )
        {
            level.blockweapondrops = 1;
            thread updatearenagungameloadout( 0 );
        }
        else if ( isrvsgungameloadouts() )
        {
            level.blockweapondrops = 1;
            thread updatearenagungameloadout( 1 );
        }
    }

    if ( !isnormalloadouts() )
        buildloadoutsforweaponstreaming();

    setupwaypointicons();
    seticonnames();

    if ( level.objmodifier == 1 )
        level setupendzones();

    if ( level.spawnflag )
    {
        var_6 = 0;

        if ( !scripts\mp\flags::gameflag( "prematch_done" ) && game["roundsPlayed"] == 0 )
            var_6 = 1;

        level thread spawngameendflagzone( var_6 );
    }

    physics_raycastents( scripts\mp\gamelogic::gettimeremaining(), 0 );

    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
    {
        if ( game["roundsPlayed"] == 0 )
        {
            level thread outlineenemyplayers();
            level thread removeenemyoutlines();
        }
    }

    if ( !isdefined( game["pingEnabled"] ) )
        game["pingEnabled"] = getdvarint( "OLMLQMOSRL", 0 );

    if ( istrue( game["pingEnabled"] ) )
        scripts\cp_mp\vehicles\vehicle_compass::calloutmarkerping_init();
}

waittooverridegraceperiod()
{
    scripts\mp\flags::gameflagwait( "prematch_done" );
    level.overrideingraceperiod = 1;
    level.ingraceperiod = 5;
}

alwaysgamemodeclass()
{
    return "gamemode";
}

adjustroundendtimer()
{
    wait 1;
    level.roundenddelay = 4.0;
}

updategametypedvars()
{
    scripts\mp\gametypes\common.gsc::updatecommongametypedvars();

    if ( level.dogtagsenabled )
    {
        level.dogtagallyonusecb = ::dogtagallyonusecb;
        level.dogtagenemyonusecb = ::dogtagenemyonusecb;
    }

    if ( getdvarint( "allow_enemy_proxchat", 0 ) == 1 )
    {
        setdvar( "LOSOOOTNMS", 1 );
        var_0 = 128;
        var_1 = getdvarint( "proxchat_radius_override", 0 );

        if ( var_1 != 0 )
            var_0 = var_1;

        setdvar( "NNMLSMNTOQ", var_0 );
    }

    level.arenaloadouts = scripts\mp\utility\dvars::dvarintvalue( "arenaLoadouts", 1, 1, 16 );
    level.loadoutchangeround = scripts\mp\utility\dvars::dvarintvalue( "loadoutChangeRound", 3, 0, 5 );
    level.switchspawns = scripts\mp\utility\dvars::dvarintvalue( "switchSpawns", 1, 0, 1 );
    level.wincondition = scripts\mp\utility\dvars::dvarintvalue( "winCondition", 1, 0, 2 );
    setomnvar( "ui_arena_loadout_type", level.arenaloadouts );
    setomnvar( "ui_wincondition", level.wincondition );
    level.objmodifier = scripts\mp\utility\dvars::dvarintvalue( "objModifier", 0, 0, 2 );
    level.spawnflag = scripts\mp\utility\dvars::dvarintvalue( "spawnFlag", 0, 0, 1 );

    if ( level.spawnflag )
    {
        level.ontimelimitgraceperiod = getdvarfloat( "scr_arena_overtime_timelimit", 10.0 );
        level.currenttimelimitdelay = 0.0;
        level.canprocessot = 1;
    }

    level.tacticaltimemod = scripts\mp\utility\dvars::dvarfloatvalue( "tacticalTimeMod", 2.5, 0.5, 5 );
    level.startweapon = spawnstruct();
    level.arenaweapont1 = spawnstruct();
    level.arenaweapont2 = spawnstruct();
    level.arenaweapont3 = spawnstruct();
    level.arenaweapont4 = spawnstruct();
    level.arenaweapont5 = spawnstruct();
    level.arenaweapont6 = spawnstruct();
    level.arenaweapont7 = spawnstruct();
    level.arenaweapont8 = spawnstruct();
    level.startweapon.weapon = getdvar( "scr_arena_startWeapon", "none" );
    level.arenaweapont1.weapon = getdvar( "scr_arena_weaponTier1", "iw8_pi_golf21_mp" );
    level.arenaweapont2.weapon = getdvar( "scr_arena_weaponTier2", "iw8_sh_dpapa12_mp" );
    level.arenaweapont3.weapon = getdvar( "scr_arena_weaponTier3", "iw8_sm_mpapa5_mp" );
    level.arenaweapont4.weapon = getdvar( "scr_arena_weaponTier4", "iw8_ar_mike4_mp" );
    level.arenaweapont5.weapon = getdvar( "scr_arena_weaponTier5", "iw8_sn_alpha50_mp" );
    level.arenaweapont6.weapon = getdvar( "scr_arena_weaponTier6", "equip_frag" );
    level.arenaweapont7.weapon = getdvar( "scr_arena_weaponTier7", "equip_concussion" );
    level.arenaweapont8.weapon = getdvar( "scr_arena_weaponTier8", "equip_adrenaline" );
    level.calloutmarkerpingvo_getcalloutaliasstringentity = getdvarint( "scr_arena_arenaAttachments", 0 );
    level.calloutmarkerpingvo_getcalloutaliasstringvehicle = getdvar( "scr_arena_arenaSuper", "none" );

    if ( level.calloutmarkerpingvo_getcalloutaliasstringvehicle == "none" )
        setomnvar( "ui_disable_fieldupgrades", 1 );
}

getrandomweaponforweapontier( var_0, var_1 )
{
    if ( issubstr( var_0, "rand" ) )
    {
        if ( var_0 == "random" )
            var_0 = getrandomspawnweapon();
        else
            var_0 = getrandomweaponfromcategory( var_0, var_1 );
    }

    return var_0;
}

initspawns()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    var_0 = scripts\mp\spawnlogic::getspawnpointarray( "mp_arena_spawn_allies_start" );
    var_1 = scripts\mp\spawnlogic::getspawnpointarray( "mp_arena_spawn_axis_start" );
    var_2 = scripts\mp\spawnlogic::getspawnpointarray( "mp_arena_spawn" );

    if ( var_0.size > 0 || var_1.size > 0 )
    {
        scripts\mp\spawnlogic::addstartspawnpoints( "mp_arena_spawn_allies_start" );
        scripts\mp\spawnlogic::addstartspawnpoints( "mp_arena_spawn_axis_start" );
        level.alliesstartspawn = "mp_arena_spawn_allies_start";
        level.axisstartspawn = "mp_arena_spawn_axis_start";
    }
    else
    {
        scripts\mp\spawnlogic::addstartspawnpoints( "mp_sd_spawn_attacker" );
        scripts\mp\spawnlogic::addstartspawnpoints( "mp_sd_spawn_defender" );
        level.alliesstartspawn = "mp_sd_spawn_attacker";
        level.axisstartspawn = "mp_sd_spawn_defender";
    }

    if ( var_2.size > 0 )
    {
        scripts\mp\spawnlogic::addspawnpoints( "allies", "mp_arena_spawn" );
        scripts\mp\spawnlogic::addspawnpoints( "axis", "mp_arena_spawn" );
        level.spawntype = "mp_arena_spawn";
    }
    else
    {
        var_2 = scripts\mp\spawnlogic::getspawnpointarray( "mp_tdm_spawn" );

        if ( var_2.size > 0 )
        {
            scripts\mp\spawnlogic::addspawnpoints( "allies", "mp_tdm_spawn" );
            scripts\mp\spawnlogic::addspawnpoints( "axis", "mp_tdm_spawn" );
            level.spawntype = "mp_tdm_spawn";
        }
        else
            level.alwaysusestartspawns = 1;
    }

    var_3 = scripts\mp\spawnlogic::getspawnpointarray( level.spawntype );
    var_4 = scripts\mp\spawnlogic::getspawnpointarray( level.spawntype );
    scripts\mp\spawnlogic::registerspawnset( "normal", var_3 );
    scripts\mp\spawnlogic::registerspawnset( "fallback", var_4 );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
}

validatespawns( var_0 )
{
    var_1 = 0;
    var_2 = 0;
    var_3 = 0;
    var_4 = 0;
    var_5 = scripts\mp\spawnlogic::getspawnpointarray( var_0 );

    foreach ( var_7 in var_5 )
    {
        if ( isdefined( var_7.script_noteworthy ) )
        {
            if ( !var_1 )
                var_1 = var_7.script_noteworthy == "1";
            else
            {

            }

            if ( !var_2 )
                var_2 = var_7.script_noteworthy == "2";
            else
            {

            }

            if ( !var_3 )
            {
                var_3 = var_7.script_noteworthy == "3";
                level.hasthreespawns = 1;
            }
            else
            {

            }

            continue;
        }

        if ( var_4 == 0 )
        {
            var_7.script_noteworthy = "1";
            var_4++;
            continue;
        }

        if ( var_4 == 1 )
        {
            var_7.script_noteworthy = "2";
            var_4++;
            continue;
        }

        if ( var_4 == 2 )
        {
            var_7.script_noteworthy = "3";
            var_4++;
            level.hasthreespawns = 1;
        }
    }
}

getspawnpoint()
{
    scripts\mp\spawnlogic::setactivespawnlogic( "Default", "Crit_Frontline" );
    var_0 = undefined;
    var_1 = level.axisstartspawn;
    var_2 = 0;

    if ( self.pers["team"] == game["attackers"] )
        var_1 = level.alliesstartspawn;

    if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() || istrue( level.alwaysusestartspawns ) || dotournamentendgame() )
    {
        scripts\mp\spawnlogic::setactivespawnlogic( "StartSpawn", "Crit_Default" );
        var_3 = scripts\mp\spawnlogic::getspawnpointarray( var_1 );

        if ( istrue( level.switchspawns ) && game["roundsPlayed"] > 0 )
        {
            var_4 = scripts\mp\utility\teams::getteamcount( self.pers["team"] );

            if ( var_4 > 3 )
            {
                foreach ( var_6 in scripts\mp\utility\teams::getteamdata( self.pers["team"], "players" ) )
                {
                    if ( isdefined( var_6.pers["arena_spawn_pos"] ) )
                        var_6.pers["arena_spawn_pos"] = "0";
                }

                var_2 = 1;
            }
        }

        if ( istrue( level.switchspawns ) && game["roundsPlayed"] > 0 && !var_2 )
        {
            if ( self.pers["arena_spawn_pos"] == "1" )
                self.pers["arena_spawn_pos"] = "2";
            else if ( scripts\mp\utility\teams::getteamcount( self.pers["team"], 0 ) == 3 && istrue( level.hasthreespawns ) && self.pers["arena_spawn_pos"] == "2" )
                self.pers["arena_spawn_pos"] = "3";
            else if ( self.pers["arena_spawn_pos"] == "3" )
                self.pers["arena_spawn_pos"] = "1";
            else
                self.pers["arena_spawn_pos"] = "1";

            var_0 = getswitchside_spawnpoint( var_3, self.pers["arena_spawn_pos"] );
        }

        if ( !isdefined( var_0 ) )
        {
            if ( istrue( self.switching_teams_arena ) && isdefined( self.pers["arena_spawn_pos"] ) )
            {
                cleanupspawn_scriptnoteworthy();
                var_0 = getspawnpoint_startspawn( var_3 );
                self.switching_teams_arena = undefined;

                if ( isdefined( var_0 ) )
                    self._id_13685 = var_0.angles;
            }
            else
            {
                var_0 = getspawnpoint_startspawn( var_3 );

                if ( isdefined( var_0 ) )
                    self._id_13685 = var_0.angles;
            }

            if ( !isdefined( var_0 ) )
            {
                var_4 = scripts\mp\utility\teams::getteamcount( self.pers["team"] );

                if ( var_4 > 3 )
                {
                    var_8 = undefined;
                    var_9 = 0;

                    foreach ( var_6 in scripts\mp\utility\teams::getteamdata( self.pers["team"], "players" ) )
                    {
                        if ( istrue( var_6.fine_drop_pos ) )
                        {
                            var_9++;
                            continue;
                        }

                        break;
                    }

                    foreach ( var_6 in scripts\mp\utility\teams::getteamdata( self.pers["team"], "players" ) )
                    {
                        if ( var_6 == self )
                            continue;

                        if ( istrue( var_6.fine_drop_pos ) )
                            continue;

                        if ( !istrue( var_6.hasspawned ) )
                            continue;

                        if ( isdefined( var_6.pers["arena_spawn_pos"] ) )
                        {
                            if ( level.usedspawnposone[self.pers["team"]] == 1 && level.usedspawnpostwo[self.pers["team"]] == 1 && level.usedspawnposthree[self.pers["team"]] == 1 )
                            {
                                level.usedspawnposone[self.pers["team"]] = 0;
                                level.usedspawnpostwo[self.pers["team"]] = 0;
                                level.usedspawnposthree[self.pers["team"]] = 0;
                            }

                            if ( var_6.pers["arena_spawn_pos"] == "1" && level.usedspawnposone[self.pers["team"]] == 0 )
                            {
                                level.usedspawnposone[self.pers["team"]]++;
                                var_6.fine_drop_pos = 1;
                                var_8 = var_6;
                                break;
                            }
                            else if ( var_6.pers["arena_spawn_pos"] == "2" && level.usedspawnpostwo[self.pers["team"]] == 0 )
                            {
                                level.usedspawnpostwo[self.pers["team"]]++;
                                var_6.fine_drop_pos = 1;
                                var_8 = var_6;
                                break;
                            }
                            else if ( var_6.pers["arena_spawn_pos"] == "3" && level.usedspawnposthree[self.pers["team"]] == 0 )
                            {
                                level.usedspawnposthree[self.pers["team"]]++;
                                var_6.fine_drop_pos = 1;
                                var_8 = var_6;
                                break;
                            }
                            else
                            {
                                level.usedspawnposone[self.pers["team"]]++;
                                var_6.fine_drop_pos = 1;
                                var_8 = var_6;
                                break;
                            }
                        }
                    }

                    if ( isdefined( var_8 ) )
                    {
                        var_0 = scripts\mp\spawnscoring::findteammatebuddyspawn( var_8 );

                        if ( isdefined( var_8._id_13685 ) )
                            var_0.angles = var_8._id_13685;
                    }
                }
            }

            if ( !isdefined( var_0 ) )
            {
                scripts\mp\spawnlogic::activatespawnset( "normal" );
                var_0 = scripts\mp\spawnlogic::getspawnpoint( self, self.pers["team"], "normal", "fallback" );
            }

            if ( isdefined( var_0.script_noteworthy ) && var_0.script_noteworthy != "" && istrue( level.switchspawns ) && game["roundsPlayed"] == 0 )
                self.pers["arena_spawn_pos"] = var_0.script_noteworthy;
        }
    }
    else
    {
        scripts\mp\spawnlogic::activatespawnset( "normal" );
        var_0 = scripts\mp\spawnlogic::getspawnpoint( self, self.pers["team"], "normal", "fallback" );
    }

    return var_0;
}

cleanupspawn_scriptnoteworthy()
{
    var_0 = scripts\mp\utility\game::getotherteam( self.pers["team"] )[0];

    if ( var_0 == game["attackers"] )
    {
        var_1 = level.alliesstartspawn;
        var_2 = level.axisstartspawn;
    }
    else
    {
        var_1 = level.axisstartspawn;
        var_2 = level.alliesstartspawn;
    }

    var_3 = scripts\mp\spawnlogic::getspawnpointarray( var_1 );

    foreach ( var_5 in var_3 )
    {
        if ( var_5.script_noteworthy == self.pers["arena_spawn_pos"] )
            var_5.selected = 0;
    }

    var_3 = scripts\mp\spawnlogic::getspawnpointarray( var_2 );

    foreach ( var_5 in var_3 )
    {
        foreach ( var_9 in scripts\mp\utility\teams::getteamdata( self.pers["team"], "players" ) )
        {
            if ( var_9 != self && isdefined( var_9.pers["arena_spawn_pos"] ) && var_5.script_noteworthy != var_9.pers["arena_spawn_pos"] )
                var_5.selected = 0;
        }
    }
}

getspawnpoint_startspawn( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return undefined;

    var_2 = undefined;
    var_0 = scripts\mp\spawnscoring::checkdynamicspawns( var_0 );

    foreach ( var_4 in var_0 )
    {
        if ( !isdefined( var_4.selected ) )
            continue;

        if ( var_4.selected )
            continue;

        if ( var_4.script_noteworthy == "1" )
        {
            var_2 = var_4;
            break;
        }
        else if ( var_4.script_noteworthy == "2" )
        {
            var_2 = var_4;
            break;
        }

        var_2 = var_4;
    }

    if ( isdefined( var_2 ) )
        var_2.selected = 1;

    return var_2;
}

getswitchside_spawnpoint( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return undefined;

    var_2 = 0;

    foreach ( var_4 in var_0 )
    {
        if ( var_4.script_noteworthy == var_1 )
        {
            if ( istrue( var_4.selected ) )
            {
                var_2 = 1;
                continue;
            }

            var_4.selected = 1;
            return var_4;
        }
    }

    return undefined;
}

onplayerconnect( var_0 )
{
    if ( istrue( level.allowkillstreaks ) )
        level.allowkillstreaks = 0;

    var_0.arenadamage = 0;
    var_0 scripts\mp\utility\stats::setextrascore0( 0 );

    if ( isdefined( var_0.pers["damage"] ) )
        var_0 scripts\mp\utility\stats::setextrascore0( var_0.pers["damage"] );

    if ( !isnormalloadouts() )
    {
        var_0 setclientomnvar( "ui_skip_loadout", 1 );
        var_0.pers["class"] = "gamemode";
        var_0.pers["lastClass"] = "";
        var_0.class = var_0.pers["class"];
        var_0.lastclass = var_0.pers["lastClass"];

        if ( israndomloadouts() || usbs_pulled_out() || usb_right() || usb_tape_animation_test() )
            var_0.pers["gamemodeLoadout"] = game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]];
        else if ( ispickuploadouts() )
            var_0.pers["gamemodeLoadout"] = level.arena_loadouts["axis"];

        if ( isgungameloadouts() || isrvsgungameloadouts() )
        {
            var_0.pers["gamemodeLoadout"] = game["arenaRandomLoadout"][getgungameloadoutindex( var_0 )];

            if ( game["roundsPlayed"] == 0 )
                var_0 setenemyloadoutomnvars();
        }

        foreach ( var_2 in level.teamnamelist )
        {
            if ( isdefined( var_0.pers["team"] ) && game["roundWinStreak"][var_2] > 0 && var_0.pers["team"] == var_2 )
            {
                var_0.pers["gamemodeLoadout"]["roundWinStreakPrimaryCamoTeam"] = var_2;
                var_0.pers["gamemodeLoadout"]["roundWinStreakPrimaryCamo"] = _id_131BD();
                var_0.pers["gamemodeLoadout"]["roundWinStreakecondaryCamoTeam"] = var_2;
                var_0.pers["gamemodeLoadout"]["roundWinStreakSecondaryCamo"] = _id_131BD();
            }
        }
    }

    if ( istrue( level.switchspawns ) && !isdefined( var_0.pers["arena_spawn_pos"] ) )
        var_0.pers["arena_spawn_pos"] = "0";

    var_0 thread onjoinedteam();

    if ( !isnormalloadouts() )
        var_0 updatehighpriorityweapons();

    scripts\mp\utility\disconnect_event_aggregator::registerondisconnecteventcallback( ::onplayerdisconnect );

    if ( istrue( game["pingEnabled"] ) )
        var_0 scripts\cp\vehicles\little_bird_mg_cp::calloutmarkerping_initplayer();
}

onplayerdisconnect( var_0 )
{
    _id_131CB( 1 );

    if ( istrue( game["pingEnabled"] ) )
    {
        var_1 = 1;

        foreach ( var_3 in level.teamnamelist )
        {
            if ( scripts\mp\utility\teams::getteamcount( var_3 ) > 4 )
            {
                var_1 = 0;
                break;
            }
        }

        setdvar( "OLMLQMOSRL", var_1 );
    }
}

onjoinedteam()
{
    level endon( "game_ended" );

    for (;;)
    {
        scripts\engine\utility::_id_143A5( "joined_team", "joined_spectators" );
        _id_131CB();
    }
}

onspawnplayer()
{
    thread onspawnfinished();
    level notify( "spawned_player" );
    thread updatematchstatushintonspawn();
    scripts\mp\menus::updatesquadomnvars( self.team, self.squadindex );
}

onspawnfinished()
{
    self endon( "death_or_disconnect" );

    if ( istrue( game["practiceRound"] ) || istrue( level.brmissionscompleted ) )
        thread _id_13441();

    thread damagewatcher();

    if ( !isnormalloadouts() )
    {
        self waittill( "giveLoadout" );
        runarenaloadoutrulesonplayer();
    }

    thread modifyblastshieldperk();

    if ( level.calloutmarkerpingvo_doesoperatorsupportalias )
        scripts\mp\utility\perk::giveperk( "specialty_quickswap" );

    wait 0.1;
    self.hasarenaspawned = 1;
    wait 0.15;

    if ( !scripts\mp\flags::gameflag( "prematch_done" ) && game["roundsPlayed"] == 0 )
    {
        if ( level.spawnflag && isdefined( level.matchcountdowntime ) && level.matchcountdowntime > 5 )
        {
            if ( !self issplitscreenplayer() || self issplitscreenplayerprimary() )
                scripts\mp\utility\dialog::leaderdialogonplayer( "obj_indepth", "introboost" );
        }

        level scripts\engine\utility::_id_143A5( "prematch_done", "removeArenaOutlines" );
    }

    self setclientomnvar( "ui_player_notify_loadout", gettime() );
}

_id_131CB( var_0 )
{
    var_1 = getdvarint( "scr_player_maxhealth", 100 );
    var_2 = scripts\mp\utility\teams::getteamdata( "allies", "teamCount" );

    if ( var_2 )
    {
        level.alliesmaxhealth = scripts\mp\utility\teams::getteamdata( "allies", "teamCount" ) * var_1;
        setomnvar( "ui_arena_allies_health_max", level.alliesmaxhealth );

        if ( !istrue( var_0 ) && !scripts\mp\utility\player::isreallyalive( self ) && scripts\mp\playerlogic::mayspawn() )
            self waittill( "spawned_player" );

        var_3 = 0;

        foreach ( var_5 in scripts\mp\utility\teams::getteamdata( "allies", "players" ) )
            var_3 = var_3 + var_5.health;

        level.allieshealth = var_3;

        if ( level.allieshealth < 0 )
            level.allieshealth = 0;

        setomnvar( "ui_arena_allies_health", level.allieshealth );
    }
    else
        setomnvar( "ui_arena_allies_health", 0 );

    var_7 = scripts\mp\utility\teams::getteamdata( "axis", "teamCount" );

    if ( var_7 )
    {
        level.axismaxhealth = scripts\mp\utility\teams::getteamdata( "axis", "teamCount" ) * var_1;
        setomnvar( "ui_arena_axis_health_max", level.axismaxhealth );

        if ( !istrue( var_0 ) && !scripts\mp\utility\player::isreallyalive( self ) && scripts\mp\playerlogic::mayspawn() )
            self waittill( "spawned_player" );

        var_8 = 0;

        foreach ( var_5 in scripts\mp\utility\teams::getteamdata( "axis", "players" ) )
            var_8 = var_8 + var_5.health;

        level.axishealth = var_8;

        if ( level.axishealth < 0 )
            level.axishealth = 0;

        setomnvar( "ui_arena_axis_health", level.axishealth );
    }
    else
        setomnvar( "ui_arena_axis_health", 0 );
}

modifyblastshieldperk()
{
    var_0 = scripts\mp\utility\dvars::dvarintvalue( "blastShieldMod", 65, 0, 100 ) / 100;

    if ( var_0 == 0 )
        scripts\mp\utility\perk::removeperk( "specialty_blastshield" );
}

onplayerdamaged( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 )
{
    if ( isdefined( var_1 ) && var_1 != var_2 && isplayer( var_1 ) )
    {
        if ( istrue( level._id_1343F ) && ( var_6.basename == "snowball_mp" || var_6.basename == "pball_mp" ) )
            playfxontagforclients( level._id_13443["screen"], var_2, "tag_eye", var_2 );

        if ( var_3 >= var_7 )
            var_3 = var_7;

        var_1.arenadamage = var_1.arenadamage + var_3;
        var_1 scripts\mp\persistence::statsetchild( "round", "damage", var_1.pers["damage"] );
        var_1 scripts\mp\utility\stats::setextrascore0( var_1.pers["damage"] );
    }
}

damagewatcher()
{
    self notify( "startDamageWatcher" );
    self endon( "startDamageWatcher" );
    level endon( "game_ended" );
    self endon( "disconnect" );
    self.totaldamagetaken = 0;

    for (;;)
    {
        scripts\engine\utility::_id_143AA( "damage", "force_regeneration", "removeAdrenaline", "healed", "healhRegenThink", "vampirism", "spawned_player" );

        if ( self.team == "allies" )
        {
            var_0 = 0;

            foreach ( var_2 in scripts\mp\utility\teams::getteamdata( "allies", "players" ) )
                var_0 = var_0 + var_2.health;

            level.allieshealth = var_0;

            if ( level.allieshealth < 0 )
                level.allieshealth = 0;

            setomnvar( "ui_arena_allies_health", level.allieshealth );
        }
        else
        {
            var_4 = 0;

            foreach ( var_2 in scripts\mp\utility\teams::getteamdata( "axis", "players" ) )
                var_4 = var_4 + var_2.health;

            level.axishealth = var_4;

            if ( level.axishealth < 0 )
                level.axishealth = 0;

            setomnvar( "ui_arena_axis_health", level.axishealth );
        }

        if ( istrue( self.iscapturing ) )
        {
            var_7 = undefined;

            if ( level.objmodifier == 1 )
            {
                if ( self.team == game["defenders"] )
                {
                    level.attackerendzone.curprogress = 50;
                    level.attackerendzone.teamprogress[self.team] = 50;
                    var_7 = level.attackerendzone;
                }
                else if ( self.team == game["attackers"] )
                {
                    level.defenderendzone.curprogress = 50;
                    level.defenderendzone.teamprogress[self.team] = 50;
                    var_7 = level.defenderendzone;
                }

                scripts\mp\objidpoolmanager::objective_set_progress( var_7.objidnum, var_7.curprogress / var_7.usetime );
            }
        }
    }
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    scripts\mp\gametypes\common.gsc::oncommonnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 );

    if ( !isnormalloadouts() )
    {
        if ( isbot( var_0 ) )
            var_0.classcallback = "gamemode";
    }

    if ( game["state"] == "postgame" )
        var_1.finalkill = 1;
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    scripts\mp\menus::updatesquadomnvars( self.team, self.squadindex );

    if ( !isnormalloadouts() )
    {
        if ( isbot( self ) )
            self.classcallback = "gamemode";
    }

    if ( isdefined( var_1 ) && ( var_4.basename == "snowball_mp" || var_4.basename == "pball_mp" ) )
        var_1 thread scripts\mp\utility\points::giveunifiedpoints( "snowball_kill" );

    thread checkallowspectating();
}

checkallowspectating()
{
    waitframe();
    var_0 = 0;

    if ( !scripts\mp\utility\teams::getteamdata( game["attackers"], "aliveCount" ) )
    {
        level.spectateoverride[game["attackers"]].allowenemyspectate = 1;
        var_0 = 1;
    }

    if ( !scripts\mp\utility\teams::getteamdata( game["defenders"], "aliveCount" ) )
    {
        level.spectateoverride[game["defenders"]].allowenemyspectate = 1;
        var_0 = 1;
    }

    if ( var_0 )
        scripts\mp\spectating::updatespectatesettings();
}

ontimelimit()
{
    if ( level.gameended )
        return;

    physics_raycastents( scripts\mp\gamelogic::gettimeremaining(), 3 );

    if ( level.wincondition == 1 )
        checkliveswinner();
    else if ( level.wincondition == 2 )
        checkhealthwinner();
    else
        checkhealthwinner();
}

ontimelimitot()
{
    physics_raycastents( scripts\mp\gamelogic::gettimeremaining(), 1 );
    level thread startotmechanics();
}

checkliveswinner()
{
    if ( scripts\mp\utility\teams::getteamdata( "allies", "aliveCount" ) > scripts\mp\utility\teams::getteamdata( "axis", "aliveCount" ) )
    {
        game["dialog"]["round_success"] = "gamestate_win_health";
        game["dialog"]["round_failure"] = "gamestate_lost_health";
        thread arena_endgame( "allies", game["end_reason"]["arena_time_lives_win"], game["end_reason"]["arena_time_lives_loss"] );
    }
    else if ( scripts\mp\utility\teams::getteamdata( "axis", "aliveCount" ) > scripts\mp\utility\teams::getteamdata( "allies", "aliveCount" ) )
    {
        game["dialog"]["round_success"] = "gamestate_win_health";
        game["dialog"]["round_failure"] = "gamestate_lost_health";
        thread arena_endgame( "axis", game["end_reason"]["arena_time_lives_win"], game["end_reason"]["arena_time_lives_loss"] );
    }
    else
        checkhealthwinner();
}

checkhealthwinner()
{
    if ( level.axishealth < level.allieshealth )
    {
        game["dialog"]["round_success"] = "gamestate_win_health";
        game["dialog"]["round_failure"] = "gamestate_lost_health";
        thread arena_endgame( "allies", game["end_reason"]["arena_time_health_win"], game["end_reason"]["arena_time_health_loss"] );
    }
    else if ( level.allieshealth < level.axishealth )
    {
        game["dialog"]["round_success"] = "gamestate_win_health";
        game["dialog"]["round_failure"] = "gamestate_lost_health";
        thread arena_endgame( "axis", game["end_reason"]["arena_time_health_win"], game["end_reason"]["arena_time_health_loss"] );
    }
    else if ( scripts\mp\utility\game::matchmakinggame() )
    {
        if ( dotournamentendgame() )
        {
            game["canScoreOnTie"] = 1;

            if ( game["finalRound"] == 1 )
            {
                game["canScoreOnTie"] = 0;

                if ( !isdefined( game["roundsTied"] ) )
                    game["roundsTied"] = 1;
                else
                    game["roundsTied"]++;

                if ( game["roundsTied"] >= 2 )
                {
                    var_0 = scripts\mp\gamelogic::getbetterteam();
                    thread scripts\mp\gamelogic::endgame( var_0, game["end_reason"]["arena_tournament_tie_win"], game["end_reason"]["arena_tournament_tie_loss"] );
                }
                else
                    thread arena_endgame( "tie", game["end_reason"]["time_limit_reached"] );
            }
            else
                thread arena_endgame( "tie", game["end_reason"]["cyber_tie"] );
        }
        else
        {
            if ( !isdefined( game["roundsTied"] ) )
                game["roundsTied"] = 1;
            else
                game["roundsTied"]++;

            game["canScoreOnTie"] = game["roundsTied"] >= 2;

            if ( game["canScoreOnTie"] )
                thread arena_endgame( "tie", game["end_reason"]["cyber_tie"] );
            else
                thread arena_endgame( "tie", game["end_reason"]["time_limit_reached"] );
        }
    }
    else
        thread arena_endgame( "tie", game["end_reason"]["time_limit_reached"] );
}

ondeadevent( var_0 )
{
    if ( var_0 == game["attackers"] )
        level thread arena_endgame( game["defenders"], game["end_reason"][tolower( game[game["attackers"]] ) + "_eliminated"] );
    else if ( var_0 == game["defenders"] )
        level thread arena_endgame( game["attackers"], game["end_reason"][tolower( game[game["defenders"]] ) + "_eliminated"] );
}

ontimelimitdeadevent( var_0 )
{

}

checkshouldallowtradekilltie( var_0 )
{
    var_1 = [];

    foreach ( var_3 in level.teamnamelist )
        var_1[var_3] = 0;

    foreach ( var_6 in level.players )
    {
        if ( !istrue( var_6.hasspawned ) || var_6.team == "spectator" || var_6.team == "follower" )
            continue;

        var_1[var_6.team] = var_1[var_6.team] + var_6.pers["lives"];
    }

    var_8 = 0;

    foreach ( var_3 in level.teamnamelist )
    {
        if ( scripts\mp\utility\teams::getteamdata( var_3, "aliveCount" ) )
        {
            var_8 = 1;
            break;
        }
    }

    var_11 = 0;

    foreach ( var_13 in var_1 )
    {
        if ( var_13 )
        {
            var_11 = 1;
            break;
        }
    }

    if ( !var_8 && !var_11 )
        return "tie";

    foreach ( var_3 in level.teamnamelist )
    {
        if ( !scripts\mp\utility\teams::getteamdata( var_3, "aliveCount" ) && !var_1[var_3] )
        {
            if ( level.multiteambased )
            {
                if ( !scripts\mp\utility\teams::getteamdata( var_3, "deathEvent" ) && scripts\mp\utility\teams::getteamdata( var_3, "hasSpawned" ) )
                {
                    scripts\mp\utility\teams::setteamdata( var_3, "deathEvent", 1 );
                    return var_0;
                }
            }
            else
                return var_0;
        }
    }

    foreach ( var_3 in level.teamnamelist )
    {
        var_18 = scripts\mp\utility\teams::getteamdata( var_3, "aliveCount" ) == 1;

        if ( var_18 )
        {
            var_19 = 0;
            var_20 = undefined;
            var_21 = scripts\mp\utility\teams::getteamdata( var_3, "players" );

            foreach ( var_6 in var_21 )
            {
                if ( !isalive( var_6 ) )
                    var_19 = var_19 + var_6.pers["lives"];
            }

            if ( var_19 == 0 )
            {
                if ( !scripts\mp\utility\teams::getteamdata( var_3, "oneLeft" ) && gettime() > scripts\mp\utility\teams::getteamdata( var_3, "oneLeftTime" ) + 5000 )
                {
                    scripts\mp\utility\teams::setteamdata( var_3, "oneLeftTime", gettime() );
                    scripts\mp\utility\teams::setteamdata( var_3, "oneLeft", 1 );

                    if ( var_21.size > 1 )
                        return var_0;
                }
            }

            continue;
        }

        scripts\mp\utility\teams::setteamdata( var_3, "oneLeft", 0 );
    }

    return var_0;
}

arena_endgame( var_0, var_1, var_2, var_3, var_4 )
{
    if ( var_0 != "tie" )
    {
        if ( istrue( level.nukeincoming ) )
            return;

        waittillframeend;
        var_0 = checkshouldallowtradekilltie( var_0 );
    }

    if ( isgungameloadouts() || isrvsgungameloadouts() )
        level setenemyloadoutomnvarsatmatchend( var_0 );

    if ( var_0 != "tie" )
    {
        game["roundsTied"] = 0;
        game["previousWinningTeam"] = var_0;

        foreach ( var_6 in level.teamnamelist )
        {
            if ( var_6 == var_0 )
            {
                game["roundWinStreak"][var_0]++;
                continue;
            }

            game["roundWinStreak"][var_6] = 0;
        }

        if ( !scripts\mp\utility\game::iswinbytworulegametype() )
        {
            switch ( game["roundWinStreak"][var_0] )
            {
                case 2:
                    game["dialog"]["round_success"] = "round_win_streak_2";
                    break;
                case 3:
                    game["dialog"]["round_success"] = "round_win_streak_3";
                    break;
                case 4:
                    game["dialog"]["round_success"] = "round_win_streak_4";
                    break;
                case 5:
                    var_8 = scripts\mp\utility\game::getroundswon( var_0 );
                    var_9 = scripts\mp\utility\dvars::getwatcheddvar( "winlimit" );

                    if ( var_9 == 6 && var_8 != var_9 - 1 )
                        game["dialog"]["round_success"] = "round_win_streak_5";

                    break;
                default:
                    break;
            }
        }

        if ( game["finalRound"] == 1 )
        {
            if ( game["roundWinStreak"][var_0] > 3 )
                game["dialog"]["mission_success"] = "gamestate_win_comeback";
        }
    }
    else
        game["previousWinningTeam"] = "";

    scripts\cp_mp\pet_watch::_id_13FBD();
    thread scripts\mp\gamelogic::endgame( var_0, var_1, var_2, var_3, var_4 );
}

setroundwinstreakarray()
{
    foreach ( var_1 in level.teamnamelist )
        game["roundWinStreak"][var_1] = 0;
}

_id_12043( var_0 )
{
    if ( istrue( game["pingEnabled"] ) )
    {
        var_1 = 1;

        foreach ( var_3 in level.teamnamelist )
        {
            if ( scripts\mp\utility\teams::getteamcount( var_3 ) > 4 )
            {
                var_1 = 0;
                break;
            }
        }

        setdvar( "OLMLQMOSRL", var_1 );
    }
}

runarenaloadoutrulesonplayer()
{
    if ( israndomloadouts() || israndompreviewloadouts() || usb_right() || usb_tape_animation_test() )
    {
        if ( israndompreviewloadouts() )
        {
            if ( self.pers["gamemodeLoadout"]["loadoutSecondary"] == "none" )
                scripts\cp_mp\utility\inventory_utility::_takeweapon( "iw8_fists_mp" );
        }
    }
    else if ( ispickuploadouts() )
    {
        if ( game["roundsPlayed"] == 0 )
            wait 0.1;
        else
            wait 0.25;

        if ( level.takefists )
            scripts\cp_mp\utility\inventory_utility::_takeweapon( "iw8_fists_mp" );
    }
}

updatehighpriorityweapons()
{
    self loadweaponsforplayer( level.loadweapons, 1 );
}

buildloadoutsforweaponstreaming()
{
    level.loadweapons = [];
    level.takefists = 0;

    if ( ispickuploadouts() )
    {
        if ( level.startweapon.weapon == "none" )
        {
            var_0 = "iw8_fists_mp";
            var_1 = getcompleteweaponname( var_0 );
            var_0 = createheadicon( var_1 );
        }
        else if ( issubstr( level.startweapon.weapon, "equip" ) )
        {
            var_0 = "iw8_fists_mp";
            var_1 = getcompleteweaponname( var_0 );
            var_0 = createheadicon( var_1 );
        }
        else
        {
            var_2 = scripts\mp\utility\weapon::getweaponrootname( level.startweapon.weapon );
            var_3 = [];
            var_4 = "none";
            var_5 = "none";
            var_6 = undefined;
            var_7 = undefined;
            var_8 = undefined;
            var_9 = undefined;

            if ( istrue( level._id_136CB ) )
            {
                var_4 = game["arenaRandomLoadout"][0]["loadoutPrimaryCamo"];
                var_8 = game["arenaRandomLoadout"][0]["loadoutPrimaryCosmeticAttachment"];
                var_9[0] = game["arenaRandomLoadout"][0]["loadoutPrimarySticker"];
                var_9[1] = game["arenaRandomLoadout"][0]["loadoutPrimarySticker1"];
                var_9[2] = game["arenaRandomLoadout"][0]["loadoutPrimarySticker2"];
                var_9[3] = game["arenaRandomLoadout"][0]["loadoutPrimarySticker3"];
            }
            else if ( istrue( level.setplayerselfrevivingextrainfo ) )
            {
                var_4 = game["arenaRandomLoadout"][0]["loadoutPrimaryCamo"];
                var_8 = game["arenaRandomLoadout"][0]["loadoutPrimaryCosmeticAttachment"];
                var_9[0] = game["arenaRandomLoadout"][0]["loadoutPrimarySticker"];
                var_9[1] = game["arenaRandomLoadout"][0]["loadoutPrimarySticker1"];
                var_9[2] = game["arenaRandomLoadout"][0]["loadoutPrimarySticker2"];
                var_9[3] = game["arenaRandomLoadout"][0]["loadoutPrimarySticker3"];
            }

            if ( updatec4vehiclemultkill() )
                var_1 = scripts\mp\class::fixcollision( var_2, var_4, var_5, level.startweapon.variantid, var_7, var_8, var_9 );
            else
                var_1 = scripts\mp\class::buildweapon( var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );

            var_0 = createheadicon( var_1 );
            level.takefists = 1;
        }

        level.loadweapons[level.loadweapons.size] = var_1;
    }
    else
    {
        var_10 = [];
        var_11 = [];
        var_12 = game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]];
        var_13 = var_12["loadoutPrimary"];
        var_14 = var_12["loadoutSecondary"];

        if ( var_13 != "none" )
            var_10[var_10.size] = buildprimaries( var_13, var_12, 1 );

        if ( var_14 != "none" )
            var_11[var_11.size] = buildsecondaries( var_14, var_12, 1 );

        if ( level.loadoutchangeround != 0 )
        {
            var_15 = game["arenaRandomLoadoutIndex"] + 1;

            if ( game["arenaRandomLoadoutIndex"] == game["arenaRandomLoadout"].size - 1 )
                var_15 = 0;

            var_16 = game["arenaRandomLoadout"][var_15];
            var_17 = var_16["loadoutPrimary"];
            var_18 = var_16["loadoutSecondary"];

            if ( var_17 != "none" )
                var_10[var_10.size] = buildprimaries( var_17, var_16 );

            if ( var_18 != "none" )
                var_11[var_11.size] = buildsecondaries( var_18, var_16 );
        }

        level.loadweapons = scripts\engine\utility::array_combine( var_10, var_11 );
    }
}

buildprimaries( var_0, var_1, var_2 )
{
    var_3 = [];

    for ( var_4 = 1; var_4 < 6; var_4++ )
    {
        var_5 = var_4;

        if ( var_4 == 1 )
            var_5 = "";

        var_6 = var_1["loadoutPrimaryAttachment" + var_5];

        if ( var_6 != "none" )
            var_3[var_3.size] = var_6;
    }

    var_7 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    var_8 = "none";
    var_9 = "none";
    var_10 = undefined;
    var_11 = undefined;
    var_12 = undefined;
    var_13 = undefined;

    if ( istrue( level._id_136CB ) && istrue( var_2 ) )
    {
        var_8 = rotate_silo_gyro_lights();
        game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutPrimaryCamo"] = var_8;

        if ( _id_140DC( var_0 ) )
        {
            var_12 = rotateeffect();
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutPrimaryCosmeticAttachment"] = var_12;
        }

        if ( _id_140DD( var_0 ) )
        {
            var_13 = rotateplayer();
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutPrimarySticker"] = var_13[0];
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutPrimarySticker1"] = var_13[1];
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutPrimarySticker2"] = var_13[2];
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutPrimarySticker3"] = var_13[3];
        }
    }
    else if ( istrue( level.setplayerselfrevivingextrainfo ) )
    {
        var_8 = rotate_silo_gyro_lights();
        game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutPrimaryCamo"] = var_8;

        if ( _id_140DC( var_0 ) )
        {
            var_12 = rotateeffect();
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutPrimaryCosmeticAttachment"] = var_12;
        }

        if ( _id_140DD( var_0 ) )
        {
            var_13 = rotateplayer();
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutPrimarySticker"] = var_13[0];
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutPrimarySticker1"] = var_13[1];
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutPrimarySticker2"] = var_13[2];
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutPrimarySticker3"] = var_13[3];
        }
    }

    var_14 = scripts\mp\class::buildweapon( var_7, var_3, var_8, var_9, var_10, var_11, var_12, var_13 );
    var_15 = createheadicon( var_14 );
    return var_15;
}

buildsecondaries( var_0, var_1, var_2 )
{
    var_3 = [];

    for ( var_4 = 1; var_4 < 6; var_4++ )
    {
        var_5 = var_4;

        if ( var_4 == 1 )
            var_5 = "";

        var_6 = var_1["loadoutSecondaryAttachment" + var_5];

        if ( var_6 != "none" )
            var_3[var_3.size] = var_6;
    }

    var_7 = "none";
    var_8 = "none";
    var_9 = undefined;
    var_10 = undefined;
    var_11 = undefined;
    var_12 = undefined;

    if ( istrue( level._id_136CB ) && istrue( var_2 ) )
    {
        var_7 = rotate_silo_gyro_lights();
        game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutSecondaryCamo"] = var_7;

        if ( _id_140DC( var_0 ) )
        {
            var_11 = rotateeffect();
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutSecondaryCosmeticAttachment"] = var_11;
        }

        if ( _id_140DD( var_0 ) )
        {
            var_12 = rotateplayer();
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutSecondarySticker"] = var_12[0];
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutSecondarySticker1"] = var_12[1];
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutSecondarySticker2"] = var_12[2];
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutSecondarySticker3"] = var_12[3];
        }
    }
    else if ( istrue( level.setplayerselfrevivingextrainfo ) && istrue( var_2 ) )
    {
        var_7 = rotate_silo_gyro_lights();
        game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutSecondaryCamo"] = var_7;

        if ( _id_140DC( var_0 ) )
        {
            var_11 = rotateeffect();
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutSecondaryCosmeticAttachment"] = var_11;
        }

        if ( _id_140DD( var_0 ) )
        {
            var_12 = rotateplayer();
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutSecondarySticker"] = var_12[0];
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutSecondarySticker1"] = var_12[1];
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutSecondarySticker2"] = var_12[2];
            game["arenaRandomLoadout"][game["arenaRandomLoadoutIndex"]]["loadoutSecondarySticker3"] = var_12[3];
        }
    }

    var_13 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    var_14 = scripts\mp\class::buildweapon( var_13, var_3, var_7, var_8 );
    var_15 = createheadicon( var_14 );
    return var_15;
}

rotate_silo_gyro_lights()
{
    var_0 = "none";

    if ( istrue( level.calloutmarkerpingvo_getcalloutaliasstringworld ) )
    {
        var_1 = [ "camo_06g", "camo_07i", "camo_08j", "camo_10i", "camo_10j", "camo_07i" ];
        var_0 = scripts\engine\utility::random( var_1 );
    }
    else if ( istrue( level.calloutmarkerpingvo_getcalloutaliasstringloot ) )
    {
        var_1 = [ "camo_03j", "camo_05b", "camo_05b", "camo_09i" ];
        var_0 = scripts\engine\utility::random( var_1 );
    }
    else if ( istrue( level.setplayerselfrevivingextrainfo ) )
    {
        var_1 = [ "camo_05h", "camo_08b", "camo_08g", "camo_09j", "camo_10c", "camo_10g", "camo_10h", "camo_10i", "camo_10j" ];
        var_0 = scripts\engine\utility::random( var_1 );
    }

    return var_0;
}

_id_140DC( var_0 )
{
    var_1 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    return var_1 != "iw8_me_riotshield" && var_1 != "iw8_knife" && var_1 != "iw8_fists" && var_1 != "iw8_fists_mp" && var_1 != "iw8_me_akimboblades" && var_1 != "iw8_me_akimboblunt" && var_1 != "iw8_gunless" && var_1 != "iw8_la_gromeo" && var_1 != "iw8_la_t9standard_mp" && var_1 != "iw8_la_mike32" && var_1 != "iw8_la_t9launcher_mp" && var_1 != "iw8_la_juliet" && var_1 != "iw8_la_kgolf";
}

_id_140DD( var_0 )
{
    return var_0 != "iw8_knife_mp" && var_0 != "iw8_me_akimboblades_mp" && var_0 != "iw8_me_akimboblunt_mp";
}

rotateeffect()
{
    var_0 = "none";

    if ( istrue( level.calloutmarkerpingvo_getcalloutaliasstringworld ) )
    {
        var_1 = [ "cos_032", "cos_285", "cos_053", "cos_299" ];
        var_0 = scripts\engine\utility::random( var_1 );
    }
    else if ( istrue( level.calloutmarkerpingvo_getcalloutaliasstringloot ) )
    {
        var_1 = [ "cos_291", "cos_292", "cos_293", "cos_146" ];
        var_0 = scripts\engine\utility::random( var_1 );
    }
    else if ( istrue( level.setplayerselfrevivingextrainfo ) )
    {
        var_1 = [ "cos_381", "cos_379", "cos_393", "cos_380", "cos_365", "cos_357", "cos_355", "cos_232", "cos_026", "cos_030", "cos_223" ];
        var_0 = scripts\engine\utility::random( var_1 );
    }

    return var_0;
}

rotateplayer()
{
    var_0 = [];

    if ( istrue( level.calloutmarkerpingvo_getcalloutaliasstringworld ) )
    {
        var_1 = [ "i/sticker_211", "i/sticker_212", "i/sticker_101", "i/sticker_134" ];
        var_0[var_0.size] = scripts\engine\utility::random( var_1 );
        var_0[var_0.size] = scripts\engine\utility::random( var_1 );
        var_0[var_0.size] = scripts\engine\utility::random( var_1 );
        var_0[var_0.size] = scripts\engine\utility::random( var_1 );
    }
    else if ( istrue( level.calloutmarkerpingvo_getcalloutaliasstringloot ) )
    {
        var_1 = [ "i/sticker_246", "i/sticker_199", "i/sticker_202" ];
        var_0[var_0.size] = scripts\engine\utility::random( var_1 );
        var_0[var_0.size] = scripts\engine\utility::random( var_1 );
        var_0[var_0.size] = scripts\engine\utility::random( var_1 );
        var_0[var_0.size] = scripts\engine\utility::random( var_1 );
    }
    else if ( istrue( level.setplayerselfrevivingextrainfo ) )
    {
        var_1 = [ "i/sticker_372", "i/sticker_253", "i/sticker_373", "i/sticker_182", "i/sticker_233", "i/sticker_273", "i/sticker_245", "i/sticker_239", "i/sticker_248", "i/sticker_200", "i/sticker_118", "i/sticker_029" ];
        var_0[var_0.size] = scripts\engine\utility::random( var_1 );
        var_0[var_0.size] = scripts\engine\utility::random( var_1 );
        var_0[var_0.size] = scripts\engine\utility::random( var_1 );
        var_0[var_0.size] = scripts\engine\utility::random( var_1 );
    }

    return var_0;
}

_id_13272()
{
    level.arenaweapont1 = fix_collisiontwo( level.arenaweapont1 );
    level.arenaweapont2 = fix_collisiontwo( level.arenaweapont2 );
    level.arenaweapont3 = fix_collisiontwo( level.arenaweapont3 );
    level.arenaweapont4 = fix_collisiontwo( level.arenaweapont4 );
    level.arenaweapont5 = fix_collisiontwo( level.arenaweapont5 );
    level.arenaweapont6 = fix_collisiontwo( level.arenaweapont6 );
    level.arenaweapont7 = fix_collisiontwo( level.arenaweapont7 );
    level.arenaweapont8 = fix_collisiontwo( level.arenaweapont8 );
}

fix_collisiontwo( var_0 )
{
    var_0.weapon = var_0.weapon;

    if ( !issubstr( var_0.weapon, "equip" ) && var_0.weapon != "none" )
    {
        var_1 = [];
        var_2 = "none";
        var_3 = "none";
        var_4 = undefined;
        var_5 = undefined;
        var_6 = undefined;
        var_7 = [];
        var_7[0] = "none";
        var_7[1] = "none";
        var_7[2] = "none";
        var_7[3] = "none";
        var_8 = scripts\mp\utility\weapon::getweaponrootname( var_0.weapon );
        var_2 = rotate_silo_gyro_lights();
        var_0.gasfx = var_2;

        if ( _id_140DC( var_0.weapon ) )
        {
            var_6 = rotateeffect();
            var_0.impactfunc_explo = var_6;
        }

        if ( _id_140DD( var_0.weapon ) )
        {
            var_7 = rotateplayer();
            var_0._id_138A8[0] = var_7[0];
            var_0._id_138A8[1] = var_7[1];
            var_0._id_138A8[2] = var_7[2];
            var_0._id_138A8[3] = var_7[3];
        }

        var_0.weaponobj = scripts\mp\class::buildweapon( var_8, var_1, var_2, var_3, var_4, var_5, var_6, var_7 );
    }

    return var_0;
}

_id_13227()
{
    level.arenaweapont1 = fireoffsplashforplayer( level.arenaweapont1 );
    level.arenaweapont2 = fireoffsplashforplayer( level.arenaweapont2 );
    level.arenaweapont3 = fireoffsplashforplayer( level.arenaweapont3 );
    level.arenaweapont4 = fireoffsplashforplayer( level.arenaweapont4 );
    level.arenaweapont5 = fireoffsplashforplayer( level.arenaweapont5 );
    level.arenaweapont6 = fireoffsplashforplayer( level.arenaweapont6 );
    level.arenaweapont7 = fireoffsplashforplayer( level.arenaweapont7 );
    level.arenaweapont8 = fireoffsplashforplayer( level.arenaweapont8 );
}

fireoffsplashforplayer( var_0 )
{
    var_0.weapon = var_0.weapon;

    if ( !issubstr( var_0.weapon, "equip" ) && var_0.weapon != "none" )
    {
        var_1 = [];
        var_2 = "none";
        var_3 = "none";
        var_4 = var_0.variantid;
        var_5 = undefined;
        var_6 = undefined;
        var_7 = [];
        var_7[0] = "none";
        var_7[1] = "none";
        var_7[2] = "none";
        var_7[3] = "none";
        var_8 = scripts\mp\utility\weapon::getweaponrootname( var_0.weapon );
        var_0.weaponobj = scripts\mp\class::fixcollision( var_8, undefined, undefined, var_4, undefined, undefined, scripts\cp_mp\utility\game_utility::isnightmap() );
    }

    return var_0;
}

_id_13274()
{
    level.startweapon = _id_13280( level.startweapon );
    level.arenaweapont1 = _id_13280( level.arenaweapont1 );
    level.arenaweapont2 = _id_13280( level.arenaweapont2 );
    level.arenaweapont3 = _id_13280( level.arenaweapont3 );
    level.arenaweapont4 = _id_13280( level.arenaweapont4 );
    level.arenaweapont5 = _id_13280( level.arenaweapont5 );
    level.arenaweapont6 = _id_13280( level.arenaweapont6 );
    level.arenaweapont7 = _id_13280( level.arenaweapont7 );
    level.arenaweapont8 = _id_13280( level.arenaweapont8 );
}

_id_13280( var_0 )
{
    var_0.weapon = var_0.weapon;

    if ( !issubstr( var_0.weapon, "equip" ) && var_0.weapon != "none" )
    {
        var_1 = [];
        var_2 = "none";
        var_3 = "none";
        var_4 = undefined;
        var_5 = scripts\mp\utility\weapon::getweaponrootname( var_0.weapon );
        var_1 = registerdonetskmap( var_5 + "_mp" );
        var_0.weaponobj = scripts\mp\class::buildweapon( var_5, var_1, var_2, var_3, var_4 );
    }

    return var_0;
}

registerlocation( var_0 )
{
    var_1 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    var_2 = registerdonetskmap( var_1 + "_mp" );
    return var_2;
}

defineplayerloadout( var_0 )
{
    var_1 = [];
    var_1[0] = "none";
    var_1[1] = "none";
    var_1[2] = "none";
    var_1[3] = "none";
    var_1[4] = "none";
    var_2 = "none";
    var_3 = "none";
    var_4 = 0;
    var_5 = undefined;
    var_6 = undefined;
    var_7 = [];
    var_7[0] = "none";
    var_7[1] = "none";
    var_7[2] = "none";
    var_7[3] = "none";
    var_8 = [ "specialty_blastshield" ];
    var_9 = "none";
    var_10 = "none";

    if ( isdefined( level.startweapon.weapon ) && level.startweapon.weapon != "none" && !issubstr( level.startweapon.weapon, "equip" ) )
    {
        var_11 = scripts\mp\utility\weapon::getweaponrootname( level.startweapon.weapon );

        if ( updatec4vehiclemultkill() )
            var_4 = level.startweapon.variantid;

        if ( istrue( level._id_136CB ) )
        {
            var_2 = rotate_silo_gyro_lights();
            game["arenaRandomLoadout"][0]["loadoutPrimaryCamo"] = var_2;

            if ( _id_140DC( level.startweapon.weapon ) )
            {
                var_6 = rotateeffect();
                game["arenaRandomLoadout"][0]["loadoutPrimaryCosmeticAttachment"] = var_6;
            }

            if ( _id_140DD( level.startweapon.weapon ) )
            {
                var_7 = rotateplayer();
                game["arenaRandomLoadout"][0]["loadoutPrimarySticker"] = var_7[0];
                game["arenaRandomLoadout"][0]["loadoutPrimarySticker1"] = var_7[1];
                game["arenaRandomLoadout"][0]["loadoutPrimarySticker2"] = var_7[2];
                game["arenaRandomLoadout"][0]["loadoutPrimarySticker3"] = var_7[3];
            }
        }
        else if ( istrue( level.setplayerselfrevivingextrainfo ) )
        {
            var_2 = rotate_silo_gyro_lights();
            game["arenaRandomLoadout"][0]["loadoutPrimaryCamo"] = var_2;

            if ( _id_140DC( level.startweapon.weapon ) )
            {
                var_6 = rotateeffect();
                game["arenaRandomLoadout"][0]["loadoutPrimaryCosmeticAttachment"] = var_6;
            }

            if ( _id_140DD( level.startweapon.weapon ) )
            {
                var_7 = rotateplayer();
                game["arenaRandomLoadout"][0]["loadoutPrimarySticker"] = var_7[0];
                game["arenaRandomLoadout"][0]["loadoutPrimarySticker1"] = var_7[1];
                game["arenaRandomLoadout"][0]["loadoutPrimarySticker2"] = var_7[2];
                game["arenaRandomLoadout"][0]["loadoutPrimarySticker3"] = var_7[3];
            }
        }
        else if ( !istrue( var_0 ) )
            var_1 = registerlocation( level.startweapon.weapon );
    }
    else
    {
        var_11 = "none";

        if ( issubstr( level.startweapon.weapon, "equip" ) )
        {
            if ( validateevents( level.startweapon.weapon ) )
            {
                var_8[var_8.size] = "specialty_extra_deadly";

                if ( level.calloutmarkerpingvo_doesoperatorsupportalias )
                {
                    var_8[var_8.size] = "specialty_restock";

                    if ( level.calloutmarkerpingvo_doesoperatorsupportalias == 2 )
                    {
                        var_12 = scripts\engine\utility::ter_op( usb_right(), "mp/classtable_arena_blueprints.csv", "mp/classTable_arena.csv" );
                        var_4 = int( scripts\mp\gametypes\gun.gsc::remappedhpzoneorder( "iw8_knife" ) );

                        if ( var_4 != 0 )
                            setomnvar( "ui_arena_primaryVariantID", var_4 );

                        var_11 = "iw8_knife";
                    }
                }
            }

            var_13 = scripts\mp\equipment::getdefaultslot( level.startweapon.weapon );

            if ( var_13 == "primary" )
                var_9 = level.startweapon.weapon;
            else
                var_10 = level.startweapon.weapon;
        }
    }

    if ( level.allowsupers )
    {
        var_14 = scripts\cp_mp\utility\game_utility::getmapname();

        if ( issubstr( var_14, "mp_m_" ) && var_14 != "mp_m_speed" )
            level.calloutmarkerpingvo_getcalloutaliasstringvehicle = player_give_intel_3_ks();
    }
    else
    {
        level.calloutmarkerpingvo_getcalloutaliasstringvehicle = "none";
        setomnvar( "ui_disable_fieldupgrades", 1 );
    }

    level.arena_loadouts["default"]["loadoutArchetype"] = "archetype_assault";
    level.arena_loadouts["default"]["loadoutPrimary"] = var_11;
    level.arena_loadouts["default"]["loadoutPrimaryAttachment"] = var_1[0];
    level.arena_loadouts["default"]["loadoutPrimaryAttachment2"] = var_1[1];
    level.arena_loadouts["default"]["loadoutPrimaryAttachment3"] = var_1[2];
    level.arena_loadouts["default"]["loadoutPrimaryAttachment4"] = var_1[3];
    level.arena_loadouts["default"]["loadoutPrimaryAttachment5"] = var_1[4];
    level.arena_loadouts["default"]["loadoutPrimaryCamo"] = var_2;
    level.arena_loadouts["default"]["loadoutPrimaryCosmeticAttachment"] = var_6;
    level.arena_loadouts["default"]["loadoutPrimaryReticle"] = var_3;
    level.arena_loadouts["default"]["loadoutPrimarySticker"] = var_7[0];
    level.arena_loadouts["default"]["loadoutPrimarySticker1"] = var_7[1];
    level.arena_loadouts["default"]["loadoutPrimarySticker2"] = var_7[2];
    level.arena_loadouts["default"]["loadoutPrimarySticker3"] = var_7[3];
    level.arena_loadouts["default"]["loadoutPrimaryVariantID"] = var_4;
    level.arena_loadouts["default"]["loadoutSecondary"] = "none";
    level.arena_loadouts["default"]["loadoutSecondaryAttachment"] = "none";
    level.arena_loadouts["default"]["loadoutSecondaryAttachment2"] = "none";
    level.arena_loadouts["default"]["loadoutSecondaryAttachment3"] = "none";
    level.arena_loadouts["default"]["loadoutSecondaryAttachment4"] = "none";
    level.arena_loadouts["default"]["loadoutSecondaryAttachment5"] = "none";
    level.arena_loadouts["default"]["loadoutSecondaryCamo"] = "none";
    level.arena_loadouts["default"]["loadoutSecondaryReticle"] = "none";
    level.arena_loadouts["default"]["loadoutSecondarySticker"] = "none";
    level.arena_loadouts["default"]["loadoutSecondarySticker1"] = "none";
    level.arena_loadouts["default"]["loadoutSecondarySticker2"] = "none";
    level.arena_loadouts["default"]["loadoutSecondarySticker3"] = "none";
    level.arena_loadouts["default"]["loadoutSecondaryVariantID"] = -1;
    level.arena_loadouts["default"]["loadoutMeleeSlot"] = "iw8_fists_mp";
    level.arena_loadouts["default"]["loadoutEquipmentPrimary"] = var_9;
    level.arena_loadouts["default"]["loadoutEquipmentSecondary"] = var_10;
    level.arena_loadouts["default"]["loadoutStreakType"] = "assault";
    level.arena_loadouts["default"]["loadoutKillstreak1"] = "none";
    level.arena_loadouts["default"]["loadoutKillstreak2"] = "none";
    level.arena_loadouts["default"]["loadoutKillstreak3"] = "none";
    level.arena_loadouts["default"]["loadoutSuper"] = "none";
    level.arena_loadouts["default"]["loadoutFieldUpgrade1"] = level.calloutmarkerpingvo_getcalloutaliasstringvehicle;
    level.arena_loadouts["default"]["loadoutFieldUpgrade2"] = "none";
    level.arena_loadouts["default"]["loadoutPerks"] = var_8;
    level.arena_loadouts["default"]["loadoutGesture"] = "playerData";
    level.arena_loadouts["default"]["loadoutExecution"] = "playerData";
    level.arena_loadouts["allies"] = level.arena_loadouts["default"];
    level.arena_loadouts["axis"] = level.arena_loadouts["default"];

    if ( !istrue( level._id_136CB ) && !istrue( level.setplayerselfrevivingextrainfo ) )
    {
        foreach ( var_16 in level.teamnamelist )
        {
            level.arena_loadouts[var_16]["loadoutPrimaryCamo"] = _id_131BD();
            level.arena_loadouts[var_16]["loadoutSecondaryCamo"] = _id_131BD();
        }
    }
}

_id_131BD()
{
    var_0 = [ "camo_01a", "camo_01b", "camo_01c", "camo_01d", "camo_01d", "camo_01e", "camo_01f", "camo_01g", "camo_01h", "camo_01i", "camo_01j", "camo_02a", "camo_02b", "camo_02c", "camo_02d", "camo_02d", "camo_02e", "camo_02f", "camo_02g", "camo_02h", "camo_02i", "camo_02j", "camo_03a", "camo_03b", "camo_03c", "camo_03d", "camo_03d", "camo_03e", "camo_03f", "camo_03g", "camo_03h", "camo_03i", "camo_03j", "camo_04a", "camo_04b", "camo_04c", "camo_04d", "camo_04d", "camo_04e", "camo_04f", "camo_04g", "camo_04h", "camo_04i", "camo_04j", "camo_05a", "camo_05b", "camo_05c", "camo_05d", "camo_05d", "camo_05e", "camo_05f", "camo_05g", "camo_05h", "camo_05i", "camo_05j", "camo_06a", "camo_06b", "camo_06c", "camo_06d", "camo_06d", "camo_06e", "camo_06f", "camo_06g", "camo_06h", "camo_06i", "camo_06j", "camo_07a", "camo_07b", "camo_07c", "camo_07d", "camo_07d", "camo_07e", "camo_07f", "camo_07g", "camo_07h", "camo_07i", "camo_07j", "camo_08a", "camo_08b", "camo_08c", "camo_08d", "camo_08d", "camo_08e", "camo_08f", "camo_08g", "camo_08h", "camo_08i", "camo_08j", "camo_09a", "camo_09b", "camo_09c", "camo_09d", "camo_09d", "camo_09e", "camo_09f", "camo_09g", "camo_09h", "camo_09i", "camo_09j", "camo_10a", "camo_10b", "camo_10c", "camo_10d", "camo_10d", "camo_10e", "camo_10f", "camo_10g", "camo_10h", "camo_10i", "camo_10j" ];
    var_1 = "none";

    foreach ( var_3 in level.teamnamelist )
    {
        if ( game["roundWinStreak"][var_3] == 0 )
            continue;

        if ( game["roundWinStreak"][var_3] > 5 )
        {
            var_1 = "camo_11d";
            continue;
        }

        switch ( game["roundWinStreak"][var_3] )
        {
            case 0:
                break;
            case 1:
                var_1 = scripts\engine\utility::random( var_0 );
                break;
            case 2:
                var_1 = "camo_11a";
                break;
            case 3:
                var_1 = "camo_11b";
                break;
            case 4:
                var_1 = "camo_11c";
                break;
            case 5:
                var_1 = "camo_11d";
                break;
        }
    }

    return var_1;
}

updaterandomloadout()
{
    if ( israndomloadouts() || usbs_pulled_out() || usb_right() || usb_tape_animation_test() )
    {
        if ( game["roundsPlayed"] == 0 )
        {
            if ( istrue( game["practiceRound"] ) )
            {
                cacherandomloadouts();
                game["arenaRandomLoadoutIndex"] = 0;
            }
            else if ( !isdefined( game["practiceRound"] ) || istrue( game["didSnowFight"] ) )
            {
                if ( istrue( game["didSnowFight"] ) )
                    game["didSnowFight"] = undefined;

                cacherandomloadouts();
                game["arenaRandomLoadoutIndex"] = 0;
            }
        }
        else if ( level.loadoutchangeround != 0 )
        {
            if ( game["roundsPlayed"] % level.loadoutchangeround == 0 )
                game["arenaRandomLoadoutIndex"]++;

            if ( game["arenaRandomLoadoutIndex"] == game["arenaRandomLoadout"].size )
                game["arenaRandomLoadoutIndex"] = 0;
        }
        else
            game["arenaRandomLoadoutIndex"] = 0;
    }
}

cacherandomloadouts()
{
    game["arenaRandomLoadout"] = [];
    var_0 = [];
    var_1 = 0;
    var_2 = scripts\engine\utility::ter_op( usb_right(), "mp/classtable_arena_blueprints.csv", "mp/classTable_arena.csv" );

    if ( scripts\mp\utility\game::getgametype() == "infect" )
        var_2 = "mp/classtable_infect.csv";

    if ( israndompreviewloadouts() )
        var_1 = 144;
    else if ( usb_left() )
        var_1 = 0;
    else if ( usbwm() )
        var_1 = 57;
    else if ( usbserver() )
        var_1 = 93;
    else if ( usbvm() )
        var_1 = 123;
    else if ( use_airdrop_fx() )
        var_1 = 146;
    else if ( usbmodel() )
        var_1 = 188;

    while ( scripts\mp\class::table_getloadoutname( var_2, var_1 ) != "" )
    {
        var_0[var_0.size] = updateloadoutarray( var_2, var_1 );
        var_1++;

        if ( israndompreviewloadouts() )
        {
            if ( var_1 == 0 )
                break;
        }
        else if ( usb_left() )
        {
            if ( var_1 == 57 )
                break;
        }
        else if ( usbwm() )
        {
            if ( var_1 == 93 )
                break;
        }
        else if ( usbserver() )
        {
            if ( var_1 == 123 )
                break;
        }
        else if ( usbvm() )
        {
            if ( var_1 == 146 )
                break;
        }
        else if ( use_airdrop_fx() )
        {
            if ( var_1 == 188 )
                break;
        }
    }

    var_3 = undefined;
    var_4 = undefined;
    var_5 = getdvar( "scr_arena_overrideWeapons", "" );
    var_6 = getdvarfloat( "scr_arena_overrideWeaponChance", 0.0 );

    if ( var_5 != "" && var_6 > 0.0 )
    {
        var_7 = strtok( var_5, "," );

        foreach ( var_9 in var_7 )
        {
            var_10 = strtok( var_9, "|" );

            if ( var_10.size == 2 )
            {
                var_11 = var_10[0];
                var_12 = int( var_10[1] );
                var_13 = scripts\mp\utility\weapon::_id_1458C( var_11, var_12 );

                if ( var_13 )
                {
                    if ( !isdefined( var_3 ) )
                    {
                        var_3 = [];
                        var_4 = var_6;
                    }

                    var_14 = spawnstruct();
                    var_14._id_12D96 = var_11;
                    var_14.variantid = var_12;
                    var_3[var_3.size] = var_14;
                }
            }
        }
    }

    var_0 = arenaloadouts_select( var_0, 99, var_3, var_4 );
    game["arenaRandomLoadout"] = scripts\engine\utility::array_randomize( var_0 );
}

updateloadoutarray( var_0, var_1 )
{
    var_2 = [];
    var_2["loadoutPrimaryAddBlueprintAttachments"] = scripts\mp\class::_id_139E4( var_0, var_1, 0 );
    var_2["loadoutPrimary"] = scripts\mp\class::table_getweapon( var_0, var_1, 0 );

    for ( var_3 = 0; var_3 < scripts\mp\class::getmaxprimaryattachments(); var_3++ )
    {
        var_4 = scripts\mp\class::getattachmentloadoutstring( var_3, "primary" );
        var_2[var_4] = scripts\mp\class::table_getweaponattachment( var_0, var_1, 0, var_3 );
    }

    var_2["loadoutPrimaryCamo"] = scripts\mp\class::table_getweaponcamo( var_0, var_1, 0 );
    var_2["loadoutPrimaryReticle"] = scripts\mp\class::table_getweaponreticle( var_0, var_1, 0 );

    if ( usb_right() || usb_tape_animation_test() )
        var_2["loadoutPrimaryVariantID"] = scripts\mp\class::_id_139E6( var_0, var_1, 0, var_2["loadoutPrimary"] );
    else
        var_2["loadoutPrimaryVariantID"] = 0;

    if ( scripts\mp\utility\game::getgametype() == "arena" && var_2["loadoutPrimaryVariantID"] != 0 )
        setomnvar( "ui_arena_primaryVariantID", var_2["loadoutPrimaryVariantID"] );

    var_2["loadoutSecondaryAddBlueprintAttachments"] = scripts\mp\class::_id_139E4( var_0, var_1, 1 );
    var_2["loadoutSecondary"] = scripts\mp\class::table_getweapon( var_0, var_1, 1 );

    for ( var_3 = 0; var_3 < scripts\mp\class::getmaxsecondaryattachments(); var_3++ )
    {
        var_4 = scripts\mp\class::getattachmentloadoutstring( var_3, "secondary" );
        var_2[var_4] = scripts\mp\class::table_getweaponattachment( var_0, var_1, 1, var_3 );
    }

    if ( istrue( level._id_136CB ) || istrue( level.setplayerselfrevivingextrainfo ) )
        var_2["loadoutSecondaryCamo"] = scripts\mp\class::table_getweaponcamo( var_0, var_1, 1 );
    else
        var_2["loadoutSecondaryCamo"] = scripts\mp\class::table_getweaponcamo( var_0, var_1, 1 );

    var_2["loadoutSecondaryReticle"] = scripts\mp\class::table_getweaponreticle( var_0, var_1, 1 );

    if ( usb_right() || usb_tape_animation_test() )
        var_2["loadoutSecondaryVariantID"] = scripts\mp\class::_id_139E6( var_0, var_1, 1, var_2["loadoutSecondary"] );
    else
        var_2["loadoutSecondaryVariantID"] = 0;

    if ( scripts\mp\utility\game::getgametype() == "arena" && var_2["loadoutSecondaryVariantID"] != 0 )
        setomnvar( "ui_arena_secondaryVariantID", var_2["loadoutSecondaryVariantID"] );

    var_2["loadoutEquipmentPrimary"] = scripts\mp\class::table_getequipmentprimary( var_0, var_1 );
    var_2["loadoutExtraEquipmentPrimary"] = scripts\mp\class::table_getextraequipmentprimary( var_0, var_1 );
    var_2["loadoutEquipmentSecondary"] = scripts\mp\class::table_getequipmentsecondary( var_0, var_1 );
    var_2["loadoutExtraEquipmentSecondary"] = scripts\mp\class::table_getextraequipmentsecondary( var_0, var_1 );
    var_2["loadoutPerks"] = [];

    for ( var_5 = 0; var_5 < 3; var_5++ )
    {
        var_6 = scripts\mp\class::table_getperk( var_0, var_1, var_5 );

        if ( var_6 != "specialty_null" )
            var_2["loadoutPerks"][var_2["loadoutPerks"].size] = var_6;
    }

    var_2["loadoutGesture"] = "playerData";
    var_2["loadoutExecution"] = "playerData";

    if ( level.allowsupers )
    {
        var_7 = scripts\cp_mp\utility\game_utility::getmapname();

        if ( issubstr( var_7, "mp_m_" ) && var_7 != "mp_m_speed" )
            level.calloutmarkerpingvo_getcalloutaliasstringvehicle = player_give_intel_3_ks();

        var_2["loadoutFieldUpgrade1"] = level.calloutmarkerpingvo_getcalloutaliasstringvehicle;
        var_2["loadoutFieldUpgrade2"] = "none";
    }
    else
    {
        var_2["loadoutFieldUpgrade1"] = "none";
        var_2["loadoutFieldUpgrade2"] = "none";
    }

    if ( usbs_pulled_out() )
    {
        var_2["loadoutPrimaryAttachment"] = "none";
        var_2["loadoutPrimaryAttachment2"] = "none";
        var_2["loadoutPrimaryAttachment3"] = "none";
        var_2["loadoutPrimaryAttachment4"] = "none";
        var_2["loadoutPrimaryAttachment5"] = "none";
        var_2["loadoutSecondaryAttachment"] = "none";
        var_2["loadoutSecondaryAttachment2"] = "none";
        var_2["loadoutSecondaryAttachment3"] = "none";
        var_2["loadoutSecondaryAttachment4"] = "none";
        var_2["loadoutSecondaryAttachment5"] = "none";
    }

    return var_2;
}

arenaloadouts_select( var_0, var_1, var_2, var_3 )
{
    var_4 = [];
    var_5 = [];

    for ( var_6 = 0; var_6 < var_1 && var_0.size > 0; var_6++ )
    {
        var_7 = var_0[randomint( var_0.size )];
        var_8 = var_7["loadoutPrimary"];

        if ( isdefined( var_2 ) && isdefined( var_3 ) )
        {
            var_9 = arenaloadouts_getweapongroup( var_8 );
            var_10 = calloutmarkerpingvo_getaffirmaliasstringloot( var_2, var_9 );

            if ( var_10.size > 0 )
            {
                if ( randomfloat( 1.0 ) < var_3 )
                {
                    var_11 = randomint( var_10.size );
                    var_12 = var_10[var_11];
                    var_2 = scripts\engine\utility::array_remove_index( var_2, var_11 );
                    var_7["loadoutPrimaryAddBlueprintAttachments"] = 1;
                    var_7["loadoutPrimary"] = var_12._id_12D96;
                    var_7["loadoutPrimaryVariantID"] = var_12.variantid;
                    var_7["loadoutPrimaryCamo"] = "none";
                    var_7["loadoutPrimaryReticle"] = "none";

                    for ( var_13 = 0; var_13 < scripts\mp\class::getmaxprimaryattachments(); var_13++ )
                    {
                        var_14 = scripts\mp\class::getattachmentloadoutstring( var_13, "primary" );
                        var_7[var_14] = "none";
                    }
                }
            }
        }

        var_5[var_5.size] = var_7;
        var_0 = arenaloadouts_removeclass( var_0, var_8 );
    }

    return var_5;
}

calloutmarkerpingvo_getaffirmaliasstringloot( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in var_0 )
    {
        if ( arenaloadouts_getweapongroup( var_4._id_12D96 ) == var_1 )
            var_2[var_2.size] = var_4;
    }

    return var_2;
}

arenaloadouts_removeclass( var_0, var_1 )
{
    var_2 = [];
    var_3 = arenaloadouts_getweapongroup( var_1 );

    foreach ( var_5 in var_0 )
    {
        var_6 = arenaloadouts_getweapongroup( var_5["loadoutPrimary"] );

        if ( var_3 != var_6 )
            var_2[var_2.size] = var_5;
    }

    return var_2;
}

arenaloadouts_getweapongroup( var_0 )
{
    var_1 = "none";

    if ( var_0 != "none" )
    {
        var_1 = scripts\mp\utility\weapon::getweapongroup( var_0 );

        if ( var_1 == "weapon_dmr" )
            var_1 = "weapon_sniper";
    }

    return var_1;
}

buildrandomweapontable()
{
    level.weaponcategories = [];
    level.allweapons = [];
    var_0 = 0;

    for (;;)
    {
        var_1 = tablelookupbyrow( "mp/arenaGGWeapons.csv", var_0, 4 );

        if ( var_1 == "snow" )
        {
            var_0++;
            continue;
        }

        if ( var_1 == "" )
            break;

        var_2 = strtok( var_1, "+" );

        foreach ( var_4 in var_2 )
        {
            if ( !isdefined( level.weaponcategories[var_4] ) )
                level.weaponcategories[var_4] = [];

            var_5 = [];
            var_5["weapon"] = tablelookupbyrow( "mp/arenaGGWeapons.csv", var_0, 0 );
            level.weaponcategories[var_4][level.weaponcategories[var_4].size] = var_5;
            level.allweapons[var_5["weapon"]] = var_5["weapon"];
        }

        var_0++;
    }
}

getrandomweaponfromcategory( var_0, var_1 )
{
    if ( istrue( var_1 ) && var_0 == "rand_sniperdmr" )
    {
        if ( !isdefined( game["arenaStartWeaponClass"] ) )
        {
            var_0 = scripts\engine\utility::ter_op( randomint( 100 ) > 49, "rand_sniper", "rand_dmr" );
            game["arenaStartWeaponClass"] = var_0;
        }
        else
        {
            if ( game["arenaStartWeaponClass"] == "rand_sniper" )
                var_0 = "rand_dmr";
            else
                var_0 = "rand_sniper";

            game["arenaStartWeaponClass"] = var_0;
        }
    }

    var_2 = level.weaponcategories[var_0];

    if ( isdefined( var_2 ) && var_2.size > 0 )
    {
        var_3 = "";
        var_4 = undefined;
        var_5 = 0;

        for (;;)
        {
            var_6 = randomintrange( 0, var_2.size );
            var_4 = var_2[var_6];
            var_7 = scripts\mp\utility\weapon::getweaponrootname( var_4["weapon"] );

            if ( var_5 > var_2.size )
            {
                level.selectedweapons[var_7] = 1;
                var_3 = var_4["weapon"];

                for ( var_8 = 0; var_8 < level.weaponcategories[var_0].size; var_8++ )
                {
                    if ( level.weaponcategories[var_0][var_8]["weapon"] == var_3 )
                        break;
                }

                break;
            }

            var_5++;
        }

        return var_3;
    }
    else
        return "none";
}

initweaponmap()
{
    level.baseraritymap = [];
    level.baseraritymap[level.arenaweapont1.weapon] = 0;
    level.baseraritymap[level.arenaweapont2.weapon] = 1;
    level.baseraritymap[level.arenaweapont3.weapon] = 2;
    level.baseraritymap[level.arenaweapont4.weapon] = 3;
    level.baseraritymap[level.arenaweapont5.weapon] = 4;
    level.baseraritymap[level.arenaweapont6.weapon] = 5;
    level.baseraritymap[level.arenaweapont7.weapon] = 6;
    level.baseraritymap[level.arenaweapont8.weapon] = 0;
}

regroup_at_truck( var_0 )
{
    if ( updatec4vehiclemultkill() && !issubstr( var_0, "equip" ) && var_0 != "none" )
    {
        var_1 = "mp/classtable_arena_blueprints.csv";
        var_2 = 0;
        var_3 = "";

        for ( var_4 = scripts\mp\utility\weapon::getweaponrootname( var_0 ); scripts\mp\class::table_getloadoutname( var_1, var_2 ) != ""; var_2++ )
        {
            var_3 = scripts\mp\class::table_getweapon( var_1, var_2, 0 );

            if ( var_4 == var_3 )
                break;
        }

        if ( var_4 != "" )
        {
            var_5 = scripts\mp\class::_id_139E6( "mp/classtable_arena_blueprints.csv", var_2, 0, var_4 );
            return var_5;
        }

        return 0;
    }
    else
        return 0;
}

setupweapons()
{
    var_0 = scripts\engine\utility::getstructarray( "weapon_pickup", "targetname" );

    if ( istrue( level._id_136CB ) || istrue( level.setplayerselfrevivingextrainfo ) )
        _id_13272();
    else if ( updatec4vehiclemultkill() )
        _id_13227();
    else
        _id_13274();

    foreach ( var_2 in var_0 )
    {
        if ( var_2.script_label == "1" )
        {
            spawnweapon( var_2, level.arenaweapont1 );
            continue;
        }

        if ( var_2.script_label == "2" )
        {
            spawnweapon( var_2, level.arenaweapont2 );
            continue;
        }

        if ( var_2.script_label == "3" )
        {
            spawnweapon( var_2, level.arenaweapont3 );
            continue;
        }

        if ( var_2.script_label == "4" )
        {
            spawnweapon( var_2, level.arenaweapont4 );
            continue;
        }

        if ( var_2.script_label == "5" )
        {
            spawnweapon( var_2, level.arenaweapont5 );
            continue;
        }

        if ( var_2.script_label == "6" )
        {
            spawnweapon( var_2, level.arenaweapont6 );
            continue;
        }

        if ( var_2.script_label == "7" )
        {
            spawnweapon( var_2, level.arenaweapont7 );
            continue;
        }

        if ( var_2.script_label == "8" )
            spawnweapon( var_2, level.arenaweapont8 );
    }
}

getrandomspawnweapon()
{
    var_0 = level.allweapons;

    if ( isdefined( var_0 ) && var_0.size > 0 )
    {
        var_1 = "";
        var_2 = undefined;
        var_3 = 0;

        for (;;)
        {
            var_4 = scripts\engine\utility::random( var_0 );

            if ( !issubstr( var_4, "equip" ) )
                var_5 = scripts\mp\utility\weapon::getweaponrootname( var_4 );
            else
                var_5 = var_4;

            if ( var_3 > var_0.size )
            {
                level.selectedweapons[var_5] = 1;
                var_1 = var_4;

                for ( var_6 = 0; var_6 < level.allweapons.size; var_6++ )
                {
                    if ( level.allweapons[var_4] == var_1 )
                        break;
                }

                break;
            }

            var_3++;
        }

        return var_1;
    }
    else
        return "none";
}

registerdonetskmap( var_0 )
{
    var_1 = [];

    if ( level.calloutmarkerpingvo_getcalloutaliasstringentity == 1 )
    {
        if ( weaponclass( var_0 ) == "sniper" || weaponclass( var_0 ) == "dmr" )
            var_1[var_1.size] = "scope";
    }

    if ( weaponclass( var_0 ) == "sniper" )
    {
        switch ( var_0 )
        {
            case "iw8_sn_alpha50_mp":
                var_1[var_1.size] = "stocks";
                var_1[var_1.size] = "pistolgrip02";
                break;
            case "iw8_sn_delta_mp":
                var_1[var_1.size] = "stockcust";
                break;
            case "iw8_sn_hdromeo_mp":
                var_1[var_1.size] = "stockh";
                break;
            case "iw8_sn_xmike109_mp":
                var_1[var_1.size] = "stocks";
                var_1[var_1.size] = "pistolgrip02";
                break;
            case "iw8_sn_romeo700_mp":
                var_1[var_1.size] = "scope";
                var_1[var_1.size] = "stocks";
                var_1[var_1.size] = "calcust2";
                var_1[var_1.size] = "boltl";
                break;
            default:
                break;
        }
    }

    if ( var_1.size == 0 )
        var_1[var_1.size] = "none";

    return var_1;
}

spawnweapon( var_0, var_1, var_2 )
{
    if ( isdefined( var_2 ) )
        var_3 = var_1;
    else
        var_3 = var_1.weapon;

    if ( var_3 == "none" )
        return;

    var_4 = player_give_infinite_rocks( var_0 );

    if ( isdefined( var_0.script_noteworthy ) && var_0.script_noteworthy == "wall" )
    {

    }
    else
    {
        var_5 = var_0.origin + ( 0, 0, 16 );
        var_6 = var_0.origin + ( 0, 0, -16 );
        var_7 = scripts\engine\trace::ray_trace( var_5, var_6, undefined, scripts\engine\trace::create_default_contents( 1 ) );

        if ( var_7["fraction"] < 1.0 )
            var_4 = var_7["position"] + ( 0, 0, 2 );
    }

    var_8 = "";
    var_9 = getequipmentmodel( var_3 );

    if ( var_9 != "" )
    {
        if ( istrue( level._id_1343F ) && var_3 == "equip_snowball" )
        {
            if ( isplayer( var_0 ) )
                var_8 = "single";
            else if ( isdefined( var_0.script_noteworthy ) && var_0.script_noteworthy == "wall" )
                var_8 = "single";
            else if ( scripts\engine\utility::cointoss() )
            {
                if ( scripts\engine\utility::cointoss() )
                    var_8 = "pile";
                else
                    var_8 = "single";
            }
            else
                var_8 = "pyramid";

            if ( !isplayer( var_0 ) && var_0.script_label == "6" && !level._id_12344 )
            {
                if ( distance( var_0.origin, ( 0, 0, 138 ) ) < 10 )
                {
                    level._id_12344 = 1;
                    var_3 = "equip_pball";
                    var_8 = "single";
                }
            }
            else if ( !isplayer( var_0 ) && var_0.script_label == "8" && !level._id_12344 )
            {
                if ( distance( var_0.origin, ( 0, 0, -50 ) ) < 10 )
                {
                    if ( scripts\engine\utility::cointoss() )
                    {
                        level._id_12344 = 1;
                        var_3 = "equip_pball";
                        var_8 = "single";
                    }
                }
            }

            switch ( var_8 )
            {
                case "pile":
                    var_9 = "decor_snowball_pile_01";
                    var_4 = var_4 - ( 0, 0, 3 );
                    break;
                case "pyramid":
                    var_9 = "decor_snowball_pyramid_01";
                    var_4 = var_4 - ( 0, 0, 3 );
                    break;
                default:
                    var_9 = "weapon_wm_snowball";
                    break;
            }

            var_10 = spawn( "script_model", var_4 );
            var_10 setmodel( var_9 );
        }
        else
        {
            var_10 = spawn( "script_model", var_4 );
            var_10 setmodel( var_9 );
        }

        if ( isdefined( var_0.angles ) )
        {
            if ( var_3 == "equip_claymore" || var_3 == "equip_at_mine" || var_3 == "equip_trophy" )
            {
                if ( isdefined( var_0.script_noteworthy ) && var_0.script_noteworthy == "wall" || isdefined( var_0._id_12F52 ) && var_0._id_12F52 == "wall" )
                    var_10.angles = ( 270, var_0.angles[1], 90 );
                else
                    var_10.angles = ( 0, var_0.angles[1], 0 );
            }
            else if ( var_3 == "equip_c4" || var_3 == "equip_thermite" || var_3 == "equip_throwing_knife" )
            {
                if ( isdefined( var_0.script_noteworthy ) && var_0.script_noteworthy == "wall" || isdefined( var_0._id_12F52 ) && var_0._id_12F52 == "wall" )
                    var_10.angles = ( 180, var_0.angles[1], 180 );
                else
                    var_10.angles = ( 0, var_0.angles[1], 90 );
            }
            else
            {
                var_10.angles = ( 0, 90, 0 );
                var_10.origin = var_10.origin + ( 0, 0, 2 );
            }
        }
        else
            var_10.angles = ( 0, 0, 90 );

        var_11 = 96;
        var_12 = 96;
        var_13 = var_10 getequipmenthintstring( var_3 );
        var_14 = var_10 getequipmenthinticon( var_3 );
        var_10.equipment = var_3;
        var_10 makeusable();
        var_10 sethinttag( "tag_origin" );
        var_10 setcursorhint( "HINT_BUTTON" );
        var_10 sethinticon( var_14 );
        var_10 setuseholdduration( "duration_short" );
        var_10 setusehideprogressbar( 1 );
        var_10 sethintstring( var_13 );
        var_10 setusepriority( 0 );
        var_10 sethintdisplayrange( var_12 );
        var_10 sethintdisplayfov( 120 );
        var_10 setuserange( var_11 );
        var_10 setusefov( 210 );
        var_10 sethintonobstruction( "hide" );
        var_10 thread outlineequipmentwatchplayerprox( var_9, var_3 );
        var_10._id_1292D = spawn( "trigger_radius", var_10.origin, 0, 32, 32 );
        var_10 thread vehicle_collision_registereventinternal();

        if ( istrue( level._id_1343F ) )
        {
            var_10 thread _id_144F3( var_0, var_8 );
            var_10.targetname = "dropped_weapon";
            return;
        }

        var_10 thread watchequipmentpickup();
        var_10.targetname = "dropped_equipment";
        return;
    }
    else
    {
        var_15 = undefined;
        var_15 = scripts\mp\utility\weapon::getweaponrootname( var_3 );
        var_16 = [];

        if ( istrue( level._id_136CB ) || istrue( level.setplayerselfrevivingextrainfo ) || updatec4vehiclemultkill() )
            var_17 = var_1.weaponobj;
        else
        {
            var_16 = registerdonetskmap( var_15 + "_mp" );
            var_17 = scripts\mp\class::buildweapon( var_15, var_16, "none", "none", -1 );
        }

        var_18 = createheadicon( var_17 );
        var_19 = spawn( "weapon_" + var_18, var_4, 17 );
        var_19 sethintdisplayrange( 96 );
        var_19 setuserange( 96 );
        var_19 setuseholdduration( "duration_short" );
        var_19 setusefov( 210 );
        var_19.targetname = "dropped_weapon";
        var_19.objweapon = var_17;

        if ( isdefined( var_0.script_noteworthy ) && var_0.script_noteworthy == "wall" )
        {
            var_20 = anglestoright( var_0.angles );
            var_21 = vectornormalize( var_20 ) * 30;
            var_5 = var_0.origin + var_21 + ( 0, 0, 16 );
            var_6 = var_0.origin + var_21 + ( 0, 0, -100 );
            var_7 = scripts\engine\trace::ray_trace( var_5, var_6, undefined, scripts\engine\trace::create_default_contents( 1 ) );
            var_22 = var_0.origin;

            if ( var_7["fraction"] < 1.0 )
                var_22 = var_7["position"];

            var_19.deafen_ai_near_pa_for_duration = var_22;
        }

        manageweaponstartingammo( var_19, var_18 );

        if ( isdefined( var_0.angles ) )
        {
            if ( var_15 == "iw8_me_riotshield" )
            {
                if ( isdefined( var_0.script_noteworthy ) && var_0.script_noteworthy == "wall" || isdefined( var_0._id_12F52 ) && var_0._id_12F52 == "wall" )
                    var_19.angles = ( var_0.angles[0], var_0.angles[1] - 90, var_0.angles[2] );
                else
                    var_19.angles = ( var_0.angles[0] - 90, var_0.angles[1], var_0.angles[2] );
            }
            else if ( var_15 == "iw8_sn_crossbow" )
            {
                if ( isdefined( var_0.script_noteworthy ) && var_0.script_noteworthy == "wall" )
                    var_19.angles = ( var_0.angles[0], var_0.angles[1], var_0.angles[2] + 90 );
                else
                    var_19.angles = ( var_0.angles[0], var_0.angles[1], var_0.angles[2] + 90 );
            }
            else
                var_19.angles = var_0.angles;
        }
        else
            var_19.angles = ( 0, 0, 90 );

        var_19 thread outlinewatchplayerprox();
        var_19 thread watchpickup();
    }
}

player_give_infinite_rocks( var_0 )
{
    if ( level.mapname == "mp_m_speedball" )
    {
        if ( var_0.script_label == "3" && distance( var_0.origin, ( -488.2, -399.9, 54.25 ) ) < 10 )
            var_0.origin = ( -488.2, -409.9, 54.25 );
        else if ( var_0.script_label == "5" && distance( var_0.origin, ( 657.3, 644.6, 56 ) ) < 10 )
            var_0.origin = ( 665.3, 644.6, 56 );
    }
    else if ( level.mapname == "mp_m_stadium" )
    {
        if ( var_0.script_label == "5" && distance( var_0.origin, ( 400.748, 762, -291.005 ) ) < 10 )
            var_0._id_12F52 = "wall";
        else if ( var_0.script_label == "2" && distance( var_0.origin, ( 38.354, -115, -298.312 ) ) < 10 )
            var_0._id_12F52 = "wall";
        else if ( var_0.script_label == "2" && distance( var_0.origin, ( -36.354, 83, -298.312 ) ) < 10 )
            var_0._id_12F52 = "wall";
    }

    return var_0.origin;
}

getequipmentmodel( var_0 )
{
    switch ( var_0 )
    {
        case "equip_frag":
            return "offhand_wm_grenade_mike67";
        case "equip_semtex":
            return "offhand_wm_grenade_semtex";
        case "equip_c4":
            return "offhand_wm_c4";
        case "equip_claymore":
            return "offhand_wm_claymore_held";
        case "equip_at_mine":
            return "offhand_wm_at_mine";
        case "equip_throwing_knife":
            return "weapon_wm_me_soscar_knife_offhand_thrown";
        case "equip_throwing_knife_fire":
            return "weapon_wm_me_soscar_knife_fire_offhand_thrown_mp";
        case "equip_throwing_knife_electric":
            return "weapon_wm_me_soscar_knife_offhand_thrown_v66";
        case "equip_throwing_knife_drill":
            return "weapon_wm_me_drill_knife_offhand_thrown";
        case "equip_molotov":
            return "offhand_wm_molotov";
        case "equip_thermite":
            return "offhand_wm_grenade_thermite";
        case "equip_flash":
            return "offhand_wm_grenade_flash";
        case "equip_snapshot_grenade":
            return "offhand_wm_grenade_snapshot_mp";
        case "equip_smoke":
            return "offhand_wm_grenade_smoke";
        case "equip_concussion":
            return "offhand_wm_grenade_concussion";
        case "equip_trophy":
            return "offhand_wm_trophy_system";
        case "equip_decoy":
            return "offhand_wm_grenade_decoy";
        case "equip_adrenaline":
            return "offhand_wm_stim";
        case "equip_snowball":
            return "weapon_wm_snowball";
        case "equip_pball":
            return "weapon_wm_snowball";
        default:
            return "";
    }
}

getequipmenthintstring( var_0 )
{
    switch ( var_0 )
    {
        case "equip_frag":
            self.equiptype = "primary";
            return &"MP_INGAME_ONLY/PICKUP_FRAG";
        case "equip_semtex":
            self.equiptype = "primary";
            return &"MP_INGAME_ONLY/PICKUP_SEMTEX";
        case "equip_c4":
            self.equiptype = "primary";
            return &"MP_INGAME_ONLY/PICKUP_C4";
        case "equip_claymore":
            self.equiptype = "primary";
            return &"MP_INGAME_ONLY/PICKUP_CLAYMORE";
        case "equip_at_mine":
            self.equiptype = "primary";
            return &"MP_INGAME_ONLY/PICKUP_ATMINE";
        case "equip_throwing_knife":
            self.equiptype = "primary";
            return &"MP_INGAME_ONLY/PICKUP_TKNIFE";
        case "equip_throwing_knife_fire":
            self.equiptype = "primary";
            return &"MP_INGAME_ONLY/PICKUP_TKNIFE_FIRE";
        case "equip_throwing_knife_electric":
            self.equiptype = "primary";
            return &"MP_INGAME_ONLY/PICKUP_TKNIFE_ELECTRIC";
        case "equip_throwing_knife_drill":
            self.equiptype = "primary";
            return &"MP_INGAME_ONLY/PICKUP_TKNIFE_DRILL";
        case "equip_molotov":
            self.equiptype = "primary";
            return &"MP_INGAME_ONLY/PICKUP_MOLOTOV";
        case "equip_thermite":
            self.equiptype = "primary";
            return &"MP_INGAME_ONLY/PICKUP_THERMITE";
        case "equip_snowball":
            self.equiptype = "primary";
            return &"MP_INGAME_ONLY/PICKUP_SNOWBALL";
        case "equip_pball":
            self.equiptype = "secondary";
            return &"MP_INGAME_ONLY/PICKUP_PBALL";
        case "equip_flash":
            self.equiptype = "secondary";
            return &"MP_INGAME_ONLY/PICKUP_FLASH";
        case "equip_snapshot_grenade":
            self.equiptype = "secondary";
            return &"MP_INGAME_ONLY/PICKUP_SNAPSHOT";
        case "equip_smoke":
            self.equiptype = "secondary";
            return &"MP_INGAME_ONLY/PICKUP_SMOKE";
        case "equip_concussion":
            self.equiptype = "secondary";
            return &"MP_INGAME_ONLY/PICKUP_STUN";
        case "equip_trophy":
            self.equiptype = "secondary";
            return &"MP_INGAME_ONLY/PICKUP_TROPHY_SYSTEM";
        case "equip_decoy":
            self.equiptype = "secondary";
            return &"MP_INGAME_ONLY/PICKUP_DECOY";
        case "equip_adrenaline":
            self.equiptype = "secondary";
            return &"MP_INGAME_ONLY/PICKUP_STIM";
        default:
            return "";
    }
}

getequipmenthinticon( var_0 )
{
    var_1 = "mp/arenaGGWeapons.csv";
    var_2 = tablelookup( var_1, 0, var_0, 3 );
    return var_2;
}

manageweaponstartingammo( var_0, var_1 )
{
    var_2 = weaponclipsize( var_1 );
    var_3 = 0;

    if ( level.magcount != 3 )
    {
        var_4 = !level.magcount;

        if ( var_4 )
        {
            var_2 = 0;
            var_3 = 0;
        }
        else
            var_3 = level.magcount - 1;

        if ( level.magcount == 7 )
            var_3 = weaponmaxammo( var_1 );
        else
            var_3 = var_2 * var_3;
    }
    else
        var_3 = var_2 * 2;

    var_0 itemweaponsetammo( var_2, var_3 );
}

watchequipmentpickup()
{
    self endon( "death" );
    self waittill( "trigger", var_0, var_1 );
    var_2 = 0;
    var_3 = checkissameequip( var_0 );
    var_4 = checkpickupequiptypeammocount( var_0 );
    var_5 = var_0 scripts\mp\equipment::getequipmentmaxammo( self.equipment );
    var_6 = checkcurrentequiptypeammocount( var_0 );

    if ( var_3 )
    {
        if ( var_4 == var_5 )
            var_2 = 1;
    }

    if ( var_3 && !var_2 )
        var_0 scripts\mp\equipment::incrementequipmentammo( self.equipment, 1 );
    else if ( var_6 && !var_3 )
        var_0 dropoldequipinplace( var_0 scripts\mp\equipment::getcurrentequipment( self.equiptype ) );

    if ( !var_3 )
        var_0 scripts\mp\equipment::giveequipment( self.equipment, self.equiptype );

    if ( var_3 && var_2 )
    {
        var_0 iprintlnbold( &"MP_INGAME_ONLY/EQUIPMENT_MAXED" );
        thread watchequipmentpickup();
    }
    else
    {
        var_0 playlocalsound( "scavenger_pack_pickup" );
        clearweaponoutlines();
        self makeunusable();
        self delete();
    }
}

checkpickupequiptypeammocount( var_0 )
{
    return var_0 scripts\mp\equipment::getequipmentammo( self.equipment );
}

checkcurrentequiptypeammocount( var_0 )
{
    var_1 = var_0 scripts\mp\equipment::getcurrentequipment( self.equiptype );

    if ( isdefined( var_1 ) )
        return var_0 scripts\mp\equipment::getequipmentammo( var_1 );
    else
        return 0;
}

checkissameequip( var_0 )
{
    var_1 = var_0 scripts\mp\equipment::getcurrentequipment( self.equiptype );

    if ( isdefined( var_1 ) )
        return self.equipment == var_1;
    else
        return 0;
}

dropoldequipinplace( var_0 )
{
    spawnweapon( self, var_0, 1 );
}

watchpickup()
{
    self endon( "death" );
    self waittill( "trigger", var_0, var_1 );
    clearweaponoutlines();

    if ( isdefined( var_1 ) )
    {
        var_1 sethintdisplayrange( 96 );
        var_1 setuserange( 96 );
        var_1 setuseholdduration( "duration_short" );
        var_1 thread outlinewatchplayerprox();
        var_1 thread watchpickup();
    }
}

vehicle_collision_registereventinternal()
{
    level endon( "game_ended" );
    self endon( "deleted" );
    self endon( "death" );
    var_0 = undefined;

    for (;;)
    {
        wait 0.05;
        self._id_1292D waittill( "trigger", var_1 );

        if ( !scripts\mp\utility\player::isreallyalive( var_1 ) )
            continue;

        if ( istrue( var_1.inlaststand ) )
            continue;

        if ( !isdefined( var_1.initialized_gameobject_vars ) )
            continue;

        if ( !scripts\mp\gameobjects::proxtriggerlos( var_1 ) )
            continue;

        var_0 = var_1 scripts\mp\equipment::getcurrentequipment( self.equiptype );
        var_2 = 0;
        var_3 = checkissameequip( var_1 );
        var_4 = checkcurrentequiptypeammocount( var_1 );
        var_0 = var_1 scripts\mp\equipment::getcurrentequipment( self.equiptype );

        if ( isdefined( var_0 ) && !var_3 && var_4 > 0 )
            continue;

        var_5 = checkpickupequiptypeammocount( var_1 );
        var_6 = var_1 scripts\mp\equipment::getequipmentmaxammo( self.equipment );

        if ( var_3 )
        {
            if ( var_5 == var_6 )
                var_2 = 1;
        }

        if ( var_3 && !var_2 )
            var_1 scripts\mp\equipment::incrementequipmentammo( self.equipment, 1 );

        if ( var_3 && var_2 )
            continue;

        if ( !isdefined( var_0 ) || isdefined( var_0 ) && !var_3 && var_4 == 0 )
            var_1 scripts\mp\equipment::giveequipment( self.equipment, self.equiptype );

        var_1 playlocalsound( "scavenger_pack_pickup" );
        clearweaponoutlines();
        self makeunusable();
        self delete();
    }
}

updatearenagungameloadout( var_0 )
{
    if ( game["roundsPlayed"] == 0 )
    {
        cachearenagungameloadouts( var_0 );
        game["arenaRandomLoadoutIndex"] = 0;
    }
}

cachearenagungameloadouts( var_0 )
{
    game["arenaRandomLoadout"] = [];
    var_1 = [];
    var_2 = "mp/classTable_arena.csv";

    if ( var_0 )
        var_3 = [ 14, 24, 12, 29, 1, 8, 31, 34, 10, 2 ];
    else
        var_3 = [ 2, 10, 34, 31, 8, 1, 29, 12, 24, 14 ];

    for ( var_4 = 0; var_4 < var_3.size; var_4++ )
        var_1[var_1.size] = updateloadoutarray( var_2, var_3[var_4] );

    game["arenaRandomLoadout"] = var_1;
}

setenemyloadoutomnvars()
{
    var_0 = undefined;

    if ( !isdefined( self.pers["team"] ) )
        var_1 = "allies";
    else
        var_1 = scripts\mp\utility\game::getotherteam( self.pers["team"] )[0];

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == var_1 )
        {
            var_0 = var_3;
            break;
        }
    }

    if ( !isdefined( var_0 ) )
        var_0 = self;

    var_5 = "mp/arenaGGWeapons.csv";
    self setclientomnvar( "ui_arena_en_primary", -1 );
    self setclientomnvar( "ui_arena_en_secondary", -1 );
    self setclientomnvar( "ui_arena_en_lethal", -1 );
    self setclientomnvar( "ui_arena_en_tactical", -1 );
    var_6 = int( tablelookup( var_5, 0, var_0.pers["gamemodeLoadout"]["loadoutPrimary"], 1 ) );
    self setclientomnvar( "ui_arena_en_primary", var_6 );
    var_7 = int( tablelookup( var_5, 0, var_0.pers["gamemodeLoadout"]["loadoutSecondary"], 1 ) );
    self setclientomnvar( "ui_arena_en_secondary", var_7 );
    var_8 = int( tablelookup( var_5, 0, var_0.pers["gamemodeLoadout"]["loadoutEquipmentPrimary"], 1 ) );
    self setclientomnvar( "ui_arena_en_lethal", var_8 );
    var_9 = int( tablelookup( var_5, 0, var_0.pers["gamemodeLoadout"]["loadoutEquipmentSecondary"], 1 ) );
    self setclientomnvar( "ui_arena_en_tactical", var_9 );
}

getgungameloadoutindex( var_0 )
{
    var_1 = 0;

    if ( game["roundsPlayed"] == 0 )
        var_1 = 0;
    else if ( isgungameloadouts() )
        var_1 = game["roundsWon"][var_0.pers["team"]];
    else
        var_1 = game["roundsWon"][scripts\mp\utility\game::getotherteam( var_0.pers["team"] )[0]];

    return var_1;
}

getgungameloadoutomnvarindex( var_0, var_1 )
{
    var_2 = 0;

    if ( isgungameloadouts() )
    {
        var_2 = game["roundsWon"][var_0.pers["team"]];

        if ( isdefined( var_1 ) && var_1 == var_0.pers["team"] )
            var_2 = var_2 + 1;
    }
    else
    {
        var_2 = game["roundsWon"][scripts\mp\utility\game::getotherteam( var_0.pers["team"] )[0]];

        if ( isdefined( var_1 ) && var_1 == scripts\mp\utility\game::getotherteam( var_0.pers["team"] )[0] )
            var_2 = var_2 + 1;
    }

    return var_2;
}

setenemyloadoutomnvarsatmatchend( var_0 )
{
    foreach ( var_2 in level.players )
    {
        var_3 = undefined;

        if ( !isdefined( var_2.pers["team"] ) )
            var_4 = "allies";
        else
            var_4 = scripts\mp\utility\game::getotherteam( var_2.pers["team"] )[0];

        foreach ( var_6 in level.players )
        {
            if ( var_6.team == var_4 )
            {
                var_3 = var_6;
                break;
            }
        }

        if ( !isdefined( var_3 ) )
            var_3 = var_2;

        var_3.pers["gamemodeLoadout"] = game["arenaRandomLoadout"][getgungameloadoutomnvarindex( var_3, var_0 )];
        var_8 = "mp/arenaGGWeapons.csv";
        var_2 setclientomnvar( "ui_arena_en_primary", -1 );
        var_2 setclientomnvar( "ui_arena_en_secondary", -1 );
        var_2 setclientomnvar( "ui_arena_en_lethal", -1 );
        var_2 setclientomnvar( "ui_arena_en_tactical", -1 );
        var_9 = int( tablelookup( var_8, 0, var_3.pers["gamemodeLoadout"]["loadoutPrimary"], 1 ) );
        var_2 setclientomnvar( "ui_arena_en_primary", var_9 );
        var_10 = int( tablelookup( var_8, 0, var_3.pers["gamemodeLoadout"]["loadoutSecondary"], 1 ) );
        var_2 setclientomnvar( "ui_arena_en_secondary", var_10 );
        var_11 = int( tablelookup( var_8, 0, var_3.pers["gamemodeLoadout"]["loadoutEquipmentPrimary"], 1 ) );
        var_2 setclientomnvar( "ui_arena_en_lethal", var_11 );
        var_12 = int( tablelookup( var_8, 0, var_3.pers["gamemodeLoadout"]["loadoutEquipmentSecondary"], 1 ) );
        var_2 setclientomnvar( "ui_arena_en_tactical", var_12 );
    }
}

spawngameendflagzone( var_0 )
{
    var_1 = getentarray( "flag_arena", "targetname" );

    if ( !isdefined( var_1[0] ) )
        return;

    level.arenaflag = var_1[0];
    var_2 = var_1[0];

    if ( isdefined( var_2.target ) )
        var_3[0] = getent( var_2.target, "targetname" );
    else
    {
        var_3[0] = spawn( "script_model", var_2.origin );
        var_3[0].angles = var_2.angles;
    }

    var_2.objectivekey = "_a";
    var_2.iconname = "_a";
    var_1 = scripts\mp\gametypes\obj_dom.gsc::setupobjective( var_2, "neutral", undefined, 1 );
    var_1.onuse = ::arenaflag_onuse;
    var_1.onbeginuse = ::arenaflag_onusebegin;
    var_1.onenduse = ::arenaflag_onuseend;
    var_1.onuseupdate = ::arenaflag_onuseupdate;
    var_1.oncontested = ::arenaflag_oncontested;
    var_1.onuncontested = ::calloutmarkerping_watchentitydeathorenemydisconnect;
    var_1.isarena = 1;
    var_1 scripts\mp\gameobjects::pinobjiconontriggertouch();
    var_1.id = "domFlag";
    var_1.scriptable delete();
    var_1 scripts\mp\gameobjects::setcapturebehavior( "persistent" );
    var_1.ignorestomp = 1;
    level.objectives[var_1.objectivekey] = var_1;
    level.arenaflag = var_1;

    if ( istrue( var_0 ) )
    {
        wait 0.1;
        level.arenaflag scripts\mp\gameobjects::requestid( 1, 1, undefined, 0, 0 );
        level.arenaflag.visibleteam = "any";
        level.arenaflag scripts\mp\gameobjects::setobjectivestatusicons( "icon_waypoint_ot" );
        level.arenaflag thread deleteotpreview();
        level thread showflagoutline();
    }
    else
    {
        level.arenaflag scripts\mp\gameobjects::requestid( 1, 1, undefined, 0, 0 );
        level.arenaflag disableotflag();
    }
}

showflagoutline()
{
    waitframe();

    if ( isdefined( level.arenaflag ) && isdefined( level.arenaflag.flagmodel ) )
        level.arenaflag.flagmodel.outlinedid = scripts\mp\utility\outline::outlineenableforall( level.arenaflag.flagmodel, "outline_nodepth_orange", "level_script" );

    level thread removeflagoutlineongameend();
}

arenaflag_onusebegin( var_0 )
{
    var_0.iscapturing = 1;
    level.canprocessot = 0;
    var_1 = scripts\mp\gameobjects::getownerteam();

    if ( var_1 == "neutral" )
        var_0 setclientomnvar( "ui_objective_state", 1 );

    self.neutralizing = istrue( level.flagneutralization ) && var_1 != "neutral";
    self._id_126CD = 1;

    if ( !istrue( self.neutralized ) )
        self.didstatusnotify = 0;

    var_2 = scripts\engine\utility::ter_op( istrue( level.flagneutralization ), level.flagcapturetime * 0.5, level.flagcapturetime );
    scripts\mp\gameobjects::setusetime( var_2 );

    if ( istrue( level.capturedecay ) )
        thread scripts\mp\gameobjects::useobjectdecay( var_0.team );

    if ( var_2 > 0 )
    {
        self.prevownerteam = scripts\mp\utility\game::getotherteam( var_0.team )[0];
        scripts\mp\gametypes\obj_dom.gsc::updateflagcapturestate( var_0.team );
        scripts\mp\gameobjects::setobjectivestatusicons( level.icontaking, level.iconlosing );
    }
}

arenaflag_onuseupdate( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\gameobjects::getownerteam();

    if ( var_1 > 0.05 && var_2 && !self.didstatusnotify )
    {
        if ( var_4 == "neutral" )
        {
            if ( level.flagcapturetime > 0.05 )
            {
                scripts\mp\utility\dialog::statusdialog( "securing" + self.objectivekey, var_0 );
                var_5 = scripts\mp\utility\game::getotherteam( var_0 )[0];
                scripts\mp\utility\dialog::statusdialog( "losing" + self.objectivekey, var_5 );
            }
        }
        else if ( level.flagcapturetime > 0.05 )
        {
            scripts\mp\utility\dialog::statusdialog( "losing" + self.objectivekey, var_4 );
            scripts\mp\utility\dialog::statusdialog( "securing" + self.objectivekey, var_0 );
        }

        self.didstatusnotify = 1;
    }
}

arenaflag_onuseend( var_0, var_1, var_2 )
{
    level.canprocessot = 1;
    self.didstatusnotify = 0;

    if ( var_2 )
        scripts\mp\objidpoolmanager::objective_show_progress( self.objidnum, 0 );

    if ( isplayer( var_1 ) )
    {
        var_1.iscapturing = 0;
        var_1 setclientomnvar( "ui_objective_state", 0 );
        var_1.ui_dom_securing = undefined;
    }

    var_3 = scripts\mp\gameobjects::getownerteam();

    if ( var_3 == "neutral" )
    {
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconneutral );
        thread scripts\mp\gametypes\obj_dom.gsc::updateflagstate( "idle", 0 );
    }
    else
    {
        scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );
        thread scripts\mp\gametypes\obj_dom.gsc::updateflagstate( var_3, 0 );
    }

    if ( !var_2 )
        self.neutralized = 0;
}

arenaflag_onuse( var_0 )
{
    level.canprocessot = 1;
    var_1 = var_0.team;
    var_2 = scripts\mp\gameobjects::getownerteam();
    var_3 = scripts\mp\utility\game::getotherteam( var_1 )[0];
    scripts\mp\objidpoolmanager::objective_set_progress( self.objidnum, 0 );
    scripts\mp\objidpoolmanager::objective_show_progress( self.objidnum, 0 );
    self.capturetime = gettime();
    self.neutralized = 0;
    scripts\mp\utility\dialog::statusdialog( "lost" + self.objectivekey, var_3 );
    scripts\mp\utility\dialog::statusdialog( "secured" + self.objectivekey, var_1 );
    thread scripts\mp\utility\print::printandsoundoneveryone( var_1, var_3, undefined, undefined, "mp_dom_flag_captured", "mp_dom_flag_lost", var_0 );
    scripts\mp\gametypes\obj_dom.gsc::dompoint_setcaptured( var_1, var_0 );

    if ( !self.neutralized )
    {
        var_4 = 3;

        if ( self.objectivekey == "_a" )
            var_4 = 1;
        else if ( self.objectivekey == "_b" )
            var_4 = 2;

        if ( isdefined( level.onobjectivecomplete ) )
            [[ level.onobjectivecomplete ]]( "dompoint", self.objectivekey, var_0, var_1, var_2, self );

        self.firstcapture = 0;
    }

    game["dialog"]["round_success"] = "gamestate_win_capture";
    game["dialog"]["round_failure"] = "gamestate_lost_capture";
    level thread arena_endgame( var_0.team, game["end_reason"]["arena_otflag_completed"], game["end_reason"]["arena_otflag_failed"] );
}

arenaflag_oncontested()
{
    scripts\mp\gameobjects::setobjectivestatusicons( level.iconcontested );
    scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, undefined );
    thread scripts\mp\gametypes\obj_dom.gsc::updateflagstate( "contested", 0 );
    level thread forcegameendcontesttimeout();
}

calloutmarkerping_watchentitydeathorenemydisconnect( var_0 )
{
    var_1 = scripts\mp\gameobjects::getownerteam();

    if ( var_1 == "neutral" )
    {
        if ( var_0 != "none" )
            scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, var_0 );
        else if ( isdefined( self.lastprogressteam ) )
            scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, self.lastprogressteam );
    }
    else
        scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, scripts\mp\utility\game::getotherteam( var_1 )[0] );

    if ( var_0 == "none" || var_1 == "neutral" )
    {
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconneutral );
        self.didstatusnotify = 0;
    }
    else
        scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );
}

forcegameendcontesttimeout()
{
    level notify( "start_overtime_timeout" );
    level endon( "start_overtime_timeout" );
    level endon( "game_ended" );

    if ( !isdefined( level.ottimecontested ) )
        level.ottimecontested = 0;

    while ( level.ottimecontested < 5000 )
    {
        wait( level.framedurationseconds );
        level.ottimecontested = level.ottimecontested + level.frameduration;
    }

    level.canprocessot = 1;
}

disableotflag()
{
    scripts\mp\gameobjects::allowuse( "none" );
    scripts\mp\gameobjects::disableobject();

    if ( isdefined( self.scriptable ) )
        self.scriptable delete();

    self.flagmodel hide();
}

removeflagoutlineongameend()
{
    level waittill( "game_ended" );

    if ( isdefined( level.arenaflag ) && isdefined( level.arenaflag.flagmodel.outlinedid ) )
        scripts\mp\utility\outline::outlinedisable( level.arenaflag.flagmodel.outlinedid, level.arenaflag.flagmodel );
}

deleteotpreview()
{
    level scripts\engine\utility::_id_143A5( "prematch_done", "start_mode_setup" );
    disableotflag();
}

setupendzones()
{
    if ( level.mapname == "mp_shipment" )
    {
        level.attackerendzone = getentarray( "flag_goal_defender", "targetname" );
        level.defenderendzone = getentarray( "flag_goal_attackers", "targetname" );
    }
    else if ( level.mapname == "mp_m_hill" )
    {
        level.attackerendzone = getentarray( "flag_goal_defender", "targetname" );
        level.defenderendzone = getentarray( "flag_goal_attacker", "targetname" );
    }
    else
    {
        level.attackerendzone = getentarray( "flag_goal_attacker", "targetname" );
        level.defenderendzone = getentarray( "flag_goal_defender", "targetname" );
    }

    level.attackerendzone = level.attackerendzone[0] createendzone( game["attackers"] );
    level.defenderendzone = level.defenderendzone[0] createendzone( game["defenders"] );
    level.objectives["_b"] = level.attackerendzone;
    level.objectives["_c"] = level.defenderendzone;
}

createendzone( var_0 )
{
    if ( isdefined( self.target ) )
        var_1[0] = getent( self.target, "targetname" );
    else
    {
        var_1[0] = spawn( "script_model", self.origin );
        var_1[0].angles = self.angles;
    }

    level.flagcapturetime = scripts\mp\utility\dvars::dvarfloatvalue( "flagCaptureTime", 10, 0, 30 );

    if ( isdefined( self.objectivekey ) )
        var_2 = self.objectivekey;
    else if ( self.targetname == "flag_goal_attacker" )
        var_2 = "_b";
    else
        var_2 = "_c";

    var_3 = undefined;
    var_4 = scripts\mp\gameobjects::createuseobject( var_0, self, var_1, ( 0, 0, 100 ) );
    var_4.team = var_0;
    var_4.ownerteam = var_0;
    var_4 scripts\mp\gameobjects::setobjectivestatusicons( level.icondefendendzone, level.iconcaptureendzone );
    var_4 scripts\mp\gameobjects::allowuse( "enemy" );
    var_4 scripts\mp\gameobjects::cancontestclaim( 1 );
    var_4 scripts\mp\gameobjects::setusetime( level.flagcapturetime );
    var_4.onuse = ::endzone_onuse;
    var_4.onbeginuse = ::endzone_onusebegin;
    var_4.onenduse = ::endzone_onuseend;
    var_4.oncontested = ::endzone_oncontested;
    var_4.onuncontested = ::endzone_onuncontested;
    var_4.isarena = 1;
    var_4.firstcapture = 1;
    var_4 scripts\mp\gameobjects::pinobjiconontriggertouch();
    var_4.id = "domFlag";

    if ( isdefined( level.capturetype ) )
        var_4 scripts\mp\gameobjects::setcapturebehavior( getcapturetype() );

    var_4.objectivekey = var_2;
    var_4.iconname = var_3;
    var_4 scripts\mp\gameobjects::setvisibleteam( "any" );
    var_4.stompprogressreward = ::endzone_stompprogressreward;
    var_4.nousebar = 1;
    var_4.claimgracetime = level.flagcapturetime * 1000;
    var_5 = var_1[0].origin + ( 0, 0, 32 );
    var_6 = var_1[0].origin + ( 0, 0, -32 );
    var_7 = scripts\engine\trace::create_contents( 1, 1, 1, 1, 0, 1, 1 );
    var_8 = [];
    var_9 = scripts\engine\trace::ray_trace( var_5, var_6, var_8, var_7 );
    var_4.baseeffectpos = var_9["position"];
    var_10 = vectortoangles( var_9["normal"] );
    var_4.baseeffectforward = anglestoforward( var_10 );
    var_11 = spawn( "script_model", var_4.baseeffectpos );
    var_11 setmodel( "dom_flag_scriptable" );
    var_11.angles = generateaxisanglesfromforwardvector( var_4.baseeffectforward, var_11.angles );
    var_4.scriptable = var_11;
    var_4.vfxnamemod = "";

    if ( isdefined( var_4.trigger.radius ) )
    {
        if ( var_4.trigger.radius == 160 )
            var_4.vfxnamemod = "_160";
        else if ( var_4.trigger.radius == 90 )
            var_4.vfxnamemod = "_90";
        else if ( var_4.trigger.radius == 315 )
            var_4.vfxnamemod = "_300";
        else if ( var_4.trigger.radius != 120 )
            var_4.noscriptable = 1;
    }

    var_4.flagmodel = spawn( "script_model", var_4.baseeffectpos );

    if ( istrue( level.setplayerselfrevivingextrainfo ) )
        var_12 = "decor_halloween_scarecrow";
    else
        var_12 = "military_dom_flag_neutral";

    var_4.flagmodel setmodel( var_12 );
    var_4.outlineent = var_4.flagmodel;
    return var_4;
}

endzone_onusebegin( var_0 )
{
    var_0.iscapturing = 1;
    level.canprocessot = 0;
    var_1 = scripts\mp\gameobjects::getownerteam();

    if ( var_1 == "neutral" )
        var_0 setclientomnvar( "ui_objective_state", 1 );

    self.neutralizing = istrue( level.flagneutralization ) && var_1 != "neutral";

    if ( !istrue( self.neutralized ) )
        self.didstatusnotify = 0;

    var_2 = scripts\engine\utility::ter_op( istrue( level.flagneutralization ), level.flagcapturetime * 0.5, level.flagcapturetime );
    scripts\mp\gameobjects::setusetime( var_2 );

    if ( istrue( level.capturedecay ) )
        thread scripts\mp\gameobjects::useobjectdecay( var_0.team );

    if ( var_2 > 0 )
    {
        self.prevownerteam = scripts\mp\utility\game::getotherteam( var_0.team )[0];
        scripts\mp\gametypes\obj_dom.gsc::updateflagcapturestate( var_0.team );
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconlosingendzone, level.icontakingendzone );
    }
}

endzone_onuseend( var_0, var_1, var_2 )
{
    level.canprocessot = 1;

    if ( var_2 )
        scripts\mp\objidpoolmanager::objective_show_progress( self.objidnum, 0 );

    if ( isplayer( var_1 ) )
    {
        var_1.iscapturing = 0;
        var_1 setclientomnvar( "ui_objective_state", 0 );
        var_1.ui_dom_securing = undefined;
    }

    var_3 = scripts\mp\gameobjects::getownerteam();
    scripts\mp\gameobjects::setobjectivestatusicons( level.icondefendendzone, level.iconcaptureendzone );

    if ( !var_2 )
        self.neutralized = 0;
}

endzone_onuse( var_0 )
{
    level.canprocessot = 1;
    var_1 = var_0.team;
    var_2 = scripts\mp\gameobjects::getownerteam();
    var_3 = scripts\mp\utility\game::getotherteam( var_1 )[0];
    scripts\mp\objidpoolmanager::objective_set_progress( self.objidnum, 0 );
    scripts\mp\objidpoolmanager::objective_show_progress( self.objidnum, 0 );
    self.capturetime = gettime();
    self.neutralized = 0;
    thread scripts\mp\utility\print::printandsoundoneveryone( var_1, var_3, undefined, undefined, "mp_dom_flag_captured", "mp_dom_flag_lost", var_0 );
    endzone_setcaptured( var_1, var_0 );

    if ( !self.neutralized )
    {
        if ( isdefined( level.onobjectivecomplete ) )
            [[ level.onobjectivecomplete ]]( "dompoint", self.objectivekey, var_0, var_1, var_2, self );
    }

    level thread arena_endgame( var_0.team, game["end_reason"]["objective_completed"], undefined, 0, 2 );
}

endzone_oncontested()
{
    scripts\mp\gameobjects::setobjectivestatusicons( level.iconcontestendzone );
    scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, undefined );
}

endzone_onuncontested( var_0 )
{
    var_1 = scripts\mp\gameobjects::getownerteam();
    scripts\mp\gameobjects::setobjectivestatusicons( level.icondefendendzone, level.iconcaptureendzone );
    self.processot = 1;
}

endzone_setcaptured( var_0, var_1 )
{
    scripts\mp\gameobjects::setownerteam( var_0 );
    self notify( "capture", var_1 );
    self notify( "assault", var_1 );
    scripts\mp\gameobjects::setobjectivestatusicons( level.icondefendendzone, level.iconcaptureendzone );
    self.neutralized = 0;

    if ( self.touchlist[var_0].size == 0 )
        self.touchlist = self.oldtouchlist;

    thread giveflagcapturexp( self.touchlist[var_0], var_1 );

    if ( isdefined( level.matchrecording_logevent ) )
        [[ level.matchrecording_logevent ]]( self.logid, undefined, self.logeventflag, self.visuals[0].origin[0], self.visuals[0].origin[1], gettime(), scripts\engine\utility::ter_op( var_0 == "allies", 1, 2 ) );

    scripts\mp\analyticslog::logevent_gameobject( self.analyticslogtype, self.analyticslogid, self.visuals[0].origin, -1, "captured_" + var_0 );
}

endzone_stompprogressreward( var_0 )
{
    var_0 thread scripts\mp\rank::scoreeventpopup( "defend" );
    var_0 thread scripts\mp\awards::givemidmatchaward( "mode_x_defend" );
}

getcapturetype()
{
    var_0 = "normal";

    if ( level.capturetype == 2 )
        var_0 = "neutralize";
    else if ( level.capturetype == 3 )
        var_0 = "persistent";

    return var_0;
}

giveflagcapturexp( var_0, var_1 )
{
    level endon( "game_ended" );
    var_2 = var_1;

    if ( isdefined( var_2.owner ) )
        var_2 = var_2.owner;

    level.lastcaptime = gettime();

    if ( isplayer( var_2 ) )
    {
        level thread scripts\mp\hud_util::teamplayercardsplash( "callout_securedposition", var_2 );
        var_2 thread scripts\common\utility::_id_13E0A( level._id_11B29, "capture", var_2.origin );
    }

    var_3 = getarraykeys( var_0 );

    for ( var_4 = 0; var_4 < var_3.size; var_4++ )
    {
        var_5 = var_0[var_3[var_4]].player;

        if ( isdefined( var_5.owner ) )
            var_5 = var_5.owner;

        if ( !isplayer( var_5 ) )
            continue;

        var_5 scripts\mp\utility\stats::incpersstat( "captures", 1 );
        var_5 scripts\mp\persistence::statsetchild( "round", "captures", var_5.pers["captures"] );
        var_5 thread scripts\mp\rank::scoreeventpopup( "capture" );
        var_5 thread scripts\mp\awards::givemidmatchaward( "mode_dom_secure" );
        wait 0.05;
    }
}

startotmechanics()
{
    if ( level.objmodifier == 1 )
    {
        foreach ( var_1 in level.objectives )
        {
            if ( var_1.objectivekey != "_a" )
                var_1 deleteendzone();
        }
    }

    level.canprocessot = 1;

    if ( !isdefined( level.arenaflag.objidnum ) )
        level.arenaflag scripts\mp\gameobjects::requestid( 1, 1, undefined, 0, 0 );

    level.arenaflag scripts\mp\gameobjects::setobjectivestatusicons( level.iconneutral );
    level.arenaflag scripts\mp\gameobjects::enableobject();
    level.arenaflag scripts\mp\gameobjects::allowuse( "enemy" );
    level.arenaflag.flagmodel show();

    if ( level.spawnflag )
        game["dialog"]["overtime"] = "gamestate_overtime_flagspawn";

    level thread _id_13311();
    level.arenaflag.flagmodel playsound( "flag_spawned" );
    scripts\mp\utility\game::setmlgannouncement( 10, "free" );
    level thread showflagoutline();

    if ( istrue( level._id_1343F ) )
    {
        foreach ( var_4 in level.players )
        {
            if ( isalive( var_4 ) )
            {
                var_5 = var_4 scripts\mp\equipment::getcurrentequipment( "primary" );

                if ( isdefined( var_5 ) && var_5 == "equip_snowball" )
                    var_4 scripts\mp\equipment::incrementequipmentammo( "equip_snowball", 10 );
                else if ( !isdefined( var_5 ) )
                {
                    var_4 scripts\mp\equipment::giveequipment( "equip_snowball", "primary" );
                    var_4 scripts\mp\equipment::incrementequipmentammo( "equip_snowball", 10 );
                }
            }
        }
    }
}

_id_13311()
{
    wait 0.15;

    if ( istrue( level.arenaflag._id_126CD ) )
        return;

    foreach ( var_1 in level.players )
    {
        if ( var_1 issplitscreenplayer() && !var_1 issplitscreenplayerprimary() )
            continue;

        var_1 scripts\mp\utility\dialog::leaderdialogonplayer( "overtime" );
    }
}

deleteendzone()
{
    self notify( "monitor_flag_control" );
    scripts\mp\gameobjects::allowuse( "none" );
    scripts\mp\gameobjects::setvisibleteam( "none" );
    scripts\mp\gameobjects::releaseid();
    self.trigger = undefined;
    self notify( "deleted" );
    self.visibleteam = "none";

    if ( isdefined( self.scriptable ) )
        self.scriptable delete();

    self.flagmodel delete();
}

dogtagallyonusecb( var_0 )
{
    var_0.health = var_0.maxhealth;
    var_0 notify( "healed" );
}

dogtagenemyonusecb( var_0 )
{
    var_0.health = var_0.maxhealth;
    var_0 notify( "healed" );
}

outlineenemyplayers()
{
    level endon( "prematch_done" );
    level endon( "removeArenaOutlines" );

    for (;;)
    {
        level waittill( "spawned_player" );
        waitframe();

        foreach ( var_1 in level.players )
        {
            var_2 = var_1 getentitynumber();

            if ( !isdefined( var_1.outlinedenemies ) )
            {
                if ( !isdefined( level.activeoutlines ) )
                    level.activeoutlines = 1;
                else
                    level.activeoutlines++;
            }

            foreach ( var_4 in level.players )
            {
                if ( var_4 != var_1 && var_4.team != var_1.team )
                {
                    if ( isdefined( var_1.outlinedenemies ) )
                        scripts\mp\utility\outline::outlinedisable( var_1.outlinedenemies, var_1 );

                    var_1.outlinedenemies = scripts\mp\utility\outline::outlineenableforteam( var_1, var_4.team, "outline_nodepth_orange", "level_script" );
                    break;
                }
            }
        }
    }
}

removeenemyoutlines()
{
    thread notifyremoveoutlines();
    level scripts\engine\utility::_id_143A5( "prematch_done", "removeArenaOutlines" );

    foreach ( var_1 in level.players )
    {
        var_2 = var_1 getentitynumber();

        if ( isdefined( var_1.outlinedenemies ) )
        {
            level.activeoutlines--;
            scripts\mp\utility\outline::outlinedisable( var_1.outlinedenemies, var_1 );
            var_1.outlinedenemies = undefined;
        }
    }
}

notifyremoveoutlines()
{
    level endon( "prematch_done" );
    level waittill( "match_start_real_countdown" );

    if ( level.prematchperiodend > 5 )
        var_0 = int( max( level.prematchperiodend - 5, 5 ) );
    else
        var_0 = int( max( level.prematchperiodend - 2, 2 ) );

    wait( var_0 );
    level notify( "removeArenaOutlines" );
}

outlineequipmentwatchplayerprox( var_0, var_1 )
{
    self endon( "death" );
    self endon( "trigger" );
    self.outlinedplayers = [];
    var_2 = level.baseraritymap[var_1];
    var_3 = getoutlineasset( var_2, var_1 );

    for (;;)
    {
        foreach ( var_5 in level.players )
        {
            if ( isdefined( var_5.hasarenaspawned ) )
            {
                var_6 = distance2dsquared( self.origin, var_5.origin );
                var_7 = var_5 getentitynumber();

                if ( var_6 < 490000 )
                {
                    if ( !isdefined( self.outlinedplayers[var_7] ) )
                    {
                        if ( !isdefined( level.activeoutlines ) )
                            level.activeoutlines = 1;
                        else
                            level.activeoutlines++;

                        self.outlinedplayers[var_7] = scripts\mp\utility\outline::outlineenableforplayer( self, var_5, var_3, "level_script" );
                    }
                }
                else if ( isdefined( self.outlinedplayers[var_7] ) )
                {
                    level.activeoutlines--;
                    scripts\mp\utility\outline::outlinedisable( self.outlinedplayers[var_7], self );
                    self.outlinedplayers[var_7] = undefined;
                }
            }
        }

        waitframe();
    }
}

outlinewatchplayerprox()
{
    self endon( "death" );
    self endon( "trigger" );
    self.outlinedplayers = [];
    var_0 = scripts\mp\weapons::getitemweaponname();
    var_1 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    var_2 = level.baseraritymap[var_1 + "_mp"];
    var_3 = getoutlineasset( var_2 );

    for (;;)
    {
        foreach ( var_5 in level.players )
        {
            if ( isdefined( var_5.hasarenaspawned ) )
            {
                var_6 = distance2dsquared( self.origin, var_5.origin );
                var_7 = var_5 getentitynumber();

                if ( var_6 < 490000 )
                {
                    if ( !isdefined( self.outlinedplayers[var_7] ) )
                    {
                        if ( !isdefined( level.activeoutlines ) )
                            level.activeoutlines = 1;
                        else
                            level.activeoutlines++;

                        self.outlinedplayers[var_7] = scripts\mp\utility\outline::outlineenableforplayer( self, var_5, var_3, "level_script" );
                    }
                }
                else if ( isdefined( self.outlinedplayers[var_7] ) )
                {
                    level.activeoutlines--;
                    scripts\mp\utility\outline::outlinedisable( self.outlinedplayers[var_7], self );
                    self.outlinedplayers[var_7] = undefined;
                }
            }
        }

        waitframe();
    }
}

getoutlineasset( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 0;

    var_2 = "white";
    var_3 = int( min( var_0, 8 ) );

    switch ( var_3 )
    {
        case 0:
            var_2 = "outline_depth_white";
            break;
        case 1:
            var_2 = "outline_depth_green";
            break;
        case 2:
            var_2 = "outline_depth_cyan";
            break;
        case 3:
            var_2 = "outline_depth_red";
            break;
        case 4:
            var_2 = "outline_depth_orange";
            break;
        case 5:
            var_2 = "outline_depth_yellow";
            break;
        case 6:
            var_2 = "outline_depth_blue";
            break;
        case 7:
            var_2 = "outline_depth_green";
            break;
        case 8:
            var_2 = "outline_depth_red";
            break;
    }

    if ( istrue( level._id_1343F ) && isdefined( var_1 ) && var_1 == "equip_pball" )
        var_2 = "outline_depth_yellow";

    return var_2;
}

clearweaponoutlines()
{
    foreach ( var_2, var_1 in self.outlinedplayers )
    {
        level.activeoutlines--;
        scripts\mp\utility\outline::outlinedisable( var_1, self );
        var_1 = undefined;
    }
}

selflookatfriendly()
{
    level endon( "prematch_ended" );
    var_0 = undefined;
    var_1 = 0;

    while ( isdefined( level.matchcountdowntime ) && level.matchcountdowntime > 5 )
    {
        var_2 = scripts\mp\utility\teams::getfriendlyplayers( self.team, 1 );

        if ( var_2.size > 1 )
        {
            var_1 = 1;
            break;
        }

        waitframe();
    }

    if ( var_1 )
    {
        var_3 = self.angles;
        var_4 = 0;
        var_5 = scripts\mp\utility\teams::getteamdata( self.team, "players" );

        foreach ( var_7 in var_5 )
        {
            if ( var_7 != self )
                var_0 = var_7;
        }

        var_9 = var_0.origin - self.origin;
        var_10 = self.origin - var_0.origin;
        var_11 = anglestoright( self.angles );
        var_12 = vectordot( var_11, var_9 );
        var_13 = 0;
        var_14 = 0;

        if ( var_12 < 0 )
        {
            var_15 = 85;
            var_13 = 1;
        }
        else
        {
            var_15 = -90;
            var_14 = 1;
        }

        if ( isdefined( var_0 ) )
        {
            if ( var_13 )
            {
                if ( !isbot( self ) )
                {
                    wait 0.5;

                    if ( self.currentweapon.basename != "none" )
                        self forceplaygestureviewmodel( "ges_crush_turnleft" );
                }
            }
            else if ( !isbot( self ) )
            {
                wait 0.5;

                if ( self.currentweapon.basename != "none" )
                    self forceplaygestureviewmodel( "ges_crush_turnright" );
            }

            wait 3;
            scripts\mp\utility\player::_freezecontrols( 0 );
            return;
        }

        scripts\mp\utility\player::_freezecontrols( 0 );
        return;
    }
    else
        scripts\mp\utility\player::_freezecontrols( 0 );
}

updatematchstatushintonspawn()
{
    level endon( "game_ended" );
    self setclientomnvar( "ui_match_status_hint_text", 0 );
}

seticonnames()
{
    level.iconcaptureendzone = "waypoint_capture_endzone";
    level.icondefendendzone = "waypoint_defend_endzone";
    level.iconcontestendzone = "waypoint_contesting_endzone";
    level.icontakingendzone = "waypoint_taking_endzone";
    level.iconlosingendzone = "waypoint_losing_endzone";
    level.iconneutral = "waypoint_captureneutral";
    level.iconcapture = "waypoint_capture";
    level.icondefend = "waypoint_defend";
    level.iconcontested = "waypoint_contested";
    level.icontaking = "waypoint_taking";
    level.iconlosing = "waypoint_losing";
    level.icondefending = "waypoint_defending";
}

setupwaypointicons()
{
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_taking_endzone", 0, "friendly", "MP_INGAME_ONLY/OBJ_TAKING_CAPS", "icon_waypoint_flag", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_losing_endzone", 0, "enemy", "MP_INGAME_ONLY/OBJ_LOSING_CAPS", "icon_waypoint_flag", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_contesting_endzone", 0, "contest", "MP_INGAME_ONLY/OBJ_CONTESTED_CAPS", "icon_waypoint_flag", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_capture_endzone", 0, "enemy", "MP_INGAME_ONLY/OBJ_CAPTURE_CAPS", "icon_waypoint_flag", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_defend_endzone", 0, "friendly", "MP_INGAME_ONLY/OBJ_DEFEND_CAPS", "icon_waypoint_flag", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_dom_a", 0, "friendly", "MP_INGAME_ONLY/OBJ_CAPTURE_CAPS", "icon_waypoint_overtime", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_taking_a", 0, "friendly", "MP_INGAME_ONLY/OBJ_TAKING_CAPS", "icon_waypoint_overtime", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_capture_a", 0, "enemy", "MP_INGAME_ONLY/OBJ_CAPTURE_CAPS", "icon_waypoint_overtime", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_defend_a", 0, "friendly", "MP_INGAME_ONLY/OBJ_DEFEND_CAPS", "icon_waypoint_overtime", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_defending_a", 0, "friendly", "MP_INGAME_ONLY/OBJ_DEFENDING_CAPS", "icon_waypoint_overtime", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_blocking_a", 0, "friendly", "MP_INGAME_ONLY/OBJ_BLOCKING_CAPS", "icon_waypoint_overtime", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_blocked_a", 0, "friendly", "MP_INGAME_ONLY/OBJ_BLOCKED_CAPS", "icon_waypoint_overtime", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_losing_a", 0, "enemy", "MP_INGAME_ONLY/OBJ_LOSING_CAPS", "icon_waypoint_overtime", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_captureneutral_a", 0, "neutral", "MP_INGAME_ONLY/OBJ_CAPTURE_CAPS", "icon_waypoint_overtime", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_contested_a", 0, "contest", "MP_INGAME_ONLY/OBJ_CONTESTED_CAPS", "icon_waypoint_overtime", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_dom_target_a", 0, "neutral", "MP_INGAME_ONLY/OBJ_TARGET_CAPS", "icon_waypoint_overtime", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_target_a", 0, "neutral", "MP_INGAME_ONLY/OBJ_TARGET_CAPS", "icon_waypoint_overtime", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_ot_a", 1, "neutral", "MP_INGAME_ONLY/OBJ_OTFLAGLOC_CAPS", "icon_waypoint_overtime", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_dogtags", 1, "enemy", "", "icon_minimap_dogtag", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_dogtags_friendly", 1, "friendly", "", "icon_minimap_dogtag", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_dogtags_skull", 1, "enemy", "", "icon_minimap_dogtag_skull", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_dogtags_skull_fr", 1, "friendly", "", "icon_minimap_dogtag_skull", 0 );
}

isnormalloadouts()
{
    return level.arenaloadouts == 1;
}

israndomloadouts()
{
    return level.arenaloadouts == 2;
}

ispickuploadouts()
{
    return level.arenaloadouts == 3 || level.arenaloadouts == 14;
}

isgungameloadouts()
{
    return level.arenaloadouts == 4;
}

isrvsgungameloadouts()
{
    return level.arenaloadouts == 5;
}

israndompreviewloadouts()
{
    return level.arenaloadouts == 6;
}

usb_left()
{
    return level.arenaloadouts == 7;
}

usbwm()
{
    return level.arenaloadouts == 8;
}

usbserver()
{
    return level.arenaloadouts == 9;
}

usbvm()
{
    return level.arenaloadouts == 10;
}

use_airdrop_fx()
{
    return level.arenaloadouts == 11;
}

usbmodel()
{
    return level.arenaloadouts == 12;
}

usb_right()
{
    return level.arenaloadouts == 13;
}

updatec4vehiclemultkill()
{
    return level.arenaloadouts == 14;
}

usb_tape_animation_test()
{
    return level.arenaloadouts == 15;
}

usbs_pulled_out()
{
    return level.arenaloadouts == 16;
}

_id_1343F()
{
    if ( istrue( game["practiceRound"] ) || istrue( level.brmissionscompleted ) )
    {
        level.startweapon.weapon = "equip_snowball";
        level.lethaldelay = 0;
        defineplayerloadout( 1 );
    }

    initweaponmap();
    thread _id_1326D();
}

_id_1326D()
{
    level.arenaweapont1.weapon = "equip_snowball";

    if ( !istrue( level.brmissionscompleted ) && !istrue( game["practiceRound"] ) )
    {
        level.arenaweapont1.weapon = scripts\engine\utility::ter_op( scripts\engine\utility::cointoss(), level.arenaweapont1.weapon, "equip_snowball" );
        level.arenaweapont2.weapon = scripts\engine\utility::ter_op( scripts\engine\utility::cointoss(), level.arenaweapont2.weapon, "equip_snowball" );
        level.arenaweapont3.weapon = scripts\engine\utility::ter_op( scripts\engine\utility::cointoss(), level.arenaweapont3.weapon, "equip_snowball" );
        level.arenaweapont4.weapon = scripts\engine\utility::ter_op( scripts\engine\utility::cointoss(), level.arenaweapont4.weapon, "equip_snowball" );
        level.arenaweapont5.weapon = scripts\engine\utility::ter_op( scripts\engine\utility::cointoss(), level.arenaweapont5.weapon, "equip_snowball" );
        level.arenaweapont6.weapon = scripts\engine\utility::ter_op( scripts\engine\utility::cointoss(), level.arenaweapont6.weapon, "equip_snowball" );
        level.arenaweapont7.weapon = scripts\engine\utility::ter_op( scripts\engine\utility::cointoss(), level.arenaweapont7.weapon, "equip_snowball" );
        level.arenaweapont8.weapon = scripts\engine\utility::ter_op( scripts\engine\utility::cointoss(), level.arenaweapont8.weapon, "equip_snowball" );
    }

    level._id_12344 = 0;
    var_0 = scripts\engine\utility::getstructarray( "weapon_pickup", "targetname" );

    foreach ( var_2 in var_0 )
    {
        if ( istrue( level.brmissionscompleted ) || istrue( game["practiceRound"] ) || level.arenaloadouts != 3 )
        {
            spawnweapon( var_2, level.arenaweapont1 );
            continue;
        }

        if ( var_2.script_label == "1" )
        {
            spawnweapon( var_2, level.arenaweapont1 );
            continue;
        }

        if ( var_2.script_label == "2" )
        {
            spawnweapon( var_2, level.arenaweapont2 );
            continue;
        }

        if ( var_2.script_label == "3" )
        {
            spawnweapon( var_2, level.arenaweapont3 );
            continue;
        }

        if ( var_2.script_label == "4" )
        {
            spawnweapon( var_2, level.arenaweapont4 );
            continue;
        }

        if ( var_2.script_label == "5" )
        {
            spawnweapon( var_2, level.arenaweapont5 );
            continue;
        }

        if ( var_2.script_label == "6" )
        {
            spawnweapon( var_2, level.arenaweapont6 );
            continue;
        }

        if ( var_2.script_label == "7" )
        {
            spawnweapon( var_2, level.arenaweapont7 );
            continue;
        }

        if ( var_2.script_label == "8" )
            spawnweapon( var_2, level.arenaweapont8 );
    }
}

_id_144F3( var_0, var_1 )
{
    self endon( "death" );
    self waittill( "trigger", var_2, var_3 );
    var_4 = 0;
    var_5 = checkissameequip( var_2 );
    var_6 = checkpickupequiptypeammocount( var_2 );

    if ( self.equipment == "equip_snowball" )
        var_7 = 10;
    else
        var_7 = 1;

    var_8 = checkcurrentequiptypeammocount( var_2 );
    var_9 = 1;

    switch ( var_1 )
    {
        case "pile":
            var_9 = 10;
            break;
        case "pyramid":
            var_9 = 5;
            break;
        default:
            var_9 = 1;
            break;
    }

    if ( var_5 )
    {
        if ( var_6 == var_7 )
            var_4 = 1;
    }

    if ( var_5 && !var_4 )
        var_2 scripts\mp\equipment::incrementequipmentammo( self.equipment, var_9 );
    else if ( var_8 && !var_5 && !isplayer( var_0 ) )
        var_2 dropoldequipinplace( var_2 scripts\mp\equipment::getcurrentequipment( self.equiptype ) );

    if ( !var_5 )
    {
        var_2 scripts\mp\equipment::giveequipment( self.equipment, self.equiptype );

        if ( self.equipment == "equip_snowball" && !var_4 )
            var_2 scripts\mp\equipment::incrementequipmentammo( self.equipment, var_9 );
    }

    if ( var_5 && var_4 )
    {
        var_2 iprintlnbold( &"MP_INGAME_ONLY/EQUIPMENT_MAXED" );
        thread watchequipmentpickup();
    }
    else
    {
        var_2 playlocalsound( "scavenger_pack_pickup" );
        playfx( level._id_13443["vanish"], self.origin );
        clearweaponoutlines();

        if ( !isplayer( var_0 ) )
            level thread _id_14398( var_0 );

        self makeunusable();
        self delete();
    }
}

_id_14398( var_0 )
{
    level endon( "game_ended" );
    wait 15;
    playfx( level._id_13443["vanish"], var_0.origin );
    spawnweapon( var_0, level.arenaweapont1 );
}

_id_13441()
{
    level scripts\mp\flags::gameflagwait( "prematch_done" );
    wait 1;
    self allowmelee( 0 );
}

removefromlittlebirdmglistondeath()
{
    if ( scripts\mp\utility\game::matchmakinggame() )
        return getdvarint( "scr_arena_knivesout", 0 );
    else if ( validateevents( level.arenaweapont1.weapon ) && validateevents( level.arenaweapont2.weapon ) && validateevents( level.arenaweapont3.weapon ) && validateevents( level.arenaweapont4.weapon ) && validateevents( level.arenaweapont5.weapon ) && validateevents( level.arenaweapont6.weapon ) && validateevents( level.arenaweapont7.weapon ) && validateevents( level.arenaweapont8.weapon ) )
    {
        if ( validateevents( level.startweapon.weapon ) )
            return 2;
        else
            return 1;
    }

    return 0;
}

validateevents( var_0 )
{
    if ( var_0 == "equip_throwing_knife" || var_0 == "equip_throwing_knife_fire" || var_0 == "equip_throwing_knife_electric" || var_0 == "equip_throwing_knife_drill" )
        return 1;
    else
        return 0;
}

player_give_intel_3_ks()
{
    switch ( level.calloutmarkerpingvo_getcalloutaliasstringvehicle )
    {
        case "super_weapon_drop":
        case "super_emp_drone":
        case "super_recon_drone":
            level.calloutmarkerpingvo_getcalloutaliasstringvehicle = "super_ammo_drop";
            break;
        default:
            break;
    }

    return level.calloutmarkerpingvo_getcalloutaliasstringvehicle;
}
