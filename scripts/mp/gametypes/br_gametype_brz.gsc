// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    scripts\mp\gametypes\br_gametypes.gsc::move_molotov_mortar( "ignoreZombiesLastStandWipe" );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "playerShouldRespawn", ::_id_12691 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "playerSkipLootPickup", ::_id_1269C );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "playerSkipKioskUse", ::_id_1269B );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "onPlayerKilled", ::onplayerkilled );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "vipRespawnPlayer", ::_id_142CC );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "markPlayerAsEliminatedOnKilled", ::_id_11B16 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "addToTeamLives", ::addtoteamlives );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "removeFromTeamLives", ::removefromteamlives );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "allowMeleeVehicleDamage", ::brking_cleanupents );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "playerNakedDropLoadout", ::_id_12604 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "remainingPlayersAliveOnTeam", ::_id_12BBA );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "dropOnPlayerDeath", ::droponplayerdeath );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "shouldLastStandDamageScale", ::_id_13308 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "dangerCircleTick", ::dangercircletick );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "exfilStart", ::onnewequipmentpickup );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "gulagWinnerRespawn", ::gulagwinnerrespawn );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "mayConsiderPlayerDead", ::_id_11B80 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "spawnHandled", scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_1365D );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "modifyPlayerDamage", scripts\mp\gametypes\br_alt_mode_zxp.gsc::modifyplayerdamage );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "modifyVehicleDamage", scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_11CA1 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "ignoreVehicleExplosiveDamage", scripts\mp\gametypes\br_alt_mode_zxp.gsc::standard_health );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "regenHealthAdd", scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_1264B );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "regenDelaySpeed", scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_1264A );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "lastStandAllowed", scripts\mp\gametypes\br_alt_mode_zxp.gsc::watch_flight_collision );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "kioskRevivePlayer", scripts\mp\gametypes\br_alt_mode_zxp.gsc::wait_for_chopper_boss_finish_turning );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "onPlayerDamaged", scripts\mp\gametypes\br_alt_mode_zxp.gsc::onplayerdamaged );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B11( "endGame", scripts\mp\gametypes\br_alt_mode_zxp.gsc::spawnangle );
    level.disable_super_in_turret._id_146C6 = 0;
    level.disable_super_in_turret._id_11B76 = getdvarint( "scr_br_zxp_maxTagsVisible", 0 );
    level.disable_super_in_turret._id_11B74 = getdvarfloat( "scr_br_zxp_maxRadius", 0 );
    level.disable_super_in_turret._id_11B75 = level.disable_super_in_turret._id_11B74 * level.disable_super_in_turret._id_11B74;
    level.disable_super_in_turret._id_13A25 = getdvarint( "scr_br_zxp_autoPickup", 1 );
    level.disable_super_in_turret.spawndomplates = getdvarint( "scr_br_zxp_human_powers", 0 );
    level.disable_super_in_turret._id_146B2 = getdvarint( "scr_br_zxp_zombie_drop_tags", 0 );
    level.disable_super_in_turret._id_11B5B = getdvarint( "scr_br_zxp_max_tags", 0 );
    level.disable_super_in_turret.spawndomplateflagtestmap = getdvarint( "scr_br_zxp_human_loadout_restore", 0 );
    level.disable_super_in_turret._id_12CB0 = [];
    level.disable_super_in_turret._id_12CB1 = [];
    game["dialog"]["zmb_teammate_back_human"] = "zombie_teammate_back_human";
    level.br_infils_disabled = 0;
    thread toggleusbstickinhand();
}

toggleusbstickinhand()
{
    waittillframeend;
    thread scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_1472D();
    thread _id_11CFB();
}

_id_11CFB()
{
    for (;;)
    {
        foreach ( var_1 in level.teamnamelist )
        {
            var_2 = scripts\mp\gametypes\br_public.gsc::round_enemies_fallback_logic( var_1 );

            for ( var_3 = 0; var_3 < var_2.size; var_3++ )
            {
                var_4 = var_2[var_3];
                var_5 = scripts\mp\gametypes\br_public.gsc::rotationids( var_1, var_4 );

                if ( var_5 > 0 )
                {
                    var_6 = use_emp_drone( var_1, var_4 );

                    if ( !var_6 )
                    {
                        votesys_init( var_1, var_4 );
                        scripts\mp\utility\script::laststand_dogtags( "monitorAllZombieTeamFixup - found invalid team" );
                    }
                }
            }
        }

        wait 1;
    }
}

_id_126F1()
{
    self endon( "disconnect" );
    self waittill( "spawned_player" );
    wait 1;

    if ( !istrue( game["liveLobbyCompleted"] ) )
        scripts\mp\hud_message::showsplash( "br_gametype_zxp_prematch_welcome" );

    if ( !istrue( level.br_infils_disabled ) )
    {
        self waittill( "br_jump" );

        while ( !self isonground() )
            waitframe();
    }
    else
        level waittill( "prematch_done" );

    scripts\mp\gametypes\br_analytics.gsc::detachriotshield( self );

    if ( isalive( self ) && !scripts\mp\gametypes\br_public.gsc::_id_125F3() )
        thread _id_125DB();

    wait 1;
    scripts\mp\hud_message::showsplash( "br_gametype_zxp_welcome" );
    scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "primary_objective", self, 0 );
}

_id_13148()
{
    var_0 = -15;
    var_1 = scripts\mp\gametypes\br_circle.gsc::relic_amped_pick_random_valid_player( 1 );
    var_2 = max( 0, var_1 + var_0 );
    var_3 = getdvarfloat( "scr_br_dropbag_delay", var_2 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_12B10( "dropBagDelay", var_3 );
}

_id_14691( var_0 )
{
    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "zmb_opening", 0, var_0 );
    wait 1;
    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "zmb_infil_tutorial_01", 0, var_0 );
}

_id_12051()
{
    self endon( "disconnect" );
    var_0 = self;
    wait 3;

    while ( !var_0 isonground() )
        wait 2;

    scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "zmb_infil_tutorial_02", var_0 );
}

_id_11B16()
{
    return scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_11B16();
}

_id_12691( var_0 )
{
    if ( !istrue( level.br_prematchstarted ) )
        return 1;

    if ( scripts\mp\gametypes\br_public.gsc::iswaitingtoentergulag( self ) )
        return 1;

    return scripts\mp\gametypes\br_public.gsc::_id_125F3();
}

_id_11B80( var_0, var_1 )
{
    var_2 = 0;
    var_3 = use_emp_drone( var_0.team, var_0.squadindex, var_0 );

    if ( !istrue( self.gulag ) && scripts\mp\gametypes\br_zones.gsc::updatelocationbesttimehud( "plague", var_0 ) )
    {
        if ( var_3 )
            var_2 = var_0 scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_126D2( var_1 );
    }
    else if ( !var_0 scripts\mp\gametypes\br_public.gsc::_id_125F3() )
        var_2 = var_0 scripts\mp\gametypes\br_gulag.gsc::trygulagspawn();

    if ( scripts\mp\flags::gameflag( "prematch_done" ) && !var_2 )
    {
        if ( var_0 scripts\mp\gametypes\br_public.gsc::_id_125F3() )
            thread scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_12538();

        scripts\mp\gametypes\br.gsc::_id_11B15( var_0 );

        if ( !var_3 )
            votesys_init( var_0.team, var_0.squadindex, var_0 );
    }

    return !var_2;
}

use_emp_drone( var_0, var_1, var_2 )
{
    var_3 = isdefined( level.gulag ) && !istrue( level.gulag.shutdown );
    var_4 = scripts\mp\gametypes\br_public.gsc::round_enemy_stuck_logic( var_0, var_1 );

    foreach ( var_6 in var_4 )
    {
        if ( isdefined( var_2 ) && var_6 == var_2 )
            continue;

        if ( istrue( var_3 ) && var_6 scripts\mp\gametypes\br_public.gsc::updateinstantclassswapallowedinternal() )
            return 1;

        var_7 = var_6 scripts\mp\gametypes\br_public.gsc::_id_125F3() || var_6 scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_125E9();

        if ( !var_7 && isalive( var_6 ) && !istrue( var_6.inlaststand ) )
            return 1;

        if ( istrue( var_6.inlaststand ) && ( istrue( var_6.shouldgetnewspawnpoint ) || var_6 scripts\mp\gametypes\br_gulag.gsc::_id_12517() ) )
            return 1;
    }

    return 0;
}

votesys_init( var_0, var_1, var_2 )
{
    var_3 = scripts\mp\gametypes\br_public.gsc::round_enemy_stuck_logic( var_0, var_1 );

    foreach ( var_5 in var_3 )
    {
        if ( isdefined( var_2 ) && var_2 == var_5 )
            continue;

        if ( isalive( var_5 ) )
        {
            var_5 suicide();
            continue;
        }

        if ( var_5 scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_125E9() )
        {
            var_5 scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_12681( 0, 0 );
            scripts\mp\gametypes\br.gsc::_id_11B15( var_5 );
            var_5 scripts\mp\playerlogic::removefromalivecount();
            continue;
        }
    }
}

_id_1269C( var_0 )
{
    return scripts\mp\gametypes\br_public.gsc::_id_125F3();
}

_id_1269B( var_0 )
{
    return scripts\mp\gametypes\br_public.gsc::_id_125F3();
}

_id_13308( var_0 )
{
    var_1 = isplayer( var_0.attacker ) && var_0.attacker scripts\mp\gametypes\br_public.gsc::_id_125F3();
    var_2 = isplayer( var_0.victim ) && var_0.victim scripts\mp\gametypes\br_public.gsc::_id_125F3();

    if ( var_1 && !var_2 && var_0.meansofdeath == "MOD_MELEE" )
        return 0;

    return 1;
}

brking_cleanupents( var_0 )
{
    var_1 = isplayer( var_0.attacker ) && var_0.attacker scripts\mp\gametypes\br_public.gsc::_id_125F3();
    return var_1;
}

_id_12728()
{
    playfx( scripts\engine\utility::getfx( "zombie_trans" ), self.origin );
    self notify( "endSuperJumpFov" );
    _id_1272E( 0 );
    var_0 = gettime() + 3000;

    while ( self isgestureplaying() && var_0 > gettime() )
    {
        self stopgestureviewmodel();
        waitframe();
    }

    while ( var_0 > gettime() && ( self isswitchingweapon() || self isreloading() || self ismantling() || self isthrowinggrenade() || self israisingweapon() || self ismeleeing() || self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "isPlayerADS" ) ]]() ) )
        waitframe();

    self enableoffhandweapons();
    self giveandfireoffhand( "stim_zmb_mp" );
    wait 2;
}

_id_1272E( var_0 )
{
    self allowfire( var_0 );
    self allowmovement( var_0 );
    self allowmelee( var_0 );

    if ( var_0 )
    {
        self playershow();
        self enableoffhandweapons();
    }
    else
    {
        self playerhide();
        self disableoffhandweapons();
    }
}

_id_126FA( var_0 )
{
    if ( !istrue( var_0 ) && !scripts\mp\gametypes\br_public.gsc::_id_125F3() )
        return;

    scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_12681( 0 );
    scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_12727( 0 );

    if ( isdefined( self.operatorcustomization.gender ) && self.operatorcustomization.gender == "female" )
        self _meth_87AA( "female" );
    else
        self _meth_87AA( "" );

    if ( isdefined( self.operatorcustomization.clothtype ) && self.operatorcustomization.clothtype != "" )
        self setclothtype( self.operatorcustomization.clothtype );
    else
        self setclothtype( "vestlight" );

    self._id_12CA8 = 1;
    var_1 = self.origin;
    var_2 = self.origin;
    var_3 = self getplayerangles();
    var_4 = 0;

    if ( level.disable_super_in_turret.spawndragonsbreathstruct )
        [var_2, var_3, var_1] = _id_125DD();
    else
    {
        [var_2, var_3, var_4] = _id_125DE();
        var_1 = var_2;
    }

    self.plotarmor = 1;
    self setscriptablepartstate( "zombie", "off" );
    self setscriptablepartstate( "compassicon", "defaulticon" );
    self setscriptablepartstate( "skydiveVfx", "default", 0 );
    _id_12728();

    if ( !var_4 )
    {
        scripts\mp\gametypes\br_gulag.gsc::gulagfadetoblack();
        wait 1;
    }
    else
        waitframe();

    scripts\mp\class::loadout_emptycacheofloadout( "gamemode" );
    self.pers["gamemodeLoadout"] = level.br_respawn_loadout;
    self.pers["class"] = "gamemode";
    self.class = "gamemode";
    self.forcespawnangles = var_3;
    self.forcespawnorigin = var_1;
    scripts\mp\utility\player::_setsuit( "iw8_defaultsuit_mp" );
    scripts\mp\playerlogic::spawnplayer( undefined, 0 );
    self skydive_deployparachute();
    thread scripts\mp\gametypes\br.gsc::defend_wave_2();
    _id_1272E( 1 );
    self lerpfovbypreset( "default_2seconds" );

    if ( level.disable_super_in_turret._id_1470D )
        thread scripts\mp\supers\super_deadsilence::superdeadsilence_endhudsequence();

    if ( level.disable_super_in_turret._id_1470C )
    {
        scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_125DA();

        if ( !level.disable_super_in_turret._id_1470D )
            self setscriptablepartstate( "headVFX", "neutral" );

        self visionsetnakedforplayer( "", 0 );
    }

    if ( level.disable_super_in_turret.spawndragonsbreathstruct )
    {
        self.plotarmor = undefined;
        scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_126BD( var_2, var_3, var_1 );
    }
    else
    {
        if ( !var_4 )
        {
            scripts\mp\gametypes\br_public.gsc::_id_126ED();
            scripts\mp\gametypes\br_public.gsc::_id_1252B();
            playfx( scripts\engine\utility::getfx( "zombie_trans" ), self.origin );
        }

        if ( !var_4 )
            scripts\mp\gametypes\br_gulag.gsc::gulagfadefromblack();

        thread _id_1252C();
    }

    if ( istrue( level.disable_super_in_turret.spawndomplateflagtestmap ) && scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_125FA() )
        _id_125FB();
    else
    {
        var_7 = scripts\mp\gametypes\br.gsc::disablealltablets();
        scripts\mp\gametypes\br.gsc::searchcircleorigin( var_7, 0 );
    }

    scripts\mp\gametypes\br_armor.gsc::searchcirclesize();
    thread scripts\mp\gametypes\br.gsc::defend_wave_2();
    scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_1262B( 0 );
    scripts\mp\hud_message::showsplash( "br_gametype_zxp_change_human" );
    self.plotarmor = undefined;
    thread _id_125D9();
    self._id_12CA8 = undefined;

    foreach ( var_9 in level.teamdata[self.team]["players"] )
    {
        if ( self != var_9 )
            scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "zmb_teammate_back_human", var_9 );
    }
}

_id_125DD()
{
    var_0 = getdvarint( "scr_br_zxp_spawnheightoffset", 3000 );
    var_1 = scripts\mp\gametypes\br_public.gsc::relic_nuketimer_gettimeformission() / 1000;
    var_2 = scripts\mp\gametypes\br_gulag.gsc::_id_125BE( 0, var_1, var_0 );
    var_3 = scripts\mp\gametypes\br_gulag.gsc::_id_1263E( var_2 );
    return [ var_2.origin, var_2.angles, var_3 ];
}

_id_125DE()
{
    [var_1, var_2, var_3] = _id_125D8();

    if ( !var_3 )
        scripts\mp\gametypes\br_public.gsc::_id_126B9( var_1 );

    return [ var_1, var_2, var_3 ];
}

_id_125D8()
{
    var_0 = 500;
    var_1 = 10000;
    var_2 = 5;

    if ( !isdefined( level.br_circle ) || !isdefined( level.br_circle.dangercircleent ) )
        return [ self.origin, self getplayerangles(), 1 ];

    var_3 = scripts\mp\gametypes\br_circle.gsc::getdangercircleradius();
    var_4 = scripts\mp\gametypes\br_circle.gsc::getdangercircleorigin();
    var_5 = distance2dsquared( self.origin, var_4 );

    if ( var_5 <= var_3 * var_3 )
        return [ self.origin, self getplayerangles(), 1 ];

    var_6 = undefined;
    var_7 = undefined;
    var_8 = ( self.origin[0], self.origin[1], 0 );
    var_9 = vectornormalize( var_8 - var_4 );

    for ( var_10 = 1; var_10 <= var_2; var_10++ )
    {
        var_11 = var_3 - var_0 * var_10;

        if ( var_11 < 0 )
            break;

        [var_6, var_7] = remove_marker_when_player_disconnects( var_4, var_9, var_11 );

        if ( isdefined( var_6 ) )
            break;
    }

    if ( !isdefined( var_6 ) )
    {
        var_6 = var_4;
        var_7 = self getplayerangles();
    }

    var_13 = scripts\mp\gametypes\br_public.gsc::modifyplayer_damage( var_6, var_1 );
    return [ var_13, var_7, 0 ];
}

remove_marker_when_player_disconnects( var_0, var_1, var_2 )
{
    var_3 = var_0 + var_1 * var_2;
    var_4 = scripts\mp\gametypes\br_public.gsc::relic_nuketimer_gettimeformission() / 1000;

    if ( scripts\mp\gametypes\br_gulag.gsc::set_relic_rocket_kill_ammo( var_3, var_4 ) )
    {
        var_5 = vectortoangles( var_1 * -1 );
        return [ var_3, var_5 ];
    }
    else
        return [ undefined, undefined ];
}

_id_125D9()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "zombie_set" );

    while ( !self isonground() )
        waitframe();

    thread _id_125DB();
}

_id_125FB()
{
    self takeallweapons( 0, 1 );
    scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
    self.equipment["primary"] = undefined;
    self.equipment["secondary"] = undefined;
    self.equipment["health"] = undefined;
    self.equipment["super"] = undefined;
    var_0 = getcompleteweaponname( "iw8_fists_mp" );

    if ( self._id_1472F._id_12889.size < 2 )
        self giveweapon( var_0 );

    var_1 = 0;

    foreach ( var_3 in self._id_1472F._id_12889 )
    {
        var_4 = createheadicon( var_3 );
        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_3 );

        if ( !var_1 )
        {
            self assignweaponprimaryslot( var_4 );
            scripts\cp_mp\utility\inventory_utility::_switchtoweapon( var_3 );
            var_1 = 1;
        }

        scripts\mp\weapons::fixupplayerweapons( self, var_4 );
    }

    foreach ( var_7 in self._id_1472F.offhands )
    {
        var_8 = scripts\mp\equipment::getequipmentreffromweapon( var_7 );

        if ( !isdefined( var_8 ) )
            continue;

        var_9 = self._id_1472F.nvidiaansel_overridecollisionradius[var_8];

        if ( !isdefined( var_9 ) )
            continue;

        scripts\mp\equipment::giveequipment( var_8, var_9 );
    }

    foreach ( var_4, var_12 in self._id_1472F.brtruck_ontimelimit )
    {
        self setweaponammostock( var_4, var_12 );
        var_3 = getcompleteweaponname( getweaponbasename( var_4 ) );
        var_13 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_3 );

        if ( isdefined( var_13 ) )
        {
            self.br_ammo[var_13] = var_12;
            scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_hud_update_ammotype( var_13 );
        }
    }

    foreach ( var_4, var_12 in self._id_1472F.brtdm_config )
        self setweaponammoclip( var_4, var_12 );

    foreach ( var_4, var_12 in self._id_1472F.brtruck_cleanupents )
        self setweaponammoclip( var_4, var_12, "left" );

    waitframe();
    var_16 = var_0;

    if ( isdefined( self._id_1472F.current ) && self._id_1472F.current != getcompleteweaponname( "none" ) )
        var_16 = self._id_1472F.current;

    self switchtoweaponimmediate( var_16 );

    if ( isdefined( self._id_1472F.super ) )
    {
        var_17 = level.br_pickups.br_superreference[level.br_pickups.br_equipnametoscriptable[self._id_1472F.super]];
        scripts\mp\gametypes\br_pickups.gsc::forcegivesuper( var_17, 0 );
    }

    thread scripts\cp_mp\gestures::_id_13E1A();
    self._id_1472F = undefined;
}

addtoteamlives( var_0, var_1 )
{
    var_0 scripts\mp\gametypes\br_alt_mode_zxp.gsc::addtoteamlives( var_0, var_1 );
}

removefromteamlives( var_0, var_1 )
{
    var_0 scripts\mp\gametypes\br_alt_mode_zxp.gsc::removefromteamlives( var_0, var_1 );
}

_id_1472E( var_0 )
{
    if ( level.disable_super_in_turret.spawndomplateflagtestmap && !var_0 scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_125FA() )
        var_0 scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_125FC();
}

gulagwinnerrespawn( var_0 )
{
    if ( level.disable_super_in_turret.spawndomplateflagtestmap && scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_125FA() )
        _id_125FB();
}

_id_12702()
{
    self.itemsdropped = 0;
    var_0 = level.disable_super_in_turret._id_146C6 % 10;
    level.disable_super_in_turret._id_146C6++;
    var_1 = verifybunkercode( "zombie_death", var_0 );

    if ( isdefined( var_1 ) )
        var_2 = scripts\mp\gametypes\br_lootcache.gsc::_id_11A42( var_1, 0 );
}

_id_12604()
{
    if ( scripts\mp\gametypes\br_public.gsc::_id_125F3() )
        return;
    else
        scripts\mp\gametypes\br.gsc::_id_11E23();
}

droponplayerdeath( var_0 )
{
    if ( scripts\mp\gametypes\br_public.gsc::_id_125F3() || istrue( self.isjuggernaut ) )
        return 1;

    if ( level.disable_super_in_turret.spawndomplateflagtestmap )
        scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_125FC();

    return 0;
}

onplayerkilled( var_0 )
{
    if ( !istrue( level.br_prematchstarted ) )
        return;

    if ( level.gameended )
        return;

    var_1 = var_0.victim;
    var_2 = var_0.attacker;

    if ( !isdefined( var_2 ) || !isplayer( var_2 ) || !isdefined( var_1 ) )
        return;

    var_3 = var_0.hitloc;

    if ( isdefined( var_3 ) && var_1 scripts\mp\gametypes\br_public.gsc::_id_125F3() && ( var_3 == "head" || var_3 == "helmet" ) )
    {
        var_4 = 0;
        var_2 thread scripts\mp\damagefeedback::updatedamagefeedback( "hitzombieheadshot", var_4, 1 );
    }

    var_1 setscriptablepartstate( "skydiveVfx", "default", 0 );
}

_id_13325( var_0 )
{
    if ( isdefined( var_0 ) && var_0 == self )
        return 0;

    if ( level.teambased && isdefined( var_0 ) && isdefined( var_0.team ) && var_0.team == self.team )
        return 0;

    if ( isdefined( var_0 ) && !isdefined( var_0.team ) && ( var_0.classname == "trigger_hurt" || var_0.classname == "worldspawn" ) )
        return 0;

    if ( isagent( self ) || isagent( var_0 ) )
        return 0;

    return 1;
}

_id_13326( var_0 )
{
    if ( !_id_13325( var_0 ) )
        return 0;

    if ( !scripts\mp\gametypes\br_public.gsc::_id_125F3() )
        return 0;

    return 1;
}

_id_13302( var_0 )
{
    if ( !_id_13325( var_0 ) )
        return 0;

    if ( scripts\mp\gametypes\br_public.gsc::_id_125F3() )
        return 0;

    return 1;
}

resetdangercircleorigin()
{
    var_0 = undefined;

    foreach ( var_2 in level.disable_super_in_turret._id_12CB0 )
    {
        if ( !isdefined( var_0 ) || var_2.lastusedtime < var_0.lastusedtime )
            var_0 = var_2;
    }

    return var_0;
}

spawndogtags()
{
    var_0 = 16;
    var_1 = undefined;
    var_2 = 0;
    var_3 = undefined;

    if ( level.disable_super_in_turret._id_12CB1.size > 0 )
    {
        var_4 = level.disable_super_in_turret._id_12CB1.size - 1;
        var_1 = level.disable_super_in_turret._id_12CB1[var_4];
        level.disable_super_in_turret._id_12CB1[var_4] = undefined;
        loadoutprimaryaddblueprintattachments( var_1 );
        var_2 = 1;
        var_3 = var_1.trigger;
        var_5 = var_1.visuals;
    }
    else if ( level.disable_super_in_turret._id_12CB0.size >= level.disable_super_in_turret._id_11B5B )
    {
        var_1 = resetdangercircleorigin();
        loadoutprimaryaddblueprintattachments( var_1 );
        var_2 = 1;
        var_3 = var_1.trigger;
        var_5 = var_1.visuals;
    }
    else
    {
        var_6 = "lm_offhand_vm_stim_zmb_loot";
        var_5[0] = spawn( "script_model", ( 0, 0, 0 ) );
        var_5[0].angles = ( 45, 0, 0 );
        var_5[0] setmodel( var_6 );
        var_5[0] hudoutlineenable( "outline_depth_purple" );
        var_5[0] setasgametypeobjective();
        var_5[0].usetype = 1;
        var_5[0].vampirepoints = 1;
        var_3 = var_5[0];

        if ( level.disable_super_in_turret._id_13A25 )
        {
            var_3 = spawn( "trigger_radius", ( 0, 0, 0 ), 0, 32, 32 );
            var_3.vampirepoints = 1;
            var_5[0].vampirepoints = undefined;
        }
    }

    var_7 = "any";
    var_8 = 0;
    var_1 = scripts\mp\gameobjects::createuseobject( var_7, var_3, var_5, ( 0, 0, var_0 ), undefined, var_2 );
    var_1._id_133E5 = 1;
    var_1.onuse = ::onuse;
    var_1 scripts\mp\gameobjects::setusetime( var_8 );
    var_1 scripts\mp\gametypes\br_public.gsc::timeoutonabandonedcallback();
    var_1.inuse = 1;
    var_1.lastusedtime = gettime();
    var_9 = "" + var_1 getentitynumber();
    level.disable_super_in_turret._id_12CB0[var_9] = var_1;
    return var_1;
}

_id_13238( var_0, var_1 )
{
    var_2 = 36;
    var_3 = ( 0, 0, 36 );
    var_4 = scripts\mp\gametypes\br_public.gsc::modifyplayer_damage( var_1, 30 );
    var_5 = var_4 + ( 0, 0, var_2 );
    var_0.curorigin = var_5;

    if ( level.disable_super_in_turret._id_13A25 )
        var_0.trigger.origin = var_5;

    var_0.visuals[0].origin = var_5;
    var_0 scripts\mp\gameobjects::initializetagpathvariables();
    var_0.interactteam = "any";
    var_0.visuals[0] _id_1337A();
    var_0.ownerteam = "neutral";
    var_0.trigger triggerenable();

    if ( isdefined( var_0.objidnum ) )
    {
        if ( var_0.objidnum != -1 )
        {
            var_6 = var_0.objidnum;
            scripts\mp\objidpoolmanager::update_objective_state( var_6, "active" );
            scripts\mp\objidpoolmanager::update_objective_position( var_6, var_4 + var_3 );
            scripts\mp\objidpoolmanager::update_objective_setbackground( var_6, 1 );
            scripts\mp\objidpoolmanager::objective_set_play_intro( var_0.objidnum, 0 );
            scripts\mp\objidpoolmanager::objective_set_play_outro( var_0.objidnum, 0 );
            var_0 scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_dogtags_friendly", "waypoint_dogtags" );
            var_0 scripts\mp\gameobjects::setvisibleteam( "any" );
            objective_icon( var_0.objidnum, "icon_minimap_syringe" );
            scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_0.objidnum );
        }
    }

    playsoundatpos( var_5, "mp_killconfirm_tags_drop" );
    var_0.visuals[0] scriptmodelplayanim( "mp_dogtag_spin" );
}

_id_13662( var_0, var_1 )
{
    var_2 = spawndogtags();
    _id_13238( var_2, var_0.origin );

    if ( istrue( var_0.isjuggernaut ) )
    {
        var_3 = 2;
        var_4 = getdvarint( "scr_br_zxp_numDropJugg", var_3 );
        var_5 = scripts\mp\gametypes\br_pickups.gsc::test_ai_anim();

        for ( var_6 = 1; var_6 < var_4; var_6++ )
        {
            var_7 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_5, var_0.origin, var_0.angles, var_0, undefined, undefined, 0 );

            if ( !isdefined( var_7 ) || var_7.origin == ( 0, 0, 0 ) )
                var_7.origin = var_0.origin;

            var_2 = spawndogtags();
            _id_13238( var_2, var_7.origin );
        }
    }
}

_id_1332E( var_0 )
{
    if ( !_id_13325( var_0 ) )
        return 0;

    if ( scripts\mp\gametypes\br_public.gsc::_id_125F3() && self._id_11F39 > 0 )
        return 1;

    return 0;
}

_id_136BA( var_0, var_1 )
{
    var_2 = spawndogtags();
    _id_13238( var_2, var_0.origin );

    if ( self._id_11F39 > 1 )
    {
        var_3 = scripts\mp\gametypes\br_pickups.gsc::test_ai_anim();

        for ( var_4 = 1; var_4 < self._id_11F39; var_4++ )
        {
            var_5 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_3, var_0.origin, var_0.angles, var_0, undefined, undefined, 0 );

            if ( !isdefined( var_5 ) || var_5.origin == ( 0, 0, 0 ) )
                var_5.origin = var_0.origin;

            var_2 = spawndogtags();
            _id_13238( var_2, var_5.origin );
        }
    }
}

loadoutprimaryaddblueprintattachments( var_0 )
{
    var_0.visuals[0] dontinterpolate();
    var_0.visuals[0] hide();
    var_0.trigger triggerdisable();
    var_0.trigger notify( "deleted" );
    var_0 scripts\mp\gameobjects::allowuse( "none" );
    var_0.inuse = 0;
    var_0.visuals[0].origin = ( 0, 0, 0 );
    var_0.trigger.origin = ( 0, 0, 0 );
    headlessinfilplayers( var_0 );
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_0.objidnum );
}

removetags( var_0 )
{
    loadoutprimaryaddblueprintattachments( var_0 );
    var_1 = "" + var_0 getentitynumber();
    level.disable_super_in_turret._id_12CB0[var_1] = undefined;
    level.disable_super_in_turret._id_12CB1[level.disable_super_in_turret._id_12CB1.size] = var_0;
    playfx( level._effect["stim_pickup"], var_0.curorigin );
    playsoundatpos( var_0.curorigin, "zxp_tags_pickup" );
}

headlessinfilplayers( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( !var_2 scripts\mp\gametypes\br_public.gsc::_id_125F3() )
            continue;

        var_3 = var_2 getnodeoffset_code( 7 );

        if ( var_3 != -1 && var_3 == var_0.objidnum )
            var_2 scripts\cp\vehicles\little_bird_mg_cp::calloutmarkerping_removecallout( 7 );
    }
}

_id_126E6( var_0 )
{
    foreach ( var_2 in level.disable_super_in_turret._id_12CB0 )
    {
        if ( isdefined( var_2.visuals[0] ) )
            var_2.visuals[0] _id_12CB2( self );
    }
}

_id_12CB2( var_0 )
{
    if ( var_0 scripts\mp\gametypes\br_public.gsc::_id_125F3() )
    {
        self showtoplayer( var_0 );

        if ( !level.disable_super_in_turret._id_13A25 )
            self enableplayeruse( var_0 );
    }
    else
    {
        self hidefromplayer( var_0 );

        if ( !level.disable_super_in_turret._id_13A25 )
            self disableplayeruse( var_0 );
    }
}

_id_1337A()
{
    self hide();

    if ( !level.disable_super_in_turret._id_13A25 )
    {
        self makeusable();
        self setcursorhint( "HINT_NOICON" );
        self sethintstring( &"MP_ZXP/PICKUP" );
        self setuseprioritymax();
    }

    foreach ( var_1 in level.players )
        _id_12CB2( var_1 );
}

onuse( var_0 )
{
    scripts\mp\gametypes\br_alt_mode_zxp.gsc::onuse( var_0 );
}

_id_12730()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "zombie_unset" );
    var_0 = 0.5;

    for (;;)
    {
        var_1 = self getnodeoffset_code( 7 );
        var_2 = sortbydistance( level.disable_super_in_turret._id_12CB0, self.origin );
        var_3 = 0;

        foreach ( var_5 in var_2 )
        {
            var_6 = undefined;

            if ( var_3 < level.disable_super_in_turret._id_11B76 && level.disable_super_in_turret._id_11B75 > 0 )
                var_6 = distance2dsquared( self.origin, var_5.origin );

            if ( var_3 < level.disable_super_in_turret._id_11B76 && ( level.disable_super_in_turret._id_11B75 == 0 || var_6 < level.disable_super_in_turret._id_11B75 ) )
            {
                var_3++;
                scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( var_5.objidnum, self );
                continue;
            }

            var_3 = level.disable_super_in_turret._id_11B76;
            scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_5.objidnum, self );

            if ( var_1 != -1 && var_1 == var_5.objidnum )
                scripts\cp\vehicles\little_bird_mg_cp::calloutmarkerping_removecallout( 7 );
        }

        wait( var_0 );
    }
}

_id_125CE()
{
    foreach ( var_1 in level.disable_super_in_turret._id_12CB0 )
        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_1.objidnum, self );
}

gulagisspawnpositionwithindangercircle( var_0 )
{
    if ( istrue( level.disable_super_in_turret._id_146E7 ) )
    {
        if ( getdvarint( "scr_br_zxp_respawn_can_shutdown", 0 ) == 0 )
            return;

        var_1 = scripts\mp\gametypes\br_gulag.gsc::remove_engineer_class();

        if ( var_0 >= var_1 )
            level.disable_super_in_turret._id_146E7 = 0;
    }
}

_id_13284()
{
    if ( istrue( level.br_circle_disabled ) )
        return;

    if ( getdvarint( "scr_br_zxp_respawn_can_shutdown", 0 ) == 0 )
        return;

    scripts\mp\flags::gameflagwait( "prematch_fade_done" );
    var_0 = "hudsmall";
    var_1 = 0.8;
    var_2 = -100;
    var_3 = -290;
    var_4 = 90;
    var_5 = scripts\mp\gametypes\br_gulag.gsc::run_hud_logic();
    var_6 = init_relic_trex( var_0, var_1 );
    var_6 scripts\mp\hud_util::setpoint( "RIGHT", "CENTER", var_3, var_2 );
    var_6.label = &"MP_ZXP/RESPAWN_ALLOWED";
    var_7 = scripts\mp\hud_util::createservertimer( var_0, var_1 );
    var_7 scripts\mp\hud_util::setpoint( "LEFT", "CENTER", var_3, var_2 );
    var_7 settenthstimer( var_5 );
    var_8 = getdvarint( "scr_br_display_gulag_close_message", var_4 );
    var_9 = var_5 - var_8;

    if ( var_9 > 0 )
    {
        wait( var_9 );
        var_7.color = ( 1, 0, 0 );
        var_7 thread scripts\mp\gametypes\br_alt_mode_zxp.gsc::spawn_vindia_assault3();
        wait( var_8 );
    }
    else
        wait( var_5 );

    wait 2;
    var_7 destroy();
    var_6 destroy();
}

_id_142CC( var_0, var_1 )
{
    if ( scripts\mp\gametypes\br_public.gsc::_id_125F3() )
        scripts\mp\gametypes\br_alt_mode_zxp.gsc::wait_for_chopper_boss_finish_turning( var_0 );
    else
        scripts\mp\gametypes\br_vip_quest.gsc::_id_142C6( self, var_0, var_1 );
}

init_relic_trex( var_0, var_1, var_2 )
{
    if ( isdefined( var_2 ) )
        var_3 = newteamhudelem( var_2 );
    else
        var_3 = newhudelem();

    var_3.elemtype = "font";
    var_3.font = var_0;
    var_3.fontscale = var_1;
    var_3.basefontscale = var_1;
    var_3.x = 0;
    var_3.y = 0;
    var_3.width = 0;
    var_3.height = int( level.fontheight * var_1 );
    var_3.xoffset = 0;
    var_3.yoffset = 0;
    var_3.children = [];
    var_3 scripts\mp\hud_util::setparent( level.uiparent );
    var_3.hidden = 0;
    var_3.alpha = 1;
    return var_3;
}

gulagisfaded()
{
    level.br_level.br_circledelaytimes[1] = level.br_level.br_circledelaytimes[0];
    level.br_level.br_circledelaytimes[0] = 1;
    level.br_level.br_circleclosetimes[0] = 1;
    level.br_level.default_player_connect_black_screen[0] = 1;
}

init_relic_aggressive_melee()
{
    var_0 = ( level.br_level.default_class_chosen[1][0], level.br_level.default_class_chosen[1][1], 0 );
    var_1 = level.br_level.br_circleradii[1];
    var_2 = scripts\mp\gametypes\br_c130.gsc::createtestc130path( var_0, var_1 );
    return var_2;
}

being_hacked()
{
    thread vehomn_getleveldata();
}

vehomn_getleveldata()
{
    level endon( "game_ended" );
    self endon( "death" );
    var_0 = distance( self._id_12205.startpt, self._id_12205.neurotoxin_damage_monitor );
    var_1 = var_0 / scripts\mp\gametypes\br_c130.gsc::getc130speed() - 5;
    wait( var_1 );

    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_3 ) && isdefined( var_3.br_infil_type ) && var_3.br_infil_type == "c130" && !isdefined( var_3.jumptype ) )
        {
            var_3.jumptype = "outOfBounds";
            var_3 notify( "halo_kick_c130" );
        }
    }
}

_id_12BBA( var_0 )
{
    return scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_12BBA( var_0 );
}

onnewequipmentpickup( var_0 )
{
    foreach ( var_2 in level.players )
    {
        var_2 hudoutlinedisable();

        if ( var_2 scripts\mp\gametypes\br_public.gsc::_id_125F3() )
        {
            var_2 setscriptablepartstate( "compassicon", "defaulticon" );
            var_2 unsetperk( "specialty_radarblip", 1 );

            if ( level.disable_super_in_turret._id_1470C )
            {
                if ( !level.disable_super_in_turret._id_1470D )
                    var_2 setscriptablepartstate( "headVFX", "neutral" );

                var_2 visionsetnakedforplayer( "", 0 );
            }

            if ( !isdefined( scripts\engine\utility::array_find( var_0, var_2 ) ) )
            {
                var_2 playerhide();
                var_2 setscriptablepartstate( "zombie", "off" );
            }
        }
    }
}

_id_13252()
{
    if ( !istrue( level.disable_super_in_turret.spawndomplates ) )
        return;

    level.disable_super_in_turret.human = spawnstruct();
    level.disable_super_in_turret.human.powers = [];
    scripts\mp\gametypes\br_alt_mode_zxp.gsc::battlepassxpmultipliers( level.disable_super_in_turret.human, "push", [ "+stance", "+movedown" ], ::_id_125D5, 1, undefined, ::_id_125D6, undefined, &"MP_ZXP/PUSH", undefined, 60 );
}

_id_125DB()
{
    if ( !istrue( level.disable_super_in_turret.spawndomplates ) )
        return;

    thread scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_126B4( level.disable_super_in_turret.human );
}

_id_125D5( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "zombie_set" );
    var_2 = 750;

    if ( istrue( self.hoopty_truck_initomnvars ) )
    {
        var_3 = getdvarint( "scr_br_zxp_push_double_tap_ms", var_2 );
        var_4 = gettime() - self.hoopty_truck_initomnvars;

        if ( var_4 <= var_3 )
        {
            _id_1252C();
            thread scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_1262C( var_0, var_1 );
            self.hoopty_truck_initomnvars = undefined;
            return;
        }
    }

    self.hoopty_truck_initomnvars = gettime();
}

_id_1252C()
{
    if ( !getdvarint( "scr_br_zxp_human_spawn_concuss", 0 ) )
        return;

    var_0 = 650;
    var_1 = getdvarint( "scr_br_zxp_push_radius", var_0 );
    var_2 = incrementpersistentstat( level.players, self.origin, var_1 );

    foreach ( var_4 in var_2 )
    {
        if ( var_4 scripts\mp\gametypes\br_public.gsc::_id_125F3() && var_4.team != self.team && isalive( var_4 ) )
            scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_125D7( var_4, var_1 );
    }

    var_6 = anglestoforward( self.angles );
    playfx( level.disable_super_in_turret.start_coop_defuse_infiltrate, self.origin, var_6 );
    playsoundatpos( self.origin, "sentry_explode_smoke" );
    playrumbleonposition( "grenade_rumble", self.origin );
    earthquake( 0.5, 1.5, self.origin, var_1 );
}

_id_125D6( var_0, var_1 )
{
    self.hoopty_truck_initomnvars = undefined;
}

_id_11BA8( var_0 )
{
    var_1 = var_0.meansofdeath;
    var_2 = var_0.victim;
    var_3 = var_0.hitloc;

    if ( isplayer( var_2 ) && var_2 scripts\mp\gametypes\br_public.gsc::_id_125F3() && ( var_3 == "head" || var_3 == "helmet" ) )
        var_1 = "MOD_HEAD_SHOT_ZOMBIE";

    return var_1;
}

dangercircletick( var_0, var_1 )
{
    var_2 = var_1 * var_1;

    foreach ( var_4 in level.disable_super_in_turret._id_12CB0 )
    {
        if ( isdefined( var_4.visuals ) && distance2dsquared( var_4.origin, var_0 ) > var_2 )
            thread removetags( var_4 );
    }
}
