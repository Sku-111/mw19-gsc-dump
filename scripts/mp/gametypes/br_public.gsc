// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

iswaitingtoentergulag( var_0 )
{
    return istrue( var_0.entergulagwait );
}

update_current_solution( var_0 )
{
    return istrue( var_0.set_relic_steelballs_perks );
}

use_csm( var_0 )
{
    return istrue( var_0.respawningfromtoken );
}

isplayeringulag()
{
    var_0 = self;
    return isdefined( var_0 ) && ( istrue( var_0.jailed ) || istrue( var_0.gulagarena ) );
}

updateinstantclassswapallowedinternal()
{
    var_0 = self;
    return isdefined( var_0 ) && ( istrue( var_0.jailed ) || istrue( var_0.gulagarena ) || istrue( var_0.gulag ) );
}

_id_1443C()
{
    var_0 = self;
    return isdefined( var_0 ) && istrue( var_0._id_14439 );
}

isplayerwaitingrebirthrespawn()
{
    var_0 = self;
    return isdefined( var_0 ) && isdefined( var_0._id_12CA1 ) && var_0._id_12CA1 > 0;
}

unlockscriptabledoors()
{
    var_0 = self;
    return ( istrue( var_0.delay_enter_combat_after_investigating_grenade ) && !isalive( var_0 ) || var_0 _id_125F3() ) && !istrue( var_0.gulag );
}

_id_125F3()
{
    return istrue( self.iszombie );
}

_id_125EC()
{
    return istrue( self.unset_relic_gun_game ) || istrue( self.scn_infil_tango_npc_2_sfx );
}

watchhealend()
{
    self endon( "heal_end" );
    self endon( "death_or_disconnect" );
    self endon( "br_armor_plate_done" );
    level endon( "game_ended" );
    childthread heal_removeonplayernotifies();
    childthread heal_removeondamage();
}

heal_removeonplayernotifies()
{
    self notifyonplayercommand( "try_heal_cancel", "+weapnext" );
    self notifyonplayercommand( "try_heal_cancel", "+attack" );
    self notifyonplayercommand( "try_heal_cancel", "+breath_sprint" );
    scripts\engine\utility::_id_143A5( "death", "try_heal_cancel" );
    healend();
}

heal_removeondamage()
{
    for (;;)
    {
        self waittill( "damage", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );

        if ( level.gametype == "br" && ( var_4 == "MOD_TRIGGER_HURT" || var_4 == "MOD_UNKNOWN" ) )
            continue;

        healend();
    }
}

healend()
{
    self notifyonplayercommandremove( "try_heal_cancel", "+weapnext" );
    self notifyonplayercommandremove( "try_heal_cancel", "+attack" );
    self notifyonplayercommandremove( "try_heal_cancel", "+breath_sprint" );
    self notify( "heal_end" );
}

removeitemfrominventory( var_0 )
{
    self.br_inventory_slots[var_0] = undefined;
}

ishelmet( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "armor" && issubstr( var_0, "helmet" );
}

isarmor( var_0 )
{
    return ishelmet( var_0 );
}

isarmorplate( var_0 )
{
    return var_0 == "brloot_armor_plate";
}

ishealitem( var_0 )
{
    return var_0 == "brloot_health_bandages" || var_0 == "brloot_health_firstaid" || var_0 == "brloot_health_adrenaline";
}

isequipment( var_0 )
{
    return isarmorplate( var_0 ) || ishealitem( var_0 ) || isdefined( level.br_pickups.br_itemtype[var_0] ) && ( level.br_pickups.br_itemtype[var_0] == "lethal" || level.br_pickups.br_itemtype[var_0] == "tactical" );
}

isammo( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "ammo";
}

_id_12518()
{
    if ( self isswitchingweapon() || self isreloading() || self ismantling() || self isthrowinggrenade() || self israisingweapon() || self ismeleeing() || self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "isPlayerADS" ) ]]() || istrue( self.tracking_max_health ) )
        return 0;

    var_0 = self getcurrentweapon();

    if ( nullweapon( var_0 ) )
        return 0;

    return 1;
}

_id_12616( var_0, var_1 )
{
    self endon( "death_or_disconnect" );
    var_2 = getcompleteweaponname( var_0 );
    self giveandfireoffhand( var_2 );
    wait( var_1 );

    if ( self hasweapon( var_2 ) )
        self takeweapon( var_2 );
}

hasrespawntoken()
{
    var_0 = self;
    return istrue( var_0.hasrespawntoken );
}

hasgulagtoken()
{
    var_0 = self;
    return istrue( var_0.hasgulagtoken );
}

shouldgetnewspawnpoint()
{
    var_0 = self;
    return istrue( var_0.shouldgetnewspawnpoint );
}

should_use_velo_forward()
{
    var_0 = self;
    return istrue( var_0.should_use_velo_forward );
}

shouldlink()
{
    var_0 = self;
    return istrue( var_0.should_enter_combat_after_checking_decoy_grenade );
}

should_damage_pavelow_boss( var_0 )
{
    var_1 = self;

    if ( !isdefined( var_0 ) || !isdefined( var_1.armorylights ) )
        return isdefined( var_1.armorylights );
    else
        return var_0 == var_1.armorylights;
}

isusinginfilselection()
{
    if ( istrue( level.infilcanusemap ) )
    {
        switch ( level.infilselectionmethod )
        {
            case "exclusion":
                return 1;
            default:
                return 0;
        }
    }

    return 0;
}

handleinfilspawnselectstart()
{
    var_0 = level.infilselectionmethod;
    var_1 = getinfilspawnselectstartfunc( var_0 );

    if ( !isdefined( var_1 ) )
        return;

    return level [[ var_1 ]]();
}

handleinfilspawnselectend()
{
    var_0 = level.infilselectionmethod;
    var_1 = getinfilspawnselectendfunc( var_0 );

    if ( !isdefined( var_1 ) )
        return;

    return level [[ var_1 ]]();
}

getinfilspawnselectstartfunc( var_0 )
{
    if ( !isdefined( level.br_infillocationselectionhandlers ) )
        return undefined;

    var_1 = level.br_infillocationselectionhandlers[var_0];

    if ( !isdefined( var_1 ) )
        return undefined;

    return var_1.spawnselectstartfunc;
}

getinfilspawnselectendfunc( var_0 )
{
    if ( !isdefined( level.br_infillocationselectionhandlers ) )
        return undefined;

    var_1 = level.br_infillocationselectionhandlers[var_0];

    if ( !isdefined( var_1 ) )
        return undefined;

    return var_1.spawnselectendfunc;
}

cleanac130struct( var_0 )
{
    if ( isdefined( var_0.playerslot1 ) )
    {
        if ( isdefined( var_0.playerslot1.head ) )
            var_0.playerslot1.head delete();

        if ( isdefined( var_0.playerslot1.helmet ) )
            var_0.playerslot1.helmet delete();

        var_0.playerslot1 delete();
    }

    if ( isdefined( var_0.playerslot2 ) )
    {
        if ( isdefined( var_0.playerslot2.head ) )
            var_0.playerslot2.head delete();

        var_0.playerslot2 delete();
    }

    if ( isdefined( var_0.playerslot3 ) )
        var_0.playerslot3 delete();

    if ( isdefined( var_0.playerslot4 ) )
        var_0.playerslot4 delete();

    if ( isdefined( var_0.aidoorchief ) )
        var_0.aidoorchief delete();

    if ( isdefined( var_0.cameraent ) )
        var_0.cameraent delete();

    if ( isdefined( var_0.gas_trigger ) )
        var_0.gas_trigger delete();

    if ( isdefined( var_0.playerpositionents ) )
    {
        foreach ( var_2 in var_0.playerpositionents )
            var_2 delete();
    }

    if ( isdefined( var_0.helicratedelete ) )
        var_0.helicratedelete delete();

    if ( isdefined( var_0.staticc130 ) && istrue( var_0.staticc130.cleanme ) )
        var_0.staticc130 delete();

    if ( isdefined( var_0.movingc130 ) && istrue( var_0.movingc130.cleanme ) )
    {
        if ( isdefined( var_0.movingc130.innards ) && istrue( var_0.movingc130.innards.cleanme ) )
            var_0.movingc130.innards delete();

        var_0.movingc130 delete();
    }
}

turn_on_nearby_model_screen()
{
    return level.stop_wave == 0;
}

tv_station_intro_already_played()
{
    return level.stop_wave == 1;
}

usefailcapacitymsg()
{
    return level.stop_wave == 2;
}

remove_old_wheelsons( var_0 )
{
    var_1 = 1;

    if ( isdefined( var_0.infilanimindex ) )
        var_1 = var_0.infilanimindex;

    if ( tv_station_intro_already_played() )
    {
        if ( istrue( var_0.stop_counter_beep_sfx_on_bomb_vests ) )
        {
            var_2 = "cam_orbit_br_chopper_solo";
            return var_2;
        }
        else
        {
            var_2 = "cam_orbit_br_chopper_squad_player" + var_1;
            return var_2;
        }
    }
    else if ( usefailcapacitymsg() )
    {
        if ( istrue( var_0.stop_counter_beep_sfx_on_bomb_vests ) )
        {
            var_2 = "cam_orbit_br_skilo_solo";
            return var_2;
        }
        else
        {
            var_2 = "cam_orbit_br_skilo_squad_player" + var_1;
            return var_2;
        }
    }
    else
    {
        var_2 = "cam_orbit_br_ac130_player" + var_1;
        return var_2;
    }
}

orbitcam( var_0 )
{
    self endon( "death" );

    if ( isdefined( level.infil_vignette_anim_type ) && level.infil_vignette_anim_type == "script_model" )
    {
        self.angles = var_0.angles;
        self playerlinkto( var_0, "" );
        self playerhide();
    }

    if ( isdefined( level._id_142D1 ) )
        scripts\mp\utility\player::_visionsetnaked( level._id_142D1, 0 );
    else
        scripts\mp\utility\player::_visionsetnaked( "", 0 );

    self setplayerangles( var_0.angles );
    var_1 = remove_old_wheelsons( self );
    self cameraset( var_1 );
}

_id_1264D()
{
    var_0 = self;
    var_0 _meth_87A9();
}

updatebrscoreboardstat( var_0, var_1 )
{
    var_2 = self;
    var_3 = 0;
    var_4 = 0;
    var_5 = 0;

    switch ( var_0 )
    {
        case "reviveCount":
            [var_3, var_4, var_5] = [ 0, 8, 0 ];
            break;
        case "objTime":
            [var_3, var_4, var_5] = [ 0, 12, 0 ];
            break;
        case "tomahDamage":
            [var_3, var_4, var_5] = [ 0, 16, 0 ];
            break;
        case "respawnInSeconds":
            [var_3, var_4, var_5] = [ 0, 7, 1 ];
            break;
        case "isInInfilPlane":
            [var_3, var_4, var_5] = [ 7, 1, 1 ];
            break;
        case "armorHealthRatio":
            [var_3, var_4, var_5] = [ 0, 8, 2 ];
            break;
        case "missionsCompleted":
            [var_3, var_4, var_5] = [ 8, 4, 2 ];
            break;
        case "bunkerKeycardType":
            [var_3, var_4, var_5] = [ 12, 4, 2 ];
            break;
        case "damageDealt":
            [var_3, var_4, var_5] = [ 0, 16, 3 ];
            break;
        case "isBeingRevived":
        case "isDowned":
        case "activeSpectators":
        case "jumpMasterState":
        case "isRespawning":
        case "cleanups":
        case "playersDowned":
            return;
        default:
            return;
    }

    var_2 packstatintoextrainfo( var_1, var_3, var_4, var_5 );
}

packstatintoextrainfo( var_0, var_1, var_2, var_3 )
{
    var_4 = self;
    var_5 = [ var_4.extrascore0, var_4.extrascore1, var_4.extrascore2, var_4.extrascore3 ];
    var_6 = int( pow( 2, var_2 ) ) - 1;
    var_7 = ( var_0 & var_6 ) << var_1;
    var_8 = ~( var_6 << var_1 );
    var_9 = var_5[var_3];
    var_10 = var_9 & var_8;
    var_11 = var_10 + var_7;

    switch ( var_3 )
    {
        case 0:
            var_4.extrascore0 = var_11;
            break;
        case 1:
            var_4.extrascore1 = var_11;
            break;
        case 2:
            var_4.extrascore2 = var_11;
            break;
        case 3:
            var_4.extrascore3 = var_11;
            break;
        default:
            break;
    }
}

updatebrextradata( var_0, var_1 )
{
    var_2 = self;
    var_3 = 0;
    var_4 = 0;

    switch ( var_0 )
    {
        case "selectedKillstreakId":
            [var_3, var_4] = [ 0, 4 ];
            break;
        case "armorPlateCount":
            [var_3, var_4] = [ 4, 4 ];
            break;
        default:
            return;
    }

    var_2 packdataintoextrainfo( var_1, var_3, var_4 );
}

packdataintoextrainfo( var_0, var_1, var_2 )
{
    var_1 = 20 + var_1;

    if ( var_1 + var_2 > 31 )
        return;

    var_3 = int( pow( 2, var_2 ) ) - 1;
    var_4 = ( var_0 & var_3 ) << var_1;
    var_5 = ~( var_3 << var_1 );
    var_6 = self.game_extrainfo;
    var_7 = var_6 & var_5;
    var_8 = var_7 + var_4;
    self.game_extrainfo = var_8;
}

_id_1319E( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 512;
    else
        self.game_extrainfo = self.game_extrainfo & ~512;
}

_id_1319C( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 1024;
    else
        self.game_extrainfo = self.game_extrainfo & ~1024;
}

_id_131A6( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 2048;
    else
        self.game_extrainfo = self.game_extrainfo & ~2048;
}

_id_131A4( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 8192;
    else
        self.game_extrainfo = self.game_extrainfo & ~8192;
}

updatelootleadersonfixedinterval( var_0 )
{
    return isdefined( var_0.game_extrainfo ) && var_0.game_extrainfo & 8192;
}

_id_1315C( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 16384;
    else
        self.game_extrainfo = self.game_extrainfo & ~16384;
}

_id_1315B( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 32768;
    else
        self.game_extrainfo = self.game_extrainfo & ~32768;
}

incrementplayersdownedstat()
{
    var_0 = self;

    if ( !isdefined( var_0.br_playersdowned ) )
        var_0.br_playersdowned = 0;

    var_0.br_playersdowned++;
    var_0 updatebrscoreboardstat( "playersDowned", var_0.br_playersdowned );
    var_0 scripts\mp\utility\stats::incpersstat( "downs", 1 );
}

sethasgasmaskextrainfo( var_0 )
{
    if ( var_0 == 1 )
    {
        self.game_extrainfo = self.game_extrainfo | 65536;
        self.game_extrainfo = self.game_extrainfo & ~131072;
    }
    else if ( var_0 == 2 )
    {
        self.game_extrainfo = self.game_extrainfo & ~65536;
        self.game_extrainfo = self.game_extrainfo | 131072;
    }
    else
    {
        self.game_extrainfo = self.game_extrainfo & ~65536;
        self.game_extrainfo = self.game_extrainfo & ~131072;
    }
}

sethasplatepouchextrainfo( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 262144;
    else
        self.game_extrainfo = self.game_extrainfo & ~262144;
}

setcanusegulagextrainfo( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 524288;
    else
        self.game_extrainfo = self.game_extrainfo & ~524288;
}

updatedragonsbreath()
{
    var_0 = self;
    return istrue( var_0.tutorial_usingparachute ) && var_0.game_extrainfo & 64;
}

brbroadcastplayercardsplash( var_0, var_1 )
{
    foreach ( var_3 in level.players )
    {
        if ( !isplayer( var_3 ) )
            continue;

        if ( var_3 isplayeringulag() )
            continue;

        var_3 thread scripts\mp\hud_message::showsplash( var_0, var_1, var_3 );
    }
}

dmztutdropcash( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    foreach ( var_7 in level.teamdata[var_1]["players"] )
    {
        if ( !isdefined( var_7 ) )
            continue;

        if ( var_7 != var_2 )
            dmztut_endgamewithreward( var_0, var_7, var_3, var_4, var_5 );
    }
}

dmztut_luicallback( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    brleaderdialog( var_0, var_2, level.teamdata[var_1]["players"], var_5, var_3, var_4 );
}

brleaderdialog( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( !isdefined( game["dialog"][var_0] ) )
        return;

    var_7 = level.players;

    if ( isdefined( var_2 ) )
        var_7 = var_2;

    for ( var_8 = 0; var_8 < var_7.size; var_8++ )
    {
        var_9 = var_7[var_8];
        thread dmztut_endgamewithreward( var_0, var_9, var_1, var_3, var_4, var_5, var_6 );
    }
}

_id_11C7D( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = 1;

    if ( istrue( var_1 ) && isplayeringulag() )
        return 1;

    if ( istrue( self._id_12742 ) )
        return 1;

    if ( tutorial_playsound() )
    {
        if ( istrue( self._id_12749 ) )
            return 1;

        if ( var_0 == "deploy_squad_leader" || var_0 == "prematch_enter" )
            return 1;

        if ( ( var_0 == "circle_closing" || var_0 == "first_circle" ) && !istrue( level._id_126D5 ) )
            return 1;
    }

    var_2 = level.maxteamsize == 1;

    if ( var_2 )
    {
        switch ( var_0 )
        {
            case "deploy_squad_leader":
                return 1;
        }
    }

    return 0;
}

disableannouncer( var_0 )
{
    var_1 = var_0.defaultoperatorteam;

    if ( isai( var_0 ) )
        var_1 = var_0.botoperatorteam;

    if ( validtousesticker() || tutorial_playsound() )
        var_1 = "allies";

    if ( !isplayer( var_0 ) )
        var_1 = "axis";

    return var_1;
}

dmztut_endgamewithreward( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_1 endon( "disconnect" );
    level endon( "game_ended" );

    if ( !isdefined( var_1 ) )
        return;

    if ( !isalive( var_1 ) && !istrue( var_3 ) )
        return;

    if ( var_1 issplitscreenplayer() && !var_1 issplitscreenplayerprimary() )
        return;

    if ( var_1 _id_11C7D( var_0, var_2 ) )
        return;

    if ( validtousesticker() || tutorial_playsound() )
    {
        if ( var_0 == "mission_scav_accept" || var_0 == "mission_obj_next_nptarget" )
            return;
    }

    if ( isdefined( var_6 ) )
        var_7 = var_6;
    else if ( var_1 scripts\cp_mp\utility\game_utility::_id_140A8() )
        var_7 = "bchr";
    else
    {
        var_8 = disableannouncer( var_1 );
        var_7 = game["voice"][var_8];
    }

    var_9 = "dx_bra_" + var_7 + "_" + game["dialog"][var_0];

    if ( istrue( level.vehicle_collision_getleveldata ) )
    {
        var_10 = "dx_brm_" + var_7 + "_" + game["dialog"][var_0];

        if ( soundexists( var_10 ) )
            var_9 = var_10;
    }
    else if ( isdefined( level.overridevoice ) )
    {
        var_11 = "dx_bra_" + level.overridevoice + "_" + game["dialog"][var_0];

        if ( soundexists( var_11 ) )
            var_9 = var_11;
    }

    if ( isdefined( game["dialogForAllTeams"] ) && istrue( game["dialogForAllTeams"][var_0] ) )
        var_9 = game["dialog"][var_0];

    if ( isdefined( var_9 ) )
    {
        var_9 = tolower( var_9 );
        var_12 = lookupsoundlength( var_9, 1 ) / 1000.0;

        if ( isdefined( var_4 ) )
            wait( var_4 );

        var_1 queuedialogforplayer( var_9, var_0, var_12 );
    }
}

endgamevo( var_0, var_1 )
{
    game["dialog"][var_0] = var_1;

    if ( !isdefined( game["dialogForAllTeams"] ) )
        game["dialogForAllTeams"] = [];

    game["dialogForAllTeams"][var_0] = 1;
}

uniquelootitemid()
{
    return isdefined( level.script ) && level.script == "mp_bm_tut";
}

validtousesticker()
{
    var_0 = getdvar( "wz_tutorial_map", "mp_br_tut2" );
    return isdefined( level.script ) && ( level.script == var_0 || level.script == "mp_lc_br_tut" );
}

tutorial_playsound()
{
    return isdefined( level.script ) && level.script == "mp_br_quarry";
}

uniquelootcallbacks()
{
    return isdefined( level.script ) && level.script == "mp_br_money";
}

turret_headicon()
{
    return validtousesticker() || uniquelootitemid() || tutorial_playsound() || uniquelootcallbacks();
}

_id_12570()
{
    var_0 = self getweaponslistprimaries();

    foreach ( var_2 in var_0 )
    {
        var_3 = var_2.basename;

        if ( weaponclass( var_2 ) == "pistol" && var_3 != "iw8_fists_mp" && var_3 != "iw8_me_riotshield_mp" && var_3 != "iw8_knifestab_mp" && var_3 != "iw8_throwingknife_fire_melee_mp" && var_3 != "iw8_throwingknife_electric_melee_mp" && var_3 != "iw8_throwingknife_drill_melee_mp" )
            return var_2;
    }
}

_id_126ED()
{
    if ( istrue( self._id_12875 ) )
        self waittill( "playerPrestreamComplete" );
}

getinfilspawnoffset()
{
    if ( istrue( level.infilcanusemap ) )
        return getdvarfloat( "scr_map_selection_height_offset", 2000 );

    return getdvarfloat( "scr_br_dropSpawnOffsetMinZ", 12000 );
}

_id_126B8( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = getinfilspawnoffset();

    var_2 = getdvarint( "scr_br_streamDistFromGround", 4500 );

    if ( var_2 >= 0 )
    {
        var_3 = var_1 - var_2;
        var_4 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 0, 1 );
        var_0 = scripts\engine\utility::drop_to_ground( var_0, 0, -1 * var_3, undefined, var_4 );
    }

    return var_0;
}

_id_126B9( var_0, var_1, var_2, var_3, var_4 )
{
    thread _id_126BA( var_0, var_1, var_2, var_3, var_4 );
}

_id_126BA( var_0, var_1, var_2, var_3, var_4 )
{
    self notify( "playerPrestreamLocationWait" );
    self endon( "playerPrestreamLocationWait" );
    self endon( "disconnect" );
    var_5 = !self calloutmarkerping_getent();

    if ( !isdefined( var_1 ) )
        var_1 = relic_nuketimer_gettimeformission();

    var_6 = gettime() + var_1;
    self._id_12875 = 1;

    if ( !self ispredictedstreamposready() )
        self clearpredictedstreampos();

    var_7 = gettime();

    if ( var_5 )
    {
        while ( !istrue( self.pers["streamSyncComplete"] ) && gettime() < var_6 )
            waitframe();
    }

    self predictstreampos( var_0, 1 );

    if ( istrue( var_2 ) )
        self loadcustomizationplayerview( self );

    if ( var_5 )
    {
        waitframe();

        while ( ( !self ispredictedstreamposready() || istrue( var_2 ) && !self hasloadedcustomizationplayerview( self ) ) && gettime() < var_6 )
            waitframe();

        if ( istrue( var_3 ) )
        {
            var_9 = gettime() + getdvarint( "scr_br_stream_hint_extra_time", 5000 );

            while ( gettime() < var_9 )
                waitframe();
        }

        if ( isdefined( var_4 ) )
        {
            var_10 = getdvarint( "keep_alive_update_time", 2000 );
            var_6 = gettime() + var_4;
            var_11 = 0;

            while ( gettime() < var_6 )
            {
                if ( gettime() > var_11 )
                {
                    self predictstreampos( var_0, 1 );
                    var_11 = gettime() + var_10;
                }

                waitframe();
            }
        }
    }

    self._id_12875 = undefined;
    self notify( "playerPrestreamComplete" );
}

relic_nuketimer_gettimeformission()
{
    return getdvarint( "scr_br_stream_hint_timeout", 9000 );
}

_id_1252B()
{
    self notify( "playerPrestreamLocationWait" );
    self clearpredictedstreampos();
}

_id_1264C()
{
    self cancelmantle();

    if ( self isskydiving() )
        self skydive_interrupt();

    if ( istrue( self.inlaststand ) )
        scripts\mp\laststand::playanim_aibegindismountturret( "self_revive_success", self );

    if ( isdefined( self.burninginfo ) )
        scripts\mp\equipment\molotov::molotov_clear_burning();

    if ( istrue( self.usingascender ) )
        scripts\cp_mp\auto_ascender::canseesafecircleui();

    if ( scripts\cp_mp\utility\player_utility::isinvehicle( 1 ) )
    {
        var_0 = spawnstruct();
        var_0.allowairexit = 1;
        var_0.onprematchfadedone2 = "INVOLUNTARY";
        thread scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_exit( self.vehicle, undefined, self, var_0, 1 );
    }

    if ( isdefined( self.remoteuav ) )
        self.remoteuav scripts\mp\killstreaks\remoteuav::remoteuav_leave();

    if ( isdefined( self.currentturret ) )
        scripts\cp_mp\killstreaks\manual_turret::manualturret_endplayeruse( self.currentturret );

    if ( isdefined( self.usingremote ) )
    {
        var_1 = vehicle_getarray();

        foreach ( var_3 in var_1 )
        {
            if ( isdefined( var_3.owner ) && var_3.owner == self )
            {
                if ( isdefined( var_3.helperdronetype ) )
                    var_3 scripts\cp_mp\killstreaks\helper_drone::helperdroneexplode( 1 );
            }
        }
    }

    scripts\mp\javelin::vehicle_damage_deregistervisualpercentcallback();
}

playerloadoutsaveselected( var_0 )
{
    var_1 = undefined;
    var_1 = scripts\mp\class::preloadandqueueclass( var_0 );
    return var_1;
}

forcedisablelaststand()
{
    var_0 = self.origin - anglestoforward( self.angles ) * 150;
    return var_0;
}

hasarmor()
{
    return isdefined( self.br_armorhealth ) && self.br_armorhealth > 0;
}

hashelmet()
{
    return isdefined( self.br_helmetlevel );
}

damagearmor( var_0, var_1 )
{
    if ( !hasarmor() )
        return var_0;

    var_2 = int( min( self.br_armorhealth, var_0 ) );
    var_3 = var_0 - var_2;
    var_4 = self.br_armorhealth / self.br_maxarmorhealth;
    self.br_armorhealth = self.br_armorhealth - var_2;
    scripts\cp\vehicles\vehicle_compass_cp::_id_12000( var_2 );
    self.br_armorhealth = max( 0, self.br_armorhealth );
    var_5 = self.br_armorhealth / self.br_maxarmorhealth;

    if ( isplayer( self ) )
    {
        if ( !istrue( var_1 ) )
        {
            if ( self.br_armorhealth == 0 && var_2 > 0 )
            {
                self playsoundtoplayer( "hit_marker_3d_armor_break", self );

                if ( scripts\mp\utility\perk::_hasperk( "specialty_br_reinforced" ) )
                    self setscriptablepartstate( "armor_break", "reinforced_armor_break", 0 );
                else
                    self setscriptablepartstate( "armor_break", "armor_break", 0 );
            }
        }

        self setclientomnvar( "ui_br_armor_damage", var_5 );
        scripts\mp\equipment\armor_plate::debug_state( self.br_armorhealth );
        var_6 = spawnstruct();
        var_6.is_spawner_position_valid = var_2;
        var_6.isaccesscard = var_3;
        var_6.stack_patch_waittill_stack = var_1;
        runbrgametypefuncwrapper( "onPlayerArmorDamaged", var_6 );
    }

    return var_3;
}

ishelmetpopenabled()
{
    if ( getdvarint( "scr_br_helmet_pop", 1 ) )
        return 1;

    return 0;
}

breakhelmet()
{
    self.br_helmetlevel = undefined;
}

damagehelmet( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1 ) || !ishelmetpopenabled() )
        var_1 = 0;

    var_3 = 1;

    switch ( self.br_helmetlevel )
    {
        case 1:
            var_3 = 0.85;
            break;
        case 2:
            var_3 = 0.7;
            break;
        case 3:
            var_3 = 0.7;
            break;
        default:
    }

    if ( var_1 )
    {
        breakhelmet();

        if ( isdefined( level._id_1203E ) )
            [[ level._id_1203E ]]( self, var_2 );
    }

    return var_3;
}

_id_1285E( var_0 )
{
    setglobalsoundcontext( "lobby_fade", "on", 3 );

    if ( !isdefined( level._id_133B4 ) )
        level._id_133B4 = 1;

    level thread stop_priming_gesture();

    if ( level.matchcountdowntime > 13 )
    {
        var_1 = level.matchcountdowntime - 13;
        wait( var_1 );
        var_2 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

        if ( istrue( level.vehicle_collision_getleveldata ) )
            setmusicstate( "event01_lobby_outro" );
        else
        {
            var_3 = game["music"]["br_lobby_outro"].size;

            foreach ( var_5 in var_2 )
            {
                if ( isdefined( var_5 ) )
                {
                    var_6 = randomint( var_3 );
                    var_5 setplayermusicstate( game["music"]["br_lobby_outro"][var_6] );
                    var_5 setsoundsubmix( "mp_br_lobby_fade", 8 );
                }
            }
        }

        wait( level.matchcountdowntime );

        if ( !istrue( level.br_infil_music_played ) )
        {
            foreach ( var_5 in var_2 )
            {
                if ( isdefined( var_5 ) )
                    var_5 setplayermusicstate( "" );
            }
        }

        var_10 = istrue( level.br_infils_disabled );

        if ( var_10 )
        {
            foreach ( var_5 in var_2 )
            {
                if ( isdefined( var_5 ) )
                    var_5 clearsoundsubmix( "mp_br_lobby_fade", 1.5 );
            }

            return;
        }
    }
    else
    {

    }
}

stop_priming_gesture()
{
    if ( istrue( level.br_infil_music_called ) )
        return;

    if ( getdvarint( "scr_br_c130_intro_s2", 0 ) == 1 )
        return;

    level.br_infil_music_called = 1;

    if ( tv_station_intro_already_played() )
    {
        var_0 = level.matchcountdowntime + 1 + 3.5 - 1.0;

        if ( scripts\cp_mp\utility\game_utility::unlink_on_ai_death() )
            var_0 = level.matchcountdowntime - 0.05;

        wait( var_0 );
    }
    else if ( usefailcapacitymsg() )
    {
        scripts\mp\utility\sound::besttime( "br_infil_skilo" );
        var_0 = level.matchcountdowntime + 1 + 3.5;
        wait( var_0 );
    }
    else
    {
        var_0 = level.matchcountdowntime + 1 + 3.5;
        wait( var_0 );
    }

    waittillframeend;
    level.br_infil_music_played = 1;

    foreach ( var_2 in level.players )
    {
        var_3 = game["music"]["br_infil_intro"].size;
        var_4 = randomint( var_3 );
        var_5 = game["music"]["br_infil_intro"][var_4];
        var_2 setplayermusicstate( var_5 );
    }

    wait 24.0;
    level.br_infil_music_played = undefined;
    level.br_infil_music_called = undefined;
}

_id_12854( var_0 )
{
    if ( validtousesticker() )
        return;

    if ( level.matchcountdowntime > 3 )
    {
        var_1 = level.matchcountdowntime - 3;
        wait( var_1 );
        dmztut_luicallback( "prematch_end", var_0 );
    }
}

loadoutcustomfiresalediscount( var_0 )
{
    if ( !getdvarint( "scr_prematch_disable_executions", 1 ) )
        return;

    if ( istrue( level._id_12856 ) )
        return;

    level._id_12856 = 1;
    var_1 = getdvarint( "scr_prematch_disable_execution_buffer", 2 );
    var_2 = level.players;
    var_3 = [ "execution_attack", "execution_victim" ];

    foreach ( var_5 in var_2 )
    {
        if ( !isdefined( var_5 ) )
            continue;

        var_5 scripts\common\utility::allow_array( var_3, 0 );
    }

    wait( var_0 + var_1 );

    foreach ( var_5 in var_2 )
    {
        if ( !isdefined( var_5 ) || var_5 scripts\common\utility::can_execute() )
            continue;

        var_5 scripts\common\utility::allow_array( var_3, 1 );
    }

    level._id_12856 = undefined;
}

calculateeventstarttime()
{
    if ( getdvarint( "scr_bmo_use_spawn_fix", 1 ) == 0 )
        return;

    var_0 = 5;
    var_1 = level.matchcountdowntime - var_0;

    if ( var_1 > 0 )
        wait( var_1 );

    foreach ( var_3 in level.players )
        var_3.plotarmor = 1;

    level thread loadoutcustomfiresalediscount( var_0 );
}

delay_then_run_wave_override()
{
    var_0 = self;
    var_0 damagearmor( 150, 1 );
}

defend_wave_1()
{
    if ( !isfeatureenabledwrapper( "allowLateJoiners" ) )
    {
        level endon( "game_ended" );
        var_0 = getdvarint( "scr_br_nojip_delay", 30 );
        wait( var_0 );
        setnojipscore( 1, 1 );
        setnojiptime( 1, 1 );
        level.nojip = 1;
    }
}

_id_12A1C( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = scripts\engine\trace::ray_trace( var_0 + ( var_1, var_2, var_3 ), var_0 + ( var_1, var_2, var_4 ), var_6, var_5 );
    return var_7;
}

reset_button_init( var_0, var_1 )
{
    if ( !isdefined( level.cratedata ) || !isdefined( level.cratedata.crates ) )
        return;

    var_2 = var_1 * var_1;
    var_3 = [];

    foreach ( var_5 in level.cratedata.crates )
    {
        if ( !isdefined( var_5 ) )
            continue;

        var_6 = distance2dsquared( var_5.origin, var_0 );

        if ( var_6 < var_2 )
            var_3[var_3.size] = var_5;
    }

    return var_3;
}

semtex_used()
{
    var_0 = 4000;

    if ( isdefined( level.br_level ) && isdefined( level.br_level.spawn_exfil_enemies ) )
        var_0 = level.br_level.spawn_exfil_enemies;

    return var_0;
}

send_all_ai_to_players()
{
    var_0 = -1200;

    if ( isdefined( level.br_level ) && isdefined( level.br_level._id_11A5B ) )
        var_0 = level.br_level._id_11A5B;

    return var_0;
}

modifyplayer_damage( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = modifyscenenode( var_0, var_1, var_2, var_3, var_4 );
    return var_5["position"];
}

modifytriggerlocation( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = modifyscenenode( var_0, var_1, var_2, var_3, var_4 );
    return var_5;
}

modifyscenenode( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = send_all_ai_to_players();
    var_6 = semtex_used();
    var_7 = 2500;
    var_8 = -19000 + var_5;
    var_9 = 15;

    if ( !isdefined( var_1 ) )
        var_1 = getdvarint( "scr_br_trace_up", var_7 );

    if ( !isdefined( var_2 ) )
        var_2 = getdvarint( "scr_br_trace_down", var_8 );

    var_10 = getdvarint( "scr_br_trace_low", var_5 );
    var_11 = getdvarint( "scr_br_trace_high", var_6 );
    var_12 = undefined;

    if ( isdefined( var_3 ) )
        var_12 = var_3;
    else
        var_12 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 0, 1 );

    if ( !isdefined( var_4 ) )
        var_4 = [];

    var_13 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_getleveldata();

    if ( isdefined( var_13.instancesbyref["little_bird"] ) )
        var_4 = scripts\engine\utility::array_combine( var_4, var_13.instancesbyref["little_bird"] );

    if ( isdefined( var_13.instancesbyref["little_bird_mg"] ) )
        var_4 = scripts\engine\utility::array_combine( var_4, var_13.instancesbyref["little_bird_mg"] );

    var_14 = reset_button_init( var_0, 100 );

    if ( isdefined( var_14 ) && var_14.size > 0 )
        var_4 = scripts\engine\utility::array_combine( var_4, var_14 );

    if ( getdvarint( "scr_br_trace_ignore_balloons", 1 ) > 0 )
    {
        var_15 = getnearbyskyhookballoons2d( var_0, 100 );

        if ( var_15.size > 0 )
            var_4 = scripts\engine\utility::array_combine( var_4, var_15 );
    }

    var_16 = _id_12A1C( var_0, 0, 0, var_1, var_2, var_12, var_4 );

    if ( _id_13C32( var_16, var_10 ) )
        return var_16;

    var_16 = _id_12A1C( var_0, var_9, 0, var_1, var_2, var_12, var_4 );

    if ( _id_13C32( var_16, var_10 ) )
        return var_16;

    var_16 = _id_12A1C( var_0, 0, var_9, var_1, var_2, var_12, var_4 );

    if ( _id_13C32( var_16, var_10 ) )
        return var_16;

    var_16 = _id_12A1C( var_0, -1 * var_9, 0, var_1, var_2, var_12, var_4 );

    if ( _id_13C32( var_16, var_10 ) )
        return var_16;

    var_16 = _id_12A1C( var_0, 0, -1 * var_9, var_1, var_2, var_12, var_4 );

    if ( _id_13C32( var_16, var_10 ) )
        return var_16;

    var_16 = [];
    var_16["position"] = ( var_0[0], var_0[1], var_11 );
    var_16["fraction"] = 0;
    return var_16;
}

_id_13C32( var_0, var_1 )
{
    return var_0["fraction"] != 1 && var_0["position"][2] > var_1;
}

getnearbyskyhookballoons2d( var_0, var_1 )
{
    var_2 = [];

    if ( isdefined( level._id_13400 ) )
    {
        var_3 = var_1 * var_1;

        foreach ( var_5 in level._id_13400.areas_remaining )
        {
            if ( isdefined( var_5.chopperexfil_sfx_before_sh070 ) )
            {
                var_6 = distance2dsquared( var_0, var_5.chopperexfil_sfx_before_sh070.origin );

                if ( var_6 < var_3 )
                    var_2[var_2.size] = var_5.chopperexfil_sfx_before_sh070;
            }
        }
    }

    return var_2;
}

timeoutonabandonedcallback()
{
    if ( !getdvarint( "scr_br_lightweightGameObject", 1 ) )
        return;

    if ( self.triggertype == "proximity" && !self.usetime )
    {
        self.touchlist = [];
        self.touchlist["neutral"] = [];
        self.touchlist["none"] = [];
        self.assisttouchlist = undefined;
    }
}

_id_1266C( var_0, var_1 )
{
    var_2 = self calloutmarkerping_entityzoffset( "br_archived_flags" );

    if ( istrue( var_1 ) )
        var_2 = var_2 | var_0;
    else
        var_2 = var_2 & ~var_0;

    self setclientomnvar( "br_archived_flags", var_2 );
}

_id_125CF( var_0 )
{
    _id_1266C( 1, var_0 );
}

round_enemy_stuck_logic( var_0, var_1 )
{
    if ( scripts\mp\menus::_id_13733() )
    {
        if ( !isdefined( var_1 ) && scripts\mp\menus::brking_updateteamscore() )
            return [];
        else
            return level.squaddata[var_0][var_1].players;
    }
    else
        return level.teamdata[var_0]["players"];
}

rotationrefsbyseatandweapon( var_0, var_1 )
{
    if ( scripts\mp\menus::_id_13733() )
    {
        var_2 = [];

        foreach ( var_4 in level.squaddata[var_0][var_1].players )
        {
            if ( isalive( var_4 ) )
                var_2[var_2.size] = var_4;
        }

        return var_2;
    }
    else
        return level.teamdata[var_0]["alivePlayers"];
}

rotationids( var_0, var_1 )
{
    if ( scripts\mp\menus::_id_13733() )
    {
        var_2 = 0;

        foreach ( var_4 in level.squaddata[var_0][var_1].players )
        {
            if ( isalive( var_4 ) )
                var_2++;
        }

        return var_2;
    }
    else
        return level.teamdata[var_0]["aliveCount"];
}

round_enemies_fallback_logic( var_0 )
{
    if ( scripts\mp\menus::_id_13733() )
        return getarraykeys( level.squaddata[var_0] );
    else
        return [ 0 ];
}

replace_sat_piece_on_deathordisconnect()
{
    if ( scripts\mp\menus::_id_13733() )
        return level.maxsquadsize;
    else
        return level.maxteamsize;
}

_id_131C3( var_0, var_1, var_2, var_3 )
{
    if ( scripts\mp\menus::_id_13733() )
    {
        if ( !isdefined( level.squaddata[var_0][var_1].difficultytabledata ) )
            level.squaddata[var_0][var_1].difficultytabledata = [];

        level.squaddata[var_0][var_1].difficultytabledata[var_2] = var_3;
    }
    else
        level.teamdata[var_0][var_2] = var_3;
}

round_at_max( var_0, var_1, var_2 )
{
    if ( scripts\mp\menus::_id_13733() )
    {
        if ( !isdefined( level.squaddata[var_0][var_1].difficultytabledata ) || !isdefined( level.squaddata[var_0][var_1].difficultytabledata[var_2] ) )
            return;

        return level.squaddata[var_0][var_1].difficultytabledata[var_2];
    }
    else
        return level.teamdata[var_0][var_2];
}

_id_1276A( var_0, var_1, var_2, var_3, var_4 )
{
    if ( scripts\mp\menus::_id_13733() )
    {
        var_5 = round_enemy_stuck_logic( var_2.team, var_2.squadindex );

        foreach ( var_7 in var_5 )
        {
            if ( !isdefined( var_3 ) || var_7 != var_3 )
                self playsoundtoplayer( var_0, var_7, var_4 );
        }
    }
    else
        self playsoundtoteam( var_0, var_1, var_3, var_4 );
}

updatesquadmemberlaststandreviveprogress( var_0, var_1, var_2 )
{
    var_3 = ( var_0[0], var_0[1], 0 );
    var_4 = ( var_1[0], var_1[1], 0 );
    var_5 = ( var_2[0], var_2[1], 0 );
    var_6 = vectornormalize( var_3 - var_4 );
    var_7 = vectornormalize( var_5 - var_4 );
    var_8 = vectordot( var_6, var_7 );
    return var_8 > 0;
}

woods_two_death_func( var_0, var_1, var_2, var_3 )
{
    var_4 = var_0[0] - var_2[0];
    var_5 = var_0[1] - var_2[1];
    var_6 = var_1[0] - var_2[0];
    var_7 = var_1[1] - var_2[1];
    var_8 = float( var_3 );
    var_9 = var_6 - var_4;
    var_10 = var_7 - var_5;
    var_11 = var_9 * var_9 + var_10 * var_10;
    var_12 = var_4 * var_7 - var_6 * var_5;
    var_13 = var_8 * var_8 * var_11 - var_12 * var_12;

    if ( var_13 < 0 )
        return;
    else if ( var_13 == 0 )
    {
        var_14 = var_12 * var_10 / var_11 + var_2[0];
        var_15 = -1 * var_12 * var_9 / var_11 + var_2[1];
        return ( var_14, var_15, 0 );
    }
    else
    {
        var_16 = sqrt( var_13 );
        var_17 = var_12 * var_10;
        var_18 = scripts\engine\utility::sign( var_10 ) * var_9 * var_16;
        var_19 = ( var_17 + var_18 ) / var_11 + var_2[0];
        var_20 = ( var_17 - var_18 ) / var_11 + var_2[0];
        var_21 = -1 * var_12 * var_9;
        var_22 = abs( var_10 ) * var_16;
        var_23 = ( var_21 + var_22 ) / var_11 + var_2[1];
        var_24 = ( var_21 - var_22 ) / var_11 + var_2[1];
        return [ ( var_19, var_23, 0 ), ( var_20, var_24, 0 ) ];
    }
}

registersuperextraweapon( var_0, var_1, var_2 )
{
    var_3 = woods_two_death_func( var_0, var_1, var_2.origin, var_2.radius );

    if ( !isdefined( var_3 ) )
        return;
    else if ( !isarray( var_3 ) )
    {
        if ( updatesquadmemberlaststandreviveprogress( var_3, var_0, var_1 ) )
            return var_3;
    }
    else
    {
        var_4 = updatesquadmemberlaststandreviveprogress( var_3[0], var_0, var_1 );
        var_5 = updatesquadmemberlaststandreviveprogress( var_3[1], var_0, var_1 );

        if ( !var_4 && !var_5 )
            return;
        else if ( var_4 && !var_5 )
            return var_3[0];
        else if ( var_5 && !var_4 )
            return var_3[1];
        else
        {
            var_6 = distance2dsquared( var_0, var_3[0] );
            var_7 = distance2dsquared( var_0, var_3[1] );

            if ( var_6 < var_7 )
                return var_3[0];
            else
                return var_3[1];
        }
    }
}

safehouse_struct( var_0, var_1, var_2 )
{
    var_3 = var_1[0] - var_0[0];
    var_4 = var_1[1] - var_0[1];
    var_5 = var_1[2] - var_0[2];

    if ( var_3 != 0 )
        var_6 = ( var_2[0] - var_0[0] ) / var_3;
    else
        var_6 = ( var_2[1] - var_0[1] ) / var_4;

    var_7 = var_0[2] + var_5 * var_6;
    return var_7;
}

updaterectangularzone( var_0, var_1 )
{
    var_2 = var_1.origin[2];
    var_3 = var_2 + var_1.height;
    return var_0[2] >= var_2 && var_0[2] <= var_3;
}

registertabletinit( var_0, var_1, var_2 )
{
    var_3 = woods_two_death_func( var_0, var_1, var_2.origin, var_2.radius );

    if ( !isdefined( var_3 ) )
        return;
    else if ( !isarray( var_3 ) )
    {
        if ( updatesquadmemberlaststandreviveprogress( var_3, var_0, var_1 ) )
        {
            var_4 = safehouse_struct( var_0, var_1, var_3 );
            var_3 = ( var_3[0], var_3[1], var_4 );

            if ( updaterectangularzone( var_3, var_2 ) )
                return var_3;
        }
    }
    else
    {
        var_5 = updatesquadmemberlaststandreviveprogress( var_3[0], var_0, var_1 );
        var_6 = updatesquadmemberlaststandreviveprogress( var_3[1], var_0, var_1 );

        if ( !var_5 && !var_6 )
            return;
        else if ( var_5 && !var_6 )
        {
            var_4 = safehouse_struct( var_0, var_1, var_3[0] );
            var_3[0] = ( var_3[0][0], var_3[0][1], var_4 );

            if ( updaterectangularzone( var_3[0], var_2 ) )
                return var_3[0];
        }
        else if ( var_6 && !var_5 )
        {
            var_4 = safehouse_struct( var_0, var_1, var_3[1] );
            var_3[1] = ( var_3[1][0], var_3[1][1], var_4 );

            if ( updaterectangularzone( var_3[1], var_2 ) )
                return var_3[1];
        }
        else
        {
            var_4 = safehouse_struct( var_0, var_1, var_3[0] );
            var_3[0] = ( var_3[0][0], var_3[0][1], var_4 );
            var_7 = updaterectangularzone( var_3[0], var_2 );
            var_4 = safehouse_struct( var_0, var_1, var_3[1] );
            var_3[1] = ( var_3[1][0], var_3[1][1], var_4 );
            var_8 = updaterectangularzone( var_3[1], var_2 );

            if ( !var_7 && !var_8 )
                return;
            else if ( var_7 && !var_8 )
                return var_3[0];
            else if ( var_8 && !var_7 )
                return var_3[1];
            else
            {
                var_9 = distance2dsquared( var_0, var_3[0] );
                var_10 = distance2dsquared( var_0, var_3[1] );

                if ( var_9 < var_10 )
                    return var_3[0];
                else
                    return var_3[1];
            }
        }
    }
}

_id_12A18( var_0, var_1, var_2 )
{
    var_3 = [];

    foreach ( var_5 in var_2 )
    {
        var_6 = registersuperextraweapon( var_0, var_1, var_5 );

        if ( isdefined( var_6 ) )
            var_3[var_3.size] = var_6;
    }

    var_8 = undefined;
    var_9 = 0;

    foreach ( var_6 in var_3 )
    {
        var_11 = distance2dsquared( var_0, var_6 );

        if ( !isdefined( var_8 ) || var_11 < var_9 )
        {
            var_8 = var_6;
            var_9 = var_11;
        }
    }

    return var_8;
}

_id_12A19( var_0, var_1, var_2 )
{
    var_3 = [];

    foreach ( var_5 in var_2 )
    {
        var_6 = registertabletinit( var_0, var_1, var_5 );

        if ( isdefined( var_6 ) )
            var_3[var_3.size] = var_6;
    }

    var_8 = undefined;
    var_9 = 0;

    foreach ( var_6 in var_3 )
    {
        var_11 = distancesquared( var_0, var_6 );

        if ( !isdefined( var_8 ) || var_11 < var_9 )
        {
            var_8 = var_6;
            var_9 = var_11;
        }
    }

    return var_8;
}

nuke_vault_suicidebombers()
{
    return isalive( self ) && ( scripts\common\vehicle::isvehicle() || isdefined( self.classname ) && self.classname == "script_vehicle" );
}

shouldusegoldbarassets()
{
    return getdvarint( "scr_br_plunder_use_gold_bar_assets", 0 ) != 0;
}

runbrgametypefuncwrapper( var_0, var_1, var_2 )
{
    if ( isdefined( level.disable_super_in_turret ) && isdefined( level.disable_super_in_turret._id_12E05 ) )
        return [[ level.disable_super_in_turret._id_12E05 ]]( var_0, var_1, var_2 );
}

isbrgametypefuncdefinedwrapper( var_0 )
{
    if ( isdefined( level.disable_super_in_turret ) && isdefined( level.disable_super_in_turret.tutorial_showtext ) )
        return [[ level.disable_super_in_turret.tutorial_showtext ]]( var_0 );

    return 0;
}

isfeatureenabledwrapper( var_0 )
{
    if ( isdefined( level.disable_super_in_turret ) && isdefined( level.disable_super_in_turret.unset_relic_aggressive_melee_params ) )
        return [[ level.disable_super_in_turret.unset_relic_aggressive_melee_params ]]( var_0 );

    return 0;
}

gunship_spawnvfx()
{
    level endon( "game_ended" );

    if ( level.gametype == "br" )
    {
        wait 0.1;

        if ( !isdefined( level.debugforcesre2 ) )
            level.debugforcesre2 = "br_fx";

        self setscriptablepartstate( level.debugforcesre2, "clouds" );
    }
    else
    {
        var_0 = level._effect["vfx_snatch_ac130_clouds"];

        if ( !isdefined( var_0 ) )
            return;

        wait 0.1;
        playfxontag( var_0, self, "tag_body" );
    }
}

makepathstruct( var_0 )
{
    var_1 = var_0.r;
    var_2 = var_0.randomangle;
    var_3 = var_0.endangleoffset;
    var_4 = var_0.centerpt;
    var_5 = ( var_2 + var_3 ) % 360;
    var_6 = ( var_1 * cos( var_2 ), var_1 * sin( var_2 ), scripts\cp_mp\parachute::getc130height() ) + var_4;
    var_7 = ( var_1 * cos( var_5 ), var_1 * sin( var_5 ), scripts\cp_mp\parachute::getc130height() ) + var_4;
    var_8 = vectornormalize( var_7 - var_6 );
    var_7 = var_7 + var_8 * var_1;
    var_6 = var_6 - var_8 * var_1 * 2;
    var_9 = spawnstruct();
    var_9.startpt = var_6;
    var_9.endpt = var_7;
    var_9.angle = vectortoangles( var_8 );
    return var_9;
}

calctrailpoint()
{
    var_0 = self.origin - anglestoforward( self.angles ) * 150;
    return var_0;
}
