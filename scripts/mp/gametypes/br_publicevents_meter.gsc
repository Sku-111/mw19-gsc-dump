// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.br_pe_meter = spawnstruct();
    level.br_pe_meter.intel_used_logic = 0;
    level.br_pe_meter.timescompleted = 0;
    level.br_pe_meter.state = 0;
    level.br_pe_meter.maxvalue = 255;
    level.br_pe_meter.targets = getdvarleveleventtargets();
    level.br_pe_meter.maxvalue = level.br_pe_meter.targets[0];
    _pemetersetdetails();
    thread _id_12933();
}

ispubliceventmeterenabled()
{
    return getdvarint( "br_pe_meter_enabled", 0 ) > 0;
}

getdvarleveleventtargets()
{
    var_0 = getdvar( "scr_br_pe_meter_event_targets", "10 15 20" );
    var_1 = [];

    if ( var_0 != "" )
    {
        var_2 = strtok( var_0, " " );

        foreach ( var_4 in var_2 )
        {
            var_5 = int( var_4 );
            var_1[var_1.size] = var_5;
        }
    }

    return var_1;
}

getdvarpemetereventweights( var_0 )
{
    var_1 = getdvar( "scr_br_pe_" + var_0 + "_pe_meter_event_weights", "0 0 0 0 0 0 0 0" );
    var_2 = [];

    if ( var_1 != "" )
    {
        var_3 = strtok( var_1, " " );

        foreach ( var_5 in var_3 )
            var_2[var_2.size] = float( var_5 );
    }

    return var_2;
}

getcurrentmeterlevel()
{
    var_0 = level.br_pe_meter.timescompleted;
    var_0 = clamp( var_0, 0, level.br_pe_meter.targets.size - 1 );
    return int( var_0 );
}

_id_12933()
{
    level endon( "cancel_public_event" );
    scripts\mp\flags::gameflagwait( "prematch_done" );
    setstatepemeter( 1 );
}

triggernewpublicevent()
{
    level thread scripts\mp\gametypes\br_publicevents.gsc::give_intel_data( 1, getcurrentmeterlevel(), 1 );
    level.br_pe_meter.timescompleted = level.br_pe_meter.timescompleted + 1;
}

increasepubliceventmeter( var_0 )
{
    if ( !ispubliceventmeterenabled() )
        return;

    if ( level.br_pe_meter.state == 0 )
        return;

    if ( level.br_pe_meter.intel_used_logic >= level.br_pe_meter.maxvalue )
        return;

    if ( !isdefined( var_0 ) || var_0 <= 0 )
        scripts\mp\utility\script::laststand_dogtags( "PE Meter increase amount is undefined or <= 0." );
    else
    {
        var_1 = level.br_pe_meter.intel_used_logic + var_0;
        var_1 = clamp( var_1, 0, level.br_pe_meter.maxvalue );

        if ( var_1 >= level.br_pe_meter.maxvalue )
        {
            triggernewpublicevent();
            _pemetersetdetails( var_1, undefined, 0 );
            var_2 = getdvarint( "scr_br_pe_meter_delay_before_reset", 1 );
            thread resetpemeter( var_2 );
            return;
        }

        _pemetersetdetails( var_1, undefined, undefined );
    }
}

resetpemeter( var_0 )
{
    if ( isdefined( var_0 ) )
        wait( var_0 );

    var_1 = 0;
    var_2 = level.br_pe_meter.targets[getcurrentmeterlevel()];
    _pemetersetdetails( var_1, var_2, 1 );
}

setstatepemeter( var_0 )
{
    _pemetersetdetails( undefined, undefined, var_0 );
}

getmetercurrentratio()
{
    return level.br_pe_meter.intel_used_logic / level.br_pe_meter.maxvalue;
}

_pemetersetdetails( var_0, var_1, var_2 )
{
    if ( isdefined( var_0 ) )
        level.br_pe_meter.intel_used_logic = var_0;

    if ( isdefined( var_1 ) )
        level.br_pe_meter.maxvalue = var_1;

    if ( isdefined( var_2 ) )
        level.br_pe_meter.state = var_2;

    var_3 = getomnvar( "ui_br_pe_meter_data" );
    var_4 = 0;
    var_4 = var_4 + ( ( int( level.br_pe_meter.state ) & 3 ) << 16 );
    var_4 = var_4 + ( ( int( level.br_pe_meter.maxvalue ) & 255 ) << 8 );
    var_4 = var_4 + ( ( int( level.br_pe_meter.intel_used_logic ) & 255 ) << 0 );

    if ( var_3 != var_4 )
        setomnvar( "ui_br_pe_meter_data", var_4 );
}
