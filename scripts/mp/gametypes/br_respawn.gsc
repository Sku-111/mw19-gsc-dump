// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    setdvarifuninitialized( "scr_br_respawn", 0 );
    level.br_respawn_enabled = getdvarint( "scr_br_respawn", 0 ) != 0;

    if ( !istrue( level.br_respawn_enabled ) )
    {
        removeambulances();
        return;
    }

    level._effect["ambulance_light"] = loadfx( "vfx/iw8/level/stpetersburg/vfx_stpburg_police_lights.vfx" );
    level.br_respawnambulances = [];
    thread setuphud();
}

removeambulances()
{
    var_0 = scripts\engine\utility::getstructarray( "br_respawn_station", "targetname" );

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
    {
        var_2 = getent( var_0[var_1].target, "targetname" );

        if ( isdefined( var_2 ) )
            var_2 delete();
    }
}

spawnambulance( var_0 )
{
    if ( !istrue( level.br_respawn_enabled ) )
        return undefined;

    var_1 = spawn( "script_model", var_0.origin );

    if ( isdefined( var_0.angles ) )
        var_1.angles = var_0.angles;
    else
        var_1.angles = ( 0, 0, 0 );

    var_1 setmodel( "veh8_civ_lnd_palfa_ambulance_ukraine" );
    var_1.struct = var_0;
    var_1 ambulancesetup( var_0 );
    var_1 thread ambulancethink();
    level.br_respawnambulances[level.br_respawnambulances.size] = var_1;
    return var_1;
}

ambulancesetup( var_0 )
{
    thread ambulancelights();
    var_1 = scripts\engine\utility::getstruct( var_0.target, "targetname" );

    if ( !isdefined( self.defibrillator ) )
    {
        var_2 = spawn( "script_model", var_1.origin );

        if ( isdefined( var_1.angles ) )
            var_2.angles = var_1.angles;

        var_2 setmodel( "medical_defibrillator_wall_01" );
        var_2 makeusable();
        var_2 setcursorhint( "HINT_NOICON" );
        var_2 setuseholdduration( "duration_medium" );
        var_2 sethintdisplayfov( 120 );
        var_2 setusefov( 120 );
        var_2 setuserange( 80 );
        var_2 sethintstring( &"MP/BR_RESPAWN_TAKE" );
        var_2 hudoutlineenable( "outline_depth_red" );
        var_2 setusepriority( -1 );
        var_2 setasgametypeobjective();
        self.defibrillator = var_2;
    }

    var_3 = scripts\mp\objidpoolmanager::requestobjectiveid( 1 );
    self.objectiveiconid = var_3;

    if ( var_3 != -1 )
    {
        scripts\mp\objidpoolmanager::objective_add_objective( var_3, "invisible", ( 0, 0, 0 ) );
        scripts\mp\objidpoolmanager::update_objective_onentity( var_3, self );
        scripts\mp\objidpoolmanager::update_objective_state( var_3, "active" );
        scripts\mp\objidpoolmanager::update_objective_icon( var_3, "hud_icon_respawn" );
        scripts\mp\objidpoolmanager::update_objective_setbackground( var_3, 1 );
    }
}

ambulancelights()
{
    wait 1;
    var_0 = anglestoforward( self.angles );
    self.fx = spawnfx( scripts\engine\utility::getfx( "ambulance_light" ), self.origin + ( 0, 0, 75 ), var_0, ( 0, 0, 1 ) );
    triggerfx( self.fx );
}

ambulancethink()
{
    self endon( "death" );

    for (;;)
    {
        self.defibrillator waittill( "trigger", var_0 );
        ambulancedefibrillator( var_0 );
    }
}

setuphud()
{
    level.br_deadcountdownhud = [];
}

initplayer()
{
    if ( !istrue( level.br_respawn_enabled ) )
        return;

    hideallambulancesforplayer( self );
    disableallambulancesforplayer( self );
}

hideallambulancesforteam( var_0, var_1 )
{
    if ( istrue( var_1 ) )
    {
        var_2 = getrespawnableplayers( var_0 );

        if ( var_2.size > 0 )
            return;
    }

    foreach ( var_4 in level.teamdata[var_0]["players"] )
    {
        if ( isdefined( var_4 ) )
            hideallambulancesforplayer( var_4 );
    }
}

hideallambulancesforplayer( var_0 )
{
    for ( var_1 = 0; var_1 < level.br_respawnambulances.size; var_1++ )
    {
        var_2 = level.br_respawnambulances[var_1];

        if ( isdefined( var_2 ) && !istrue( var_2.disabled ) )
            var_2 ambulancehidefromplayer( var_0 );
    }
}

ambulancehidefromplayer( var_0 )
{
    if ( isdefined( self.defibrillator ) )
        self.defibrillator hudoutlinedisableforclient( var_0 );

    scripts\mp\objidpoolmanager::objective_playermask_hidefrom( self.objectiveiconid, var_0 );
}

disableallambulancesforplayer( var_0 )
{
    for ( var_1 = 0; var_1 < level.br_respawnambulances.size; var_1++ )
    {
        var_2 = level.br_respawnambulances[var_1];

        if ( isdefined( var_2 ) && !istrue( var_2.disabled ) )
            var_2 ambulancemakeunusabletoplayer( var_0 );
    }
}

ambulancemakeunusabletoplayer( var_0 )
{
    if ( isdefined( self.defibrillator ) )
        self.defibrillator disableplayeruse( var_0 );
}

showallambulancesforteam( var_0 )
{
    foreach ( var_2 in level.teamdata[var_0]["players"] )
    {
        if ( isdefined( var_2 ) )
            showallambulancesforplayer( var_2 );
    }
}

showallambulancesforplayer( var_0 )
{
    for ( var_1 = 0; var_1 < level.br_respawnambulances.size; var_1++ )
    {
        var_2 = level.br_respawnambulances[var_1];

        if ( isdefined( var_2 ) && !istrue( var_2.disabled ) )
            var_2 ambulanceshowtoplayer( var_0 );
    }
}

ambulanceshowtoplayer( var_0 )
{
    self.defibrillator hudoutlineenableforclient( var_0, "outline_depth_red" );
    scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( self.objectiveiconid, var_0 );
}

ambulanceenabletoteam( var_0 )
{
    foreach ( var_2 in level.teamdata[var_0]["players"] )
    {
        if ( isdefined( var_2 ) )
            ambulancemakeusabletoplayer( var_2 );
    }
}

ambulancedisabletoteam( var_0 )
{
    foreach ( var_2 in level.teamdata[var_0]["players"] )
    {
        if ( isdefined( var_2 ) )
            ambulancemakeunusabletoplayer( var_2 );
    }
}

ambulancemakeusabletoplayer( var_0 )
{
    self.defibrillator enableplayeruse( var_0 );
}

ambulancedisable()
{
    self notify( "disabled" );
    self.disabled = 1;
    self.defibrillator makeunusable();
    self.defibrillator hudoutlinedisable();
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( self.objectiveiconid );
    scripts\mp\objidpoolmanager::returnobjectiveid( self.objectiveiconid );

    if ( isdefined( self.fx ) )
        self.fx delete();
}

ambulancemakeunsabletoall()
{
    self.defibrillator sethintstring( &"MP/BR_RESPAWN_CHARGING" );
    self.defibrillator setuseholdduration( "duration_none" );
}

ambulancemakeusable()
{
    self.defibrillator sethintstring( &"MP/BR_RESPAWN_TAKE" );
    self.defibrillator setuseholdduration( "duration_medium" );
    var_0 = getallrespawnableplayers();

    foreach ( var_2 in var_0 )
        var_2.respawnent useentsetupcloseambulance( var_2.team );
}

anyambulancesavailable()
{
    for ( var_0 = 0; var_0 < level.br_respawnambulances.size; var_0++ )
    {
        var_1 = level.br_respawnambulances[var_0];

        if ( isdefined( var_1 ) && !istrue( var_1.disabled ) )
            return 1;
    }

    return 0;
}

dangercircletick( var_0, var_1 )
{
    if ( !istrue( level.br_respawn_enabled ) )
        return;

    for ( var_2 = 0; var_2 < level.br_respawnambulances.size; var_2++ )
    {
        var_3 = level.br_respawnambulances[var_2];

        if ( isdefined( var_3 ) && !istrue( var_3.disabled ) && distance2dsquared( var_0, var_3.origin ) > var_1 * var_1 )
        {
            var_3 ambulancedisable();
            disablerespawnscenarios( var_3 );
        }
    }
}

disablerespawnscenarios( var_0 )
{
    var_1 = !anyambulancesavailable();

    if ( !var_1 && !isdefined( var_0 ) )
        return;

    foreach ( var_3 in level.players )
    {
        if ( !isdefined( var_3 ) )
            continue;

        if ( isdefined( var_3.respawnent ) && var_1 )
        {
            var_3.respawnent notify( "respawnComplete", 0 );
            continue;
        }

        if ( isdefined( var_0 ) && isdefined( var_3.usedambulance ) && var_3.usedambulance == var_0 )
        {
            var_3 notify( "defibrillator_done" );
            var_3 notify( "portable_defibrillator_done" );
        }
    }
}

playershoulddofauxdeath()
{
    return istrue( level.br_respawn_enabled ) && anyambulancesavailable() && ( istrue( self.brwasinlaststand ) || isdefined( self.respawnent ) );
}

playersetinlaststand()
{
    self.brwasinlaststand = 1;
    _calloutmarkerping_isvehicleoccupiedbyenemy::loadout_finalizeweapons( "laststand" );
    scripts\mp\gametypes\br_public.gsc::_id_1319E( 1 );
}

playerdied( var_0, var_1 )
{
    if ( !istrue( level.br_respawn_enabled ) )
        return;

    if ( isdefined( var_0 ) )
        var_0 playertrytakedefibrillator( var_1 );

    if ( !anyambulancesavailable() )
    {
        if ( istrue( self.fauxdead ) )
            thread scripts\mp\playerlogic::spawnspectator( self.origin, self.angles );

        return;
    }

    self.brwasinlaststand = undefined;
    var_2 = self.team;

    if ( level.teamdata[var_2]["alivePlayers"].size == 0 )
    {
        foreach ( var_5 in level.teamdata[var_2]["players"] )
        {
            if ( !isdefined( var_5 ) )
                continue;

            if ( isdefined( var_5.respawnent ) )
                var_5.respawnent notify( "respawnComplete", 0 );
        }

        return;
    }

    if ( isdefined( self.body ) )
        self.body delete();
    else
        self.nocorpse = 1;

    self playerhide();
    self.health = 1;
    thread playerkeeploadingstreamedassets();
    var_7 = createpickupuseent( self.origin, var_2 );
    var_7.timerhud = createplayerdeadcountdownhud( var_2, 180 );
    updatecountdownhudlist( var_7.timerhud );
    var_7.drophud = createdropplayerhud( var_2 );
    var_7 thread useentrespawntimeout( 180, self, var_2 );
    var_7 thread useentrespawncomplete( self, var_2 );
    var_7 thread useentpickupbody( self, var_2 );
    var_7 useentsetupcloseambulance( var_2 );
    self.respawnent = var_7;
    playerfakespectate( 1 );
}

updatecountdownhudlist( var_0 )
{
    var_1 = -50;
    var_2 = -100;
    var_3 = -15;

    if ( isdefined( var_0 ) )
        level.br_deadcountdownhud[level.br_deadcountdownhud.size] = var_0;

    for ( var_4 = 1; var_4 < level.br_deadcountdownhud.size; var_4++ )
    {
        var_5 = level.br_deadcountdownhud[var_4];

        for ( var_6 = var_4 - 1; var_6 >= 0 && getsoonerhud( var_5, level.br_deadcountdownhud[var_6] ) == var_5; var_6-- )
            level.br_deadcountdownhud[var_6 + 1] = level.br_deadcountdownhud[var_6];

        level.br_deadcountdownhud[var_6 + 1] = var_5;
    }

    for ( var_4 = 0; var_4 < level.br_deadcountdownhud.size; var_4++ )
    {
        var_5 = level.br_deadcountdownhud[var_4];

        if ( isdefined( var_5 ) )
            var_5 scripts\mp\hud_util::setpoint( "BOTTOM RIGHT", "BOTTOM RIGHT", var_1, var_2 + var_3 * var_4 );
    }
}

getsoonerhud( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        return var_0;

    if ( !isdefined( var_0 ) )
        return var_1;

    if ( var_0.starttime <= var_1.starttime )
        return var_0;
    else
        return var_1;
}

playerfakespectate( var_0 )
{
    var_1 = !var_0;
    self allowmelee( var_1 );
    self allowads( var_1 );
    self allowfire( var_1 );
    self allowcrouch( var_1 );
    self allowprone( var_1 );
    self allowreload( var_1 );
    self setcandamage( var_1 );

    if ( var_1 )
    {
        self enableusability();
        self enableoffhandweapons();
        self unlink();
        self setcamerathirdperson( 0 );
        self notify( "stopFakeSpectate" );
        self setclientomnvar( "ui_show_spectateHud", -1 );
    }
    else
    {
        self disableusability();
        self disableoffhandweapons();
        thread playerfakespectatecontrols();
        self setcamerathirdperson( 1 );
    }
}

playerfakespectatecontrols()
{
    self endon( "death_or_disconnect" );
    self endon( "stopFakeSpectate" );
    var_0 = undefined;

    for (;;)
    {
        var_1 = self fragbuttonpressed();
        var_2 = self secondaryoffhandbuttonpressed();

        if ( var_1 || var_2 || !isdefined( var_0 ) || !isalive( var_0 ) || isdefined( var_0.respawnent ) || istrue( var_0.fauxdead ) )
        {
            var_3 = getplayertospectate( self.team, var_0, var_1 || !isdefined( var_0 ) );

            if ( !isdefined( var_0 ) || var_0 != var_3 )
            {
                var_0 = var_3;
                self playerlinktodelta( var_0, "tag_eye" );
                self setclientomnvar( "ui_show_spectateHud", var_0 getentitynumber() );
                self playerhide();
            }

            if ( var_1 )
            {
                while ( self fragbuttonpressed() )
                    waitframe();
            }
            else if ( var_2 )
            {
                while ( self secondaryoffhandbuttonpressed() )
                    waitframe();
            }
        }

        waitframe();
    }
}

getplayertospectate( var_0, var_1, var_2 )
{
    var_3 = 0;

    if ( isdefined( var_1 ) )
    {
        for ( var_4 = 0; var_4 < level.teamdata[var_0]["alivePlayers"].size; var_4++ )
        {
            var_5 = level.teamdata[var_0]["alivePlayers"][var_4];

            if ( var_5 == var_1 )
            {
                var_3 = var_4;
                break;
            }
        }
    }

    if ( var_2 )
        var_3 = ( var_3 + 1 ) % level.teamdata[var_0]["alivePlayers"].size;
    else
    {
        var_3--;

        if ( var_3 < 0 )
            var_3 = level.teamdata[var_0]["alivePlayers"].size - 1;
    }

    return level.teamdata[var_0]["alivePlayers"][var_3];
}

playerkeeploadingstreamedassets()
{
    self endon( "disconnect" );
    self waittill( "spawned" );
    self endon( "spawned" );

    for (;;)
    {
        var_0 = scripts\mp\class::preloadandqueueclass( self.class, 1 );
        var_1 = scripts\mp\playerlogic::getplayerassets( var_0 );

        while ( !scripts\mp\playerlogic::allplayershaveassetsloaded( var_1 ) )
            wait 0.1;

        while ( scripts\mp\playerlogic::allplayershaveassetsloaded( var_1 ) )
            wait 1.0;
    }
}

playertrytakedefibrillator( var_0 )
{
    if ( isalive( self ) && isdefined( var_0 ) && isdefined( var_0.basename ) && var_0.basename == "iw8_defibrillator_mp" && self hasweapon( "iw8_defibrillator_mp" ) )
    {
        self takeweapon( "iw8_defibrillator_mp" );
        var_1 = self getweaponslistprimaries();

        if ( var_1.size > 0 && !scripts\mp\utility\weapon::update_health_bar_to_player( var_1[0] ) )
            self switchtoweapon( var_1[0] );
        else if ( var_1.size > 1 && !scripts\mp\utility\weapon::update_health_bar_to_player( var_1[1] ) )
            self switchtoweapon( var_1[1] );
        else if ( self hasweapon( "iw8_fists_mp" ) )
            self switchtoweapon( "iw8_fists_mp" );
        else
        {
            self giveweapon( "iw8_fists_mp" );
            self switchtoweapon( "iw8_fists_mp" );
        }

        self notify( "defibrillator_done" );
        self notify( "portable_defibrillator_done" );
    }
}

useentrespawntimeout( var_0, var_1, var_2 )
{
    self endon( "respawnComplete" );
    var_1 scripts\engine\utility::_id_143BF( var_0, "disconnect" );
    self notify( "timeout" );
    waittillframeend;

    foreach ( var_4 in level.teamdata[var_2]["players"] )
    {
        if ( isdefined( var_4 ) && isdefined( var_4.usedambulance ) && isdefined( self.ambulance ) && var_4.usedambulance == self.ambulance )
            var_4 notify( "defibrillator_done" );
    }

    if ( isdefined( var_1 ) )
    {
        var_1 playerfakespectate( 0 );
        var_1 thread scripts\mp\playerlogic::spawnspectator( var_1.respawnent.origin, var_1.respawnent.angles );
    }

    cleanupbodydrop( self, var_2 );
}

useentrespawncomplete( var_0, var_1 )
{
    self endon( "timeout" );
    var_0 endon( "disconnect" );
    self waittill( "respawnComplete", var_2 );

    if ( istrue( var_2 ) )
    {
        if ( isdefined( var_0.body ) )
            var_0.body delete();

        var_0 playerrespawn( self.origin, self.angles );
    }
    else if ( isdefined( var_0 ) )
    {
        var_0 playerfakespectate( 0 );
        var_0 thread scripts\mp\playerlogic::spawnspectator( var_0.respawnent.origin, var_0.respawnent.angles );
    }

    waittillframeend;
    cleanupbodydrop( self, var_1 );
}

playerrespawn( var_0, var_1 )
{
    playerfakespectate( 0 );
    self.forcespawnorigin = var_0;
    self.forcespawnangles = var_1;
    self.isrespawn = 1;
    self.alreadyaddedtoalivecount = 1;
    scripts\mp\playerlogic::spawnplayer( 0, 0 );
}

useentpickupbody( var_0, var_1 )
{
    self endon( "respawnComplete" );
    self endon( "timeout" );
    var_0 endon( "disconnect" );

    for (;;)
    {
        self waittill( "trigger", var_2 );

        if ( isdefined( var_0.body ) )
            var_0.body delete();

        if ( var_2.team != var_1 )
            continue;

        useenthide( var_1 );
        var_2 playerpickupbody( self, var_1 );
        useentshow( var_1 );
    }
}

useenthide( var_0 )
{
    self makeunusable();
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( self.objectiveiconid );
}

useentshow( var_0 )
{
    self makeusable();
    scripts\mp\objidpoolmanager::objective_teammask_single( self.objectiveiconid, var_0 );
    objective_setplayintro( self.objectiveiconid, 0 );
}

playerpickupbody( var_0, var_1 )
{
    self endon( "droppedBody" );
    var_2 = scripts\mp\hud_util::createfontstring( "default", 1.5 );
    var_2 scripts\mp\hud_util::setpoint( "CENTER", "CENTER", 0, 120 );
    var_2.label = &"MP/BR_RESPAWN_BODY";
    self.holdingbodyhud = var_2;

    if ( isdefined( var_0.ambulance ) )
    {
        var_0.ambulance ambulancedisabletoteam( var_1 );
        var_0.ambulance = undefined;
    }

    var_0 scriptmodelplayanim( "sdr_cp_hostage_walk_hostage" );
    var_0 linkto( self, "j_clavicle_le", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_0 thread useentdropbodyonplayerdone( self, var_2, var_1 );
    var_0 thread useentdropbodywhencomplete( self, var_2, var_1 );
    var_0 thread useentmonitorambulances( var_1 );
    self allowads( 0 );
    self allowcrouch( 0 );
    self allowprone( 0 );
    self allowjump( 0 );
    playersetcarryteammates( 1 );
    showallambulancesforteam( var_1 );

    foreach ( var_4 in level.teamdata[var_1]["players"] )
    {
        if ( isdefined( var_4 ) )
        {
            var_4 notify( "defibrillator_done" );
            var_4 thread scripts\mp\hud_message::showsplash( "br_respawn_start" );
        }
    }

    while ( !self stancebuttonpressed() || !self isonground() )
        waitframe();

    dropbody( var_0, self, var_2, var_1 );
}

playersetcarryteammates( var_0 )
{
    self.carrying = var_0;
    var_1 = level.teamdata[self.team]["players"];

    foreach ( var_3 in var_1 )
    {
        if ( isdefined( var_3.respawnent ) )
        {
            if ( !var_0 )
            {
                var_3.respawnent enableplayeruse( self );
                continue;
            }

            var_3.respawnent disableplayeruse( self );
        }
    }
}

useentdropbodyonplayerdone( var_0, var_1, var_2 )
{
    self endon( "droppedBody" );
    var_0 scripts\engine\utility::_id_143A6( "disconnect", "death", "last_stand_start" );
    dropbody( self, var_0, var_1, var_2 );
}

useentdropbodywhencomplete( var_0, var_1, var_2 )
{
    self endon( "droppedBody" );
    scripts\engine\utility::_id_143A5( "timeout", "respawnComplete" );
    dropbody( self, var_0, var_1, var_2 );
}

dropbody( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( var_1 ) )
    {
        var_1 allowads( 1 );
        var_1 allowcrouch( 1 );
        var_1 allowprone( 1 );
        var_1 allowjump( 1 );
        var_1 playersetcarryteammates( 0 );
    }

    if ( isdefined( var_2 ) )
        var_2 destroy();

    if ( var_0 islinked() )
        var_0 unlink();

    var_4 = undefined;

    if ( isdefined( var_1 ) )
    {
        var_0.angles = var_1.angles;
        var_4 = var_1.origin;
        var_0.origin = var_4 + ( 0, 0, 40 );
    }
    else
    {
        var_4 = var_0.origin;
        var_0.origin = var_4 + ( 0, 0, 40 );
    }

    var_0.drophud.alpha = 0.0;
    var_0 useentsetupcloseambulance( var_3 );
    var_0 scriptmodelplayanim( "sdr_cp_hostage_dropoff_ground_idle_pilot" );
    var_0 scriptmodelpauseanim( 1 );
    var_0.origin = var_4 + ( 0, 0, 1 );
    var_0 notify( "droppedBody" );
}

useentsetupcloseambulance( var_0 )
{
    var_1 = getcloseambulance( self.origin );

    if ( isdefined( var_1 ) )
    {
        self.ambulance = var_1;
        var_1 ambulanceenabletoteam( var_0 );
    }
}

createpickupuseent( var_0, var_1 )
{
    var_2 = spawn( "script_model", var_0 + ( 0, 0, 1 ) );
    var_2 setmodel( "fullbody_usmc_ar_scriptmover" );
    var_2 scriptmodelplayanim( "sdr_cp_hostage_dropoff_ground_idle_pilot" );
    var_2 scriptmodelpauseanim( 1 );
    var_2 makeusable();
    var_2 setcursorhint( "HINT_NOICON" );
    var_2 setuseholdduration( "duration_medium" );
    var_2 setuserange( 120 );
    var_2 sethintstring( &"MP/BR_PICKUP_PLAYER" );
    var_2 setusepriority( 0 );
    var_2 hudoutlineenable( "outlinefill_nodepth_red" );

    foreach ( var_4 in level.players )
    {
        if ( !isdefined( var_4 ) )
            continue;

        if ( var_4.team == var_1 )
        {
            var_2 hudoutlineenableforclient( var_4, "outlinefill_nodepth_red" );

            if ( !istrue( var_4.carrying ) )
                var_2 enableplayeruse( var_4 );

            continue;
        }

        var_2 disableplayeruse( var_4 );
        var_2 hudoutlinedisableforclient( var_4 );
    }

    var_6 = scripts\mp\objidpoolmanager::requestobjectiveid( 1 );
    var_2.objectiveiconid = var_6;

    if ( var_6 != -1 )
    {
        scripts\mp\objidpoolmanager::objective_add_objective( var_6, "invisible", ( 0, 0, 0 ) );
        scripts\mp\objidpoolmanager::update_objective_onentity( var_6, var_2 );
        scripts\mp\objidpoolmanager::update_objective_setzoffset( var_6, 40 );
        scripts\mp\objidpoolmanager::update_objective_state( var_6, "current" );
        scripts\mp\objidpoolmanager::update_objective_icon( var_6, "passive_icon_health_on_kill" );
        scripts\mp\objidpoolmanager::update_objective_setbackground( var_6, 1 );
        scripts\mp\objidpoolmanager::objective_teammask_single( var_6, var_1 );
    }

    return var_2;
}

createplayerdeadcountdownhud( var_0, var_1 )
{
    var_2 = scripts\mp\hud_util::createservertimer( "objective", 1.4, var_0 );
    var_2.label = &"MP/BR_RESPAWN_DEATH_COUNTDOWN";
    var_2 settimer( var_1 );
    var_2.starttime = gettime();
    thread countdownhudpulse( var_2 );
    return var_2;
}

countdownhudpulse( var_0 )
{
    var_1 = 0.5;
    var_2 = 2;
    var_3 = var_0.fontscale;
    var_0 changefontscaleovertime( var_1 );
    var_0.fontscale = var_2;
    wait( var_1 );

    if ( isdefined( var_0 ) )
    {
        var_0 changefontscaleovertime( var_1 );
        var_0.fontscale = var_3;
    }
}

cleanupbodydrop( var_0, var_1 )
{
    if ( isdefined( var_0.timerhud ) )
        var_0.timerhud destroy();

    updatecountdownhudlist();

    if ( isdefined( var_0.drophud ) )
        var_0.drophud destroy();

    if ( isdefined( var_0.ambulance ) )
    {
        var_0.ambulance ambulancedisabletoteam( var_1 );
        var_0.ambulance = undefined;
    }

    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( self.objectiveiconid );
    scripts\mp\objidpoolmanager::returnobjectiveid( self.objectiveiconid );
    var_0 delete();
    hideallambulancesforteam( var_1, 1 );
}

useentmonitorambulances( var_0 )
{
    self endon( "droppedBody" );
    var_1 = 0;

    for (;;)
    {
        var_2 = 0;

        for ( var_3 = 0; var_3 < level.br_respawnambulances.size; var_3++ )
        {
            var_4 = level.br_respawnambulances[var_3];

            if ( !isdefined( var_4 ) || istrue( var_4.disabled ) )
                continue;

            var_5 = var_4.origin;

            foreach ( var_7 in level.teamdata[var_0]["players"] )
            {
                if ( !isdefined( var_7 ) )
                    continue;

                var_8 = distancesquared( var_5, var_7.origin );

                if ( var_8 < 65536 )
                {
                    var_2 = 1;
                    break;
                }
            }

            if ( var_2 )
                break;
        }

        if ( !var_1 && var_2 )
            self.drophud.alpha = 1.0;
        else if ( var_1 && !var_2 )
            self.drophud.alpha = 0.0;

        var_1 = var_2;
        wait 0.1;
    }
}

createdropplayerhud( var_0 )
{
    var_1 = 1.3;
    var_2 = newteamhudelem( var_0 );
    var_2.elemtype = "font";
    var_2.font = "default";
    var_2.fontscale = var_1;
    var_2.basefontscale = var_1;
    var_2.x = 0;
    var_2.y = 0;
    var_2.width = 0;
    var_2.height = int( level.fontheight * var_1 );
    var_2.xoffset = 0;
    var_2.yoffset = 0;
    var_2.children = [];
    var_2 scripts\mp\hud_util::setparent( level.uiparent );
    var_2.hidden = 0;
    var_2.alpha = 0;
    var_2 scripts\mp\hud_util::setpoint( "CENTER", "CENTER", 0, 100 );
    var_2.label = &"MP/BR_RESPAWN_DROP_BODY";
    return var_2;
}

getrespawnableplayers( var_0 )
{
    var_1 = level.teamdata[var_0]["players"];
    var_2 = [];

    foreach ( var_4 in var_1 )
    {
        if ( isdefined( var_4.respawnent ) )
            var_2[var_2.size] = var_4;
    }

    return var_2;
}

getallrespawnableplayers()
{
    var_0 = [];

    foreach ( var_2 in level.players )
    {
        if ( isdefined( var_2.respawnent ) )
            var_0[var_0.size] = var_2;
    }

    return var_0;
}

getcloseambulance( var_0 )
{
    for ( var_1 = 0; var_1 < level.br_respawnambulances.size; var_1++ )
    {
        var_2 = level.br_respawnambulances[var_1];

        if ( !isdefined( var_2 ) || istrue( var_2.disabled ) )
            continue;

        var_3 = distancesquared( var_2.origin, var_0 );

        if ( var_3 < 65536 )
            return var_2;
    }
}

ambulancedefibrillator( var_0 )
{
    if ( var_0 hasweapon( "iw8_defibrillator_mp" ) )
    {
        var_0 switchtoweapon( "iw8_defibrillator_mp" );
        return;
    }

    thread ambulancedosiren();
    var_0.usedambulance = self;
    self.defibrillator hide();
    var_1 = var_0 playergivedefibrillator( self );

    if ( isdefined( var_0 ) )
    {
        var_0 notify( "defibrillator_done" );
        var_0.usedambulance = undefined;
    }

    self.defibrillator show();

    if ( isdefined( var_1 ) )
    {
        var_1.respawnent notify( "respawnComplete", 1 );
        ambulancedelayreuse();
    }
}

ambulancedelayreuse()
{
    self endon( "disabled" );
    ambulancemakeunsabletoall();
    wait 30;
    ambulancemakeusable();
}

ambulancedosiren()
{
    self notify( "ambulanceDoSiren" );
    self endon( "ambulanceDoSiren" );
    self playloopsound( "siren_ambulance_lp" );
    wait 30;
    self stoploopsound();
}

playergivedefibrillator( var_0 )
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "last_stand_start" );
    self endon( "defibrillator_done" );
    var_1 = getrespawnableplayers( self.team );

    if ( var_1.size == 0 )
        self iprintlnbold( "No dead teammates" );
    else
    {
        self.lastweaponrespawn = self getcurrentprimaryweapon();
        var_2 = getcompleteweaponname( "iw8_defibrillator_mp" );
        self giveweapon( var_2 );
        self switchtoweapon( var_2 );
        thread playermonitorweaponchange( var_2 );
        thread playertakeawaydefibrillator( var_2 );
        thread playermonitordistancefromambulance( var_0 );
    }
}

playerdodefibrillator( var_0 )
{
    for (;;)
    {
        self waittill( "melee_fired", var_1 );
        var_2 = 0;

        if ( var_1.basename != "iw8_defibrillator_mp" )
        {
            if ( !self hasweapon( "iw8_defibrillator_mp" ) )
                return;
        }
        else
        {
            var_3 = self geteye();
            var_4 = anglestoforward( self getplayerangles() );
            var_5 = getrespawnableplayers( self.team );
            var_6 = 0;

            for ( var_7 = 0; var_7 < var_5.size; var_7++ )
            {
                var_8 = var_5[var_7];

                if ( !isdefined( var_8 ) || !isdefined( var_8.respawnent ) )
                    continue;

                var_6 = 1;
                var_9 = var_8.respawnent.origin + ( 0, 0, 40 );
                var_10 = vectornormalize( var_9 - var_3 );
                var_11 = vectordot( var_10, var_4 );

                if ( var_11 < 0.5 )
                    continue;

                var_12 = distancesquared( self.origin, var_9 );

                if ( var_12 > 10000 )
                    continue;

                return var_8;
            }

            if ( !var_6 && istrue( var_0 ) )
            {
                self iprintlnbold( "No teammates to revive" );
                return;
            }
        }
    }
}

playermonitorweaponchange( var_0 )
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "last_stand_start" );
    self endon( "defibrillator_done" );

    for (;;)
    {
        self waittill( "weapon_change", var_1 );

        if ( !isnullweapon( var_0, var_1 ) )
        {
            self notify( "defibrillator_done" );
            return;
        }
    }
}

playertakeawaydefibrillator( var_0 )
{
    scripts\engine\utility::_id_143A6( "death", "disconnect", "last_stand_start", "defibrillator_done" );

    if ( isdefined( self ) && self hasweapon( var_0 ) )
    {
        self takeweapon( var_0 );
        self switchtoweapon( self.lastweaponrespawn );
    }
}

playermonitordistancefromambulance( var_0 )
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "last_stand_start" );
    self endon( "defibrillator_done" );

    for (;;)
    {
        var_1 = distancesquared( var_0.origin, self.origin );

        if ( var_1 > 65536 )
        {
            self notify( "defibrillator_done" );
            return;
        }

        wait 0.1;
    }
}

giveweaponpickup( var_0 )
{
    self endon( "death" );
    self endon( "disconnect" );

    if ( !istrue( level.br_respawn_enabled ) )
        return;

    if ( var_0 != "iw8_defibrillator_mp" )
        return;

    var_1 = playerdoportabledefibrillator();

    if ( isdefined( var_1 ) )
    {
        if ( isdefined( var_1.body ) )
            var_1.body delete();

        var_1.respawnent notify( "respawnComplete", 1 );
    }

    var_2 = getcompleteweaponname( "iw8_defibrillator_mp" );
    playertrytakedefibrillator( var_2 );
}

playerdoportabledefibrillator()
{
    self endon( "portable_defibrillator_done" );
    return playerdodefibrillator();
}
