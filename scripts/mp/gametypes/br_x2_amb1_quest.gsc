// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( "x2_amb1", 0 );

    if ( !var_0 )
        return;

    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "x2_amb1" )._id_11C4C = getdvarint( "scr_br_x2_amb1_missionTimeBase", 240 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "x2_amb1" ).brmodevariantrewardcullfunc = getdvarint( "scr_br_x2_amb1_ambushCircleSize", 3000 );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "x2_amb1", ::_id_14647 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12B2E( "x2_amb1", ::_id_14646 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12B30( "x2_amb1", ::_id_14648 );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestthink( "x2_amb1", ::_id_14649, 0.05 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_1297C( "x2_amb1", 0 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12B31( "x2_amb1", ::_id_14645 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12B38( "x2_amb_signal" );
    init_range();
}

init_range()
{
    var_0 = [];

    if ( level.mapname == "mp_br_mechanics" )
        var_0[0] = ( -483, -2260, 30 );
    else
    {
        var_0[0] = ( 4695, 306, -215 );
        var_0[1] = ( -31298, 3614, -284 );
    }

    foreach ( var_4, var_2 in var_0 )
    {
        var_0[var_4] = getdvarvector( "scr_br_x2_amb" + var_4 + "_destination", var_0[var_4] );
        var_3 = spawnstruct();
        var_3.origin = scripts\mp\gametypes\br_public.gsc::modifyplayer_damage( var_0[var_4], 0, -200 ) + ( 0, 0, 20 );
        var_3.gameobject = spawn( "script_model", var_3.origin );
        var_3.gameobject hide();
        scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "x2_amb1" ).destination[var_4] = var_3;
    }
}

_id_14648( var_0 )
{
    if ( !gethillspawnshutofforigin( var_0 ) )
        return;

    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( resetchallengetimers() );
    scripts\mp\gametypes\br_quest_util.gsc::_id_1336C( var_0 );
}

_id_14645()
{
    level thread scripts\mp\gametypes\br_public.gsc::dmztut_luicallback( "mission_gen_fail", self.team, 1 );
}

_id_14647()
{
    last_target();
    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
}

_id_14646( var_0 )
{
    if ( var_0.team == self.team )
    {
        if ( !scripts\mp\gametypes\br_quest_util.gsc::isteamvalid( var_0.team ) )
        {
            self.result = "fail";
            scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        }
    }
}

gethillspawnshutofforigin( var_0 )
{
    return scripts\mp\gametypes\br_gametype_x2.gsc::extra_riders_func( var_0 );
}

search( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = scripts\mp\gametypes\br_gametype_x2.gsc::extra_riders_getin_anim_func( "x2_amb1", var_0, var_1, var_4 );
    var_5.initprematchc130 = level._id_14632;
    var_6 = undefined;
    var_7 = undefined;

    switch ( level._id_1464E )
    {
        case "signal":
            var_6 = 13;
            var_7 = "br_x2_amb1_signal_quest_start_team_notify";
            break;
        case "bomb":
        default:
            var_6 = 12;
            var_7 = "br_x2_amb1_quest_start_team_notify";
            break;
    }

    var_8 = scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "x2_amb1" ).destination[var_5.initprematchc130].origin;
    var_5 scripts\mp\gametypes\br_quest_util.gsc::init_tactical_boxes( 4, var_6, 0, var_8 );
    var_5 scripts\mp\gametypes\br_quest_util.gsc::_id_1316F( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "x2_amb1" ).brmodevariantrewardcullfunc );

    foreach ( var_2 in var_5.playerlist )
        var_2._id_1296E = var_8;

    var_5 _id_14031();
    scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshowtoteam( resetchallengetimers(), self.team );
    var_5 scripts\mp\gametypes\br_quest_util.gsc::_id_1297D( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "x2_amb1" )._id_11C4C, 4 );
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "x2_amb1", var_5 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_13879( "x2_amb1", self, self.team );
    var_11 = spawnstruct();
    var_11._id_127D5 = scripts\mp\gametypes\br_quest_util.gsc::rewardmodifier( "x2_amb1", scripts\mp\gametypes\br_quest_util.gsc::ringing( self.team ) );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, var_7, var_11 );
    return var_5;
}

_id_14031()
{
    foreach ( var_1 in self.playerlist )
    {
        var_1 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( resetchallengetimers() );
        scripts\mp\gametypes\br_quest_util.gsc::_id_1336A( var_1 );
    }
}

calculatehelispawndata()
{
    return scripts\mp\gametypes\br_gametype_x2.gsc::enemy_signal_flare( "x2_amb1", ::search );
}

_id_14649()
{
    if ( istrue( self.playermonitorspectatorcycle ) || scripts\mp\flags::gameflag( "x2_train_destroyed" ) )
        path_loop();

    if ( scripts\mp\flags::gameflag( "x2_ambush" + ( self.initprematchc130 + 1 ) + "_completed" ) )
        _id_14644();
}

_id_14644()
{
    var_0 = spawnstruct();
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::ringing( self.team );
    var_2 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "x2_amb1" );
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::rewardtovalue( scripts\mp\gametypes\br_quest_util.gsc::rewardtotype( "x2_amb1" ) );
    var_0._id_121B5 = scripts\mp\gametypes\br_quest_util.gsc::_id_121B9( var_2, var_1, var_3 );
    self._id_12D2E = self.playerlist[0].origin;
    self._id_12D2B = self.playerlist[0].angles;
    self.result = "success";
    self._id_11EBA = 1;
    scripts\mp\gametypes\br_gametype_x2.gsc::extract_ontimerexpired( self );
    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

path_loop()
{
    scripts\mp\gametypes\br_gametype_x2.gsc::extract_ontimerexpired( self );
    self.result = "fail";
    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

spawn_boxes( var_0 )
{
    scripts\mp\gametypes\br_quest_util.gsc::spawn_dogtags( var_0 );
    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
}

last_target()
{
    foreach ( var_1 in self.playerlist )
    {
        if ( isdefined( var_1 ) )
            spawn_boxes( var_1 );
    }
}

resetchallengetimers()
{
    var_0 = undefined;

    switch ( level._id_1464E )
    {
        case "signal":
            var_0 = "x2_amb_signal";
            break;
        case "bomb":
        default:
            var_0 = "x2_amb1";
            break;
    }

    return var_0;
}
