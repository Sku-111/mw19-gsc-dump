// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "mapname" ) == "mp_background" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = scripts\mp\utility\game::getgametype();
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 0, 0, 9 );
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 10 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 100 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    }

    level.teambased = getdvarint( "scr_cranked_teambased", 1 ) == 1;
    level.onstartgametype = ::onstartgametype;
    level.onplayerconnect = ::onplayerconnect;
    level.getspawnpoint = ::getspawnpoint;
    level.onnormaldeath = ::onnormaldeath;

    if ( !level.teambased )
    {
        level.onplayerscore = ::onplayerscore;
        setdvar( "scr_cranked_scorelimit", getdvarint( "scr_cranked_scorelimit_ffa", 60 ) );
        setteammode( "ffa" );
    }

    game["dialog"]["gametype"] = "cranked";

    if ( getdvarint( "OSMSLRTOP" ) )
        game["dialog"]["gametype"] = "hc_" + game["dialog"]["gametype"];
    else if ( getdvarint( "NOSLRNTRKL" ) )
        game["dialog"]["gametype"] = "thirdp_" + game["dialog"]["gametype"];
    else if ( getdvarint( "scr_diehard" ) )
        game["dialog"]["gametype"] = "dh_" + game["dialog"]["gametype"];
    else if ( getdvarint( "scr_" + scripts\mp\utility\game::getgametype() + "_promode" ) )
        game["dialog"]["gametype"] = game["dialog"]["gametype"] + "_pro";

    game["dialog"]["offense_obj"] = "crnk_hint";
    game["dialog"]["begin_cranked"] = "crnk_cranked";
    game["dialog"]["five_seconds_left"] = "crnk_det";
    game["strings"]["overtime_hint"] = &"MP/FIRST_BLOOD";
}

onplayerconnect( var_0 )
{
    var_0 thread onplayerspawned();
}

onplayerspawned()
{
    self endon( "disconnect" );

    for (;;)
        self waittill( "spawned_player" );
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "scr_cranked_roundswitch", 0 );
    scripts\mp\utility\game::registerroundswitchdvar( "cranked", 0, 0, 9 );
    setdynamicdvar( "scr_cranked_roundlimit", 1 );
    scripts\mp\utility\game::registerroundlimitdvar( "cranked", 1 );
    setdynamicdvar( "scr_cranked_winlimit", 1 );
    scripts\mp\utility\game::registerwinlimitdvar( "cranked", 1 );
    setdynamicdvar( "scr_cranked_halftime", 0 );
    scripts\mp\utility\game::registerhalftimedvar( "cranked", 0 );
    setdynamicdvar( "scr_cranked_promode", 0 );
}

onstartgametype()
{
    setclientnamemode( "auto_change" );

    if ( !isdefined( game["switchedsides"] ) )
        game["switchedsides"] = 0;

    if ( game["switchedsides"] )
    {
        var_0 = game["attackers"];
        var_1 = game["defenders"];
        game["attackers"] = var_1;
        game["defenders"] = var_0;
    }

    var_2 = &"OBJECTIVES/WAR";
    var_3 = &"OBJECTIVES/WAR_SCORE";
    var_4 = &"OBJECTIVES/WAR_HINT";

    if ( !level.teambased )
    {
        var_2 = &"OBJECTIVES/DM";
        var_3 = &"OBJECTIVES/DM_SCORE";
        var_4 = &"OBJECTIVES/DM_HINT";
    }

    foreach ( var_6 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_6, var_2 );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_6, var_2 );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_6, var_3 );

        scripts\mp\utility\game::setobjectivehinttext( var_6, var_4 );
    }

    initspawns();
    cranked();
}

initspawns()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );

    if ( level.teambased )
    {
        scripts\mp\spawnlogic::setactivespawnlogic( "Default", "Crit_Frontline" );
        scripts\mp\spawnlogic::addstartspawnpoints( "mp_tdm_spawn_allies_start" );
        scripts\mp\spawnlogic::addstartspawnpoints( "mp_tdm_spawn_axis_start" );
        scripts\mp\spawnlogic::addspawnpoints( "allies", "mp_tdm_spawn" );
        scripts\mp\spawnlogic::addspawnpoints( "axis", "mp_tdm_spawn" );
        scripts\mp\spawnlogic::registerspawnset( "normal", "mp_tdm_spawn" );
        scripts\mp\spawnlogic::registerspawnset( "fallback", "mp_tdm_spawn_secondary" );
    }
    else
    {
        scripts\mp\spawnlogic::setactivespawnlogic( "FreeForAll", "Crit_Default" );
        scripts\mp\spawnlogic::addspawnpoints( "allies", "mp_dm_spawn" );
        scripts\mp\spawnlogic::addspawnpoints( "axis", "mp_dm_spawn" );
        scripts\mp\spawnlogic::registerspawnset( "normal", "mp_dm_spawn" );
        scripts\mp\spawnlogic::registerspawnset( "fallback", "mp_dm_spawn_secondary" );
    }

    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
}

getspawnpoint()
{
    if ( level.teambased )
    {
        var_0 = self.pers["team"];

        if ( game["switchedsides"] )
            var_0 = scripts\mp\utility\game::getotherteam( var_0 )[0];

        if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
        {
            var_1 = scripts\mp\spawnlogic::getspawnpointarray( "mp_tdm_spawn_" + var_0 + "_start" );
            var_2 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_1 );
        }
        else
            var_2 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, "normal", "fallback" );
    }
    else if ( level.ingraceperiod )
    {
        var_1 = scripts\mp\spawnlogic::getteamspawnpoints( self.team );
        var_2 = scripts\mp\spawnlogic::getspawnpoint_random( var_1 );
    }
    else
        var_2 = scripts\mp\spawnlogic::getspawnpoint( self, "none", "normal", "fallback" );

    return var_2;
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_0 cleanupcrankedtimer();
    var_6 = scripts\mp\rank::getscoreinfovalue( "score_increment" );

    if ( isdefined( var_1.cranked ) )
    {
        var_6 = var_6 * 2;
        var_7 = "kill_cranked";
        var_1 thread onkill( var_7 );
        var_1.pers["killChains"]++;
        var_1 scripts\mp\persistence::statsetchild( "round", "killChains", var_1.pers["killChains"] );
    }
    else if ( scripts\mp\utility\player::isreallyalive( var_1 ) )
        var_1 makecranked( "begin_cranked" );

    if ( isdefined( var_0.attackers ) && !isdefined( level.assists_disabled ) )
    {
        foreach ( var_9 in var_0.attackers )
        {
            if ( !isdefined( scripts\mp\utility\damage::_validateattacker( var_9 ) ) )
                continue;

            if ( var_9 == var_1 )
                continue;

            if ( var_0 == var_9 )
                continue;

            if ( !isdefined( var_9.cranked ) )
                continue;

            var_9 thread onassist( "assist_cranked" );
        }
    }

    if ( level.teambased )
        level scripts\mp\gamescore::giveteamscoreforobjective( var_1.pers["team"], var_6, 0 );
    else
    {
        var_11 = 0;

        foreach ( var_9 in level.players )
        {
            if ( isdefined( var_9.score ) && var_9.score > var_11 )
                var_11 = var_9.score;
        }
    }
}

cleanupcrankedtimer()
{
    self setclientomnvar( "ui_cranked_bomb_timer_end_milliseconds", 0 );
    self.cranked = undefined;
    self.cranked_end_time = undefined;
}

ontimelimit()
{
    var_0 = scripts\mp\gamescore::gethighestscoringteam();

    if ( game["status"] == "overtime" )
        var_0 = "forfeit";
    else if ( var_0 == "tie" )
        var_0 = "overtime";

    thread scripts\mp\gamelogic::endgame( var_0, game["end_reason"]["time_limit_reached"] );
}

onplayerscore( var_0, var_1 )
{
    if ( var_0 != "super_kill" && issubstr( var_0, "kill" ) )
    {
        var_2 = scripts\mp\rank::getscoreinfovalue( "score_increment" );

        if ( isdefined( var_1.cranked ) )
            var_2 = var_2 * 2;

        return var_2;
    }

    return 0;
}

cranked()
{
    level.crankedbombtimer = 30;
}

makecranked( var_0 )
{
    scripts\mp\utility\dialog::leaderdialogonplayer( var_0 );
    thread scripts\mp\rank::scoreeventpopup( var_0 );
    setcrankedbombtimer( "kill" );
    self.cranked = 1;
    scripts\mp\utility\perk::giveperk( "specialty_fastreload" );
    scripts\mp\utility\perk::giveperk( "specialty_quickdraw" );
    scripts\mp\utility\perk::giveperk( "specialty_fastoffhand" );
    scripts\mp\utility\perk::giveperk( "specialty_fastsprintrecovery" );
    scripts\mp\utility\perk::giveperk( "specialty_marathon" );
    scripts\mp\utility\perk::giveperk( "specialty_quickswap" );
    scripts\mp\utility\perk::giveperk( "specialty_stalker" );
    self.movespeedscaler = 1.2;
    scripts\mp\weapons::updatemovespeedscale();
}

onkill( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    while ( !isdefined( self.pers ) )
        waitframe();

    thread scripts\mp\utility\points::giveunifiedpoints( var_0 );
    setcrankedbombtimer( "kill" );
}

onassist( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    thread scripts\mp\rank::scoreeventpopup( var_0 );
    setcrankedbombtimer( "assist" );
}

watchbombtimer( var_0 )
{
    self notify( "watchBombTimer" );
    self endon( "watchBombTimer" );
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    var_1 = 5;
    scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( var_0 - var_1 - 1 );
    scripts\mp\utility\dialog::leaderdialogonplayer( "five_seconds_left" );
    scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( 1.0 );

    while ( var_1 > 0 )
    {
        scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( 1.0 );
        var_1--;
    }

    if ( isdefined( self ) && scripts\mp\utility\player::isreallyalive( self ) )
    {
        self playsound( "frag_grenade_expl_trans" );
        scripts\mp\utility\damage::_suicide();
        self setclientomnvar( "ui_cranked_bomb_timer_end_milliseconds", 0 );
    }
}

setcrankedbombtimer( var_0 )
{
    var_1 = level.crankedbombtimer;

    if ( var_0 == "assist" )
        var_1 = int( min( ( self.cranked_end_time - gettime() ) / 1000 + level.crankedbombtimer * 0.5, level.crankedbombtimer ) );

    var_2 = var_1 * 1000 + gettime();
    self setclientomnvar( "ui_cranked_bomb_timer_end_milliseconds", var_2 );
    self.cranked_end_time = var_2;
    thread watchcrankedhostmigration();
    thread watchbombtimer( var_1 );
    thread watchendgame();
}

watchcrankedhostmigration()
{
    self notify( "watchCrankedHostMigration" );
    self endon( "watchCrankedHostMigration" );
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    level waittill( "host_migration_begin" );
    self setclientomnvar( "ui_cranked_timer_stopped", 1 );
    var_0 = scripts\mp\hostmigration::waittillhostmigrationdone();
    self setclientomnvar( "ui_cranked_timer_stopped", 0 );

    if ( var_0 > 0 )
        self setclientomnvar( "ui_cranked_bomb_timer_end_milliseconds", self.cranked_end_time + var_0 );
    else
        self setclientomnvar( "ui_cranked_bomb_timer_end_milliseconds", self.cranked_end_time );
}

watchendgame()
{
    self notify( "watchEndGame" );
    self endon( "watchEndGame" );
    self endon( "death_or_disconnect" );

    for (;;)
    {
        if ( game["state"] == "postgame" || level.gameended )
        {
            self setclientomnvar( "ui_cranked_bomb_timer_end_milliseconds", 0 );
            break;
        }

        wait 0.1;
    }
}
