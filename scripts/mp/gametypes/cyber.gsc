// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "mapname" ) == "mp_background" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = scripts\mp\utility\game::getgametype();
    var_0[1] = "blocker";
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 3, 0, 12 );
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 150 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 4 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerwinbytwoenableddvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerwinbytwomaxroundsdvar( scripts\mp\utility\game::getgametype(), 4 );
    }

    updategametypedvars();
    level.objectivebased = 1;
    level.teambased = 1;
    level.nobuddyspawns = 1;
    level.onprecachegametype = ::onprecachegametype;
    level.onstartgametype = ::onstartgametype;
    level.getspawnpoint = ::getspawnpoint;
    level.modeonspawnplayer = ::onspawnplayer;
    level.onplayerkilled = ::onplayerkilled;
    level.ondeadevent = ::ondeadevent;
    level.ononeleftevent = ::ononeleftevent;
    level.ontimelimit = ::ontimelimit;
    level.onnormaldeath = ::onnormaldeath;
    level.gamemodemaydropweapon = scripts\mp\utility\game::isplayeroutsideofanybombsite;
    level.onexfilstarted = ::onexfilstarted;
    level.resetuiomnvargamemode = scripts\mp\gametypes\obj_bombzone.gsc::resetuiomnvargamemode;
    level.emplightsoff = ::emplightsoff;
    level.allowlatecomers = 0;
    level.bombplanted = 0;
    level.bombplantedteam = undefined;
    level.bombexploded = 0;
    game["canScoreOnTie"] = 1;
    game["dialog"]["gametype"] = "gametype_cyberattack";

    if ( getdvarint( "OSMSLRTOP" ) )
        game["dialog"]["gametype"] = "hc_" + game["dialog"]["gametype"];
    else if ( getdvarint( "NOSLRNTRKL" ) )
        game["dialog"]["gametype"] = "thirdp_" + game["dialog"]["gametype"];

    if ( !isdefined( game["roundsPlayed"] ) )
        var_1 = "boost_cyberattack";
    else
        var_1 = "boost_cyberattack_short";

    game["dialog"]["offense_obj"] = var_1;
    game["dialog"]["defense_obj"] = var_1;
    game["dialog"]["emppickup_friendly"] = "emppickup_friendly";
    game["dialog"]["emppickup_friendly_first"] = "emppickup_friendly_first";
    game["dialog"]["emppickup_enemy"] = "emppickup_enemy";
    game["dialog"]["empdefused_friendly"] = "empdefused_friendly";
    game["dialog"]["empdefused_final_friendly"] = "empdefused_final_friendly";
    game["dialog"]["empdefused_enemy"] = "empdefused_enemy";
    game["dialog"]["empdefused_final_enemy"] = "empdefused_final_enemy";
    game["dialog"]["empplanted_friendly"] = "empplanted_friendly";
    game["dialog"]["empplanted_enemy"] = "empplanted_enemy";
    game["dialog"]["lead_lost"] = "null";
    game["dialog"]["lead_taken"] = "null";
    setomnvar( "ui_bomb_carrier", -1 );
    setomnvar( "ui_bomb_owner_team", -1 );
    setomnvar( "ui_bomb_interacting", 0 );
    setomnvar( "ui_bomb_timer_endtime_a", 0 );
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "scr_cyber_empspawn", getmatchrulesdata( "cyberData", "empSpawn" ) );
    setdynamicdvar( "scr_cyber_radarpingtime", getmatchrulesdata( "cyberData", "radarPingTime" ) );
    setdynamicdvar( "scr_cyber_persbombtimer", getmatchrulesdata( "cyberData", "persBombTimer" ) );
    setdynamicdvar( "scr_cyber_detonatescore", getmatchrulesdata( "cyberData", "detonateScore" ) );
    setdynamicdvar( "scr_cyber_enemydeathloc", getmatchrulesdata( "commonOption", "enemyDeathLoc" ) );
    setdynamicdvar( "scr_cyber_bombtimer", getmatchrulesdata( "bombData", "bombTimer" ) );
    setdynamicdvar( "scr_cyber_planttime", getmatchrulesdata( "bombData", "plantTime" ) );
    setdynamicdvar( "scr_cyber_defusetime", getmatchrulesdata( "bombData", "defuseTime" ) );
    setdynamicdvar( "scr_cyber_multibomb", getmatchrulesdata( "bombData", "multiBomb" ) );
    setdynamicdvar( "scr_cyber_showEnemyCarrier", getmatchrulesdata( "carryData", "showEnemyCarrier" ) );
    setdynamicdvar( "scr_cyber_idleResetTime", getmatchrulesdata( "carryData", "idleResetTime" ) );
    setdynamicdvar( "scr_cyber_pickupTime", getmatchrulesdata( "carryData", "pickupTime" ) );
    setdynamicdvar( "scr_cyber_halftime", 0 );
    scripts\mp\utility\game::registerhalftimedvar( "cyber", 0 );
}

waittooverridegraceperiod()
{
    scripts\mp\flags::gameflagwait( "prematch_done" );
    level.overrideingraceperiod = 1;
}

onprecachegametype()
{
    game["bomb_dropped_sound"] = "mp_war_objective_lost";
    game["bomb_recovered_sound"] = "mp_war_objective_taken";
}

onstartgametype()
{
    if ( !isdefined( game["switchedsides"] ) )
        game["switchedsides"] = 0;

    if ( game["switchedsides"] )
    {
        var_0 = game["attackers"];
        var_1 = game["defenders"];
        game["attackers"] = var_1;
        game["defenders"] = var_0;
    }

    setclientnamemode( "manual_change" );
    level._effect["emp_detonation"] = loadfx( "vfx/iw8_mp/equipment/emp/vfx_emp_main_blast.vfx" );
    level._effect["vehicle_explosion"] = loadfx( "vfx/core/expl/small_vehicle_explosion_new.vfx" );
    level._effect["building_explosion"] = loadfx( "vfx/iw7/_requests/mp/vfx_debug_warning.vfx" );
    scripts\mp\utility\game::setobjectivetext( game["attackers"], &"OBJECTIVES/SD_ATTACKER" );
    scripts\mp\utility\game::setobjectivetext( game["defenders"], &"OBJECTIVES/SD_DEFENDER" );

    if ( level.splitscreen )
    {
        scripts\mp\utility\game::setobjectivescoretext( game["attackers"], &"OBJECTIVES/SD_ATTACKER" );
        scripts\mp\utility\game::setobjectivescoretext( game["defenders"], &"OBJECTIVES/SD_DEFENDER" );
    }
    else
    {
        scripts\mp\utility\game::setobjectivescoretext( game["attackers"], &"OBJECTIVES/SD_ATTACKER_SCORE" );
        scripts\mp\utility\game::setobjectivescoretext( game["defenders"], &"OBJECTIVES/SD_DEFENDER_SCORE" );
    }

    scripts\mp\utility\game::setobjectivehinttext( game["attackers"], &"OBJECTIVES/SD_ATTACKER_HINT" );
    scripts\mp\utility\game::setobjectivehinttext( game["defenders"], &"OBJECTIVES/SD_DEFENDER_HINT" );
    cyberattack();
    initspawns();
    thread _id_13862();
    thread waittooverridegraceperiod();
    setupwaypointicons();
}

updategametypedvars()
{
    scripts\mp\gametypes\common.gsc::updatecommongametypedvars();
    level.empspawnindex = scripts\mp\utility\dvars::dvarintvalue( "empSpawn", 0, 0, 4 );
    level.radarpingtime = 4;
    level.persbombtimer = scripts\mp\utility\dvars::dvarintvalue( "persBombTimer", 0, 0, 1 );
    level.detonatescore = scripts\mp\utility\dvars::dvarintvalue( "detonateScore", 1, 0, 5 );
    level.bombtimer = scripts\mp\utility\dvars::dvarfloatvalue( "bombtimer", 30, 1, 300 );
    level.planttime = scripts\mp\utility\dvars::dvarfloatvalue( "planttime", 1, 0, 20 );
    level.defusetime = scripts\mp\utility\dvars::dvarfloatvalue( "defusetime", 1, 0, 20 );
    level.multibomb = scripts\mp\utility\dvars::dvarintvalue( "multibomb", 0, 0, 1 );
    level.showenemycarrier = scripts\mp\utility\dvars::dvarintvalue( "showEnemyCarrier", 5, 0, 6 );
    level.idleresettime = scripts\mp\utility\dvars::dvarfloatvalue( "idleResetTime", 0, 0, 60 );
    level.pickuptime = scripts\mp\utility\dvars::dvarfloatvalue( "pickupTime", 0, 0, 10 );
}

initspawns()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::addspawnpoints( game["attackers"], "mp_cyber_spawn_allies" );
    scripts\mp\spawnlogic::addspawnpoints( game["defenders"], "mp_cyber_spawn_axis" );
    var_0 = scripts\mp\spawnlogic::getspawnpointarray( "mp_cyber_spawn_allies" );
    var_1 = scripts\mp\spawnlogic::getspawnpointarray( "mp_cyber_spawn_axis" );
    scripts\mp\spawnlogic::registerspawnset( "start_attackers", var_0 );
    scripts\mp\spawnlogic::registerspawnset( "start_defenders", var_1 );
    scripts\mp\spawnlogic::addspawnpoints( "allies", "mp_ctf_spawn" );
    scripts\mp\spawnlogic::addspawnpoints( "axis", "mp_ctf_spawn" );

    if ( scripts\mp\utility\game::getgametypenumlives() != 1 )
    {
        assignteamspawns();
        level.introcinematic["allies"] = "allies";
        level.introcinematic["axis"] = "axis";
        scripts\mp\spawnlogic::registerspawnset( "allies", level.teamspawnpoints["allies"] );
        scripts\mp\spawnlogic::registerspawnset( "axis", level.teamspawnpoints["axis"] );
        scripts\mp\spawnlogic::registerspawnset( "neutral", level.teamspawnpoints["neutral"] );
    }

    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
}

getspawnpoint()
{
    scripts\mp\spawnlogic::setactivespawnlogic( "StartSpawn", "Crit_Default" );
    var_0 = self.pers["team"];

    if ( scripts\mp\utility\game::getgametypenumlives() != 1 )
    {
        if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
        {
            if ( var_0 == game["attackers"] )
            {
                scripts\mp\spawnlogic::activatespawnset( "start_attackers", 1 );
                var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "start_attackers" );
            }
            else
            {
                scripts\mp\spawnlogic::activatespawnset( "start_defenders", 1 );
                var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "start_defenders" );
            }
        }
        else
            var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, level.introcinematic[var_0], "neutral" );
    }
    else if ( var_0 == game["attackers"] )
    {
        scripts\mp\spawnlogic::activatespawnset( "start_attackers", 1 );
        var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "start_attackers" );
    }
    else
    {
        scripts\mp\spawnlogic::activatespawnset( "start_defenders", 1 );
        var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "start_defenders" );
    }

    return var_1;
}

assignteamspawns()
{
    level.spawnnodetype = "mp_ctf_spawn";
    var_0 = scripts\mp\spawnlogic::getspawnpointarray( level.spawnnodetype );
    var_1 = scripts\mp\spawnlogic::ispathdataavailable();
    level.teamspawnpoints["axis"] = [];
    level.teamspawnpoints["allies"] = [];
    level.teamspawnpoints["neutral"] = [];

    if ( level.objectives.size == 2 )
    {
        var_2 = level.objectives["axis"];
        var_3 = level.objectives["allies"];
        var_4 = ( var_2.curorigin[0], var_2.curorigin[1], 0 );
        var_5 = ( var_3.curorigin[0], var_3.curorigin[1], 0 );
        var_6 = var_5 - var_4;
        var_7 = length2d( var_6 );

        foreach ( var_9 in var_0 )
        {
            var_10 = ( var_9.origin[0], var_9.origin[1], 0 );
            var_11 = var_10 - var_4;
            var_12 = vectordot( var_11, var_6 );
            var_13 = var_12 / ( var_7 * var_7 );

            if ( var_13 < 0.33 )
            {
                var_9.teambase = var_2.ownerteam;
                level.teamspawnpoints[var_9.teambase][level.teamspawnpoints[var_9.teambase].size] = var_9;
                continue;
            }

            if ( var_13 > 0.67 )
            {
                var_9.teambase = var_3.ownerteam;
                level.teamspawnpoints[var_9.teambase][level.teamspawnpoints[var_9.teambase].size] = var_9;
                continue;
            }

            var_14 = undefined;
            var_15 = undefined;

            if ( var_1 )
                var_14 = getpathdist( var_9.origin, var_2.curorigin, 999999 );

            if ( isdefined( var_14 ) && var_14 != -1 )
                var_15 = getpathdist( var_9.origin, var_3.curorigin, 999999 );

            if ( !isdefined( var_15 ) || var_15 == -1 )
            {
                var_14 = distance2d( var_2.curorigin, var_9.origin );
                var_15 = distance2d( var_3.curorigin, var_9.origin );
            }

            var_16 = max( var_14, var_15 );
            var_17 = min( var_14, var_15 );
            var_18 = var_17 / var_16;

            if ( var_18 > 0.5 )
                level.teamspawnpoints["neutral"][level.teamspawnpoints["neutral"].size] = var_9;
        }
    }
    else
    {
        foreach ( var_9 in var_0 )
        {
            var_9.teambase = reset_doors( var_9 );

            if ( var_9.teambase == "axis" )
            {
                level.teamspawnpoints["axis"][level.teamspawnpoints["axis"].size] = var_9;
                continue;
            }

            level.teamspawnpoints["allies"][level.teamspawnpoints["allies"].size] = var_9;
        }
    }
}

reset_doors( var_0 )
{
    var_1 = scripts\mp\spawnlogic::ispathdataavailable();
    var_2 = undefined;
    var_3 = undefined;

    foreach ( var_5 in level.objectives )
    {
        var_6 = undefined;

        if ( var_1 )
            var_6 = getpathdist( var_0.origin, var_5.curorigin, 999999 );

        if ( !isdefined( var_6 ) || var_6 == -1 )
            var_6 = distancesquared( var_5.curorigin, var_0.origin );

        if ( !isdefined( var_2 ) || var_6 < var_3 )
        {
            var_2 = var_5;
            var_3 = var_6;
        }
    }

    return scripts\mp\utility\game::getotherteam( var_2.ownerteam )[0];
}

cyberattack()
{
    var_0 = getentarray( "cyber_emp_pickup_trig", "targetname" );

    if ( var_0.size == 0 )
    {
        scripts\engine\utility::error( "No cyber_emp_pickup_trig triggers found in map. Please bug this to the level designer." );
        return;
    }

    if ( level.empspawnindex == 3 )
    {
        if ( isdefined( game["empSpawn"] ) )
        {
            var_1 = [ 0, 1, 2 ];
            var_1 = scripts\engine\utility::array_remove( var_1, game["empSpawn"] );
            level.empspawnindex = scripts\engine\utility::random( var_1 );
            game["empSpawn"] = level.empspawnindex;
        }
        else
        {
            level.empspawnindex = randomintrange( 0, 3 );
            game["empSpawn"] = level.empspawnindex;
        }
    }

    if ( level.empspawnindex == 4 )
    {
        if ( isdefined( game["empSpawn"] ) )
        {
            level.empspawnindex = game["empSpawn"] + 1;

            if ( level.empspawnindex == 3 )
                level.empspawnindex = 0;

            game["empSpawn"] = level.empspawnindex;
        }
        else
        {
            level.empspawnindex = 0;
            game["empSpawn"] = level.empspawnindex;
        }
    }

    var_2 = var_0[level.empspawnindex];
    var_3 = getentarray( "cyber_emp", "targetname" );
    var_4[0] = var_3[level.empspawnindex];

    if ( !isdefined( var_4[0] ) )
    {
        scripts\engine\utility::error( "No cyber_emp script_model found in map. Please bug this to the level designer." );
        return;
    }

    var_4[0] setmodel( "offhand_wm_emp" );
    var_4[0].origin = var_4[0].origin;
    var_5 = var_4[0].origin + ( 0, 0, 32 );
    var_6 = var_4[0].origin + ( 0, 0, -100 );
    var_7 = scripts\engine\trace::create_contents( 1, 1, 1, 1, 1, 1, 1 );
    var_8 = [ var_4[0] ];
    var_9 = scripts\engine\trace::ray_trace( var_5, var_6, var_8, var_7 );

    if ( var_9["fraction"] < 1 )
        var_4[0].origin = var_9["position"] + ( 0, 0, 2 );

    var_4[0].angles = vectortoangles( var_9["normal"] ) + ( 180, 0, 0 );

    for ( var_10 = 0; var_10 < var_3.size; var_10++ )
    {
        if ( var_10 == level.empspawnindex )
            continue;

        var_3[var_10] delete();
    }

    var_2 enablelinkto();
    var_2 linkto( var_4[0] );
    var_2.no_moving_platfrom_unlink = 1;
    var_2.linktoenabledflag = 1;
    var_2.baseorigin = var_2.origin;
    var_2.no_moving_platfrom_unlink = 1;

    if ( !level.multibomb )
    {
        level.cyberemp = scripts\mp\gameobjects::createcarryobject( "neutral", var_2, var_4, ( 0, 0, 16 ), undefined, 1 );
        level.cyberemp.cancontestclaim = 1;
        level.cyberemp.stalemate = 0;
        level.cyberemp.wasstalemate = 1;
        level.cyberemp scripts\mp\gameobjects::allowuse( "any" );
        level.cyberemp.curprogress = 0;
        level.cyberemp.usetime = 0.05;
        level.cyberemp.userate = 1;
        level.cyberemp.id = "";
        level.cyberemp.exclusiveuse = 0;
        level.cyberemp.skiptouching = 1;
        level.cyberemp.skipminimapids = 1;
        level.cyberemp.onuse = ::emptriggerholdonuse;
        level.cyberemp.trigger setcursorhint( "HINT_NOICON" );
        level.cyberemp.trigger sethintstring( &"MP/EMP_PICKUP_USE" );
        level.cyberemp.trigger setusepriority( -3 );
        level.cyberemp scripts\mp\gameobjects::setusetime( level.cyberemp.usetime );
        level.cyberemp scripts\mp\gameobjects::setwaitweaponchangeonuse( 0 );
        level.cyberemp.allowweapons = 1;
        level.cyberemp.onpickup = ::onpickup;
        level.cyberemp.ondrop = ::ondrop;
        level.cyberemp.firstpickup = 1;
        level thread empsitewatcher();
        level.bombrespawnpoint = level.cyberemp.visuals[0].origin;
        level.bombrespawnangles = level.cyberemp.visuals[0].angles;
        level.cyberemp.visualgroundoffset = ( 0, 0, 2 );
    }
    else
    {
        var_2 delete();
        var_4[0] delete();
    }

    if ( !isdefined( getent( "cyber_empzone_axis", "targetname" ) ) )
    {
        scripts\engine\utility::error( "No cyber_empzone_axis trigger found in map. Please bug this to the level designer." );
        return;
    }

    if ( !isdefined( getent( "cyber_empzone_allies", "targetname" ) ) )
    {
        scripts\engine\utility::error( "No cyber_empzone_allies trigger found in map. Please bug this to the level designer." );
        return;
    }

    if ( !isdefined( getent( "cyber_emp_defuse_axis", "targetname" ) ) )
    {
        scripts\engine\utility::error( "No cyber_emp_defuse_axis trigger found in map. Please bug this to the level designer." );
        return;
    }

    if ( !isdefined( getent( "cyber_emp_defuse_allies", "targetname" ) ) )
    {
        scripts\engine\utility::error( "No cyber_emp_defuse_allies trigger found in map. Please bug this to the level designer." );
        return;
    }

    if ( game["switchedsides"] )
    {
        level.objectives["allies"] = createbombzone( "allies", getent( "cyber_empzone_axis", "targetname" ), getent( "cyber_emp_defuse_axis", "targetname" ) );
        level.objectives["axis"] = createbombzone( "axis", getent( "cyber_empzone_allies", "targetname" ), getent( "cyber_emp_defuse_allies", "targetname" ) );
    }
    else
    {
        level.objectives["allies"] = createbombzone( "allies", getent( "cyber_empzone_allies", "targetname" ), getent( "cyber_emp_defuse_allies", "targetname" ) );
        level.objectives["axis"] = createbombzone( "axis", getent( "cyber_empzone_axis", "targetname" ), getent( "cyber_emp_defuse_axis", "targetname" ) );
    }

    level notify( "enable_player_usability" );
    level.objectives["axis"] thread data_center_sfx_loop();
    level.objectives["allies"] thread data_center_sfx_loop();

    if ( level.mapname == "mp_hackney_yard" )
        thread destroytvs();
}

_id_13862()
{
    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        level scripts\engine\utility::_id_143A5( "prematch_done", "start_mode_setup" );

    level.objectives["allies"] scripts\mp\gameobjects::requestid( 1, 1 );
    level.objectives["allies"] scripts\mp\gameobjects::setobjectivestatusicons( "icon_waypoint_defend_empsite", "icon_waypoint_target_empsite" );
    level.objectives["allies"] scripts\mp\gameobjects::setvisibleteam( "any" );
    level.objectives["axis"] scripts\mp\gameobjects::requestid( 1, 1 );
    level.objectives["axis"] scripts\mp\gameobjects::setobjectivestatusicons( "icon_waypoint_defend_empsite", "icon_waypoint_target_empsite" );
    level.objectives["axis"] scripts\mp\gameobjects::setvisibleteam( "any" );
    level thread hidebombsitesaftermatchstart();
    level.cyberemp scripts\mp\gameobjects::requestid( 1, 1 );
    level.cyberemp scripts\mp\gameobjects::setobjectivestatusicons( "icon_waypoint_emp" );
    level.cyberemp scripts\mp\gameobjects::_id_13172( "mlg_icon_waypoint_emp_planted" );
    level.cyberemp scripts\mp\gameobjects::setvisibleteam( "any" );

    if ( isdefined( level.cyberemp.visuals[0] ) )
    {
        level.cyberemp.visuals[0] scripts\mp\gametypes\obj_bombzone.gsc::setteaminhuddatafromteamname( "neutral" );
        level.cyberemp.visuals[0] setasgametypeobjective();
    }

    scripts\mp\objidpoolmanager::objective_set_play_intro( level.cyberemp.objidnum, 0 );
    scripts\mp\objidpoolmanager::objective_set_play_outro( level.cyberemp.objidnum, 0 );
    hastacvis( level.cyberemp.objidnum, 1 );
    var_0 = scripts\mp\objidpoolmanager::requestobjectiveid( 99 );
    level.cyberemp.pingobjidnum = var_0;
    scripts\mp\objidpoolmanager::objective_add_objective( var_0, "done", level.cyberemp.origin );
    level.cyberemp scripts\mp\gameobjects::setvisibleteam( "none", var_0 );
    objective_setownerteam( var_0, undefined );
    level.cyberemp scripts\mp\gameobjects::_id_1317F( "icon_waypoint_escort_emp", "waypoint_capture_kill", "mlg_icon_waypoint_emp_planted", var_0 );
    setcarriervisibility();
}

hidebombsitesaftermatchstart()
{
    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        level waittill( "prematch_done" );

    scripts\mp\objidpoolmanager::objective_set_play_intro( level.objectives["allies"].objidnum, 0 );
    scripts\mp\objidpoolmanager::objective_set_play_outro( level.objectives["allies"].objidnum, 0 );
    scripts\mp\objidpoolmanager::_id_11F84( level.objectives["allies"].objidnum, 1 );
    scripts\mp\objidpoolmanager::objective_set_play_intro( level.objectives["axis"].objidnum, 0 );
    scripts\mp\objidpoolmanager::objective_set_play_outro( level.objectives["axis"].objidnum, 0 );
    scripts\mp\objidpoolmanager::_id_11F84( level.objectives["axis"].objidnum, 1 );
    level.objectives["allies"] scripts\mp\gameobjects::setvisibleteam( "none" );
    level.objectives["axis"] scripts\mp\gameobjects::setvisibleteam( "none" );
}

emptriggerholdonuse( var_0 )
{

}

createbombzone( var_0, var_1, var_2 )
{
    var_3 = getentarray( var_1.target, "targetname" );
    var_3[0].origin = var_1.origin;
    var_4 = scripts\mp\gameobjects::createuseobject( var_0, var_1, var_3, ( 0, 0, 64 ), undefined, 1 );
    var_4.onuse = ::onuse;
    var_4.onbeginuse = ::onbeginuse;
    var_4.onenduse = ::onenduse;
    var_4.oncantuse = ::oncantuse;
    var_4.useweapon = getcompleteweaponname( "emp_bomb_mp" );
    var_4.id = "bomb_zone";
    var_4.trigger setusepriority( -3 );
    var_4.trigger setuseholdduration( "duration_none" );
    var_4.trigger setusehideprogressbar( 1 );
    var_4.bombplanted = 0;
    var_4.bombexploded = undefined;
    var_4 scripts\mp\gameobjects::setusetime( level.planttime );
    var_4 scripts\mp\gameobjects::setwaitweaponchangeonuse( 0 );
    var_4.objectivekey = "_" + var_0;
    var_4.label = var_4.objectivekey;
    var_4 resetbombsite( 1, undefined, 1 );
    var_4 scripts\mp\gameobjects::setusetext( &"MP/PLANTING_EXPLOSIVE" );
    var_4 scripts\mp\gameobjects::setusehinttext( &"MP/HOLD_TO_PLANT_EXPLOSIVES" );

    for ( var_5 = 0; var_5 < var_3.size; var_5++ )
    {
        if ( isdefined( var_3[var_5].script_exploder ) )
        {
            var_4.exploderindex = var_3[var_5].script_exploder;
            var_3[var_5] thread setupkillcament( var_4 );
            break;
        }
    }

    var_4.noweapondropallowedtrigger = spawn( "trigger_radius", var_4.trigger.origin, 0, 140, 100 );
    var_4.defusetrig = var_2;
    return var_4;
}

setupkillcament( var_0 )
{
    var_1 = spawn( "script_origin", self.origin );
    var_1.angles = self.angles;
    var_1 rotateyaw( -45, 0.05 );
    waitframe();
    var_2 = undefined;
    var_3 = self.origin + ( 0, 0, 45 );
    var_4 = self.origin + anglestoforward( var_1.angles ) * 100 + ( 0, 0, 128 );
    var_5 = [ "physicscontents_clipshot", "physicscontents_missileclip", "physicscontents_solid", "physicscontents_vehicle" ];
    var_6 = physics_createcontents( var_5 );
    var_7 = scripts\engine\trace::ray_trace( var_3, var_4, self, var_6 );
    var_2 = var_7["position"];
    self.killcament = spawn( "script_model", var_2 );
    self.killcament setscriptmoverkillcam( "explosive" );
    var_0.killcamentnum = self.killcament getentitynumber();
    var_1 delete();
}

empsitewatcher()
{
    level endon( "game_ended" );

    for (;;)
    {
        level waittill( "bomb_pickup" );

        if ( level.cyberemp.carrier.team == "allies" )
            level.objectives["axis"] setupforplanting();
        else
            level.objectives["allies"] setupforplanting();

        waitframe();
    }
}

data_center_sfx_loop()
{
    var_0 = scripts\engine\utility::spawn_script_origin( self.trigger.origin, self.trigger.angles );
    var_0 thread scripts\engine\utility::play_loop_sound_on_entity( "data_center_cyber_lp" );
    level waittill( "emp_detonated" );
    var_0 stopsounds( "data_center_cyber_lp" );
    waitframe();
    var_0 delete();
}

onbeginuse( var_0 )
{
    if ( !scripts\mp\gameobjects::isfriendlyteam( var_0.pers["team"] ) && !level.bombplanted )
    {
        var_0.isplanting = 1;
        setomnvar( "ui_bomb_interacting", 1 );
        scripts\mp\gameobjects::setobjectivestatusicons( "icon_waypoint_defend_empsite", "icon_waypoint_emp_planting" );
    }
    else
    {
        var_0.isdefusing = 1;
        setomnvar( "ui_bomb_interacting", 3 );
        scripts\mp\utility\game::setmlgannouncement( 2, var_0.team, var_0 getentitynumber() );
        scripts\mp\gameobjects::setobjectivestatusicons( "icon_waypoint_defend_empsite_nt", "icon_waypoint_emp_defusing" );
        scripts\mp\objidpoolmanager::objective_teammask_removefrommask( self.radialtimeobjid, var_0.team );
    }

    var_0 thread allowedwhileplanting( 0 );

    if ( level.bombplanted && !scripts\mp\gameobjects::isfriendlyteam( var_0.pers["team"] ) )
    {
        var_0 scripts\mp\bots\bots_util::notify_enemy_bots_bomb_used( "defuse" );
        var_0.isdefusing = 1;
        setomnvar( "ui_bomb_interacting", 3 );
        setomnvar( "ui_bomb_defuser", var_0 getentitynumber() );

        if ( isdefined( level.cyberemp.visuals[0] ) )
            level.cyberemp.visuals[0] hide();

        var_0 thread startnpcbombusesound( "briefcase_bomb_defuse_mp", "weap_suitcase_defuse_button" );
    }
}

allowedwhileplanting( var_0 )
{
    scripts\common\utility::allow_melee( var_0 );
    scripts\common\utility::allow_jump( var_0 );
    scripts\mp\utility\player::allow_gesture( var_0 );

    if ( var_0 )
    {
        scripts\engine\utility::_id_143B9( 0.8, "bomb_allow_offhands" );
        scripts\common\utility::allow_melee( var_0 );
        scripts\common\utility::allow_mantle( var_0 );
    }
    else
    {
        scripts\common\utility::allow_melee( var_0 );
        scripts\common\utility::allow_mantle( var_0 );
    }

    scripts\common\utility::allow_offhand_weapons( var_0 );
}

onenduse( var_0, var_1, var_2 )
{
    var_3 = self.objidnum;
    scripts\mp\objidpoolmanager::objective_set_progress( var_3, 0 );
    scripts\mp\objidpoolmanager::objective_show_progress( var_3, 0 );

    if ( !var_2 )
    {
        if ( var_1.isdefusing )
            scripts\mp\gameobjects::_id_1317F( "icon_waypoint_defuse_empsite_nt", "icon_waypoint_defend_empsite_nt", "mlg_icon_waypoint_emp_planted" );
        else
            scripts\mp\gameobjects::_id_1317F( "icon_waypoint_defend_empsite", "icon_waypoint_target_empsite", "mlg_icon_waypoint_emp_planted" );

        if ( isdefined( self.radialtimeobjid ) )
            scripts\mp\objidpoolmanager::objective_teammask_addtomask( self.radialtimeobjid, var_1.team );

        var_1 scripts\mp\utility\inventory::switchtolastweapon();
    }

    var_1.isplanting = 0;
    var_1.isdefusing = 0;
    setomnvar( "ui_bomb_defuser", -1 );

    if ( !isdefined( var_1 ) )
        return;

    var_1 thread allowedwhileplanting( 1 );
    var_1.bombplantweapon = undefined;

    if ( isplayer( var_1 ) )
    {
        var_1 setclientomnvar( "ui_objective_state", 0 );
        var_1.ui_bomb_planting_defusing = undefined;
    }

    if ( !scripts\mp\gameobjects::isfriendlyteam( var_1.pers["team"] ) )
    {
        if ( isdefined( level.cyberemp ) && !var_2 )
            level.cyberemp.visuals[0] show();
    }
}

startnpcbombusesound( var_0, var_1 )
{
    self endon( "death" );
    self endon( "stopNpcBombSound" );

    if ( scripts\mp\utility\game::isanymlgmatch() || istrue( level.silentplant ) || scripts\mp\utility\perk::_hasperk( "specialty_engineer" ) )
    {
        self setentitysoundcontext( "silent_plant", "on" );
        return;
    }

    for (;;)
    {
        self waittill( "weapon_change", var_2 );

        if ( var_2.basename == var_0 )
            break;
    }

    self playsoundtoteam( var_1, self.team, self );
    var_3 = scripts\mp\utility\game::getotherteam( self.team )[0];
    self playsoundtoteam( var_1, var_3 );
    self waittill( "weapon_change" );
    self notify( "stopNpcBombSound" );
}

onpickup( var_0, var_1, var_2 )
{
    level notify( "bomb_pickup" );
    var_3 = var_0 getcurrentprimaryweapon();

    if ( isdefined( var_3.basename ) && var_3.basename == "iw8_lm_dblmg_mp" )
        var_0 notify( "switched_from_minigun" );

    var_0 scripts\cp_mp\utility\inventory_utility::_giveweapon( "iw8_cyberemp_mp" );

    if ( !istrue( var_2 ) && !var_0 scripts\mp\utility\killstreak::isjuggernaut() && !isbot( var_0 ) )
        var_0 scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( "iw8_cyberemp_mp" );

    var_0 thread empradarwatcher();
    setomnvar( "ui_bomb_carrier", var_0 getentitynumber() );
    var_0 setclientomnvar( "ui_emp_carrier_hud", 1 );
    scripts\mp\utility\game::setmlgannouncement( 16, var_0.team, var_0 getentitynumber() );

    if ( self.firstpickup )
        var_0 thread scripts\mp\utility\points::giveunifiedpoints( "emp_grab" );

    level.usestartspawns = 0;
    var_4 = var_0.pers["team"];

    if ( var_4 == "allies" )
        var_5 = "axis";
    else
        var_5 = "allies";

    var_0.isbombcarrier = 1;

    if ( level.codcasterenabled )
        var_0 setgametypevip( 1 );

    if ( !isdefined( var_2 ) )
    {
        if ( self.firstpickup )
        {
            var_6 = "emppickup_friendly_first";
            self.firstpickup = 0;
        }
        else
            var_6 = "emppickup_friendly";

        scripts\mp\utility\dialog::leaderdialog( var_6, var_4, "bomb" );
        scripts\mp\utility\dialog::leaderdialog( "emppickup_enemy", var_5, "bomb" );
        scripts\mp\utility\sound::playsoundonplayers( game["bomb_recovered_sound"], var_4 );
        var_7 = scripts\mp\utility\teams::getteamdata( var_0.team, "players" );
        level thread scripts\mp\hud_message::notifyteam( "emp_pickup", "emp_pickup_enemy", var_0.team, var_7 );
        var_0 thread scripts\mp\hud_message::showsplash( "emp_pickup" );
        level thread scripts\mp\hud_util::teamplayercardsplash( "callout_emppickup", var_0, var_0.team, undefined, 1 );
    }

    level thread scripts\mp\hud_message::updatematchstatushintforallplayers( var_0.team, 5, 6, var_0, 2 );
    self.offset3d = ( 0, 0, 75 );
    scripts\mp\gameobjects::setownerteam( var_4 );
    scripts\mp\gameobjects::allowuse( "none" );

    if ( isdefined( level.showenemycarrier ) )
    {
        if ( level.showenemycarrier == 0 )
        {
            scripts\mp\gameobjects::setvisibleteam( "friendly" );
            objective_state( self.pingobjidnum, "done" );
        }
        else
        {
            scripts\mp\gameobjects::setvisibleteam( "friendly" );
            objective_state( self.pingobjidnum, "current" );
            scripts\mp\gameobjects::updatecompassicon( "enemy", self.pingobjidnum );
            objective_icon( self.pingobjidnum, "icon_waypoint_kill" );
        }
    }

    scripts\mp\gameobjects::setobjectivestatusicons( "icon_waypoint_escort_emp", "waypoint_capture_kill" );
    level.objectives[var_4] scripts\mp\gameobjects::setvisibleteam( "none" );
    level.objectives[var_5] scripts\mp\gameobjects::setvisibleteam( "any" );
    scripts\mp\objidpoolmanager::_id_11F84( level.objectives["allies"].objidnum, 0 );
    scripts\mp\objidpoolmanager::_id_11F84( level.objectives["axis"].objidnum, 0 );
    var_0 thread scripts\common\utility::_id_13E0A( level._id_11B29, "pickup", var_0.origin );
}

ondrop( var_0 )
{
    setomnvar( "ui_bomb_carrier", -1 );

    if ( level.bombplanted )
    {
        scripts\mp\gameobjects::setownerteam( var_0.team );
        scripts\mp\gameobjects::allowuse( "none" );
    }
    else
    {
        foreach ( var_2 in level.objectives )
            var_2 resetbombsite( 1 );

        scripts\mp\gameobjects::allowuse( "any" );
        scripts\mp\gameobjects::setobjectivestatusicons( "icon_waypoint_emp", "icon_waypoint_emp" );
        scripts\mp\gameobjects::setownerteam( "neutral" );
        scripts\mp\gameobjects::setvisibleteam( "any" );

        if ( isdefined( var_0 ) )
            scripts\mp\utility\print::printonteamarg( &"MP/EXPLOSIVES_DROPPED_BY", scripts\mp\gameobjects::getownerteam(), var_0 );

        scripts\mp\utility\sound::playsoundonplayers( game["bomb_dropped_sound"], scripts\mp\gameobjects::getownerteam() );
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( var_0.team, 1, 1 );

        if ( level.idleresettime > 0 )
            thread returnaftertime();
    }
}

returnaftertime()
{
    level endon( "bomb_pickup" );
    var_0 = 0.0;

    while ( var_0 < level.idleresettime )
    {
        waitframe();

        if ( self.ownerteam == "neutral" )
            var_0 = var_0 + level.framedurationseconds;
    }

    foreach ( var_2 in level.teamnamelist )
        scripts\mp\utility\sound::playsoundonplayers( game["bomb_dropped_sound"], var_2 );

    scripts\mp\gameobjects::returnhome();
}

onuse( var_0 )
{
    var_1 = var_0.pers["team"];
    var_2 = scripts\mp\utility\game::getotherteam( var_1 )[0];

    if ( !scripts\mp\gameobjects::isfriendlyteam( var_0.pers["team"] ) && !level.bombplanted )
    {
        level thread empjamandrumbleclients( 0 );
        setomnvar( "ui_bomb_timer_endtime_a", int( scripts\mp\gamelogic::gettimeremaining() ) + gettime() );
        level notify( "bomb_planted" );
        var_0 notify( "bomb_planted" );
        var_0 notify( "objective", "plant" );
        var_0 playsound( "mp_bomb_plant" );
        scripts\mp\utility\game::setmlgannouncement( 15, var_0.team, var_0 getentitynumber() );
        var_3 = [];
        var_3[var_3.size] = var_0;
        level thread scripts\mp\hud_message::notifyteam( "emp_planted", "emp_planted_enemy", var_0.team, var_3 );
        var_0 thread scripts\mp\hud_message::showsplash( "emp_planted", scripts\mp\rank::getscoreinfovalue( "plant" ) );
        level thread scripts\mp\hud_util::teamplayercardsplash( "callout_empplanted", var_0, undefined, undefined, 1 );
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( var_0.team, 4, 3 );
        var_0 setclientomnvar( "ui_emp_carrier_hud", 0 );
        scripts\mp\utility\dialog::leaderdialog( "empplanted_friendly", var_1 );
        var_0 playsoundtoteam( "mp_bombplaced_friendly", var_1 );
        scripts\mp\utility\dialog::leaderdialog( "empplanted_enemy", var_2 );
        var_0 playsoundtoteam( "mp_bombplaced_enemy", var_2 );
        var_0 thread scripts\mp\utility\points::giveunifiedpoints( "plant" );
        var_0 scripts\cp\vehicles\vehicle_compass_cp::_id_12062();
        var_0 thread scripts\common\utility::_id_13E0A( level._id_11B29, "plant", var_0.origin );
        var_0.bombplantedtime = gettime();
        var_0 scripts\mp\utility\stats::incpersstat( "plants", 1 );
        var_0 scripts\mp\persistence::statsetchild( "round", "plants", var_0.pers["plants"] );
        var_0 scripts\mp\utility\stats::setextrascore0( var_0.pers["plants"] );
        var_0 scripts\cp_mp\pet_watch::addplantingcharge();
        level.bombplanted = 1;
        scripts\mp\gameobjects::_id_13172( "mlg_icon_waypoint_emp_planted" );
        level thread bombplanted( self, var_0.pers["team"] );
        level.bombowner = var_0;
        level.bombowner.isbombcarrier = 0;

        if ( level.codcasterenabled )
            var_0 setgametypevip( 0 );

        level.cyberemp scripts\mp\gameobjects::setdropped();
        level.cyberemp scripts\mp\gameobjects::allowuse( "none" );
        level.cyberemp scripts\mp\gameobjects::setvisibleteam( "none" );
        var_0 scripts\cp_mp\utility\inventory_utility::_takeweapon( "iw8_cyberemp_mp" );
        var_0 scripts\mp\utility\inventory::switchtolastweapon();
        self.useweapon = getcompleteweaponname( "emp_defuse_mp" );
        setupfordefusing( self, var_0 );
    }
    else
    {
        var_0 notify( "bomb_defused" );
        var_0 notify( "objective", "defuse" );
        var_4 = 0;

        if ( scripts\mp\utility\teams::getenemycount( var_0.team, 1 ) == 0 )
            var_4 = 1;

        if ( var_4 )
        {
            var_5 = "empdefused_final_friendly";
            var_6 = "empdefused_final_enemy";
        }
        else
        {
            var_5 = "empdefused_friendly";
            var_6 = "empdefused_enemy";
        }

        scripts\mp\utility\dialog::leaderdialog( var_5, var_1 );
        scripts\mp\utility\dialog::leaderdialog( var_6, var_2 );
        var_3 = [];
        var_3[var_3.size] = var_0;
        level thread scripts\mp\hud_message::notifyteam( "emp_defuse", "emp_defuse_enemy", var_0.team, var_3 );
        level thread scripts\mp\hud_util::teamplayercardsplash( "callout_empdefused", var_0, undefined, undefined, 1 );
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( var_0.team, 5, 6, var_0, 2 );

        if ( isdefined( level.bombowner ) && level.bombowner.bombplantedtime + 3000 + level.defusetime * 1000 > gettime() && scripts\mp\utility\player::isreallyalive( level.bombowner ) )
        {
            var_0 thread scripts\mp\rank::scoreeventpopup( "ninja_defuse" );
            var_0 thread scripts\mp\hud_message::showsplash( "ninja_defuse", scripts\mp\rank::getscoreinfovalue( "defuse" ) );
        }
        else
        {
            var_0 thread scripts\mp\rank::scoreeventpopup( "defuse" );
            var_0 thread scripts\mp\hud_message::showsplash( "emp_defuse", scripts\mp\rank::getscoreinfovalue( "defuse" ) );
        }

        var_0 thread scripts\mp\awards::givemidmatchaward( "mode_sd_defuse" );
        var_0 scripts\mp\utility\stats::incpersstat( "defuses", 1 );
        var_0 scripts\mp\persistence::statsetchild( "round", "defuses", var_0.pers["defuses"] );
        var_0 scripts\cp\vehicles\vehicle_compass_cp::_id_1201F();
        var_0 thread scripts\common\utility::_id_13E0A( level._id_11B29, "defuse", var_0.origin );
        level.bombplanted = 0;
        level thread bombdefused( self );
        resetbombsite( 1, var_0 );

        if ( var_4 )
            wait 3;

        level.cyberemp scripts\mp\gameobjects::allowuse( "any" );
        level.cyberemp scripts\mp\gameobjects::setpickedup( var_0, 0, 1 );
    }
}

empjamandrumbleclients( var_0, var_1 )
{
    foreach ( var_3 in level.players )
    {
        var_3 setempjammed( 1 );

        if ( istrue( var_0 ) )
            var_3 playrumbleonpositionforclient( "artillery_rumble", var_3.origin );
    }

    if ( !istrue( var_1 ) )
    {
        wait 1;

        foreach ( var_3 in level.players )
            var_3 setempjammed( 0 );
    }
}

resetbombsite( var_0, var_1, var_2 )
{
    if ( !var_0 )
    {
        scripts\mp\gameobjects::setobjectivestatusicons( "icon_waypoint_planted_empsite", "icon_waypoint_target_empsite" );
        scripts\mp\gameobjects::setvisibleteam( "any" );
    }
    else
    {
        if ( istrue( var_2 ) )
            return;

        if ( isdefined( var_1 ) )
            self.ownerteam = var_1.team;

        self.id = "bomb_zone";
        scripts\mp\gameobjects::allowuse( "none" );
        scripts\mp\gameobjects::setvisibleteam( "none" );
        scripts\mp\objidpoolmanager::_id_11F84( level.objectives["allies"].objidnum, 1 );
        scripts\mp\objidpoolmanager::_id_11F84( level.objectives["axis"].objidnum, 1 );
        return;
    }
}

setupforplanting()
{
    self.trigger enableplayeruse( level.cyberemp.carrier );
    scripts\mp\gameobjects::allowuse( "enemy" );
    scripts\mp\gameobjects::setusetime( level.planttime );
    scripts\mp\gameobjects::setusetext( &"MP/PLANTING_EXPLOSIVE" );
    scripts\mp\gameobjects::setusehinttext( &"MP/HOLD_TO_PLANT_EMP" );
    scripts\mp\gameobjects::setkeyobject( level.cyberemp );
    self.useweapon = getcompleteweaponname( "emp_bomb_mp" );
    scripts\mp\gameobjects::setobjectivestatusicons( "icon_waypoint_defend_empsite", "icon_waypoint_target_empsite" );
    self.bombplanted = 0;
}

setupfordefusing( var_0, var_1 )
{
    self.trigger setusepriority( -3 );
    self.ownerteam = var_1.team;
    scripts\mp\gameobjects::allowuse( "enemy" );
    scripts\mp\gameobjects::setusetime( level.defusetime );
    scripts\mp\gameobjects::setusetext( &"MP/DEFUSING_EXPLOSIVE" );
    scripts\mp\gameobjects::setusehinttext( &"MP/HOLD_TO_DEFUSE_EMP" );
    scripts\mp\gameobjects::setkeyobject( undefined );
    scripts\mp\gameobjects::setobjectivestatusicons( "icon_waypoint_defend_empsite_nt", "icon_waypoint_defuse_empsite_nt" );
    thread scripts\mp\gametypes\obj_bombzone.gsc::current_carrier( var_1.team, "icon_waypoint_planted_empsite", "icon_waypoint_defuse_empsite" );
    scripts\mp\gameobjects::setvisibleteam( "any", self.radialtimeobjid );
    self.id = "defuse_object";
    self.bombplanted = 1;
    var_2 = scripts\mp\utility\teams::getenemyteams( var_1.team );
    var_3 = var_2[0];

    foreach ( var_5 in scripts\mp\utility\teams::getteamdata( var_3, "players" ) )
        self.trigger enableplayeruse( var_5 );
}

bombdefused( var_0 )
{
    scripts\mp\gamelogic::resumetimer();
    level.timelimitoverride = 0;
    level.scorelimitoverride = 0;
    var_0.bombplanted = 0;
    setomnvar( "ui_bomb_owner_team", -1 );
    level thread [[ level.updategameevents ]]();
    var_0.visuals[0] scripts\mp\gamelogic::stoptickingsound();
    level notify( "bomb_defused" );
}

oncantuse( var_0 )
{

}

bombplanted( var_0, var_1 )
{
    level endon( "overtime" );
    scripts\mp\gamelogic::pausetimer();
    setomnvar( "ui_match_timer_stopped", 0 );
    level.bombplantedteam = var_1;
    level.timelimitoverride = 1;
    level.scorelimitoverride = 1;

    if ( isdefined( var_1 ) )
    {
        if ( var_1 == "allies" )
            setomnvar( "ui_bomb_owner_team", 2 );
        else
            setomnvar( "ui_bomb_owner_team", 1 );
    }

    setgameendtime( int( gettime() + level.bombtimer * 1000 ) );
    var_0.visuals[0] thread scripts\mp\gamelogic::playtickingsound();
    var_2 = gettime();
    thread bomb_pre_exp_music();
    thread bomb_pre_exp_sfx_wait( var_0.visuals[0].origin );
    bombtimerwait();
    var_0.visuals[0] scripts\mp\gamelogic::stoptickingsound();

    if ( !level.bombplanted )
    {
        if ( level.persbombtimer )
        {
            var_3 = ( gettime() - var_2 ) / 1000;
            level.bombtimer = level.bombtimer - var_3;
        }

        return;
    }

    var_4 = var_0.visuals[0].origin;
    level.bombexploded = 1;
    setdvar( "ui_danger_team", "BombExploded" );

    if ( isdefined( level.bombowner ) )
    {
        var_0.visuals[0] radiusdamage( var_4, 512, 1, 1, level.bombowner, "MOD_EXPLOSIVE", "bomb_site_mp" );
        level.bombowner scripts\mp\utility\stats::incpersstat( "destructions", 1 );
        level.bombowner scripts\mp\persistence::statsetchild( "round", "destructions", level.bombowner.pers["destructions"] );
    }
    else
        var_0.visuals[0] radiusdamage( var_4, 512, 1, 1, undefined, "MOD_EXPLOSIVE", "bomb_site_mp" );

    var_5 = randomfloat( 360 );
    playsoundatpos( var_4, "exp_cyber_emp_close" );
    var_6 = var_0.visuals[0] gettagorigin( "tag_origin" );
    var_7 = spawnfx( level._effect["emp_detonation"], var_6, ( 0, 0, 1 ), ( cos( var_5 ), sin( var_5 ), 0 ) );
    triggerfx( var_7 );
    earthquake( 0.6, 1.5, var_4, 10000 );
    level thread empjamandrumbleclients( 1, 1 );
    level notify( "emp_detonated" );

    foreach ( var_9 in level.objectives )
    {
        var_9 notify( "disabled" );
        var_9.trigger scripts\mp\utility\usability::setallunusable();
    }

    if ( game["switchedsides"] )
        var_0.exploderindex = 200;
    else
        var_0.exploderindex = 201;

    if ( isdefined( var_0.exploderindex ) )
        scripts\engine\utility::exploder( var_0.exploderindex );

    var_0.bombplanted = 0;
    level.cyberemp scripts\mp\gameobjects::setvisibleteam( "none" );
    level.objectives["allies"] scripts\mp\gameobjects::setvisibleteam( "none" );
    level.objectives["axis"] scripts\mp\gameobjects::setvisibleteam( "none" );
    scripts\mp\objidpoolmanager::_id_11F84( level.objectives["allies"].objidnum, 0 );
    scripts\mp\objidpoolmanager::_id_11F84( level.objectives["axis"].objidnum, 0 );
    setgameendtime( 0 );
    level.scorelimitoverride = 1;

    if ( isdefined( level.bombowner ) )
        level thread scripts\mp\hud_util::teamplayercardsplash( "callout_destroyed_cyberbombsite", level.bombowner );

    var_0 scripts\mp\gameobjects::releaseid();

    if ( istrue( level.nukeincoming ) )
        return;

    wait 3;
    thread scripts\mp\gamelogic::endgame( var_1, game["end_reason"]["target_destroyed"], undefined, undefined, level.detonatescore );
}

bombtimerwait()
{
    level endon( "bomb_defused" );
    level endon( "overtime_ended" );
    var_0 = int( level.bombtimer * 1000 + gettime() );
    setomnvar( "ui_bomb_timer_endtime", var_0 );
    level thread handlehostmigration( var_0 );
    scripts\mp\hostmigration::waitlongdurationwithgameendtimeupdate( level.bombtimer );
}

bomb_pre_exp_music()
{
    thread scripts\mp\music_and_dialog::stopsuspensemusic();
    thread scripts\mp\music_and_dialog::bombplanted_music();
}

bomb_pre_exp_sfx_wait( var_0 )
{
    level endon( "bomb_defused" );
    level endon( "overtime_ended" );
    wait( max( level.bombtimer - 2, 0.1 ) );
    playsoundatpos( var_0, "exp_cyber_emp_preexplode" );
}

handlehostmigration( var_0 )
{
    level endon( "bomb_defused" );
    level endon( "overtime_ended" );
    level endon( "game_ended" );
    level endon( "disconnect" );
    level waittill( "host_migration_begin" );
    var_1 = scripts\mp\hostmigration::waittillhostmigrationdone();

    if ( var_1 > 0 )
        setomnvar( "ui_bomb_timer_endtime", var_0 + var_1 );
}

overtimethread( var_0 )
{
    level endon( "game_ended" );
    level.inovertime = 1;
    wait 5.0;
    level.disablespawning = 1;
}

givelastonteamwarning()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    scripts\mp\utility\player::waittillrecoveredhealth( 3 );
    level thread scripts\mp\battlechatter_mp::trysaylocalsound( self, "inform_last_one" );
    var_0 = scripts\mp\utility\game::getotherteam( self.pers["team"] )[0];
    level thread scripts\mp\hud_util::teamplayercardsplash( "callout_lastteammemberalive", self, self.pers["team"] );
    level thread scripts\mp\hud_util::teamplayercardsplash( "callout_lastenemyalive", self, var_0 );
    level notify( "last_alive", self );
}

ontimelimit()
{
    if ( level.bombexploded )
        return;

    trial_race_lap_total();
    thread scripts\mp\gamelogic::endgame( "tie", game["end_reason"]["cyber_tie"] );
}

onspawnplayer()
{
    self setclientomnvar( "ui_securing", 0 );
    self setclientomnvar( "ui_securing_progress", 0 );
    self setclientomnvar( "ui_match_status_hint_text", -1 );

    if ( level.multibomb )
        self setclientomnvar( "ui_emp_carrier_hud", 1 );
    else
    {
        self setclientomnvar( "ui_emp_carrier_hud", 0 );
        thread updatebombsiteusability();
    }

    self.isplanting = 0;
    self.isdefusing = 0;
    self.isbombcarrier = 0;

    if ( scripts\mp\utility\game::inovertime() && !isdefined( self.otspawned ) )
        thread printothint();

    if ( isdefined( self.pers["plants"] ) )
        scripts\mp\utility\stats::setextrascore0( self.pers["plants"] );

    if ( isdefined( self.pers["rescues"] ) )
        scripts\mp\utility\stats::setextrascore1( self.pers["rescues"] );

    thread updatematchstatushintonspawn();
}

updatebombsiteusability()
{
    if ( !isdefined( level.objectives ) )
        level waittill( "enable_player_usability" );

    foreach ( var_1 in level.objectives )
    {
        if ( var_1.bombplanted == 0 )
            var_1.trigger disableplayeruse( self );
    }
}

updatematchstatushintonspawn()
{
    if ( level.bombplanted )
    {
        if ( isdefined( level.bombplantedteam ) && level.bombplantedteam == self.team )
            self setclientomnvar( "ui_match_status_hint_text", 4 );
        else
            self setclientomnvar( "ui_match_status_hint_text", 3 );
    }
    else if ( isdefined( level.cyberemp ) && isdefined( level.cyberemp.carrier ) )
    {
        if ( level.cyberemp.carrier.team == self.team )
        {
            if ( level.cyberemp.carrier == self )
                self setclientomnvar( "ui_match_status_hint_text", 2 );
            else
                self setclientomnvar( "ui_match_status_hint_text", 5 );
        }
        else
            self setclientomnvar( "ui_match_status_hint_text", 6 );
    }
    else
        self setclientomnvar( "ui_match_status_hint_text", 1 );
}

trial_race_lap_total()
{
    foreach ( var_1 in level.players )
    {
        if ( istrue( var_1.isplanting ) && isdefined( var_1.lastnonuseweapon ) )
        {
            var_1 scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( var_1.lastnonuseweapon );
            break;
        }
    }
}

ondeadevent( var_0 )
{
    trial_race_lap_total();

    if ( level.bombexploded > 0 && !level.postgameexfil )
        return;

    if ( var_0 == "all" )
    {
        if ( level.bombplanted )
        {
            var_1 = scripts\mp\utility\game::getotherteam( level.bombplantedteam )[0];
            thread scripts\mp\gamelogic::endgame( level.bombplantedteam, game["end_reason"][tolower( game[var_1] ) + "_eliminated"], undefined, undefined, level.detonatescore );
        }
        else
            thread scripts\mp\gamelogic::endgame( "tie", game["end_reason"]["tie"] );
    }
    else if ( level.bombplanted )
    {
        if ( var_0 != level.bombplantedteam )
            thread scripts\mp\gamelogic::endgame( level.bombplantedteam, game["end_reason"][tolower( game[var_0] ) + "_eliminated"], undefined, undefined, level.detonatescore );
        else
            return;
    }
    else if ( var_0 == game["attackers"] )
        level thread scripts\mp\gamelogic::endgame( game["defenders"], game["end_reason"][tolower( game[game["attackers"]] ) + "_eliminated"] );
    else if ( var_0 == game["defenders"] )
        level thread scripts\mp\gamelogic::endgame( game["attackers"], game["end_reason"][tolower( game[game["defenders"]] ) + "_eliminated"] );
}

ononeleftevent( var_0 )
{
    if ( level.bombexploded > 0 )
        return;

    var_1 = scripts\mp\utility\game::getlastlivingplayer( var_0 );

    if ( isdefined( var_1 ) )
    {
        var_1.laststanding = 1;
        var_1 thread givelastonteamwarning();
    }
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    self setclientomnvar( "ui_emp_carrier_hud", 0 );
    thread checkallowspectating();

    if ( !isplayer( var_1 ) || var_1.team == self.team )
        return;

    if ( self.isbombcarrier && level.codcasterenabled )
        self setgametypevip( 0 );

    awardgenericmedals( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );
}

checkallowspectating()
{
    waitframe();
    var_0 = 0;

    if ( !scripts\mp\utility\teams::getteamdata( game["attackers"], "aliveCount" ) )
    {
        level.spectateoverride[game["attackers"]].allowenemyspectate = 1;
        var_0 = 1;
    }

    if ( !scripts\mp\utility\teams::getteamdata( game["defenders"], "aliveCount" ) )
    {
        level.spectateoverride[game["defenders"]].allowenemyspectate = 1;
        var_0 = 1;
    }

    if ( var_0 )
        scripts\mp\spectating::updatespectatesettings();
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    scripts\mp\gametypes\common.gsc::oncommonnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 );

    if ( var_0.isplanting )
    {
        thread scripts\common\utility::_id_13E0A( level._id_11B30, var_2, "planting" );
        var_1 scripts\mp\utility\stats::incpersstat( "defends", 1 );
        var_1 scripts\mp\persistence::statsetchild( "round", "defends", var_1.pers["defends"] );
    }
    else if ( var_0.isbombcarrier )
        thread scripts\common\utility::_id_13E0A( level._id_11B30, var_2, "carrying" );
    else if ( var_0.isdefusing )
        thread scripts\common\utility::_id_13E0A( level._id_11B30, var_2, "defusing" );
}

printothint()
{
    self endon( "disconnect" );
    wait 0.25;
    self.otspawned = 1;
}

awardgenericmedals( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    var_10 = 0;
    var_11 = 0;
    var_12 = 0;
    var_13 = self;
    var_14 = var_13.origin;
    var_15 = var_1.origin;
    var_16 = 0;

    if ( isdefined( var_0 ) )
    {
        var_15 = var_0.origin;
        var_16 = var_0 == var_1;
    }

    if ( isdefined( level.cyberemp.carrier ) )
    {
        if ( isdefined( var_1 ) && isplayer( var_1 ) && var_1.pers["team"] != var_13.pers["team"] )
        {
            if ( isdefined( var_1.isbombcarrier ) && var_16 && isdefined( var_4 ) && var_4.basename == "iw8_cyberemp_mp" )
            {
                var_1 thread scripts\mp\rank::scoreeventpopup( "emp_carrier_kill" );
                var_1 thread scripts\mp\awards::givemidmatchaward( "mode_cyber_kill_with_emp" );
            }
            else if ( istrue( var_13.isbombcarrier ) )
            {
                var_13.isbombcarrier = 0;

                if ( istrue( var_13._id_1334E ) )
                    var_13 scripts\mp\utility\player::hideminimap();

                var_1 thread scripts\mp\rank::scoreeventpopup( "killed_emp_carrier" );
                var_1 thread scripts\mp\awards::givemidmatchaward( "mode_cyber_kill_carrier" );
                thread scripts\common\utility::_id_13E0A( level._id_11B30, var_9, "carrying" );
            }

            if ( var_1.pers["team"] == level.cyberemp.ownerteam && var_1 != level.cyberemp.carrier )
            {
                var_17 = distancesquared( level.cyberemp.carrier.origin, var_15 );

                if ( var_17 < 105625 )
                {
                    var_1 thread scripts\mp\rank::scoreeventpopup( "defend" );
                    var_1 thread scripts\mp\awards::givemidmatchaward( "mode_x_defend" );
                    var_1 scripts\mp\utility\stats::incpersstat( "defends", 1 );
                    var_1 scripts\mp\persistence::statsetchild( "round", "defends", var_1.pers["defends"] );
                    thread scripts\common\utility::_id_13E0A( level._id_11B30, var_9, "defending" );
                }
            }
        }
    }

    foreach ( var_19 in level.objectives )
    {
        if ( istrue( var_19.trigger.trigger_off ) )
            continue;

        var_20 = var_19 scripts\mp\gameobjects::getownerteam();

        if ( var_20 != var_1.team )
        {
            var_21 = distsquaredcheck( var_19.trigger, var_15, var_14 );

            if ( var_21 )
            {
                var_11 = 1;
                var_1 thread scripts\mp\rank::scoreeventpopup( "assault" );
                var_1 thread scripts\mp\awards::givemidmatchaward( "mode_x_assault" );
                var_19 notify( "assault", var_1 );
                thread scripts\common\utility::_id_13E0A( level._id_11B26, var_9, "assaulting" );
                continue;
            }
        }
        else
        {
            var_22 = distsquaredcheck( var_19.trigger, var_15, var_14 );

            if ( var_22 )
            {
                var_12 = 1;
                var_1 thread scripts\mp\rank::scoreeventpopup( "defend" );
                var_1 thread scripts\mp\awards::givemidmatchaward( "mode_x_defend" );
                var_19 notify( "defend", var_1 );
                var_1 scripts\mp\utility\stats::incpersstat( "defends", 1 );
                var_1 scripts\mp\persistence::statsetchild( "round", "defends", var_1.pers["defends"] );
                thread scripts\common\utility::_id_13E0A( level._id_11B26, var_9, "defending" );
                continue;
            }
        }
    }
}

distsquaredcheck( var_0, var_1, var_2 )
{
    var_3 = distancesquared( var_0.origin, var_1 );
    var_4 = distancesquared( var_0.origin, var_2 );

    if ( var_3 < 105625 || var_4 < 105625 )
    {
        if ( !isdefined( var_0.modifieddefendcheck ) )
            return 1;
        else if ( var_1[2] - var_0.origin[2] < 100 || var_2[2] - var_0.origin[2] < 100 )
            return 1;
        else
            return 0;
    }
    else
        return 0;
}

empradarwatcher()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "bomb_planted" );
    self endon( "last_stand_start" );
    self.radarpingtime = gettime();
    self.nextradarpingtime = self.radarpingtime;
    thread weaponswapwatcher();

    for (;;)
    {
        if ( self.currentprimaryweapon.basename == "iw8_cyberemp_mp" )
        {
            while ( self.currentprimaryweapon.basename == "iw8_cyberemp_mp" && gettime() > self.nextradarpingtime )
            {
                triggeroneoffradarsweep( self );
                self.radarpingtime = gettime();
                self.nextradarpingtime = gettime() + level.radarpingtime * 1000;
                thread waitandwatchradarsweep();
                self waittill( "radar_check" );
            }
        }

        waitframe();
    }
}

weaponswapwatcher()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "bomb_planted" );
    self._id_1334E = 0;

    for (;;)
    {
        if ( self.currentprimaryweapon.basename == "iw8_cyberemp_mp" )
        {
            if ( !istrue( self._id_1334E ) )
            {
                scripts\mp\utility\player::showminimap();
                self._id_1334E = 1;
            }
        }
        else if ( istrue( self._id_1334E ) )
        {
            scripts\mp\utility\player::hideminimap();
            self._id_1334E = 0;
        }

        waitframe();
    }
}

waitandwatchradarsweep()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "bomb_planted" );
    self endon( "last_stand_start" );
    var_0 = gettime() + level.radarpingtime * 1000;

    while ( gettime() < var_0 )
    {
        if ( isdefined( level.cyberemp.carrier ) && self == level.cyberemp.carrier && self.currentprimaryweapon.basename == "iw8_cyberemp_mp" )
        {
            waitframe();
            continue;
        }

        break;
    }

    self notify( "radar_check" );
}

applybombcarrierclass()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );

    if ( isdefined( self.iscarrying ) && self.iscarrying == 1 )
    {
        self notify( "force_cancel_placement" );
        waitframe();
    }

    while ( self ismantling() )
        waitframe();

    while ( !self isonground() )
        waitframe();

    self.pers["gamemodeLoadout"] = level.cyber_loadouts[self.team];
    scripts\mp\equipment\tac_insert::_id_13684( self.origin, self.angles );
    self.gamemode_chosenclass = self.class;
    self.pers["class"] = "gamemode";
    self.pers["lastClass"] = "gamemode";
    self.class = "gamemode";
    self.lastclass = "gamemode";
    self notify( "faux_spawn" );
    self.gameobject_fauxspawn = 1;
    self.faux_spawn_stance = self getstance();
    thread scripts\mp\playerlogic::spawnplayer( 1 );
}

removebombcarrierclass()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );

    if ( isdefined( self.iscarrying ) && self.iscarrying == 1 )
    {
        self notify( "force_cancel_placement" );
        waitframe();
    }

    while ( self ismantling() )
        waitframe();

    while ( !self isonground() )
        waitframe();

    self notify( "lost_juggernaut" );
    waitframe();
    self.pers["gamemodeLoadout"] = undefined;
    scripts\mp\equipment\tac_insert::_id_13684( self.origin, self.angles );
    self notify( "faux_spawn" );
    self.faux_spawn_stance = self getstance();
    thread scripts\mp\playerlogic::spawnplayer( 1 );
}

setcarriervisibility()
{
    if ( isdefined( level.showenemycarrier ) )
    {
        switch ( level.showenemycarrier )
        {
            case 0:
                level.cyberemp.objidpingfriendly = 1;
                level.cyberemp.objidpingenemy = 0;
                level.cyberemp.objpingdelay = 0.0;
                break;
            case 1:
                level.cyberemp.objidpingfriendly = 0;
                level.cyberemp.objidpingenemy = 0;
                level.cyberemp.objpingdelay = 0.05;
                break;
            case 2:
                level.cyberemp.objidpingfriendly = 1;
                level.cyberemp.objidpingenemy = 0;
                level.cyberemp.objpingdelay = 1.0;
                break;
            case 3:
                level.cyberemp.objidpingfriendly = 1;
                level.cyberemp.objidpingenemy = 0;
                level.cyberemp.objpingdelay = 1.5;
                break;
            case 4:
                level.cyberemp.objidpingfriendly = 1;
                level.cyberemp.objidpingenemy = 0;
                level.cyberemp.objpingdelay = 2.0;
                break;
            case 5:
                level.cyberemp.objidpingfriendly = 1;
                level.cyberemp.objidpingenemy = 0;
                level.cyberemp.objpingdelay = 3.0;
                break;
            case 6:
                level.cyberemp.objidpingfriendly = 1;
                level.cyberemp.objidpingenemy = 0;
                level.cyberemp.objpingdelay = 4.0;
                break;
        }
    }
    else
    {
        level.cyberemp.objidpingfriendly = 1;
        level.cyberemp.objidpingenemy = 0;
        level.cyberemp.objpingdelay = 3.0;
    }
}

onexfilstarted()
{
    level.cyberemp scripts\mp\gameobjects::releaseid();

    if ( isdefined( level.cyberemp.carrier ) )
    {
        foreach ( var_1 in level.objectives )
        {
            if ( var_1.bombplanted == 0 )
                var_1.trigger disableplayeruse( level.cyberemp.carrier );
        }
    }

    level.cyberemp.trigger delete();
    level.cyberemp.visuals[0] delete();
}

emplightsoff()
{
    level endon( "game_ended" );
    level waittill( "emp_detonated" );

    for (;;)
    {
        foreach ( var_1 in level.emplights )
        {
            var_1.switchstatus = "off";
            handleemponoff( var_1 );
        }

        wait 0.1;

        foreach ( var_1 in level.emplights )
        {
            var_1.switchstatus = "on";
            handleemponoff( var_1 );
        }

        wait 0.15;

        foreach ( var_1 in level.emplights )
        {
            var_1.switchstatus = "off";
            handleemponoff( var_1 );
        }

        wait 0.1;

        foreach ( var_1 in level.emplights )
        {
            var_1.switchstatus = "on";
            handleemponoff( var_1, 0.05 );
        }

        wait 0.5;

        foreach ( var_1 in level.emplights )
        {
            var_1.switchstatus = "off";
            handleemponoff( var_1 );
        }

        wait 10;
    }
}

destroytvs()
{
    level endon( "game_ended" );
    level waittill( "emp_detonated" );
    var_0 = getentarray( "destructibleTVs", "script_noteworthy" );

    foreach ( var_2 in var_0 )
    {
        var_3 = getscriptablearray( var_2.target, "targetname" );

        foreach ( var_5 in var_3 )
        {
            var_5 setscriptablepartstate( "tv", "dead" );
            waitframe();
        }
    }
}

handleemponoff( var_0, var_1 )
{
    var_2 = 0.2;

    if ( isdefined( var_1 ) )
        var_2 = var_1;

    if ( var_0.switchstatus == "on" )
    {
        self notify( "masterSwitch_on" );

        if ( !var_0.lightson )
        {
            foreach ( var_4 in var_0.lights )
                var_4 thread scripts\mp\motiondetectors::lightonroutine( randomfloat( var_2 ) );

            thread scripts\mp\motiondetectors::onoffmodelswap( var_0.models, "on" );
            var_0.lightson = 1;
        }
    }
    else if ( var_0.switchstatus == "off" )
    {
        if ( var_0.lightson )
        {
            level scripts\mp\motiondetectors::lightoffroutine( var_0.lights );
            thread scripts\mp\motiondetectors::onoffmodelswap( var_0.models, "off" );
            var_0.lightson = 0;
        }

        if ( isdefined( self.script_parameters ) && self.script_parameters == "motion" )
            var_0.switchstatus = "motion";

        self notify( "lights_off" );
    }
}

setupwaypointicons()
{
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_emp", 2, "neutral", "MP_INGAME_ONLY/OBJ_EMP_CAPS", "hud_icon_cyber_bomb", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_escort_emp", 1, "friendly", "MP_INGAME_ONLY/OBJ_ESCORT_CAPS", "hud_icon_cyber_bomb", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_defend_empsite", 0, "friendly", "MP_INGAME_ONLY/OBJ_DEFEND_CAPS", "icon_waypoint_cyber_bombsite", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_target_empsite", 0, "enemy", "MP_INGAME_ONLY/OBJ_ATTACK_CAPS", "icon_waypoint_cyber_bombsite", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_planted_empsite", 0, "friendly", "MP_INGAME_ONLY/OBJ_DEFEND_CAPS", "icon_waypoint_cyber_bombsite", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_defuse_empsite", 0, "enemy", "MP_INGAME_ONLY/OBJ_DEFUSE_CAPS", "icon_waypoint_cyber_bombsite", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_emp_planting", 0, "enemy", "MP_INGAME_ONLY/OBJ_PLANTING_CAPS", "icon_waypoint_cyber_bombsite", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_emp_defusing", 0, "enemy", "MP_INGAME_ONLY/OBJ_DEFUSING_CAPS", "icon_waypoint_cyber_bombsite", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_defend_empsite_nt", 0, "friendly", "", "icon_waypoint_cyber_bombsite", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_defuse_empsite_nt", 0, "enemy", "", "icon_waypoint_cyber_bombsite", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "mlg_icon_waypoint_emp_planted", 0, "neutral", "", "icon_minimap_objective_codcaster_bomb", 0 );
}
