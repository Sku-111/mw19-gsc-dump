// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

spawnmalfunctioningscreamerdevice( var_0, var_1 )
{
    var_2 = _dropscreamercrate( var_1 + ( 0, 0, 2500 ), var_1 );
    var_3 = scripts\cp_mp\killstreaks\airdrop::gettriggerobject( var_2 );
    var_3._id_140A0 = 4;
    level._id_11E18.screamercrate = var_2;
    level._id_11E18.screamerareaorigin = var_0;
}

endevent_malfunctioningscreamerdevice()
{
    if ( isdefined( level._id_11E18._id_12F3F ) && isdefined( level._id_11E18._id_12F3F.owner ) )
        level._id_11E18._id_12F3F.owner scripts\mp\killstreaks\killstreaks::awardkillstreak( "greenbay_strike", "other", undefined, undefined, undefined, 1 );
}

destroyscreamer()
{
    level._id_11E18 notify( "screamer_dropped" );
    level._id_11E18 notify( "screamer_destroyed" );

    if ( isdefined( level._id_11E18.screamercrate ) )
    {
        level._id_11E18.screamercrate thread scripts\cp_mp\killstreaks\airdrop::destroycrate();
        level._id_11E18.screamercrate = undefined;
    }

    level._id_11E18.screamerareaorigin = undefined;

    if ( isdefined( level._id_11E18._id_12F3F ) )
    {
        level._id_11E18._id_12F3F _worldiconhide();

        if ( isdefined( level._id_11E18._id_12F3F.owner ) )
        {
            var_0 = scripts\mp\gametypes\br_pickups.gsc::test_ai_anim();
            level._id_11E18._id_12F3F.owner _dropscreamerinternal( var_0 );
            level._id_11E18._id_12F3F setscriptablepartstate( "brloot_mendota_screamer", "disabled" );
            wait 1.6;
        }

        thread _explodescreamer( level._id_11E18._id_12F3F.origin );

        if ( isent( level._id_11E18._id_12F3F ) )
            level._id_11E18._id_12F3F delete();
        else
            level._id_11E18._id_12F3F freescriptable();

        level._id_11E18._id_12F3F = undefined;
    }
}

initcratedata( var_0 )
{
    var_1 = scripts\cp_mp\killstreaks\airdrop::getleveldata( "fresno_screamer" );
    var_1.capturestring = &"MP/GENERIC_LOOT_CRATE_CAPTURE";
    var_1.dummymodel = "military_carepackage_02_br";
    var_1.friendlymodel = undefined;
    var_1.enemymodel = undefined;
    var_1.mountmantlemodel = undefined;
    var_1.supportsownercapture = 0;
    var_1.headicon = undefined;
    var_1.usepriority = -1;
    var_1.usefov = 180;
    var_1.timeout = undefined;
    var_1.friendlyuseonly = 1;
    var_1.ownerusetime = 0.5;
    var_1.otherusetime = 0.5;
    var_1.capturecallback = ::_cratecapturecallback;
    var_1.destroycallback = ::_cratedestroycallback;
    var_1.activatecallback = ::_crateactivatecallback;
    var_1.ingame = ::_cratephysicsoncallback;
    var_1._id_127FD = ::_cratepostcreatecallback;
    var_1.destroyoncapture = 1;
}

pickupscreamer( var_0 )
{
    var_1 = self.tracknonoobplayerlocation;
    level endon( "game_ended" );
    var_1 endon( "death" );

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == var_0.team )
        {
            if ( var_3 == var_0 )
                var_3 scripts\mp\hud_message::showsplash( "br_pe_fresno_screamer_stay_close" );
            else
            {

            }

            continue;
        }
    }

    var_1 _worldiconhide();
    var_1 _worldiconshow( "picked_up", var_0 );
    var_1 _hidescreamer();
    var_1.owner = var_0;
    var_0.iscarryingscreamer = 1;
    var_0 thread _carryscreamergesture( "ks_remote_oshkosh_mp" );
}

dropscreamer( var_0, var_1 )
{
    level._id_11E18 notify( "screamer_dropped" );
    _dropscreamerinternal( var_0, var_1 );
    level._id_11E18._id_12F3F _worldiconshow( "on_ground" );
    scripts\mp\gametypes\br_publicevents.gsc::_id_13371( "br_pe_fresno_screamer_recover" );

    if ( istrue( var_1 ) )
        level._id_11E18._id_12F3F thread _trackscreameroob();
}

choosescreamertitan()
{
    var_0 = isdefined( level._id_11E18.setincomingremovedcallback._id_12930 );
    var_1 = isdefined( level._id_11E18.wait_for_next_hack_complete._id_12930 );
    level._id_11E18.screamergg = undefined;
    level._id_11E18.screamerkk = undefined;

    if ( var_0 )
    {
        if ( !var_1 || randomintrange( 0, 2 ) == 0 )
            level._id_11E18.screamergg = 1;
    }

    if ( var_1 && !isdefined( level._id_11E18.screamergg ) )
        level._id_11E18.screamerkk = 1;
}

_dropscreamerinternal( var_0, var_1 )
{
    if ( isdefined( level._id_11E18._id_12F3F ) )
    {
        var_2 = scripts\engine\utility::ter_op( isplayer( self ), self, level._id_11E18._id_12F3F.owner );

        if ( isdefined( var_2 ) )
            var_2.iscarryingscreamer = 0;

        if ( isent( level._id_11E18._id_12F3F ) == 0 )
        {
            level._id_11E18._id_12F3F _worldiconhide();
            level._id_11E18._id_12F3F freescriptable();
            level._id_11E18._id_12F3F = undefined;
        }
    }

    if ( isdefined( level._id_11E18._id_12F3F ) == 0 )
    {
        if ( istrue( var_1 ) )
            var_3 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_0, self.origin, self.angles, self, 0, 0, 10, 1 );
        else
            var_3 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_0, self.origin, self.angles, self );

        level._id_11E18._id_12F3F = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( "brloot_mendota_screamer", var_3, 0, 1 );
        level._id_11E18._id_12F3F.keepinmap = 1;
        level._id_11E18._id_12F3F.hidden = 0;
    }
}

_explodescreamer( var_0 )
{
    var_1 = var_0 + ( 0, 0, -96 );
    var_2 = physicstrace( var_0, var_1 );
    var_3 = var_2 == var_1;
    var_4 = "detonateGround";

    if ( var_3 )
        var_4 = "detonateAir";

    waitframe();
    var_5 = easepower( "br_carriable_explosion_base", var_2, ( 0, 0, 0 ) );
    var_5 setscriptablepartstate( "carrible_explode_base", var_4 );
    var_5 thread scripts\mp\equipment\binoculars::hanging_crate_think( 5 );
}

_trackscreameroob()
{
    var_0 = self;
    level._id_11E18 endon( "screamer_destroyed" );
    level endon( "game_ended" );
    var_0 endon( "death" );
    var_1 = 10.0;
    var_2 = 0.1;
    var_3 = -1;
    var_4 = float( level._id_11E18.playerredeploy * level._id_11E18.playerredeploy );

    for (;;)
    {
        wait( var_2 );

        if ( isdefined( level._id_11E18._id_12F3F ) && isdefined( level._id_11E18.screamerareaorigin ) )
        {
            var_5 = level._id_11E18._id_12F3F.origin;

            if ( isdefined( level._id_11E18._id_12F3F.owner ) && isdefined( level._id_11E18._id_12F3F.owner.origin ) )
                var_5 = level._id_11E18._id_12F3F.owner.origin;

            var_6 = distance2dsquared( var_5, level._id_11E18.screamerareaorigin );

            if ( var_6 <= var_4 )
            {
                if ( var_3 >= 0 )
                {
                    level._id_11E18._id_12F3F notify( "screamer_in_bounds" );
                    var_3 = -1;
                }
            }
            else if ( var_3 <= -1 )
            {
                var_3 = var_1;
                level._id_11E18._id_12F3F thread _playscreameroobalarm( var_3 );
            }
            else if ( var_3 >= 0 )
            {
                var_7 = int( var_3 );
                var_3 = var_3 - var_2;

                if ( var_3 <= 0.0 )
                {
                    level thread destroyscreamer();
                    break;
                }
            }

            continue;
        }

        break;
    }
}

_waitscreameroobalarm( var_0 )
{
    var_1 = self;
    level endon( "game_ended" );
    level._id_11E18 endon( "screamer_destroyed" );
    level._id_11E18 endon( "screamer_dropped" );
    var_1 endon( "death" );
    var_1 scripts\engine\utility::waittill_notify_or_timeout( "screamer_in_bounds", var_0 );
}

_playscreameroobalarm( var_0 )
{
    var_1 = self;
    var_1 notify( "screamer_in_bounds" );

    if ( isdefined( var_1.owner ) )
    {
        var_2 = var_1.owner;
        var_2 setclientomnvar( "ui_out_of_bounds_type", 4 );
        var_2 setclientomnvar( "ui_out_of_bounds_countdown", int( gettime() + var_0 * 1000 ) );
        var_1 _waitscreameroobalarm( var_0 );
        var_2 setclientomnvar( "ui_out_of_bounds_type", 0 );
        var_2 setclientomnvar( "ui_out_of_bounds_countdown", 0 );
    }
}

_hidescreamer()
{
    var_0 = self;
    var_0.hidden = 1;
    var_0 setscriptablepartstate( "brloot_mendota_screamer", "hidden" );
}

_worldiconshow( var_0, var_1 )
{
    var_2 = self;

    if ( var_0 == "picked_up" )
        var_2 _setscreamericonspickedup( var_1, "ui_mp_br_mapmenu_icon_orca_objective_friendly", "ui_mp_br_mapmenu_icon_orca_objective_enemy" );
    else if ( var_0 == "on_ground" )
    {
        var_3 = scripts\mp\objidpoolmanager::requestobjectiveid( 1 );

        if ( var_3 != -1 )
        {
            scripts\mp\objidpoolmanager::objective_add_objective( var_3, "current", var_2.origin + ( 0, 0, 50 ), "ui_mp_br_mapmenu_icon_orca_objective_dropped" );
            scripts\mp\objidpoolmanager::update_objective_setbackground( var_3, 1 );

            foreach ( var_5 in level.players )
            {
                if ( !var_5 scripts\mp\gametypes\br_public.gsc::updateinstantclassswapallowedinternal() )
                    objective_addclienttomask( var_3, var_5 );
            }

            objective_showtoplayersinmask( var_3 );
            var_2.icon = var_3;
            var_2 thread _screamerupdateiconposition();
        }
        else
        {

        }
    }
}

_worldiconhide()
{
    var_0 = self;
    var_0 notify( "screamer_icon_hide" );

    if ( isdefined( var_0.icon ) )
    {
        scripts\mp\objidpoolmanager::returnobjectiveid( var_0.icon );
        var_0.icon = undefined;
    }

    if ( isdefined( var_0.playersetattractionstateindex ) )
    {
        scripts\mp\objidpoolmanager::returnobjectiveid( var_0.playersetattractionstateindex );
        var_0.playersetattractionstateindex = undefined;
    }

    if ( isdefined( var_0.nuke_cancel ) )
    {
        scripts\mp\objidpoolmanager::returnobjectiveid( var_0.nuke_cancel );
        var_0.nuke_cancel = undefined;
    }
}

_setscreamericonspickedup( var_0, var_1, var_2 )
{
    var_3 = self;
    var_4 = scripts\mp\objidpoolmanager::requestobjectiveid( 1 );

    if ( var_4 != -1 )
    {
        scripts\mp\objidpoolmanager::objective_add_objective( var_4, "current", var_3.origin, var_1 );
        scripts\mp\objidpoolmanager::update_objective_setbackground( var_4, 1 );
        var_5 = 0.0;
        var_3 thread _updatescreamericon( var_0, var_4, var_5 );
        objective_removeallfrommask( var_4 );
        var_6 = scripts\mp\utility\teams::getteamdata( var_0.team, "players" );

        foreach ( var_8 in var_6 )
        {
            if ( !var_8 scripts\mp\gametypes\br_public.gsc::updateinstantclassswapallowedinternal() )
                objective_addclienttomask( var_4, var_8 );
        }

        objective_showtoplayersinmask( var_4 );
        var_3.playersetattractionstateindex = var_4;
    }

    var_10 = scripts\mp\objidpoolmanager::requestobjectiveid( 1 );

    if ( var_10 != -1 )
    {
        scripts\mp\objidpoolmanager::objective_add_objective( var_10, "current", var_3.origin, var_2 );
        scripts\mp\objidpoolmanager::update_objective_setbackground( var_10, 1 );
        var_5 = 0.0;
        var_3 thread _updatescreamericon( var_0, var_10, var_5 );
        objective_removeallfrommask( var_10 );

        foreach ( var_8 in level.players )
        {
            if ( var_8 scripts\mp\gametypes\br_public.gsc::updateinstantclassswapallowedinternal() || var_8.team == var_0.team )
                objective_addclienttomask( var_10, var_8 );
        }

        objective_hidefromplayersinmask( var_10 );
        var_3.nuke_cancel = var_10;
    }
}

_updatescreamericon( var_0, var_1, var_2 )
{
    var_3 = self;
    level._id_11E18 endon( "screamer_dropped" );
    level._id_11E18 endon( "screamer_destroyed" );

    if ( var_2 <= 0.0 )
    {
        scripts\mp\objidpoolmanager::update_objective_setzoffset( var_1, 50 );
        scripts\mp\objidpoolmanager::update_objective_onentity( var_1, var_0 );
    }
    else
    {
        for (;;)
        {
            if ( isdefined( var_0 ) )
            {
                scripts\mp\objidpoolmanager::update_objective_position( var_1, var_0.origin + ( 0, 0, 50 ) );

                if ( var_0 scripts\cp_mp\utility\player_utility::isinvehicle() )
                {
                    wait 0.1;
                    continue;
                }

                wait( var_2 );
            }
        }
    }
}

_screamerupdateiconposition()
{
    self notify( "_screamerUpdateIconPosition" );
    self endon( "_screamerUpdateIconPosition" );
    self endon( "screamer_icon_hide" );
    self endon( "death" );

    for (;;)
    {
        scripts\mp\objidpoolmanager::update_objective_position( self.icon, self.origin + ( 0, 0, 50 ) );
        waitframe();
    }
}

_carryscreamergesture( var_0 )
{
    var_1 = self;
    level endon( "game_ended" );
    var_1 endon( "death_or_disconnect" );
    var_1 giveweapon( var_0 );
    var_1 setweaponammostock( var_0, 0 );
    var_1 setweaponammoclip( var_0, 0 );
    var_1 scripts\mp\supers::allowsuperweaponstow();
    var_2 = var_1 scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( var_0, 0, 1 );

    if ( !istrue( var_2 ) )
    {
        var_1 scripts\mp\supers::unstowsuperweapon();

        if ( var_1 scripts\cp_mp\utility\inventory_utility::isswitchingtoweaponwithmonitoring( var_0 ) )
            var_1 scripts\cp_mp\utility\inventory_utility::abortmonitoredweaponswitch( var_0 );
        else
            var_1 takeweapon( var_0 );
    }

    var_1 scripts\common\utility::allow_killstreaks( 0 );
    var_1 scripts\common\utility::allow_supers( 0 );

    while ( istrue( var_1.iscarryingscreamer ) )
    {
        waitframe();

        if ( !var_1 scripts\cp_mp\utility\inventory_utility::iscurrentweapon( var_0 ) || _playercanholdscreamer( var_1 ) == 0 )
        {
            if ( !istrue( var_1.iscarryingscreamer ) )
            {
                var_1 thread scripts\mp\utility\inventory::switchtolastweapon();
                wait 0.5;
            }

            var_1 takeweapon( var_0 );

            if ( istrue( var_1.iscarryingscreamer ) )
            {
                var_3 = scripts\mp\gametypes\br_pickups.gsc::test_ai_anim();
                var_1 dropscreamer( var_3 );
            }
        }
    }

    var_1 scripts\common\utility::allow_killstreaks( 1 );
    var_1 scripts\common\utility::allow_supers( 1 );
}

_playercanholdscreamer( var_0 )
{
    if ( istrue( var_0.iscarryingscreamer ) == 0 )
        return 0;

    if ( var_0 isinexecutionvictim() )
        return 0;

    if ( istrue( var_0.inlaststand ) )
        return 0;

    if ( var_0 scripts\cp_mp\utility\player_utility::isinvehicle() )
        return 0;

    if ( istrue( var_0.isreviving ) )
        return 0;

    if ( istrue( var_0.isjuggernaut ) )
        return 0;

    if ( var_0 ismantling() )
        return 0;

    return 1;
}

_dropscreamercrate( var_0, var_1 )
{
    var_2 = scripts\cp_mp\killstreaks\airdrop::dropcrate( undefined, undefined, "fresno_screamer", var_0, ( 0, randomfloat( 360 ), 0 ), var_1 );

    if ( isdefined( var_2 ) )
    {
        var_2.skipminimapicon = 0;
        var_2 setscriptablepartstate( "objective_map", "pe_chopper_crate", 0 );
        var_2._id_13428 = spawn( "script_model", var_1 );
        var_2._id_13428 setmodel( "ks_airdrop_crate_br" );
        var_2._id_13428 setscriptablepartstate( "smoke_signal", "pe_chopper_on", 0 );
    }

    return var_2;
}

_crateactivatecallback( var_0 )
{

}

_cratecapturecallback( var_0 )
{
    if ( isdefined( self._id_13428 ) )
    {
        self._id_13428 setscriptablepartstate( "smoke_signal", "off", 0 );
        self._id_13428 delete();
    }

    level._id_11E18.screamercrate = undefined;
    var_1 = scripts\mp\gametypes\br_pickups.gsc::test_ai_anim();
    dropscreamer( var_1, 1 );
}

_cratedestroycallback( var_0 )
{
    self setscriptablepartstate( "objective_map", "inactive", 0 );

    if ( isdefined( self._id_13428 ) )
    {
        self._id_13428 setscriptablepartstate( "smoke_signal", "off", 0 );
        self._id_13428 delete();
    }

    level._id_11E18.screamercrate = undefined;
}

_cratephysicsoncallback( var_0, var_1 )
{
    self setscriptablepartstate( "crate_audio", "detach", 0 );
}

_cratepostcreatecallback()
{
    self setscriptablepartstate( "model", "friendly", 0 );
}
