// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    setuphudelements();
}

setuphudelements()
{
    level.iconneutral = "waypoint_bank_";
    level.iconcapture = "waypoint_scoring_foe_";
    level.icondefend = "waypoint_scoring_friend_";
    level.iconenemycontested = "waypoint_contested_";
    level.iconfriendlycontested = "waypoint_contested_";
}

setupobjective( var_0, var_1, var_2 )
{
    var_3 = spawn( "trigger_radius", var_0.origin, 0, 90, 128 );
    var_3.script_label = var_0.script_label;
    var_0 = var_3;
    var_4[0] = spawn( "script_model", var_0.origin );
    var_4[0].angles = var_0.angles;

    if ( isdefined( var_0.objectivekey ) )
        var_5 = var_0.objectivekey;
    else
        var_5 = var_0.script_label;

    if ( isdefined( var_0.iconname ) )
        var_6 = var_0.iconname;
    else
        var_6 = var_0.script_label;

    if ( istrue( var_1 ) )
        var_7 = getreservedobjid( var_5 );
    else
        var_7 = undefined;

    var_8 = scripts\mp\gameobjects::createuseobject( "neutral", var_0, var_4, ( 0, 0, 90 ), var_1, var_2 );
    var_8 scripts\mp\gameobjects::allowuse( "enemy" );
    var_8 scripts\mp\gameobjects::setusetime( level.bankcapturetime );
    var_8 scripts\mp\gameobjects::cancontestclaim( 1 );
    var_8 scripts\mp\gameobjects::mustmaintainclaim( 1 );
    var_8.tagsdeposited = 0;
    var_8.disabled = 0;
    var_8.objectivekey = var_5;
    var_8.iconname = var_6;

    if ( !istrue( var_2 ) )
    {
        var_8 scripts\mp\gameobjects::setvisibleteam( "any" );
        var_8 _id_1317D();
        objective_setlabel( var_8.objidnum, &"MP_INGAME_ONLY/PILLAGE_DEPOT_OPEN" );
        var_8 scripts\engine\utility::delaythread( 1.0, ::setneutral );
    }

    if ( istrue( level.setplayerselfrevivingextrainfo ) )
    {
        var_8.visuals[0].origin = getgroundposition( var_8.trigger.origin, 2 ) - ( 0, 0, 2 );
        var_8.visuals[0] setmodel( "ee_decor_gravestone_01_mp" );
        var_8 thread _id_14395( var_8 );
    }

    return var_8;
}

_id_14395( var_0 )
{
    scripts\mp\flags::gameflagwait( "prematch_done" );
    playfx( level.spawnoffsettacinsertmax["blood_floor_hw"], getgroundposition( var_0.trigger.origin, 4 ) + ( 0, 0, 2 ) );
}

_id_1317D()
{
    self.onbeginuse = ::zone_onusebegin;
    self.onuseupdate = ::zone_onuseupdate;
    self.onenduse = ::zone_onuseend;
    self.onuse = ::zone_onuse;
    self.onunoccupied = ::zone_onunoccupied;
    self.oncontested = ::zone_oncontested;
    self.onuncontested = ::zone_onuncontested;
    self.id = "domFlag";
    scripts\mp\gameobjects::pinobjiconontriggertouch();
    self.claimgracetime = level.bankcapturetime * 1000;
    self.scriptable = setupscriptablevisuals( self.visuals[0].origin, self );
}

getreservedobjid( var_0 )
{
    if ( var_0 == "a" )
        var_1 = 0;
    else
        var_1 = 1;

    return var_1;
}

setupscriptablevisuals( var_0, var_1 )
{
    var_2 = var_0 + ( 0, 0, 32 );
    var_3 = var_0 + ( 0, 0, -32 );
    var_4 = scripts\engine\trace::create_contents( 1, 1, 1, 1, 0, 1, 1 );
    var_5 = [];
    var_6 = scripts\engine\trace::ray_trace( var_2, var_3, var_5, var_4 );
    var_1.baseeffectpos = var_6["position"];
    var_7 = vectortoangles( var_6["normal"] );
    var_1.baseeffectforward = anglestoforward( var_7 );
    var_1.baseeffectpos = player_give_intel_2_ks( var_1 );
    var_8 = spawn( "script_model", var_1.baseeffectpos );
    var_8 setmodel( "grind_flag_scriptable" );
    var_8.angles = generateaxisanglesfromforwardvector( var_1.baseeffectforward, var_8.angles );
    return var_8;
}

player_give_intel_2_ks( var_0 )
{
    var_1 = var_0.baseeffectpos;

    if ( level.mapname == "mp_village2" )
    {
        if ( var_0.trigger.script_label == "b" )
            var_1 = var_0.baseeffectpos + ( 0, 0, 10 );
    }

    return var_1;
}

activatezone()
{
    self.onbeginuse = undefined;
    self.onuseupdate = undefined;
    self.onenduse = undefined;
    self.onuse = undefined;
    self.onunoccupied = undefined;
    self.oncontested = undefined;
    self.onuncontested = undefined;
}

deactivatezone()
{
    self.onbeginuse = undefined;
    self.onuseupdate = undefined;
    self.onenduse = undefined;
    self.onuse = undefined;
    self.onunoccupied = undefined;
    self.oncontested = undefined;
    self.onuncontested = undefined;
}

setneutral()
{
    scripts\mp\gameobjects::setownerteam( "neutral" );
    setneutralicons();
    updateflagstate( "idle", 0 );
}

zone_onusebegin( var_0 )
{
    self.didstatusnotify = 0;
    thread scripts\mp\gameobjects::useobjectdecay( var_0.team );
}

zone_onuseupdate( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\gameobjects::getownerteam();

    if ( var_1 > 0.05 && var_2 && !self.didstatusnotify )
    {
        if ( !isagent( var_3 ) )
            updateflagcapturestate( var_0 );

        self.didstatusnotify = 1;
    }
}

zone_onuseend( var_0, var_1, var_2 )
{
    var_3 = scripts\mp\gameobjects::getownerteam();

    if ( var_3 == "neutral" )
    {
        setneutralicons();
        updateflagstate( "idle", 0 );
    }
    else
    {
        setteamicons();
        updateflagstate( var_3, 0 );
    }
}

zone_onuse( var_0 )
{
    var_1 = var_0.team;
    var_2 = scripts\mp\gameobjects::getownerteam();
    var_3 = scripts\mp\utility\game::getotherteam( var_1 )[0];
    var_4 = gettime();
    setteamicons();
    updateflagstate( var_1, 0 );
    scripts\mp\gameobjects::setownerteam( var_1 );
}

zone_onunoccupied()
{
    setneutralicons();
    setneutral();
}

zone_oncontested()
{
    setcontestedicons();
    updateflagstate( "contested", 0 );
}

zone_onuncontested( var_0 )
{
    var_1 = scripts\mp\gameobjects::getownerteam();

    if ( var_0 == "none" || var_1 == "neutral" )
        setneutralicons();
    else
        setteamicons();

    var_2 = scripts\engine\utility::ter_op( var_1 == "neutral", "idle", var_1 );
    updateflagstate( var_2, 0 );
}

setcrankedtimerzonecap( var_0 )
{
    if ( isdefined( level.supportcranked ) && level.supportcranked && isdefined( var_0.cranked ) && var_0.cranked )
        var_0 scripts\mp\cranked::setcrankedplayerbombtimer( "assist" );
}

setneutralicons()
{
    if ( !isdefined( level.tacopssublevel ) )
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconneutral );
}

setteamicons()
{
    scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );
}

setcontestedicons()
{
    scripts\mp\gameobjects::setobjectivestatusicons( level.iconfriendlycontested );
}

updateflagstate( var_0, var_1 )
{
    self.scriptable setscriptablepartstate( "flag", var_0 );

    if ( !istrue( var_1 ) )
        self.scriptable setscriptablepartstate( "pulse", "off" );
}

updateflagcapturestate( var_0 )
{
    self.scriptable setscriptablepartstate( "pulse", var_0 );
}
