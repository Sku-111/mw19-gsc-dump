// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    var_0 = spawnstruct();
    level.rugby = var_0;
    var_0.endzones = [];
    var_0.endzones["allies"] = [];
    var_0.endzones["axis"] = [];
    var_0.juggcratesetups = [];
    var_0.goals = [];
    var_0.activejuggcrates = [];
    var_0.activejuggernauts = [];
    var_0.lastjuggpositions = [];
    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_1[0] = scripts\mp\utility\game::getgametype();
    scripts\mp\gameobjects::main( var_1 );
    initrules();
    level.teambased = 1;
    level.objectivebased = 1;
    level.onstartgametype = ::onstartgametype;
    level.getspawnpoint = ::getspawnpoint;
    level.onnormaldeath = ::onnormaldeath;
    level.onplayerkilled = ::onplayerkilled;
    level.ontimelimit = ::ontimelimit;
    level.onplayerdamaged = ::onplayerdamaged;
    level.modeonteamchangedeath = ::modeonteamchangedeath;
    level.onplayerconnect = ::onplayerconnect;
    level.ontimelimitot = ::ontimelimitot;
    level._id_11C89 = ::get_circle_back_start_node;
    game["canScoreOnTie"] = 1;
    game["dialog"]["gametype"] = "gametype_onslaught";

    if ( getdvarint( "OSMSLRTOP" ) )
        game["dialog"]["gametype"] = "hc_" + game["dialog"]["gametype"];
    else if ( getdvarint( "NOSLRNTRKL" ) )
        game["dialog"]["gametype"] = "thirdp_" + game["dialog"]["gametype"];

    game["dialog"]["boost"] = "boost_rugby";

    if ( !isdefined( game["roundsPlayed"] ) )
        var_2 = "boost_rugby";
    else
        var_2 = "boost_rugby_short";

    game["dialog"]["offense_obj"] = var_2;
    game["dialog"]["defense_obj"] = var_2;
    game["dialog"]["rugby_enemy_close_goal"] = "rugby_enemy_close_goal";
    game["dialog"]["rugby_friendly_close_goal"] = "rugby_friendly_close_goal";
    game["dialog"]["rugby_lost_jugg"] = "rugby_lost_jugg";
    game["dialog"]["rugby_secured_jugg"] = "rugby_secured_jugg";
    game["dialog"]["rugby_securing_jugg"] = "rugby_securing_jugg";
    game["dialog"]["rugby_capture_jugg"] = "objective_new";
    game["dialog"]["rugby_new_jugg"] = "tjugg_new_player";
    game["dialog"]["rugby_team_jugg_nag"] = "tjugg_vip";
    game["dialog"]["rugby_order_attack"] = "order_attack";
    game["dialog"]["rugby_order_fallback"] = "order_fallback";
    game["dialog"]["rugby_round_lose"] = "overrun_enemy";
    game["dialog"]["rugby_round_win"] = "overrun_friendly";
    level._effect["rugby_score_explosion"] = loadfx( "vfx/iw8_mp/gamemode/vfx_search_bombsite_destroy.vfx" );
}

initrules()
{
    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 1, 0, 1 );
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 240 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 75 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 3 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    }

    updategametypedvars();
    level.ontimelimitgraceperiod = remove_steam_damage();
    level.currenttimelimitdelay = 0.0;
}

updategametypedvars()
{
    scripts\mp\gametypes\common.gsc::updatecommongametypedvars();
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    var_0 = getmatchrulesdata( "rugbyData", "juggHealth" );
    setdynamicdvar( "scr_rugby_juggHealth", var_0 );
    var_1 = getmatchrulesdata( "rugbyData", "juggSpeed" );
    setdynamicdvar( "scr_rugby_juggSpeed", var_1 );
    var_2 = getmatchrulesdata( "rugbyData", "juggTeamSpeed" );
    setdynamicdvar( "scr_rugby_juggTeamSpeed", var_2 );
    var_3 = getmatchrulesdata( "rugbyData", "juggTimeout" );
    setdynamicdvar( "scr_rugby_juggTimeout", var_3 );
    var_4 = getmatchrulesdata( "rugbyData", "helperMax" );
    setdynamicdvar( "scr_rugby_helperMax", var_4 );
    var_5 = getmatchrulesdata( "rugbyData", "juggCaptureTime" );
    setdynamicdvar( "scr_rugby_juggCaptureTime", var_5 );
}

getjuggmaxhealth()
{
    return getdvarint( "scr_rugby_juggHealth" );
}

getjuggspeedscalar( var_0 )
{
    var_1 = -0.3 + 0.1 * getdvarfloat( "scr_rugby_juggSpeed" );
    var_0 = int( min( var_0, getdvarint( "scr_rugby_helperMax" ) ) );
    var_2 = 0.08 * getdvarfloat( "scr_rugby_juggTeamSpeed" );
    return var_1 + var_0 * var_2;
}

getjuggtimeout()
{
    return getdvarfloat( "scr_rugby_juggTimeout" );
}

remove_spawn_disable_struct()
{
    return getdvarfloat( "scr_rugby_juggCaptureTime" );
}

remove_steam_damage()
{
    return getdvarfloat( "scr_rugby_juggOvertime", 45 );
}

onstartgametype()
{
    setclientnamemode( "auto_change" );

    foreach ( var_1 in level.teamnamelist )
        scripts\mp\utility\game::setobjectivetext( var_1, &"MP_MODE_RUGBY/INGAME_OBJECTIVE" );

    setupwaypointicons();
    _id_12C4B();
    thread initrugbyents();
    thread setupinitialstate();
    initspawns();
    initjugg();
    level thread _id_136F4();
    setomnvar( "ui_rugby_jugg_timer", 0 );
    setomnvar( "ui_rugby_jugg_radial", 0 );
}

_id_136F4()
{
    scripts\mp\flags::gameflagwait( "prematch_done" );
    wait 5;
    level thread scripts\mp\hud_message::notifyteam( "jugg_capture", "jugg_capture", "allies" );
}

initrugbyents()
{
    level.trial_target_headshot_func = scripts\engine\utility::array_combine( level.outofboundstriggers, level.minetriggers, level.hurttriggers, level.radtriggers );
    initendzoneents();
    initjuggcratesetupents();
}

initendzoneents()
{
    var_0 = level.rugby;
    var_1 = scripts\engine\utility::getstructarray( "rugby_endzone", "targetname" );

    foreach ( var_3 in var_1 )
    {
        initendzoneent( var_3 );
        var_0.endzones[var_3.team][var_0.endzones[var_3.team].size] = var_3;
    }
}

initendzoneent( var_0 )
{
    var_1 = getentarray( var_0.target, "targetname" );

    foreach ( var_3 in var_1 )
    {
        if ( var_3.classname == "trigger_multiple_mp_rugby_endzone" )
            var_0.trigger = var_3;

        if ( isdefined( var_3.script_noteworthy ) && getsubstr( var_3.script_noteworthy, 0, 3 ) == "fx_" )
            var_3 delete();
    }

    getlinktarget( var_0 );

    if ( var_0.spawnflags & 1 )
    {
        var_0.team = "allies";
        var_0.trigger.objectivekey = "allies";
    }
    else if ( var_0.spawnflags & 2 )
    {
        var_0.team = "axis";
        var_0.trigger.objectivekey = "axis";
    }
    else
    {
        var_0.team = "allies";
        var_0.trigger.objectivekey = "allies";
    }

    foreach ( var_3 in var_1 )
    {
        if ( !isdefined( var_0.chevrons ) )
            level thread _id_13232( var_0 );
    }
}

getlinktarget( var_0 )
{
    if ( level.mapname == "mp_crash2" )
    {
        if ( distance2d( var_0.origin, ( 312, -1552, 216 ) ) < 10 )
            var_0.spawnflags = 1;
    }
    else if ( level.mapname == "mp_scrapyard" )
    {
        if ( distance2d( var_0.origin, ( -25223.3, -12439.2, 36.5 ) ) < 10 )
            var_0.spawnflags = 2;
        else if ( distance2d( var_0.origin, ( -26150.7, -8967.81, 144 ) ) < 10 )
            var_0.spawnflags = 1;
    }
}

initjuggcratesetupents()
{
    var_0 = level.rugby;
    var_1 = scripts\engine\utility::getstructarray( "rugby_jugg_crate", "targetname" );

    foreach ( var_3 in var_1 )
    {
        var_3 = player_get_sniper_weapon_object( var_3 );
        var_0.juggcratesetups[var_0.juggcratesetups.size] = var_3;
    }

    level.rugby = var_0;
}

player_get_sniper_weapon_object( var_0 )
{
    switch ( level.mapname )
    {
        case "mp_aniyah_tac":
            if ( distance( var_0.origin, ( 3113.65, -1118.5, 378.5 ) ) < 10 )
                var_0.origin = ( 2751, -1028, 376.5 );

            break;
        default:
            break;
    }

    return var_0;
}

initoverheadcameras()
{
    level.spectatorcameras = [];
    level.spectatorcameras[0]["allies"] = spawnstruct();
    level.spectatorcameras[0]["axis"] = spawnstruct();
    scripts\mp\spawncamera::setgamemodecamera( "allies", level.spectatorcameras[0]["allies"] );
    scripts\mp\spawncamera::setgamemodecamera( "axis", level.spectatorcameras[0]["axis"] );
    updateoverheadcamerapos( "allies" );
    updateoverheadcamerapos( "axis" );
    level.updategamemodecamera = ::updateoverheadcamerapos;
    level.spectatorcameratime = 1.25;
}

initjugg()
{
    var_0 = scripts\mp\juggernaut::jugg_createconfig();
    level.rugby.juggconfig = var_0;
    var_1 = getjuggmaxhealth();
    var_0.maxhealth = var_1;
    var_0.startinghealth = var_1;
    var_2 = "iw8_juggernaut_mp_rugby";

    if ( scripts\common\utility::iscp() )
        var_2 = "iw8_juggernaut_cp_rugby";

    var_0.suit = var_2;
    var_0.clothtype = "vestheavy";
    var_0.forcetostand = 0;
    var_0.allows["sprint"] = 1;
    var_0.allows["weapon_switch"] = undefined;
    var_0.classstruct.loadoutprimary = "iw8_lm_dblmg";
}

initspawns()
{
    var_0 = level.rugby;
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::setactivespawnlogic( "Rugby", "Crit_Default" );
    var_0.startspawnclassname = "mp_rugby_spawn";
    scripts\mp\spawnlogic::addstartspawnpoints( var_0.startspawnclassname + "_allies_start", 1, "allies" );
    scripts\mp\spawnlogic::addstartspawnpoints( var_0.startspawnclassname + "_axis_start", 1, "axis" );

    if ( !isdefined( level.teamstartspawnpoints ) )
    {
        var_0.startspawnclassname = "mp_tdm_spawn";
        scripts\mp\spawnlogic::addstartspawnpoints( var_0.startspawnclassname + "_allies_start", 1, "allies" );
        scripts\mp\spawnlogic::addstartspawnpoints( var_0.startspawnclassname + "_axis_start", 1, "axis" );
    }

    var_1 = scripts\mp\spawnlogic::getspawnpointarray( "mp_rugby_spawn_allies" );
    var_2 = scripts\mp\spawnlogic::getspawnpointarray( "mp_rugby_spawn_axis" );

    if ( var_1.size <= 0 || var_2.size <= 0 )
    {
        var_3 = scripts\mp\spawnlogic::getspawnpointarray( "mp_tdm_spawn" );

        foreach ( var_5 in var_3 )
        {
            if ( distancesquared( var_5.origin, var_0.goals["allies"].origin ) < distancesquared( var_5.origin, var_0.goals["axis"].origin ) )
            {
                var_1[var_1.size] = var_5;
                continue;
            }

            var_2[var_2.size] = var_5;
        }
    }

    var_7 = scripts\mp\spawnlogic::getspawnpointarray( "mp_rugby_spawn_allies_secondary" );
    var_8 = scripts\mp\spawnlogic::getspawnpointarray( "mp_rugby_spawn_axis_secondary" );
    scripts\mp\spawnlogic::registerspawnpoints( "allies", var_1 );
    scripts\mp\spawnlogic::registerspawnpoints( "axis", var_2 );
    scripts\mp\spawnlogic::registerspawnpoints( "allies", var_7 );
    scripts\mp\spawnlogic::registerspawnpoints( "axis", var_8 );
    scripts\mp\spawnlogic::registerspawnset( "rugby_allies", var_1 );
    scripts\mp\spawnlogic::registerspawnset( "rugby_axis", var_2 );
    scripts\mp\spawnlogic::registerspawnset( "rugby_allies_base", var_7 );
    scripts\mp\spawnlogic::registerspawnset( "rugby_axis_base", var_8 );
    var_0.spawnsets = [];
    var_0.spawnsets["allies"] = "rugby_allies";
    var_0.spawnsets["axis"] = "rugby_axis";
    var_0.fallbackspawnsets = [];
    var_0.fallbackspawnsets["allies"] = "rugby_allies_base";
    var_0.fallbackspawnsets["axis"] = "rugby_axis_base";
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
}

getspawnpoint()
{
    var_0 = level.rugby;
    var_1 = self.pers["team"];

    if ( istrue( game["switchedsides"] ) )
        var_1 = scripts\engine\utility::ter_op( var_1 == "allies", "axis", "allies" );

    var_2 = scripts\engine\utility::ter_op( var_1 == "allies", "axis", "allies" );

    if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
    {
        var_3 = scripts\mp\spawnlogic::getspawnpointarray( var_0.startspawnclassname + "_" + var_1 + "_start" );
        var_4 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_3 );
    }
    else
    {
        var_5 = getjuggorcratepos();
        var_6 = [];
        var_6["singlePointPos"] = var_5;
        var_6["minDistToSinglePointSq"] = 562500;
        var_6["maxDistToSinglePointSq"] = 36000000;
        var_6["distRangeToSinglePointSq"] = 35437500;
        var_6["juggPos"] = var_5;
        var_6["rugbyFieldDir2D"] = var_0.goals[var_2].origin - var_0.goals[var_1].origin;
        var_4 = scripts\mp\spawnlogic::getspawnpoint( self, self.team, var_0.spawnsets[var_1], var_0.fallbackspawnsets[var_1], undefined, var_6 );
    }

    return var_4;
}

modeonteamchangedeath( var_0 )
{
    if ( isdefined( level._id_12DD4 ) )
        var_0 setclientomnvar( "ui_rugby_jugg_friendly", scripts\engine\utility::ter_op( var_0.team == level._id_12DD4.team, 0, 1 ) );
}

onplayerconnect( var_0 )
{
    var_0 scripts\mp\utility\stats::setextrascore0( 0 );

    if ( isdefined( var_0.pers["damage"] ) )
        var_0 scripts\mp\utility\stats::setextrascore0( var_0.pers["damage"] );

    var_0 scripts\mp\utility\stats::setextrascore1( 0 );

    if ( isdefined( var_0.pers["defends"] ) )
        var_0 scripts\mp\utility\stats::setextrascore1( var_0.pers["defends"] );

    thread onplayerspawned( var_0 );
}

onplayerspawned( var_0 )
{
    var_0 waittill( "spawned" );

    if ( isdefined( level._id_12DD4 ) && isdefined( level._id_12DD4.team ) && isdefined( var_0.team ) )
        var_0 setclientomnvar( "ui_rugby_jugg_friendly", scripts\engine\utility::ter_op( var_0.team == level._id_12DD4.team, 0, 1 ) );
}

onplayerdamaged( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 )
{
    if ( isdefined( var_1 ) && var_1 != var_2 && isplayer( var_1 ) )
    {
        if ( var_3 >= var_7 )
            var_3 = var_7;

        var_1 scripts\mp\persistence::statsetchild( "round", "damage", var_1.pers["damage"] );
        var_1 scripts\mp\utility\stats::setextrascore0( var_1.pers["damage"] );
    }
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    scripts\mp\gametypes\common.gsc::oncommonnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 );
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    self.overrideweaponspeed_speedscale = undefined;

    if ( !isplayer( var_1 ) || var_1.team == self.team )
        return;

    awardgenericmedals( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );
}

awardgenericmedals( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    var_10 = 0;
    var_11 = 0;
    var_12 = self;
    var_13 = var_12.origin;
    var_14 = var_1.origin;
    var_15 = 0;

    if ( isdefined( var_0 ) )
    {
        var_14 = var_0.origin;
        var_15 = var_0 == var_1;
    }

    if ( isdefined( level._id_12DD4 ) )
    {
        if ( isdefined( var_1 ) && isplayer( var_1 ) && var_1.team != var_12.team )
        {
            if ( var_1 == level._id_12DD4 )
                var_1 thread scripts\mp\utility\points::giveunifiedpoints( "kill_as_juggernaut" );
            else if ( var_12 == level._id_12DD4 )
                var_1 thread scripts\mp\utility\points::giveunifiedpoints( "kill_juggernaut" );
            else if ( var_1.team == level._id_12DD4.team && var_1 != level._id_12DD4 )
            {
                var_16 = distancesquared( level._id_12DD4.origin, var_14 );

                if ( var_16 < 105625 )
                {
                    var_1 thread scripts\mp\rank::scoreeventpopup( "defend" );
                    var_1 thread scripts\mp\awards::givemidmatchaward( "mode_x_defend" );
                    var_1 scripts\mp\utility\stats::incpersstat( "defends", 1 );
                    var_1 scripts\mp\persistence::statsetchild( "round", "defends", var_1.pers["defends"] );
                    var_1 scripts\mp\utility\stats::setextrascore1( var_1.pers["defends"] );
                    thread scripts\common\utility::_id_13E0A( level._id_11B30, var_9, "defending" );
                    return;
                }
            }
            else if ( var_1.team != level._id_12DD4.team && var_12.team == level._id_12DD4.team )
            {
                var_16 = distancesquared( level._id_12DD4.origin, var_13 );

                if ( var_16 < 105625 )
                {
                    var_1 thread scripts\mp\rank::scoreeventpopup( "assault" );
                    var_1 thread scripts\mp\awards::givemidmatchaward( "mode_x_assault" );
                    thread scripts\common\utility::_id_13E0A( level._id_11B26, var_9, "assaulting" );
                }
            }
        }
    }
}

ontimelimit()
{
    if ( level.gameended )
        return;

    thread scripts\mp\gamelogic::endgame( "tie", game["end_reason"]["cyber_tie"] );
}

ontimelimitot()
{
    if ( level.rugby.activejuggernauts.size > 0 )
    {
        if ( !istrue( level.rugby.inot ) )
        {
            setomnvar( "ui_overtime_time", gettime() + remove_steam_damage() * 1000 );
            level.rugby.inot = 1;
            level.canprocessot = 1;
            _id_13166();
            level thread vehicle_isenemytoteam();
        }
    }
    else
    {
        level.canprocessot = 1;
        level.currenttimelimitdelay = level.ontimelimitgraceperiod;
    }
}

vehicle_isenemytoteam()
{
    level endon( "game_ended" );

    for (;;)
    {
        if ( level.rugby.activejuggernauts.size > 0 )
        {
            wait 0.05;
            continue;
        }

        level.currenttimelimitdelay = level.ontimelimitgraceperiod;
        break;
    }
}

_id_13167()
{
    var_0 = getdvarfloat( "scr_rugby_juggTimeout" );
    var_0 = int( var_0 * 1000 + gettime() );
    setomnvar( "ui_rugby_jugg_timer", var_0 );
    setomnvar( "ui_rugby_jugg_radial", 1 );
    return var_0;
}

_id_13166()
{
    level notify( "stop_rugby_timeout" );
    setomnvar( "ui_rugby_jugg_timer", 0 );
    setomnvar( "ui_rugby_jugg_radial", 0 );
}

getjuggorcratepos()
{
    var_0 = level.rugby;

    if ( isdefined( level._id_12DD4 ) )
        return level._id_12DD4.origin;
    else if ( var_0.activejuggernauts.size > 0 )
    {
        foreach ( var_2 in var_0.activejuggernauts )
            return var_2.origin;
    }
    else
    {
        foreach ( var_5 in var_0.activejuggcrates )
            return var_5.origin;
    }

    return undefined;
}

doesteamhaveactivejugg( var_0 )
{
    var_1 = level.rugby;

    if ( var_1.activejuggernauts.size > 0 )
    {
        foreach ( var_3 in var_1.activejuggernauts )
        {
            if ( var_3.team == var_0 )
                return 1;
        }
    }

    return 0;
}

onjuggproximityscore( var_0 )
{
    level endon( "game_ended" );
    playsoundatpos( var_0.origin, "exp_bombsite_lr" );
    playfx( scripts\engine\utility::getfx( "rugby_score_explosion" ), var_0.origin );
    var_1 = scripts\mp\utility\player::getplayersinradius( var_0.origin, 800 );

    foreach ( var_3 in var_1 )
    {
        if ( var_3 != var_0 && var_3.team != var_0.team )
            var_3 dodamage( 5000, var_0.origin, var_3, undefined, "MOD_EXPLOSIVE" );
    }

    thread scripts\mp\gamelogic::endgame( var_0.team, game["end_reason"]["target_destroyed"] );
}

setupinitialstate()
{
    var_0 = level.rugby;

    if ( !activateendzone( var_0.endzones["allies"][0], "allies" ) )
        return;

    if ( !activateendzone( var_0.endzones["axis"][0], "axis" ) )
        return;

    if ( !activatenewjuggcrate() )
        return;
}

activatenewjuggcrate()
{
    var_0 = randomint( level.rugby.juggcratesetups.size );
    var_1 = level.rugby.juggcratesetups[var_0];

    if ( !isdefined( var_1 ) )
        return 0;

    return activatejuggcrate( var_1.origin, scripts\engine\utility::ter_op( isdefined( var_1.angles ), var_1.angles, ( 0, 0, 0 ) ), 1 );
}

activateendzone( var_0, var_1 )
{
    var_2 = level.rugby;

    if ( istrue( game["switchedsides"] ) )
        var_1 = scripts\engine\utility::ter_op( var_1 == "allies", "axis", "allies" );

    if ( !isdefined( var_0 ) )
        return 0;

    if ( isdefined( var_2.goals[var_1] ) )
        deactivateendzone( var_2.goals[var_1] );

    var_2.goals[var_1] = var_0;
    var_0 thread watchforjuggproximityscore( var_1 );
    return 1;
}

deactivateendzone( var_0 )
{
    var_0 notify( "endzone_deactivate" );
}

_id_13232( var_0 )
{
    if ( level.mapname == "mp_shipment" || level.mapname == "mp_euphrates" || level.mapname == "mp_rust" || level.mapname == "mp_crash2" || level.mapname == "mp_malyshev" )
    {
        if ( var_0.trigger.objectivekey == "allies" )
            var_1 = "allies_endzone_vis";
        else
            var_1 = "axis_endzone_vis";
    }
    else if ( level.mapname == "mp_backlot2" )
    {
        if ( var_0.trigger.targetname == "allies_endzone" )
            var_1 = "axis_endzone_vis";
        else
            var_1 = "allies_endzone_vis";
    }
    else if ( var_0.trigger.targetname == "allies_endzone" )
        var_1 = "allies_endzone_vis";
    else
        var_1 = "axis_endzone_vis";

    var_0 thread cargo_truck_mg_initomnvars( var_1, var_0.trigger.targetname );
    var_0 thread updatechevrons( "idle" );
}

cargo_truck_mg_initomnvars( var_0, var_1 )
{
    wait 1.0;
    var_2 = getentitylessscriptablearrayinradius( var_0, "targetname" );
    var_2 = _id_12805( var_2, var_1 );
    var_3 = [];

    foreach ( var_5 in var_2 )
    {
        var_6 = var_3.size;
        var_3[var_6] = var_5;
        var_3[var_6].numchevrons = 1;

        if ( isdefined( var_5.script_noteworthy ) )
        {
            if ( var_5.script_noteworthy == "2" )
            {
                var_3[var_6].numchevrons = 2;
                continue;
            }

            if ( var_5.script_noteworthy == "3" )
            {
                var_3[var_6].numchevrons = 3;
                continue;
            }

            if ( var_5.script_noteworthy == "4" )
                var_3[var_6].numchevrons = 4;
        }
    }

    self.chevrons = var_3;
}

updatechevrons( var_0 )
{
    self notify( "updateChevrons" );
    self endon( "updateChevrons" );

    while ( !isdefined( self.chevrons ) )
        waitframe();

    foreach ( var_2 in self.chevrons )
    {
        for ( var_3 = 0; var_3 < var_2.numchevrons; var_3++ )
            var_2 setscriptablepartstate( "chevron_" + var_3, var_0 );
    }
}

_id_12C1D( var_0, var_1 )
{
    var_2 = [];
    var_3 = [];

    switch ( level.mapname )
    {
        case "mp_m_speed":
            var_3["1"] = [ ( -564, 1848, 24 ) ];
            var_3["2"] = [ ( -1314, 440, 24 ), ( -1362, 816, 24 ) ];
            break;
        case "mp_cave":
        case "mp_cave_am":
            var_3["3"] = [ ( -692, 1828, 42 ), ( -300, 1548, 76 ) ];
            break;
        case "mp_raid":
            var_3["8"] = [ ( 688, 256, 280 ) ];
            var_3["20"] = [ ( 212, 1436, 338 ) ];
            break;
        default:
            break;
    }

    if ( isdefined( var_3[var_1] ) )
    {
        foreach ( var_5 in var_0 )
        {
            foreach ( var_7 in var_3[var_1] )
            {
                if ( distance( var_5.origin, var_7 ) < 10 )
                {
                    var_2[var_2.size] = var_5;
                    break;
                }
            }
        }
    }

    var_0 = scripts\engine\utility::array_remove_array( var_0, var_2 );
    return var_0;
}

_id_12805( var_0, var_1 )
{
    var_2 = [];
    var_3 = [];

    switch ( level.mapname )
    {
        case "mp_piccadilly":
            var_2["allies_endzone"] = [];
            var_2["allies_endzone"][0] = [ ( -2376, -3322, 39 ), ( 0, -90, 0 ) ];
            var_2["allies_endzone"][1] = [ ( -2071, -3537, 0 ), ( 0, 180, 0 ) ];
            var_2["allies_endzone"][2] = [ ( -2071, -3653, 0 ), ( 0, 180, 0 ) ];
            var_2["allies_endzone"][3] = [ ( -2071, -3754, 3 ), ( 0, 180, 0 ) ];
            var_2["axis_endzone"] = [];
            var_2["axis_endzone"][0] = [ ( 2137, 493, 124 ), ( 0, -85, 0 ) ];
            var_2["axis_endzone"][1] = [ ( 2302, 495, 128 ), ( 0, -90, 0 ) ];
            var_2["axis_endzone"][2] = [ ( 2390, 495, 134 ), ( 0, -90, 0 ) ];
            var_2["axis_endzone"][3] = [ ( 2457, 494, 134 ), ( 0, -90, 0 ) ];
            break;
        case "mp_harbor":
            var_2["axis_endzone"] = [];
            var_2["axis_endzone"][0] = [ ( -722, -1428, 201 ), ( 0, 0, 0 ) ];
            var_2["axis_endzone"][1] = [ ( -722, -1567, 200 ), ( 0, 0, 0 ) ];
            var_2["axis_endzone"][2] = [ ( -721, -1496, 200 ), ( 0, 0, 0 ) ];
            var_2["axis_endzone"][3] = [ ( -721, -1639, 200 ), ( 0, 0, 0 ) ];
            var_2["axis_endzone"][4] = [ ( -720, -1711, 200 ), ( 0, 0, 0 ) ];
            var_2["axis_endzone"][5] = [ ( -720, -1806, 200 ), ( 0, 0, 0 ) ];
            var_2["axis_endzone"][6] = [ ( -719, -1896, 200 ), ( 0, 0, 0 ) ];
            var_2["axis_endzone"][7] = [ ( -719, -1999, 200 ), ( 0, 0, 0 ) ];
            var_2["axis_endzone"][8] = [ ( -483, -2074, 200 ), ( 0, -270, 0 ) ];
            break;
        case "mp_vacant":
            var_2["allies_endzone"] = [];
            var_2["allies_endzone"][0] = [ ( 4948, 1284, 9 ), ( 0, 45, 0 ) ];
            break;
        case "mp_m_speed":
            var_2["axis_endzone"] = [];
            var_2["axis_endzone"][0] = [ ( -603, 3101, 33 ), ( 0, 155, 0 ) ];
            var_2["allies_endzone"] = [];
            var_2["allies_endzone"][0] = [ ( -1070, 600, 32 ), ( 0, -20, 0 ) ];
            break;
        case "mp_hardhat":
            var_2["axis_endzone"] = [];
            var_2["axis_endzone"][0] = [ ( 1773, -1148, 302 ), ( 0, -90, 0 ) ];
            var_2["axis_endzone"][1] = [ ( 2098, -1153, 292 ), ( 0, -90, 0 ) ];
            break;
        case "mp_runner_pm":
        case "mp_runner":
            var_2["allies_endzone"] = [];
            var_2["allies_endzone"][0] = [ ( 1648, 367, 291 ), ( 0, 0, 0 ) ];
            var_2["allies_endzone"][1] = [ ( 1947, 859, 255 ), ( 0, 270, 0 ) ];
            var_2["allies_endzone"][2] = [ ( 1691, 854, 291 ), ( 0, 270, 0 ) ];
            break;
        case "mp_raid":
            var_2["allies_endzone"] = [];
            var_2["allies_endzone"][0] = [ ( -2404.94, -1457.67, 280 ), ( 0, 0, 0 ) ];
            var_2["allies_endzone"][1] = [ ( -849.814, -1158.33, 280 ), ( 0, 180, 0 ) ];
            var_2["allies_endzone"][2] = [ ( -1978.45, -341.57, 280 ), ( 0, 270, 0 ) ];
            var_2["allies_endzone"][3] = [ ( -1143, -975, 280 ), ( 0, 270, 0 ) ];
            var_2["axis_endzone"] = [];
            var_2["axis_endzone"][0] = [ ( -1300.9, 4861.72, 269 ), ( 0, 180, 0 ) ];
            var_2["axis_endzone"][1] = [ ( -1300.9, 4947, 269 ), ( 0, 180, 0 ) ];
            var_2["axis_endzone"][2] = [ ( -1300.9, 4759, 269 ), ( 0, 180, 0 ) ];
            var_2["axis_endzone"][3] = [ ( -1293.48, 4459.81, 273 ), ( 0, 180, 0 ) ];
            var_2["axis_endzone"][4] = [ ( -1293.48, 4392, 274 ), ( 0, 180, 0 ) ];
            var_2["axis_endzone"][5] = [ ( -2300.19, 3725.48, 288 ), ( 0, 90, 0 ) ];
            var_2["axis_endzone"][6] = [ ( -1700.19, 3725.48, 286 ), ( 0, 90, 0 ) ];
            var_2["axis_endzone"][7] = [ ( -1598.19, 4348.83, 279 ), ( 0, 90, 0 ) ];
            break;
        case "mp_hackney_yard":
        case "mp_hackney_am":
            var_2["allies_endzone"] = [];
            var_2["allies_endzone"][0] = [ ( 765, -1883, 23 ), ( 0, 180, 0 ) ];
            var_2["allies_endzone"][1] = [ ( 762, -2006, 187 ), ( 0, 180, 0 ) ];
            break;
        default:
            break;
    }

    if ( isdefined( var_2[var_1] ) )
    {
        foreach ( var_5 in var_2[var_1] )
        {
            var_6 = var_5[0];
            var_7 = var_5[1];
            var_8 = easepower( "hardpoint_chevron", var_6, var_7 );
            var_3[var_3.size] = var_8;
        }
    }

    var_0 = scripts\engine\utility::array_combine( var_0, var_3 );
    return var_0;
}

init_vo_arrays( var_0, var_1, var_2 )
{
    var_0.origin = var_1;
    var_0.angles = var_2;
    return var_0;
}

setupgoalvisualsforjugg( var_0 )
{
    var_1 = var_0.team;
    var_2 = scripts\mp\utility\teams::getenemyteams( var_1 );
    var_3 = var_2[0];
    var_4 = level.rugby.goals[var_3];
    var_4 thread updatechevrons( var_3 );
    var_5 = level.rugby.goals[var_1];
    var_5 thread updatechevrons( "off" );
}

watchforjuggproximityscore( var_0 )
{
    level endon( "game_ended" );
    self endon( "endzone_deactivate" );

    for (;;)
    {
        self.trigger waittill( "trigger", var_1 );

        if ( isdefined( var_1.rugbyjugginfo ) && var_1.team != var_0 )
        {
            onjuggproximityscore( var_1 );
            return;
        }
    }
}

activatenewjuggernaut( var_0 )
{
    var_1 = level.rugby;
    var_2 = setupplayerasjugg( var_0 );

    if ( !var_2 )
        return 0;

    var_3 = spawnstruct();
    var_3.player = var_0;
    var_4 = var_0 getentitynumber();
    var_3.id = var_4;
    var_1.activejuggernauts[var_4] = var_0;
    level._id_12DD4 = var_0;
    var_0.rugbyjugginfo = var_3;
    createobjectiveiconsforactivejugg( var_0, var_3 );
    startjugghud( var_0 );
    setupgoalvisualsforjugg( var_0 );
    var_0 thread watchjugghealth();
    var_0 thread watchforjuggdeathdisconnect();
    var_0 thread watchjuggprogress();
    var_0 thread watchteammatesnearjugg();

    if ( getjuggtimeout() > 0 )
        var_0 thread watchjuggtimeout();

    var_0 scripts\mp\utility\dialog::leaderdialogonplayer( "rugby_new_jugg", "obj" );
    var_0 thread scripts\mp\hud_message::showsplash( "jugg_player" );
    var_5 = [ var_0 ];
    var_6 = scripts\mp\utility\game::getotherteam( var_0.team )[0];
    scripts\mp\utility\dialog::statusdialog( "rugby_secured_jugg", var_0.team, "obj", var_5 );
    scripts\mp\utility\dialog::statusdialog( "rugby_lost_jugg", var_6, "obj" );
    level thread _id_12451( var_0.team, var_6 );

    foreach ( var_8 in level.players )
    {
        if ( var_8.team == var_0.team )
        {
            if ( var_8 != var_0 )
                var_8 thread scripts\mp\hud_message::showsplash( "jugg_captured" );

            continue;
        }

        var_8 thread scripts\mp\hud_message::showsplash( "jugg_lost" );
    }

    return 1;
}

_id_12451( var_0, var_1 )
{
    wait 3;
    scripts\mp\utility\dialog::statusdialog( "rugby_order_attack", var_0 );
    scripts\mp\utility\dialog::statusdialog( "rugby_order_fallback", var_1 );
}

deactivatejuggernaut( var_0 )
{
    var_1 = level.rugby;
    var_2 = var_0.rugbyjugginfo;

    if ( isdefined( var_0 ) )
        var_0.rugbyjugginfo = undefined;

    var_1.activejuggernauts[var_2.id] = undefined;
    level._id_12DD4 = undefined;
    cleanupobjectiveiconsforjugg( var_0, var_2 );
    clearjugghud();

    foreach ( var_4 in var_1.endzones )
        var_4[0] thread updatechevrons( "idle" );

    level.rugby.maxperkbonustier = undefined;
    level.rugby._id_128BF = undefined;
    level.rugby.vehicle_occupancy_isfriendlytoplayer = undefined;
    level.rugby.vehicle_occupancy_isenemytoteam = undefined;

    if ( isdefined( var_0 ) && isdefined( var_0.team ) )
        level thread scripts\mp\hud_message::notifyteam( "jugg_down_fr", "jugg_down_en", var_0.team );
    else
        level thread scripts\mp\hud_message::notifyteam( "jugg_capture", "jugg_capture", "allies" );

    setomnvar( "ui_rugby_jugg_timer", 0 );
    setomnvar( "ui_rugby_jugg_radial", 0 );
    var_0 notify( "rugby_jugg_end" );
}

startjugghud( var_0 )
{
    setomnvar( "ui_rugby_jugg_client", var_0 );
    setomnvar( "ui_rugby_jugg_health", 1.0 );

    foreach ( var_2 in level.players )
        var_2 setclientomnvar( "ui_rugby_jugg_friendly", scripts\engine\utility::ter_op( var_2.team == var_0.team, 0, 1 ) );
}

clearjugghud()
{
    setomnvar( "ui_rugby_jugg_client", undefined );

    foreach ( var_1 in level.players )
        var_1 setclientomnvar( "ui_rugby_jugg_friendly", -1 );
}

watchjugghealth()
{
    level endon( "game_ended" );
    self endon( "rugby_jugg_end" );

    for (;;)
    {
        self waittill( "damage" );
        setomnvar( "ui_rugby_jugg_health", self.health / self.maxhealth );
    }
}

watchforjuggdeathdisconnect()
{
    level endon( "game_ended" );
    self endon( "rugby_jugg_end" );
    self waittill( "death_or_disconnect" );
    var_0 = undefined;

    if ( !isdefined( self ) )
        var_0 = level.lastjuggpositions[self.rugbyjugginfo.id];
    else
        var_0 = self.origin;

    var_1 = getnodesinradius( var_0, 32, 0, 32 );
    var_2 = getclosestpointonnavmesh( var_0 );

    if ( distance( var_0, var_2 ) > 50 )
        var_2 = var_0;

    var_2 = var_0;
    activatejuggcrate( var_2 + ( 0, 0, 0 ), ( 0, 0, 0 ) );
    deactivatejuggernaut( self );
}

watchjuggprogress()
{
    level endon( "game_ended" );
    self endon( "rugby_jugg_end" );
    var_0 = self.team;
    var_1 = scripts\mp\utility\teams::getenemyteams( var_0 );
    var_2 = var_1[0];
    var_3 = level.rugby.goals[var_0];
    var_4 = level.rugby.goals[var_2];
    var_5 = var_4.origin - var_3.origin;
    var_6 = vectordot( var_5, var_5 );
    var_7 = undefined;

    for (;;)
    {
        var_8 = self.origin * ( 1, 1, 0 ) - var_3.origin * ( 1, 1, 0 );
        var_9 = vectordot( var_5, var_8 ) / var_6;
        var_9 = clamp( var_9, 0.0, 1.0 );
        var_10 = [];
        var_10[var_0] = var_9;
        var_10[var_2] = 1.0 - var_9;

        foreach ( var_12 in level.players )
        {
            if ( var_12.team == var_0 || var_12.team == var_2 )
                var_12 setclientomnvar( "ui_rugby_jugg_progress", var_10[var_12.team] );
        }

        if ( var_9 > 0.8 )
            level thread getquestunlockableindexfromlootid( var_9, var_0, var_2 );

        if ( isdefined( level._id_12DD4 ) )
        {
            if ( !isdefined( var_7 ) )
                var_7 = var_9;

            if ( var_9 > var_7 + 0.1 )
            {
                var_7 = var_9;
                level._id_12DD4 thread scripts\mp\utility\points::giveunifiedpoints( "rugby_obj_push" );
            }
        }

        level.lastjuggpositions[self.rugbyjugginfo.id] = self.origin;
        wait 0.05;
    }
}

getquestunlockableindexfromlootid( var_0, var_1, var_2 )
{
    if ( !isdefined( level.rugby.maxperkbonustier ) )
    {
        level.rugby.maxperkbonustier = 1;
        level.rugby._id_128BF = gettime();
        level.rugby.vehicle_occupancy_isfriendlytoplayer = var_0;
        level.rugby.vehicle_occupancy_isenemytoteam = var_0;
    }
    else if ( isdefined( level.rugby._id_128BF ) && level.rugby._id_128BF + 30000 < gettime() )
    {
        level.rugby.maxperkbonustier = 1;
        level.rugby._id_128BF = gettime();
        level.rugby.vehicle_occupancy_isfriendlytoplayer = var_0;
        level.rugby.vehicle_occupancy_isenemytoteam = var_0;
    }

    if ( istrue( level.rugby.maxperkbonustier ) )
    {
        scripts\mp\utility\dialog::statusdialog( "rugby_friendly_close_goal", var_1, "obj" );
        scripts\mp\utility\dialog::statusdialog( "rugby_enemy_close_goal", var_2, "obj" );
        thread scripts\mp\music_and_dialog::timelimitmusic( var_1 );
    }

    level.rugby.maxperkbonustier = 0;
}

setupplayerasjugg( var_0 )
{
    var_1 = level.rugby.juggconfig;
    var_2 = var_0 scripts\mp\juggernaut::jugg_makejuggernaut( var_1 );

    if ( !var_2 )
        return 0;

    var_0.droppeddeathweapon = 1;
    var_0 givemaxammo( var_0.classstruct.loadoutprimaryobject );
    var_0.playerstreakspeedscale = getjuggspeedscalar( 0 );
    var_0 scripts\mp\weapons::updatemovespeedscale();
    var_0 thread handlejuggjumpspam();
    var_3 = scripts\mp\utility\teams::getenemyteams( var_0.team );
    var_4 = var_3[0];
    return 1;
}

watchteammatesnearjugg()
{
    level endon( "game_ended" );
    self endon( "rugby_jugg_end" );

    for (;;)
    {
        var_0 = 0;

        foreach ( var_2 in level.players )
        {
            if ( var_2.team != self.team || var_2 == self )
                continue;

            if ( distancesquared( var_2.origin, self.origin ) < 122500 )
                var_0++;
        }

        self.playerstreakspeedscale = getjuggspeedscalar( var_0 );
        scripts\mp\weapons::updatemovespeedscale();
        wait 0.1;
    }
}

watchjuggtimeout()
{
    level endon( "game_ended" );
    level endon( "stop_rugby_timeout" );
    self endon( "rugby_jugg_end" );
    _id_13167();
    level thread _id_12E18( self );
    wait( getjuggtimeout() );
    setomnvar( "ui_rugby_jugg_timer", 0 );
    setomnvar( "ui_rugby_jugg_radial", 0 );
    self suicide();
}

_id_12E18( var_0 )
{
    level endon( "stop_rugby_timeout" );
    var_0 endon( "rugby_jugg_end" );
    var_1 = getdvarfloat( "scr_rugby_juggTimeout" );
    var_2 = var_1;

    while ( !istrue( level.canprocessot ) )
    {
        setomnvar( "ui_rugby_jugg_radial", var_2 / var_1 );
        var_2 = var_2 - level.framedurationseconds;
        wait( level.framedurationseconds );
    }
}

handlejuggjumpspam()
{
    level endon( "game_ended" );
    self endon( "rugby_jugg_end" );
    self notifyonplayercommand( "jugg_jumped", "+goStand" );

    for (;;)
    {
        self waittill( "jugg_jumped" );

        while ( !self isonground() )
            waitframe();

        var_0 = self getvelocity();
        var_1 = ( var_0[0] * 0.25, var_0[1] * 0.25, var_0[2] );
        self setvelocity( var_1 );
        self.overrideweaponspeed_speedscale = 0.2;
        scripts\mp\weapons::updatemovespeedscale();

        for (;;)
        {
            var_2 = scripts\engine\utility::_id_143B9( 1, "jugg_jumped" );

            if ( var_2 == "jugg_jumped" )
            {
                while ( !self isonground() )
                    waitframe();

                var_0 = self getvelocity();
                var_1 = ( var_0[0] * 0.25, var_0[1] * 0.25, var_0[2] );
                self setvelocity( var_1 );
                continue;
            }

            break;
        }

        self.overrideweaponspeed_speedscale = undefined;
    }
}

_id_12C4B()
{
    var_0 = 0;
    level.vehicle_occupancy_isfriendlytoteam = spawnstruct();
    level.vehicle_occupancy_isfriendlytoteam.objidnum = scripts\mp\objidpoolmanager::requestreservedid( var_0 );
}

createobjectiveiconsforactivejugg( var_0, var_1 )
{
    createjuggobjective( var_0, var_1 );
    var_2 = scripts\mp\utility\teams::getenemyteams( var_0.team );
    var_3 = var_2[0];
    var_4 = level.rugby.goals[var_3];
    createendzoneobjective( var_4, var_3, var_1 );
}

cleanupobjectiveiconsforjugg( var_0, var_1 )
{
    scripts\mp\objidpoolmanager::update_objective_state( 0, "done" );
    scripts\mp\objidpoolmanager::returnobjectiveid( var_1.endzoneobjid );
}

createjuggobjective( var_0, var_1 )
{
    var_2 = 0;
    var_1.juggobjid = var_2;
    scripts\mp\objidpoolmanager::objective_add_objective( var_2, "current", var_0.origin, "icon_waypoint_jugg" );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_2, 0 );
    scripts\mp\objidpoolmanager::objective_set_play_outro( var_2, 0 );
    scripts\mp\objidpoolmanager::objective_playermask_showtoall( var_2 );
    scripts\mp\objidpoolmanager::update_objective_onentity( var_2, var_0 );
    scripts\mp\objidpoolmanager::update_objective_setzoffset( var_2, 90 );
    objective_setownerteam( var_2, var_0.team );
    objective_setfriendlylabel( var_2, "MP_MODE_RUGBY/JUGG_ESCORT" );
    objective_setenemylabel( var_2, "MP_MODE_RUGBY/JUGG_KILL" );
}

createendzoneobjective( var_0, var_1, var_2 )
{
    var_3 = scripts\mp\objidpoolmanager::requestobjectiveid( 99 );
    var_2.endzoneobjid = var_3;
    scripts\mp\objidpoolmanager::objective_add_objective( var_3, "current", var_0.origin, "icon_waypoint_rugby_base" );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_3, 0 );
    scripts\mp\objidpoolmanager::objective_set_play_outro( var_3, 0 );
    scripts\mp\objidpoolmanager::objective_playermask_showtoall( var_3 );
    objective_setownerteam( var_3, var_1 );
    objective_setfriendlylabel( var_3, "MP_MODE_RUGBY/ENDZONE_DEFEND" );
    objective_setenemylabel( var_3, "MP_MODE_RUGBY/ENDZONE_ASSAULT" );
}

activatejuggcrate( var_0, var_1, var_2 )
{
    var_3 = level.rugby;

    if ( !vandalize_attack_min_cooldown( var_0 ) )
    {
        var_0 = level.init_ai_kill_params_for_events;
        var_1 = level.init_ai;
    }

    var_4 = createjuggcrate( var_0, var_1, var_2 );
    var_3.activejuggcrates[0] = var_4;
    var_3.activejuggcrates[0].crateid = var_4;
    return 1;
}

vandalize_attack_min_cooldown( var_0 )
{
    var_1 = 1;

    foreach ( var_3 in level.trial_target_headshot_func )
    {
        if ( ispointinvolume( var_0, var_3 ) )
        {
            var_1 = 0;
            break;
        }
    }

    return var_1;
}

createjuggcrate( var_0, var_1, var_2 )
{
    var_3 = getgroundposition( var_0, 8, 2000, 32 );
    var_3 = var_3 + ( 0, 0, 5 );
    var_4 = spawn( "script_model", var_3 );
    var_4.angles = var_1;
    var_4.visuals = [ var_4 ];
    var_4.trigger = var_4;
    var_4.trigger.origin = var_4.origin;
    var_4.curorigin = var_4.trigger.origin;
    var_4.safeorigin = var_4.trigger.origin;
    var_4.visuals[0] setmodel( "military_carepackage_02_rupture" );
    var_4 thread scripts\mp\gameobjects::setdropped();
    var_4.crateid = var_4 getentitynumber();
    var_4 thread juggcratemanageuse( var_4 );

    if ( istrue( var_2 ) )
    {
        level.init_ai_kill_params_for_events = var_0;
        level.init_ai = var_1;

        foreach ( var_6 in level.teamnamelist )
            scripts\mp\utility\dialog::statusdialog( "rugby_capture_jugg", var_6, "obj" );
    }

    return var_4;
}

gunkillerhackthread()
{
    level endon( "game_ended" );
    self endon( "death" );

    for (;;)
    {
        var_0 = getweaponarray();

        foreach ( var_2 in var_0 )
        {
            if ( distance2dsquared( var_2.origin, self.origin ) < 40000 )
                var_2 delete();
        }

        wait 0.25;
    }
}

juggcratemanageuse( var_0 )
{
    level endon( "game_ended" );
    self endon( "death" );
    var_1 = spawn( "script_model", self.origin + ( 0, 0, 30 ) );
    var_1.usetype = 1;
    var_1.destination = self.origin + ( 0, 0, 30 );
    var_1.vampirepoints = 1;
    self._id_14074 = scripts\mp\gameobjects::createholduseobject( "neutral", var_1, self.visuals, ( 0, 0, 64 ) );

    foreach ( var_3 in level.teamnamelist )
        self._id_14074.teamprogress = undefined;

    self._id_14074.trigger._id_1408A = 16900;
    self._id_14074.trigger setuserange( 130 );
    self._id_14074.trigger sethintstring( &"MP_MODE_RUGBY/CRATE_USE" );
    self._id_14074.trigger makeusable();
    self._id_14074.trigger setcursorhint( "HINT_BUTTON" );
    self._id_14074.trigger setuseholdduration( "duration_none" );
    self._id_14074.trigger setusehideprogressbar( 1 );
    self._id_14074.trigger setusepriority( -3 );
    self._id_14074.trigger sethintonobstruction( "hide" );
    self._id_14074 scripts\mp\gameobjects::setusetime( remove_spawn_disable_struct() );
    self._id_14074.interactteam = "any";
    self._id_14074.curprogress = 0;
    self._id_14074.defaultusetime = self._id_14074._id_1409E;
    self._id_14074.userate = 1;
    self._id_14074.id = "rugby_jugg";
    self._id_14074.exclusiveuse = 0;
    self._id_14074.exclusiveclaim = 0;
    self._id_14074.skiptouching = 1;
    self._id_14074.onbeginuse = ::_id_12DD1;
    self._id_14074.onuse = ::_id_12DD0;
    self._id_14074.onenduse = ::_id_12DD2;
    self._id_14074.oncantuse = ::_id_12DD3;
    self._id_14074.inuse = 0;

    foreach ( var_6 in level.teamnamelist )
    {
        self._id_14074.numtouching[var_6] = 0;
        self._id_14074.touchlist[var_6] = [];
    }

    self._id_14074.cancontestclaim = 0;
    self._id_14074.stalemate = 0;
    self._id_14074.wasstalemate = 0;
    self._id_14074.cancontestclaim = 0;
    self._id_14074.majoritycapprogress = 1;
    self._id_14074.wasmajoritycapprogress = 0;
    self._id_14074.resetprogress = 1;

    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        level scripts\engine\utility::_id_143A5( "prematch_done", "start_mode_setup" );

    self._id_14074.type = "useObject";
    self._id_14074.offset3d = ( 0, 0, 32 );
    self._id_14074 scripts\mp\gameobjects::requestid( 1, 1 );
    self._id_14074 scripts\mp\gameobjects::setobjectivestatusicons( "icon_waypoint_jugg_crate" );
    self._id_14074 scripts\mp\gameobjects::setvisibleteam( "any" );
    scripts\mp\objidpoolmanager::objective_set_play_intro( self._id_14074.objidnum, 0 );
    scripts\mp\objidpoolmanager::objective_set_play_outro( self._id_14074.objidnum, 0 );
}

_id_12DD1( var_0 )
{
    scripts\mp\gameobjects::setobjectivestatusicons( "icon_waypoint_taking", "icon_waypoint_losing" );
    scripts\mp\utility\dialog::statusdialog( "rugby_securing_jugg", var_0.team, "obj" );
    self.visuals[0] playloopsound( "mp_care_package_non_owner_cap" );
}

_id_12DD0( var_0 )
{
    var_1 = activatenewjuggernaut( var_0 );

    if ( !var_1 )
        return;

    juggcratecleanup();
    level.rugby.activejuggcrates[0].crateid = undefined;
    level.rugby.activejuggcrates[0] = undefined;

    if ( isdefined( self._id_14074 ) )
        self._id_14074 delete();

    if ( isdefined( self.visuals ) )
    {
        foreach ( var_3 in self.visuals )
            var_3 delete();
    }

    if ( isdefined( self.trigger ) )
        self.trigger delete();
}

_id_12DD2( var_0, var_1, var_2 )
{
    self.visuals[0] stoploopsound( "mp_care_package_non_owner_cap" );

    if ( !var_2 )
        scripts\mp\gameobjects::setobjectivestatusicons( "icon_waypoint_jugg_crate" );

    scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, var_1.team );
    scripts\mp\objidpoolmanager::objective_set_progress( self.objidnum, self.curprogress / self.usetime );

    if ( self.curprogress > 0 )
        scripts\mp\objidpoolmanager::objective_show_team_progress( self.objidnum, var_1.team );
    else
        scripts\mp\objidpoolmanager::objective_show_progress( self.objidnum, 0 );
}

_id_12DD3( var_0 )
{

}

juggcratecleanup()
{
    scripts\mp\objidpoolmanager::returnobjectiveid( self.objidnum );
}

createjuggcrateobjective( var_0 )
{
    var_1 = scripts\mp\objidpoolmanager::requestobjectiveid( 99 );
    var_0.objid = var_1;
    var_2 = var_0.origin + ( 0, 0, 32 );
    scripts\mp\objidpoolmanager::objective_add_objective( var_1, "current", var_2, "icon_waypoint_jugg" );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_1, 0 );
    scripts\mp\objidpoolmanager::objective_set_play_outro( var_1, 0 );
    scripts\mp\objidpoolmanager::objective_playermask_showtoall( var_1 );
    objective_setneutrallabel( var_1, "MP_MODE_RUGBY/CRATE_CAPTURE" );
    objective_setfriendlylabel( var_1, "MP_MODE_RUGBY/CRATE_CAPTURING" );
    objective_setenemylabel( var_1, "MP_MODE_RUGBY/CRATE_LOSING" );
    updatejuggcrateobjectivestate( var_0 );
}

updatejuggcrateobjectivestate( var_0 )
{
    var_1 = var_0.objid;
    var_2 = istrue( var_0.inuse );

    if ( var_2 )
    {
        objective_setownerteam( var_1, var_0.usingplayer.team );
        objective_sethot( var_1, 1 );
    }
    else
    {
        objective_setownerteam( var_1, undefined );
        objective_sethot( var_1, 0 );
    }
}

get_circle_back_start_node( var_0 )
{
    var_1 = level.rugby.juggconfig;

    if ( istrue( var_0.isjuggernaut ) )
    {
        var_0 scripts\mp\hud_message::showerrormessage( "KILLSTREAKS/JUGG_CANNOT_BE_PICKED_UP" );
        return 0;
    }

    var_2 = var_0 scripts\mp\juggernaut::vehicle_damage_setweaponhitdamagedata( var_1 );

    if ( !isdefined( var_2 ) )
    {
        var_0 scripts\mp\hud_message::showerrormessage( "KILLSTREAKS/JUGG_CANNOT_BECOME" );
        return 0;
    }

    return 1;
}

updateoverheadcamerapos( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        var_1 = var_0;
        var_2 = level.spectatorcameras[0][var_1];
    }
    else
    {
        var_1 = self.team;
        var_2 = level.spectatorcameras[0][self.team];
    }

    var_3 = level.rugby;
    var_4 = undefined;

    if ( !istrue( game["switchedsides"] ) )
        var_4 = var_1;
    else
        var_4 = scripts\engine\utility::ter_op( var_1 == "allies", "axis", "allies" );

    var_5 = scripts\engine\utility::ter_op( var_4 == "allies", "axis", "allies" );
    var_6 = var_3.endzones[var_4][0].origin;
    var_7 = var_3.endzones[var_5][0].origin;
    var_8 = ( var_7 - var_6 ) * ( 1, 1, 0 );
    var_9 = length2d( var_8 );
    var_10 = scripts\cp_mp\utility\killstreak_utility::removeextracthelipad();

    if ( isdefined( var_10 ) )
        var_11 = var_10.origin[2];
    else
        var_11 = 5000;

    var_12 = undefined;
    var_13 = undefined;

    if ( doesteamhaveactivejugg( var_1 ) )
    {
        var_14 = getjuggorcratepos();
        var_12 = var_14 + var_8 * ( -3000 / var_9 );
        var_12 = ( var_12[0], var_12[1], var_11 );
        var_13 = var_14 + ( var_7 - var_14 ) * 0.5;
    }
    else
    {
        var_12 = var_6 + var_8 * ( -2000 / var_9 );
        var_12 = ( var_12[0], var_12[1], var_11 );
        var_13 = getjuggorcratepos();
    }

    var_15 = var_13 - var_12;
    var_16 = vectortoangles( var_15 );
    var_2.origin = var_12;
    var_2.angles = var_16;
}

startspectatorview()
{
    scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    waitframe();
    scripts\mp\utility\player::updatesessionstate( "spectator" );
    scripts\mp\spectating::setdisabled();

    if ( isdefined( self.lastdeathangles ) )
        self setplayerangles( self.lastdeathangles );

    wait 0.1;
    scripts\mp\utility\player::setdof_default();
    updateoverheadcamerapos();
    var_0 = level.spectatorcameras[0][self.team];
    var_1 = var_0.origin;
    var_2 = var_0.angles;
    self.deathspectatepos = var_1;
    self.deathspectateangles = var_2;
    var_3 = spawn( "script_model", self getvieworigin() );
    var_3 setmodel( "tag_origin" );
    var_3.angles = var_2;
    self.spectatorcament = var_3;
    self.isusingtacopsmapcamera = 1;
    self cameralinkto( var_3, "tag_origin", 1 );
    thread dohalfwayflash();
    var_3 movecameratomappos( self, var_1, var_2 );
}

dohalfwayflash()
{
    wait 0.4;
    thread playslamzoomflash();
    applythermal();
}

endspectatorview()
{
    if ( !isdefined( self.spectatorcament ) )
        return;

    removethermal();
    removeplayeroutlinesforoverheadcam();
    thread runslamzoomonspawn();
}

applythermal()
{
    self visionsetthermalforplayer( "proto_apache_flir_mp" );
    self thermalvisionon();
}

removethermal()
{
    self thermalvisionoff();
}

movecameratomappos( var_0, var_1, var_2 )
{
    var_0 endon( "spawned_player" );
    var_3 = 1.0;
    var_4 = 1.0;
    self moveto( var_1, 1.0, 0.5, 0.5 );
    var_0 playlocalsound( "mp_cmd_camera_zoom_out" );
    var_0 setclienttriggeraudiozonepartialwithfade( "spawn_cam", 0.5, "mix" );
    self rotateto( var_2, 1.0, 0.5, 0.5 );
    wait 1.1;
    var_5 = anglestoforward( var_2 ) * 300;
    var_5 = var_5 * ( 1, 1, 0 );

    if ( isdefined( var_0 ) && isdefined( var_0.spectatorcament ) )
    {
        self moveto( var_1 + var_5, 15.0, 1.0, 1.0 );
        var_0 earthquakeforplayer( 0.03, 15.0, var_1 + var_5, 1000 );
    }
}

runslamzoomonspawn()
{
    self waittill( "spawned_player" );
    var_0 = self geteye();
    var_1 = self.angles;
    scripts\mp\utility\player::updatesessionstate( "spectator" );
    self cameralinkto( self.spectatorcament, "tag_origin", 1 );
    self visionsetnakedforplayer( "tac_ops_slamzoom", 0.2 );
    self.spectatorcament moveto( var_0, 0.5 );
    self playlocalsound( "mp_cmd_camera_zoom_in" );
    self clearclienttriggeraudiozone( 0.5 );
    self.spectatorcament rotateto( var_1, 0.5, 0.5 );
    wait 0.5;
    self visionsetnakedforplayer( "", 0 );
    thread playslamzoomflash();
    scripts\mp\utility\player::updatesessionstate( "playing" );
    self cameraunlink();
    self.spectatorcament delete();
    wait 1.0;
}

playslamzoomflash()
{
    var_0 = newclienthudelem( self );
    var_0.x = 0;
    var_0.y = 0;
    var_0.alignx = "left";
    var_0.aligny = "top";
    var_0.sort = 1;
    var_0.horzalign = "fullscreen";
    var_0.vertalign = "fullscreen";
    var_0.alpha = 1;
    var_0.foreground = 1;
    var_0 setshader( "white", 640, 480 );
    var_0 fadeovertime( 0.4 );
    var_0.alpha = 0.0;
    wait 0.4;
    var_0 destroy();
}

enableplayeroutlinesforoverheadcam()
{
    self.rugbyoverheadoutlines = [];

    foreach ( var_1 in level.players )
    {
        if ( var_1 == self )
            continue;

        var_2 = scripts\engine\utility::ter_op( var_1.team == self.team, "outlinefill_nodepth_cyan", "outlinefill_nodepth_orange" );
        var_3 = scripts\mp\utility\outline::outlineenableforplayer( var_1, self, var_2, "level_script" );
        self.rugbyoverheadoutlines[var_3] = var_1;
    }
}

removeplayeroutlinesforoverheadcam()
{
    if ( isdefined( self.rugbyoverheadoutlines ) )
    {
        foreach ( var_2, var_1 in self.rugbyoverheadoutlines )
            scripts\mp\utility\outline::outlinedisable( var_2, var_1 );

        self.rugbyoverheadoutlines = undefined;
    }
}

setupwaypointicons()
{
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_jugg_crate", 0, "neutral", "MP_MODE_RUGBY/CRATE_CAPTURE", "icon_waypoint_jugg", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_jugg", 1, "friendly", "MP_INGAME_ONLY/OBJ_ESCORT_CAPS", "icon_waypoint_jugg", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_jugg", 1, "enemy", "MP_INGAME_ONLY/OBJ_KILL_CAPS", "icon_waypoint_jugg", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_hq_defend", 0, "friendly", "MP_MODE_RUGBY/ENDZONE_DEFEND", "icon_waypoint_rugby_base", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_hq_attack", 0, "enemy", "MP_MODE_RUGBY/ENDZONE_ASSAULT", "icon_waypoint_rugby_base", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_taking", 0, "friendly", "MP_INGAME_ONLY/OBJ_TAKING_CAPS", "icon_waypoint_jugg", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "icon_waypoint_losing", 0, "enemy", "MP_INGAME_ONLY/OBJ_LOSING_CAPS", "icon_waypoint_jugg", 0 );
}
